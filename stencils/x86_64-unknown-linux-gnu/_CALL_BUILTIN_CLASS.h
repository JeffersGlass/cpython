// $ /home/jglass/.pyenv/versions/3.12.1/bin/python Tools/jit/build_two_reuse.py x86_64-unknown-linux-gnu --all_ops

typedef enum {
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGE21,
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGEOFF12,
    HoleKind_ARM64_RELOC_UNSIGNED,
    HoleKind_IMAGE_REL_AMD64_ADDR64,
    HoleKind_IMAGE_REL_I386_DIR32,
    HoleKind_R_AARCH64_ABS64,
    HoleKind_R_AARCH64_CALL26,
    HoleKind_R_AARCH64_JUMP26,
    HoleKind_R_AARCH64_MOVW_UABS_G0_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G1_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G2_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G3,
    HoleKind_R_X86_64_64,
    HoleKind_X86_64_RELOC_UNSIGNED,
} HoleKind;

typedef enum {
    HoleValue_CODE,
    HoleValue_CONTINUE,
    HoleValue_DATA,
    HoleValue_EXECUTOR,
    HoleValue_GOT,
    HoleValue_OPARG,
    HoleValue_OPERAND,
    HoleValue_TARGET,
    HoleValue_TOP,
    HoleValue_ZERO,
} HoleValue;

typedef struct {
    const uint64_t offset;
    const HoleKind kind;
    const HoleValue value;
    const void *symbol;
    const uint64_t addend;
} Hole;

typedef struct {
    const size_t body_size;
    const unsigned char * const body;
    const size_t holes_size;
    const Hole * const holes;
} Stencil;

typedef struct {
    const Stencil code;
    const Stencil data;
} StencilGroup;

// _CALL_BUILTIN_CLASSplus_BEFORE_ASYNC_WITH
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_BEFORE_ASYNC_WITH.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f8 01 00 00             je      0x25f <_JIT_ENTRY+0x25f>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e7 01 00 00             je      0x25f <_JIT_ENTRY+0x25f>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 82: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 87: 48 89 3c 24                   movq    %rdi, (%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 cc 01 00 00             je      0x28c <_JIT_ENTRY+0x28c>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 1c 24                   movq    (%rsp), %rbx
// f1: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// f6: 78 21                         js      0x119 <_JIT_ENTRY+0x119>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 102: ff d0                         callq   *%rax
// 104: 49 ff 0c 24                   decq    (%r12)
// 108: 75 0f                         jne     0x119 <_JIT_ENTRY+0x119>
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: 4c 89 e7                      movq    %r12, %rdi
// 117: ff d0                         callq   *%rax
// 119: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 11e: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 122: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 127: 48 85 d2                      testq   %rdx, %rdx
// 12a: 0f 84 d9 01 00 00             je      0x309 <_JIT_ENTRY+0x309>
// 130: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 135: 4d 8d 2c cf                   leaq    (%r15,%rcx,8), %r13
// 139: 48 89 10                      movq    %rdx, (%rax)
// 13c: 49 8b 46 10                   movq    0x10(%r14), %rax
// 140: 48 8b 00                      movq    (%rax), %rax
// 143: 84 c0                         testb   %al, %al
// 145: 74 17                         je      0x15e <_JIT_ENTRY+0x15e>
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_HandlePending
// 151: 4c 89 f7                      movq    %r14, %rdi
// 154: ff d0                         callq   *%rax
// 156: 85 c0                         testl   %eax, %eax
// 158: 0f 85 e7 03 00 00             jne     0x545 <_JIT_ENTRY+0x545>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _JIT_OPARG
// 168: f7 d0                         notl    %eax
// 16a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 16f: 48 98                         cltq
// 171: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 176: 49 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %rbp
// 17b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000017d:  R_X86_64_64  _PyObject_LookupSpecial
// 185: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000187:  R_X86_64_64  _PyRuntime
// 18f: 49 8d b6 68 a6 00 00          leaq    0xa668(%r14), %rsi
// 196: 48 89 ef                      movq    %rbp, %rdi
// 199: ff d3                         callq   *%rbx
// 19b: 48 85 c0                      testq   %rax, %rax
// 19e: 0f 84 6d 01 00 00             je      0x311 <_JIT_ENTRY+0x311>
// 1a4: 49 89 c4                      movq    %rax, %r12
// 1a7: 49 81 c6 a0 a6 00 00          addq    $0xa6a0, %r14           # imm = 0xA6A0
// 1ae: 48 89 ef                      movq    %rbp, %rdi
// 1b1: 4c 89 f6                      movq    %r14, %rsi
// 1b4: ff d3                         callq   *%rbx
// 1b6: 48 85 c0                      testq   %rax, %rax
// 1b9: 0f 84 5c 02 00 00             je      0x41b <_JIT_ENTRY+0x41b>
// 1bf: 49 89 c6                      movq    %rax, %r14
// 1c2: 48 8b 45 00                   movq    (%rbp), %rax
// 1c6: 48 85 c0                      testq   %rax, %rax
// 1c9: 7f 22                         jg      0x1ed <_JIT_ENTRY+0x1ed>
// 1cb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001cd:  R_X86_64_64  .rodata.str1.1
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_NegativeRefcount
// 1df: be 14 09 00 00                movl    $0x914, %esi            # imm = 0x914
// 1e4: 48 89 ea                      movq    %rbp, %rdx
// 1e7: ff d0                         callq   *%rax
// 1e9: 48 8b 45 00                   movq    (%rbp), %rax
// 1ed: 85 c0                         testl   %eax, %eax
// 1ef: 78 21                         js      0x212 <_JIT_ENTRY+0x212>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fb: ff d0                         callq   *%rax
// 1fd: 48 ff 4d 00                   decq    (%rbp)
// 201: 75 0f                         jne     0x212 <_JIT_ENTRY+0x212>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _Py_Dealloc
// 20d: 48 89 ef                      movq    %rbp, %rdi
// 210: ff d0                         callq   *%rax
// 212: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 217: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 21e: 0f 84 39 01 00 00             je      0x35d <_JIT_ENTRY+0x35d>
// 224: 48 8b 40 38                   movq    0x38(%rax), %rax
// 228: 49 8b 04 04                   movq    (%r12,%rax), %rax
// 22c: 48 85 c0                      testq   %rax, %rax
// 22f: 0f 84 28 01 00 00             je      0x35d <_JIT_ENTRY+0x35d>
// 235: 4c 89 e7                      movq    %r12, %rdi
// 238: 31 f6                         xorl    %esi, %esi
// 23a: 31 d2                         xorl    %edx, %edx
// 23c: 31 c9                         xorl    %ecx, %ecx
// 23e: ff d0                         callq   *%rax
// 240: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000242:  R_X86_64_64  _Py_CheckFunctionResult
// 24a: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 24f: 4c 89 e6                      movq    %r12, %rsi
// 252: 48 89 c2                      movq    %rax, %rdx
// 255: 31 c9                         xorl    %ecx, %ecx
// 257: 41 ff d0                      callq   *%r8
// 25a: e9 19 01 00 00                jmp     0x378 <_JIT_ENTRY+0x378>
// 25f: 49 29 ff                      subq    %rdi, %r15
// 262: 49 83 c7 b8                   addq    $-0x48, %r15
// 266: 49 c1 ef 03                   shrq    $0x3, %r15
// 26a: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 26e: 48 8b 07                      movq    (%rdi), %rax
// 271: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000273:  R_X86_64_64  _JIT_TARGET
// 27b: 89 c9                         movl    %ecx, %ecx
// 27d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 281: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 287: e9 ca 02 00 00                jmp     0x556 <_JIT_ENTRY+0x556>
// 28c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 290: 41 be 01 00 00 00             movl    $0x1, %r14d
// 296: 45 0f 43 f5                   cmovael %r13d, %r14d
// 29a: 31 db                         xorl    %ebx, %ebx
// 29c: eb 0e                         jmp     0x2ac <_JIT_ENTRY+0x2ac>
// 29e: 66 90                         nop
// 2a0: 48 ff c3                      incq    %rbx
// 2a3: 49 39 de                      cmpq    %rbx, %r14
// 2a6: 0f 84 14 fe ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 2ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 2b1: 49 8b 45 00                   movq    (%r13), %rax
// 2b5: 48 85 c0                      testq   %rax, %rax
// 2b8: 7e 06                         jle     0x2c0 <_JIT_ENTRY+0x2c0>
// 2ba: 85 c0                         testl   %eax, %eax
// 2bc: 78 e2                         js      0x2a0 <_JIT_ENTRY+0x2a0>
// 2be: eb 26                         jmp     0x2e6 <_JIT_ENTRY+0x2e6>
// 2c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c2:  R_X86_64_64  .rodata.str1.1
// 2ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 2cf: 4c 89 ea                      movq    %r13, %rdx
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_NegativeRefcount
// 2dc: ff d0                         callq   *%rax
// 2de: 49 8b 45 00                   movq    (%r13), %rax
// 2e2: 85 c0                         testl   %eax, %eax
// 2e4: 78 ba                         js      0x2a0 <_JIT_ENTRY+0x2a0>
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f0: ff d0                         callq   *%rax
// 2f2: 49 ff 4d 00                   decq    (%r13)
// 2f6: 75 a8                         jne     0x2a0 <_JIT_ENTRY+0x2a0>
// 2f8: 4c 89 ef                      movq    %r13, %rdi
// 2fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fd:  R_X86_64_64  _Py_Dealloc
// 305: ff d0                         callq   *%rax
// 307: eb 97                         jmp     0x2a0 <_JIT_ENTRY+0x2a0>
// 309: 49 89 c5                      movq    %rax, %r13
// 30c: e9 34 02 00 00                jmp     0x545 <_JIT_ENTRY+0x545>
// 311: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 316: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 31a: 48 85 c0                      testq   %rax, %rax
// 31d: 74 07                         je      0x326 <_JIT_ENTRY+0x326>
// 31f: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 324: 75 2e                         jne     0x354 <_JIT_ENTRY+0x354>
// 326: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000328:  R_X86_64_64  PyExc_TypeError
// 330: 48 8b 30                      movq    (%rax), %rsi
// 333: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 337: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 33b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000033d:  R_X86_64_64  .rodata.str1.1+0x39
// 345: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000347:  R_X86_64_64  _PyErr_Format
// 34f: 31 c0                         xorl    %eax, %eax
// 351: 41 ff d0                      callq   *%r8
// 354: 48 8b 1c 24                   movq    (%rsp), %rbx
// 358: e9 e8 01 00 00                jmp     0x545 <_JIT_ENTRY+0x545>
// 35d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035f:  R_X86_64_64  _PyObject_MakeTpCall
// 367: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 36c: 4c 89 e6                      movq    %r12, %rsi
// 36f: 31 d2                         xorl    %edx, %edx
// 371: 31 c9                         xorl    %ecx, %ecx
// 373: 45 31 c0                      xorl    %r8d, %r8d
// 376: ff d0                         callq   *%rax
// 378: 48 89 c5                      movq    %rax, %rbp
// 37b: 49 8b 04 24                   movq    (%r12), %rax
// 37f: 48 85 c0                      testq   %rax, %rax
// 382: 7f 22                         jg      0x3a6 <_JIT_ENTRY+0x3a6>
// 384: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000386:  R_X86_64_64  .rodata.str1.1
// 38e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000390:  R_X86_64_64  _Py_NegativeRefcount
// 398: be 16 09 00 00                movl    $0x916, %esi            # imm = 0x916
// 39d: 4c 89 e2                      movq    %r12, %rdx
// 3a0: ff d0                         callq   *%rax
// 3a2: 49 8b 04 24                   movq    (%r12), %rax
// 3a6: 85 c0                         testl   %eax, %eax
// 3a8: 78 21                         js      0x3cb <_JIT_ENTRY+0x3cb>
// 3aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ac:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3b4: ff d0                         callq   *%rax
// 3b6: 49 ff 0c 24                   decq    (%r12)
// 3ba: 75 0f                         jne     0x3cb <_JIT_ENTRY+0x3cb>
// 3bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003be:  R_X86_64_64  _Py_Dealloc
// 3c6: 4c 89 e7                      movq    %r12, %rdi
// 3c9: ff d0                         callq   *%rax
// 3cb: 48 85 ed                      testq   %rbp, %rbp
// 3ce: 0f 84 82 00 00 00             je      0x456 <_JIT_ENTRY+0x456>
// 3d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d6:  R_X86_64_64  _JIT_OPARG
// 3de: f7 d0                         notl    %eax
// 3e0: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 3e5: 48 98                         cltq
// 3e7: 4d 89 74 c7 f8                movq    %r14, -0x8(%r15,%rax,8)
// 3ec: 49 89 2c c7                   movq    %rbp, (%r15,%rax,8)
// 3f0: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 3f4: 48 83 c6 08                   addq    $0x8, %rsi
// 3f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003fa:  R_X86_64_64  _JIT_CONTINUE
// 402: 48 8b 3c 24                   movq    (%rsp), %rdi
// 406: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 40b: 48 83 c4 28                   addq    $0x28, %rsp
// 40f: 5b                            popq    %rbx
// 410: 41 5c                         popq    %r12
// 412: 41 5d                         popq    %r13
// 414: 41 5e                         popq    %r14
// 416: 41 5f                         popq    %r15
// 418: 5d                            popq    %rbp
// 419: ff e0                         jmpq    *%rax
// 41b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 420: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 424: 48 85 c0                      testq   %rax, %rax
// 427: 0f 84 92 00 00 00             je      0x4bf <_JIT_ENTRY+0x4bf>
// 42d: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 432: 0f 84 87 00 00 00             je      0x4bf <_JIT_ENTRY+0x4bf>
// 438: 49 8b 04 24                   movq    (%r12), %rax
// 43c: 48 85 c0                      testq   %rax, %rax
// 43f: 0f 8e b5 00 00 00             jle     0x4fa <_JIT_ENTRY+0x4fa>
// 445: 85 c0                         testl   %eax, %eax
// 447: 48 8b 1c 24                   movq    (%rsp), %rbx
// 44b: 0f 89 d3 00 00 00             jns     0x524 <_JIT_ENTRY+0x524>
// 451: e9 ef 00 00 00                jmp     0x545 <_JIT_ENTRY+0x545>
// 456: 49 8b 06                      movq    (%r14), %rax
// 459: 48 85 c0                      testq   %rax, %rax
// 45c: 7f 21                         jg      0x47f <_JIT_ENTRY+0x47f>
// 45e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000460:  R_X86_64_64  .rodata.str1.1
// 468: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000046a:  R_X86_64_64  _Py_NegativeRefcount
// 472: be 18 09 00 00                movl    $0x918, %esi            # imm = 0x918
// 477: 4c 89 f2                      movq    %r14, %rdx
// 47a: ff d0                         callq   *%rax
// 47c: 49 8b 06                      movq    (%r14), %rax
// 47f: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 484: 4d 8d 2c cf                   leaq    (%r15,%rcx,8), %r13
// 488: 49 83 c5 f8                   addq    $-0x8, %r13
// 48c: 85 c0                         testl   %eax, %eax
// 48e: 48 8b 1c 24                   movq    (%rsp), %rbx
// 492: 0f 88 ad 00 00 00             js      0x545 <_JIT_ENTRY+0x545>
// 498: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000049a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a2: ff d0                         callq   *%rax
// 4a4: 49 ff 0e                      decq    (%r14)
// 4a7: 0f 85 98 00 00 00             jne     0x545 <_JIT_ENTRY+0x545>
// 4ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004af:  R_X86_64_64  _Py_Dealloc
// 4b7: 4c 89 f7                      movq    %r14, %rdi
// 4ba: e9 84 00 00 00                jmp     0x543 <_JIT_ENTRY+0x543>
// 4bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004c1:  R_X86_64_64  PyExc_TypeError
// 4c9: 48 8b 30                      movq    (%rax), %rsi
// 4cc: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 4d0: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 4d4: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000004d6:  R_X86_64_64  .rodata.str1.1+0x84
// 4de: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000004e0:  R_X86_64_64  _PyErr_Format
// 4e8: 31 c0                         xorl    %eax, %eax
// 4ea: 41 ff d0                      callq   *%r8
// 4ed: 49 8b 04 24                   movq    (%r12), %rax
// 4f1: 48 85 c0                      testq   %rax, %rax
// 4f4: 0f 8f 4b ff ff ff             jg      0x445 <_JIT_ENTRY+0x445>
// 4fa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000004fc:  R_X86_64_64  .rodata.str1.1
// 504: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000506:  R_X86_64_64  _Py_NegativeRefcount
// 50e: be 11 09 00 00                movl    $0x911, %esi            # imm = 0x911
// 513: 4c 89 e2                      movq    %r12, %rdx
// 516: ff d0                         callq   *%rax
// 518: 49 8b 04 24                   movq    (%r12), %rax
// 51c: 85 c0                         testl   %eax, %eax
// 51e: 48 8b 1c 24                   movq    (%rsp), %rbx
// 522: 78 21                         js      0x545 <_JIT_ENTRY+0x545>
// 524: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000526:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 52e: ff d0                         callq   *%rax
// 530: 49 ff 0c 24                   decq    (%r12)
// 534: 75 0f                         jne     0x545 <_JIT_ENTRY+0x545>
// 536: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000538:  R_X86_64_64  _Py_Dealloc
// 540: 4c 89 e7                      movq    %r12, %rdi
// 543: ff d0                         callq   *%rax
// 545: 49 29 dd                      subq    %rbx, %r13
// 548: 49 83 c5 b8                   addq    $-0x48, %r13
// 54c: 49 c1 ed 03                   shrq    $0x3, %r13
// 550: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 554: 31 c0                         xorl    %eax, %eax
// 556: 48 83 c4 28                   addq    $0x28, %rsp
// 55a: 5b                            popq    %rbx
// 55b: 41 5c                         popq    %r12
// 55d: 41 5d                         popq    %r13
// 55f: 41 5e                         popq    %r14
// 561: 41 5f                         popq    %r15
// 563: 5d                            popq    %rbp
// 564: c3                            retq
// 565: 
static const unsigned char _CALL_BUILTIN_CLASSplus_BEFORE_ASYNC_WITH_code_body[1382] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf8, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xcc, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xd9, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x4d, 0x8d, 0x2c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xe7, 0x03, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb6, 0x68, 0xa6, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd3, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x6d, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x49, 0x81, 0xc6, 0xa0, 0xa6, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0xff, 0xd3, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x5c, 0x02, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x0f, 0x84, 0x39, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x04, 0x04, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x28, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0xe9, 0x19, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xca, 0x02, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x14, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc5, 0xe9, 0x34, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x07, 0x48, 0x83, 0x78, 0x08, 0x00, 0x75, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x1c, 0x24, 0xe9, 0xe8, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x82, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x74, 0xc7, 0xf8, 0x49, 0x89, 0x2c, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x92, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x84, 0x87, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x0f, 0x89, 0xd3, 0x00, 0x00, 0x00, 0xe9, 0xef, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x2c, 0xcf, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x0f, 0x88, 0xad, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x98, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xe9, 0x84, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x4b, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_BEFORE_ASYNC_WITH_code_holes[42] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x33d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x347, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x35f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x386, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x390, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3d6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3fa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x460, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x46a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x49a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x4af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x4c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x4d6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x84},
    {0x4e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x4fc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x506, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x526, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x538, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the asynchronous context manager protocol\x00'%.200s' object does not support the asynchronous context manager protocol (missed __aexit__ method)\x00"
// e9: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_BEFORE_ASYNC_WITH_data_body[241] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x61, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_BEFORE_ASYNC_WITH_data_holes[1];

// _CALL_BUILTIN_CLASSplus_BEFORE_WITH
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_BEFORE_WITH.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f8 01 00 00             je      0x25f <_JIT_ENTRY+0x25f>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e7 01 00 00             je      0x25f <_JIT_ENTRY+0x25f>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 82: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 87: 48 89 3c 24                   movq    %rdi, (%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 cc 01 00 00             je      0x28c <_JIT_ENTRY+0x28c>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 1c 24                   movq    (%rsp), %rbx
// f1: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// f6: 78 21                         js      0x119 <_JIT_ENTRY+0x119>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 102: ff d0                         callq   *%rax
// 104: 49 ff 0c 24                   decq    (%r12)
// 108: 75 0f                         jne     0x119 <_JIT_ENTRY+0x119>
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: 4c 89 e7                      movq    %r12, %rdi
// 117: ff d0                         callq   *%rax
// 119: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 11e: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 122: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 127: 48 85 d2                      testq   %rdx, %rdx
// 12a: 0f 84 d9 01 00 00             je      0x309 <_JIT_ENTRY+0x309>
// 130: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 135: 4d 8d 2c cf                   leaq    (%r15,%rcx,8), %r13
// 139: 48 89 10                      movq    %rdx, (%rax)
// 13c: 49 8b 46 10                   movq    0x10(%r14), %rax
// 140: 48 8b 00                      movq    (%rax), %rax
// 143: 84 c0                         testb   %al, %al
// 145: 74 17                         je      0x15e <_JIT_ENTRY+0x15e>
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_HandlePending
// 151: 4c 89 f7                      movq    %r14, %rdi
// 154: ff d0                         callq   *%rax
// 156: 85 c0                         testl   %eax, %eax
// 158: 0f 85 e7 03 00 00             jne     0x545 <_JIT_ENTRY+0x545>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _JIT_OPARG
// 168: f7 d0                         notl    %eax
// 16a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 16f: 48 98                         cltq
// 171: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 176: 49 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %rbp
// 17b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000017d:  R_X86_64_64  _PyObject_LookupSpecial
// 185: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000187:  R_X86_64_64  _PyRuntime
// 18f: 49 8d b6 50 ae 00 00          leaq    0xae50(%r14), %rsi
// 196: 48 89 ef                      movq    %rbp, %rdi
// 199: ff d3                         callq   *%rbx
// 19b: 48 85 c0                      testq   %rax, %rax
// 19e: 0f 84 6d 01 00 00             je      0x311 <_JIT_ENTRY+0x311>
// 1a4: 49 89 c4                      movq    %rax, %r12
// 1a7: 49 81 c6 b8 ae 00 00          addq    $0xaeb8, %r14           # imm = 0xAEB8
// 1ae: 48 89 ef                      movq    %rbp, %rdi
// 1b1: 4c 89 f6                      movq    %r14, %rsi
// 1b4: ff d3                         callq   *%rbx
// 1b6: 48 85 c0                      testq   %rax, %rax
// 1b9: 0f 84 5c 02 00 00             je      0x41b <_JIT_ENTRY+0x41b>
// 1bf: 49 89 c6                      movq    %rax, %r14
// 1c2: 48 8b 45 00                   movq    (%rbp), %rax
// 1c6: 48 85 c0                      testq   %rax, %rax
// 1c9: 7f 22                         jg      0x1ed <_JIT_ENTRY+0x1ed>
// 1cb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001cd:  R_X86_64_64  .rodata.str1.1
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_NegativeRefcount
// 1df: be 3f 09 00 00                movl    $0x93f, %esi            # imm = 0x93F
// 1e4: 48 89 ea                      movq    %rbp, %rdx
// 1e7: ff d0                         callq   *%rax
// 1e9: 48 8b 45 00                   movq    (%rbp), %rax
// 1ed: 85 c0                         testl   %eax, %eax
// 1ef: 78 21                         js      0x212 <_JIT_ENTRY+0x212>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fb: ff d0                         callq   *%rax
// 1fd: 48 ff 4d 00                   decq    (%rbp)
// 201: 75 0f                         jne     0x212 <_JIT_ENTRY+0x212>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _Py_Dealloc
// 20d: 48 89 ef                      movq    %rbp, %rdi
// 210: ff d0                         callq   *%rax
// 212: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 217: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 21e: 0f 84 39 01 00 00             je      0x35d <_JIT_ENTRY+0x35d>
// 224: 48 8b 40 38                   movq    0x38(%rax), %rax
// 228: 49 8b 04 04                   movq    (%r12,%rax), %rax
// 22c: 48 85 c0                      testq   %rax, %rax
// 22f: 0f 84 28 01 00 00             je      0x35d <_JIT_ENTRY+0x35d>
// 235: 4c 89 e7                      movq    %r12, %rdi
// 238: 31 f6                         xorl    %esi, %esi
// 23a: 31 d2                         xorl    %edx, %edx
// 23c: 31 c9                         xorl    %ecx, %ecx
// 23e: ff d0                         callq   *%rax
// 240: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000242:  R_X86_64_64  _Py_CheckFunctionResult
// 24a: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 24f: 4c 89 e6                      movq    %r12, %rsi
// 252: 48 89 c2                      movq    %rax, %rdx
// 255: 31 c9                         xorl    %ecx, %ecx
// 257: 41 ff d0                      callq   *%r8
// 25a: e9 19 01 00 00                jmp     0x378 <_JIT_ENTRY+0x378>
// 25f: 49 29 ff                      subq    %rdi, %r15
// 262: 49 83 c7 b8                   addq    $-0x48, %r15
// 266: 49 c1 ef 03                   shrq    $0x3, %r15
// 26a: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 26e: 48 8b 07                      movq    (%rdi), %rax
// 271: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000273:  R_X86_64_64  _JIT_TARGET
// 27b: 89 c9                         movl    %ecx, %ecx
// 27d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 281: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 287: e9 ca 02 00 00                jmp     0x556 <_JIT_ENTRY+0x556>
// 28c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 290: 41 be 01 00 00 00             movl    $0x1, %r14d
// 296: 45 0f 43 f5                   cmovael %r13d, %r14d
// 29a: 31 db                         xorl    %ebx, %ebx
// 29c: eb 0e                         jmp     0x2ac <_JIT_ENTRY+0x2ac>
// 29e: 66 90                         nop
// 2a0: 48 ff c3                      incq    %rbx
// 2a3: 49 39 de                      cmpq    %rbx, %r14
// 2a6: 0f 84 14 fe ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 2ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 2b1: 49 8b 45 00                   movq    (%r13), %rax
// 2b5: 48 85 c0                      testq   %rax, %rax
// 2b8: 7e 06                         jle     0x2c0 <_JIT_ENTRY+0x2c0>
// 2ba: 85 c0                         testl   %eax, %eax
// 2bc: 78 e2                         js      0x2a0 <_JIT_ENTRY+0x2a0>
// 2be: eb 26                         jmp     0x2e6 <_JIT_ENTRY+0x2e6>
// 2c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c2:  R_X86_64_64  .rodata.str1.1
// 2ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 2cf: 4c 89 ea                      movq    %r13, %rdx
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_NegativeRefcount
// 2dc: ff d0                         callq   *%rax
// 2de: 49 8b 45 00                   movq    (%r13), %rax
// 2e2: 85 c0                         testl   %eax, %eax
// 2e4: 78 ba                         js      0x2a0 <_JIT_ENTRY+0x2a0>
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f0: ff d0                         callq   *%rax
// 2f2: 49 ff 4d 00                   decq    (%r13)
// 2f6: 75 a8                         jne     0x2a0 <_JIT_ENTRY+0x2a0>
// 2f8: 4c 89 ef                      movq    %r13, %rdi
// 2fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fd:  R_X86_64_64  _Py_Dealloc
// 305: ff d0                         callq   *%rax
// 307: eb 97                         jmp     0x2a0 <_JIT_ENTRY+0x2a0>
// 309: 49 89 c5                      movq    %rax, %r13
// 30c: e9 34 02 00 00                jmp     0x545 <_JIT_ENTRY+0x545>
// 311: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 316: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 31a: 48 85 c0                      testq   %rax, %rax
// 31d: 74 07                         je      0x326 <_JIT_ENTRY+0x326>
// 31f: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 324: 75 2e                         jne     0x354 <_JIT_ENTRY+0x354>
// 326: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000328:  R_X86_64_64  PyExc_TypeError
// 330: 48 8b 30                      movq    (%rax), %rsi
// 333: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 337: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 33b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000033d:  R_X86_64_64  .rodata.str1.1+0x39
// 345: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000347:  R_X86_64_64  _PyErr_Format
// 34f: 31 c0                         xorl    %eax, %eax
// 351: 41 ff d0                      callq   *%r8
// 354: 48 8b 1c 24                   movq    (%rsp), %rbx
// 358: e9 e8 01 00 00                jmp     0x545 <_JIT_ENTRY+0x545>
// 35d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035f:  R_X86_64_64  _PyObject_MakeTpCall
// 367: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 36c: 4c 89 e6                      movq    %r12, %rsi
// 36f: 31 d2                         xorl    %edx, %edx
// 371: 31 c9                         xorl    %ecx, %ecx
// 373: 45 31 c0                      xorl    %r8d, %r8d
// 376: ff d0                         callq   *%rax
// 378: 48 89 c5                      movq    %rax, %rbp
// 37b: 49 8b 04 24                   movq    (%r12), %rax
// 37f: 48 85 c0                      testq   %rax, %rax
// 382: 7f 22                         jg      0x3a6 <_JIT_ENTRY+0x3a6>
// 384: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000386:  R_X86_64_64  .rodata.str1.1
// 38e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000390:  R_X86_64_64  _Py_NegativeRefcount
// 398: be 41 09 00 00                movl    $0x941, %esi            # imm = 0x941
// 39d: 4c 89 e2                      movq    %r12, %rdx
// 3a0: ff d0                         callq   *%rax
// 3a2: 49 8b 04 24                   movq    (%r12), %rax
// 3a6: 85 c0                         testl   %eax, %eax
// 3a8: 78 21                         js      0x3cb <_JIT_ENTRY+0x3cb>
// 3aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ac:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3b4: ff d0                         callq   *%rax
// 3b6: 49 ff 0c 24                   decq    (%r12)
// 3ba: 75 0f                         jne     0x3cb <_JIT_ENTRY+0x3cb>
// 3bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003be:  R_X86_64_64  _Py_Dealloc
// 3c6: 4c 89 e7                      movq    %r12, %rdi
// 3c9: ff d0                         callq   *%rax
// 3cb: 48 85 ed                      testq   %rbp, %rbp
// 3ce: 0f 84 82 00 00 00             je      0x456 <_JIT_ENTRY+0x456>
// 3d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d6:  R_X86_64_64  _JIT_OPARG
// 3de: f7 d0                         notl    %eax
// 3e0: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 3e5: 48 98                         cltq
// 3e7: 4d 89 74 c7 f8                movq    %r14, -0x8(%r15,%rax,8)
// 3ec: 49 89 2c c7                   movq    %rbp, (%r15,%rax,8)
// 3f0: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 3f4: 48 83 c6 08                   addq    $0x8, %rsi
// 3f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003fa:  R_X86_64_64  _JIT_CONTINUE
// 402: 48 8b 3c 24                   movq    (%rsp), %rdi
// 406: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 40b: 48 83 c4 28                   addq    $0x28, %rsp
// 40f: 5b                            popq    %rbx
// 410: 41 5c                         popq    %r12
// 412: 41 5d                         popq    %r13
// 414: 41 5e                         popq    %r14
// 416: 41 5f                         popq    %r15
// 418: 5d                            popq    %rbp
// 419: ff e0                         jmpq    *%rax
// 41b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 420: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 424: 48 85 c0                      testq   %rax, %rax
// 427: 0f 84 92 00 00 00             je      0x4bf <_JIT_ENTRY+0x4bf>
// 42d: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 432: 0f 84 87 00 00 00             je      0x4bf <_JIT_ENTRY+0x4bf>
// 438: 49 8b 04 24                   movq    (%r12), %rax
// 43c: 48 85 c0                      testq   %rax, %rax
// 43f: 0f 8e b5 00 00 00             jle     0x4fa <_JIT_ENTRY+0x4fa>
// 445: 85 c0                         testl   %eax, %eax
// 447: 48 8b 1c 24                   movq    (%rsp), %rbx
// 44b: 0f 89 d3 00 00 00             jns     0x524 <_JIT_ENTRY+0x524>
// 451: e9 ef 00 00 00                jmp     0x545 <_JIT_ENTRY+0x545>
// 456: 49 8b 06                      movq    (%r14), %rax
// 459: 48 85 c0                      testq   %rax, %rax
// 45c: 7f 21                         jg      0x47f <_JIT_ENTRY+0x47f>
// 45e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000460:  R_X86_64_64  .rodata.str1.1
// 468: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000046a:  R_X86_64_64  _Py_NegativeRefcount
// 472: be 43 09 00 00                movl    $0x943, %esi            # imm = 0x943
// 477: 4c 89 f2                      movq    %r14, %rdx
// 47a: ff d0                         callq   *%rax
// 47c: 49 8b 06                      movq    (%r14), %rax
// 47f: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 484: 4d 8d 2c cf                   leaq    (%r15,%rcx,8), %r13
// 488: 49 83 c5 f8                   addq    $-0x8, %r13
// 48c: 85 c0                         testl   %eax, %eax
// 48e: 48 8b 1c 24                   movq    (%rsp), %rbx
// 492: 0f 88 ad 00 00 00             js      0x545 <_JIT_ENTRY+0x545>
// 498: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000049a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a2: ff d0                         callq   *%rax
// 4a4: 49 ff 0e                      decq    (%r14)
// 4a7: 0f 85 98 00 00 00             jne     0x545 <_JIT_ENTRY+0x545>
// 4ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004af:  R_X86_64_64  _Py_Dealloc
// 4b7: 4c 89 f7                      movq    %r14, %rdi
// 4ba: e9 84 00 00 00                jmp     0x543 <_JIT_ENTRY+0x543>
// 4bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004c1:  R_X86_64_64  PyExc_TypeError
// 4c9: 48 8b 30                      movq    (%rax), %rsi
// 4cc: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 4d0: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 4d4: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000004d6:  R_X86_64_64  .rodata.str1.1+0x77
// 4de: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000004e0:  R_X86_64_64  _PyErr_Format
// 4e8: 31 c0                         xorl    %eax, %eax
// 4ea: 41 ff d0                      callq   *%r8
// 4ed: 49 8b 04 24                   movq    (%r12), %rax
// 4f1: 48 85 c0                      testq   %rax, %rax
// 4f4: 0f 8f 4b ff ff ff             jg      0x445 <_JIT_ENTRY+0x445>
// 4fa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000004fc:  R_X86_64_64  .rodata.str1.1
// 504: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000506:  R_X86_64_64  _Py_NegativeRefcount
// 50e: be 3c 09 00 00                movl    $0x93c, %esi            # imm = 0x93C
// 513: 4c 89 e2                      movq    %r12, %rdx
// 516: ff d0                         callq   *%rax
// 518: 49 8b 04 24                   movq    (%r12), %rax
// 51c: 85 c0                         testl   %eax, %eax
// 51e: 48 8b 1c 24                   movq    (%rsp), %rbx
// 522: 78 21                         js      0x545 <_JIT_ENTRY+0x545>
// 524: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000526:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 52e: ff d0                         callq   *%rax
// 530: 49 ff 0c 24                   decq    (%r12)
// 534: 75 0f                         jne     0x545 <_JIT_ENTRY+0x545>
// 536: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000538:  R_X86_64_64  _Py_Dealloc
// 540: 4c 89 e7                      movq    %r12, %rdi
// 543: ff d0                         callq   *%rax
// 545: 49 29 dd                      subq    %rbx, %r13
// 548: 49 83 c5 b8                   addq    $-0x48, %r13
// 54c: 49 c1 ed 03                   shrq    $0x3, %r13
// 550: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 554: 31 c0                         xorl    %eax, %eax
// 556: 48 83 c4 28                   addq    $0x28, %rsp
// 55a: 5b                            popq    %rbx
// 55b: 41 5c                         popq    %r12
// 55d: 41 5d                         popq    %r13
// 55f: 41 5e                         popq    %r14
// 561: 41 5f                         popq    %r15
// 563: 5d                            popq    %rbp
// 564: c3                            retq
// 565: 
static const unsigned char _CALL_BUILTIN_CLASSplus_BEFORE_WITH_code_body[1382] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf8, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xcc, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xd9, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x4d, 0x8d, 0x2c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xe7, 0x03, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb6, 0x50, 0xae, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd3, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x6d, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x49, 0x81, 0xc6, 0xb8, 0xae, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0xff, 0xd3, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x5c, 0x02, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3f, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x0f, 0x84, 0x39, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x04, 0x04, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x28, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0xe9, 0x19, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xca, 0x02, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x14, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc5, 0xe9, 0x34, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x07, 0x48, 0x83, 0x78, 0x08, 0x00, 0x75, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x1c, 0x24, 0xe9, 0xe8, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x41, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x82, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x74, 0xc7, 0xf8, 0x49, 0x89, 0x2c, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x92, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x84, 0x87, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x0f, 0x89, 0xd3, 0x00, 0x00, 0x00, 0xe9, 0xef, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x2c, 0xcf, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x0f, 0x88, 0xad, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x98, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xe9, 0x84, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x4b, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3c, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_BEFORE_WITH_code_holes[42] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x33d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x347, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x35f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x386, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x390, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3d6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3fa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x460, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x46a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x49a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x4af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x4c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x4d6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x77},
    {0x4e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x4fc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x506, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x526, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x538, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the context manager protocol\x00'%.200s' object does not support the context manager protocol (missed __exit__ method)\x00"
// ce: 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_BEFORE_WITH_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_BEFORE_WITH_data_holes[1];

// _CALL_BUILTIN_CLASSplus_BINARY_OP
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_BINARY_OP.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f5 00 00 00             je      0x15c <_JIT_ENTRY+0x15c>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e4 00 00 00             je      0x15c <_JIT_ENTRY+0x15c>
// 78: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 7d: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 82: 48 89 14 24                   movq    %rdx, (%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 c9 00 00 00             je      0x189 <_JIT_ENTRY+0x189>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// f2: 48 8b 1c 24                   movq    (%rsp), %rbx
// f6: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// fb: 78 16                         js      0x113 <_JIT_ENTRY+0x113>
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 107: ff d0                         callq   *%rax
// 109: 49 ff 0c 24                   decq    (%r12)
// 10d: 0f 84 03 02 00 00             je      0x316 <_JIT_ENTRY+0x316>
// 113: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 118: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 11c: 4d 85 ff                      testq   %r15, %r15
// 11f: 0f 84 12 02 00 00             je      0x337 <_JIT_ENTRY+0x337>
// 125: 4c 89 38                      movq    %r15, (%rax)
// 128: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 12c: 48 8b 00                      movq    (%rax), %rax
// 12f: 84 c0                         testb   %al, %al
// 131: 0f 84 d2 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_HandlePending
// 141: 48 89 df                      movq    %rbx, %rdi
// 144: ff d0                         callq   *%rax
// 146: 85 c0                         testl   %eax, %eax
// 148: 0f 84 bb 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 14e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 153: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 157: e9 db 01 00 00                jmp     0x337 <_JIT_ENTRY+0x337>
// 15c: 49 29 fe                      subq    %rdi, %r14
// 15f: 49 83 c6 b8                   addq    $-0x48, %r14
// 163: 49 c1 ee 03                   shrq    $0x3, %r14
// 167: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 16b: 48 8b 07                      movq    (%rdi), %rax
// 16e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000170:  R_X86_64_64  _JIT_TARGET
// 178: 89 c9                         movl    %ecx, %ecx
// 17a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 17e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 184: e9 be 01 00 00                jmp     0x347 <_JIT_ENTRY+0x347>
// 189: 41 83 fd 02                   cmpl    $0x2, %r13d
// 18d: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 193: 45 0f 43 fd                   cmovael %r13d, %r15d
// 197: 31 db                         xorl    %ebx, %ebx
// 199: eb 11                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 df                      cmpq    %rbx, %r15
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: 0f b7 c8                      movzwl  %ax, %ecx
// 216: f7 d0                         notl    %eax
// 218: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21d: 48 63 d8                      movslq  %eax, %rbx
// 220: 4d 8b 7c de f0                movq    -0x10(%r14,%rbx,8), %r15
// 225: 4d 8b 6c de f8                movq    -0x8(%r14,%rbx,8), %r13
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _PyEval_BinaryOps
// 234: 4c 89 ff                      movq    %r15, %rdi
// 237: 4c 89 ee                      movq    %r13, %rsi
// 23a: ff 14 c8                      callq   *(%rax,%rcx,8)
// 23d: 49 89 c4                      movq    %rax, %r12
// 240: 49 8b 07                      movq    (%r15), %rax
// 243: 48 85 c0                      testq   %rax, %rax
// 246: 7f 21                         jg      0x269 <_JIT_ENTRY+0x269>
// 248: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024a:  R_X86_64_64  .rodata.str1.1
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_NegativeRefcount
// 25c: be d4 0c 00 00                movl    $0xcd4, %esi            # imm = 0xCD4
// 261: 4c 89 fa                      movq    %r15, %rdx
// 264: ff d0                         callq   *%rax
// 266: 49 8b 07                      movq    (%r15), %rax
// 269: 85 c0                         testl   %eax, %eax
// 26b: 78 20                         js      0x28d <_JIT_ENTRY+0x28d>
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 277: ff d0                         callq   *%rax
// 279: 49 ff 0f                      decq    (%r15)
// 27c: 75 0f                         jne     0x28d <_JIT_ENTRY+0x28d>
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _Py_Dealloc
// 288: 4c 89 ff                      movq    %r15, %rdi
// 28b: ff d0                         callq   *%rax
// 28d: 49 8b 45 00                   movq    (%r13), %rax
// 291: 48 85 c0                      testq   %rax, %rax
// 294: 7f 22                         jg      0x2b8 <_JIT_ENTRY+0x2b8>
// 296: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000298:  R_X86_64_64  .rodata.str1.1
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _Py_NegativeRefcount
// 2aa: be d5 0c 00 00                movl    $0xcd5, %esi            # imm = 0xCD5
// 2af: 4c 89 ea                      movq    %r13, %rdx
// 2b2: ff d0                         callq   *%rax
// 2b4: 49 8b 45 00                   movq    (%r13), %rax
// 2b8: 85 c0                         testl   %eax, %eax
// 2ba: 78 21                         js      0x2dd <_JIT_ENTRY+0x2dd>
// 2bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002be:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c6: ff d0                         callq   *%rax
// 2c8: 49 ff 4d 00                   decq    (%r13)
// 2cc: 75 0f                         jne     0x2dd <_JIT_ENTRY+0x2dd>
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _Py_Dealloc
// 2d8: 4c 89 ef                      movq    %r13, %rdi
// 2db: ff d0                         callq   *%rax
// 2dd: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 2e1: 48 83 c0 f0                   addq    $-0x10, %rax
// 2e5: 4d 85 e4                      testq   %r12, %r12
// 2e8: 74 4d                         je      0x337 <_JIT_ENTRY+0x337>
// 2ea: 49 8d 34 de                   leaq    (%r14,%rbx,8), %rsi
// 2ee: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2f2: 4c 89 20                      movq    %r12, (%rax)
// 2f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f7:  R_X86_64_64  _JIT_CONTINUE
// 2ff: 48 89 ef                      movq    %rbp, %rdi
// 302: 48 8b 14 24                   movq    (%rsp), %rdx
// 306: 48 83 c4 28                   addq    $0x28, %rsp
// 30a: 5b                            popq    %rbx
// 30b: 41 5c                         popq    %r12
// 30d: 41 5d                         popq    %r13
// 30f: 41 5e                         popq    %r14
// 311: 41 5f                         popq    %r15
// 313: 5d                            popq    %rbp
// 314: ff e0                         jmpq    *%rax
// 316: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000318:  R_X86_64_64  _Py_Dealloc
// 320: 4c 89 e7                      movq    %r12, %rdi
// 323: ff d0                         callq   *%rax
// 325: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 32a: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 32e: 4d 85 ff                      testq   %r15, %r15
// 331: 0f 85 ee fd ff ff             jne     0x125 <_JIT_ENTRY+0x125>
// 337: 48 29 e8                      subq    %rbp, %rax
// 33a: 48 83 c0 b8                   addq    $-0x48, %rax
// 33e: 48 c1 e8 03                   shrq    $0x3, %rax
// 342: 89 45 40                      movl    %eax, 0x40(%rbp)
// 345: 31 c0                         xorl    %eax, %eax
// 347: 48 83 c4 28                   addq    $0x28, %rsp
// 34b: 5b                            popq    %rbx
// 34c: 41 5c                         popq    %r12
// 34e: 41 5d                         popq    %r13
// 350: 41 5e                         popq    %r14
// 352: 41 5f                         popq    %r15
// 354: 5d                            popq    %rbp
// 355: c3                            retq
// 356: 
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_OP_code_body[855] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf5, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe4, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x03, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x12, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xbb, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0xdb, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xbe, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x7c, 0xde, 0xf0, 0x4d, 0x8b, 0x6c, 0xde, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xee, 0xff, 0x14, 0xc8, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd4, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd5, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x83, 0xc0, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x4d, 0x49, 0x8d, 0x34, 0xde, 0x48, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xff, 0x0f, 0x85, 0xee, 0xfd, 0xff, 0xff, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_OP_code_holes[24] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_BinaryOps, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x318, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_OP_data_holes[1];

// _CALL_BUILTIN_CLASSplus_BINARY_OP_ADD_FLOAT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_BINARY_OP_ADD_FLOAT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 98 01 00 00             je      0x1ff <_JIT_ENTRY+0x1ff>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 87 01 00 00             je      0x1ff <_JIT_ENTRY+0x1ff>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 82: 48 89 14 24                   movq    %rdx, (%rsp)
// 86: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 6c 01 00 00             je      0x22c <_JIT_ENTRY+0x22c>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 4c 8b 3c 24                   movq    (%rsp), %r15
// f1: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f6: 78 16                         js      0x10e <_JIT_ENTRY+0x10e>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 102: ff d0                         callq   *%rax
// 104: 49 ff 0c 24                   decq    (%r12)
// 108: 0f 84 e6 01 00 00             je      0x2f4 <_JIT_ENTRY+0x2f4>
// 10e: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 112: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 117: 48 85 d2                      testq   %rdx, %rdx
// 11a: 0f 84 f5 01 00 00             je      0x315 <_JIT_ENTRY+0x315>
// 120: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 125: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 129: 48 89 10                      movq    %rdx, (%rax)
// 12c: 49 8b 47 10                   movq    0x10(%r15), %rax
// 130: 48 8b 00                      movq    (%rax), %rax
// 133: 84 c0                         testb   %al, %al
// 135: 74 17                         je      0x14e <_JIT_ENTRY+0x14e>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_HandlePending
// 141: 4c 89 ff                      movq    %r15, %rdi
// 144: ff d0                         callq   *%rax
// 146: 85 c0                         testl   %eax, %eax
// 148: 0f 85 ca 01 00 00             jne     0x318 <_JIT_ENTRY+0x318>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _JIT_OPARG
// 158: f7 d0                         notl    %eax
// 15a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 15f: 48 63 d8                      movslq  %eax, %rbx
// 162: 4d 8b 6c de f0                movq    -0x10(%r14,%rbx,8), %r13
// 167: 4d 8b 64 de f8                movq    -0x8(%r14,%rbx,8), %r12
// 16c: f2 41 0f 10 45 10             movsd   0x10(%r13), %xmm0       # xmm0 = mem[0],zero
// 172: f2 41 0f 58 44 24 10          addsd   0x10(%r12), %xmm0
// 179: 49 83 7d 00 01                cmpq    $0x1, (%r13)
// 17e: 0f 85 25 01 00 00             jne     0x2a9 <_JIT_ENTRY+0x2a9>
// 184: f2 41 0f 11 45 10             movsd   %xmm0, 0x10(%r13)
// 18a: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 190: 75 28                         jne     0x1ba <_JIT_ENTRY+0x1ba>
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  PyInterpreterState_Get
// 19c: ff d0                         callq   *%rax
// 19e: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1a5: 49 ff 0c 24                   decq    (%r12)
// 1a9: 75 0f                         jne     0x1ba <_JIT_ENTRY+0x1ba>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _PyFloat_ExactDealloc
// 1b5: 4c 89 e7                      movq    %r12, %rdi
// 1b8: ff d0                         callq   *%rax
// 1ba: 4d 89 ec                      movq    %r13, %r12
// 1bd: 49 8d 34 de                   leaq    (%r14,%rbx,8), %rsi
// 1c1: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _JIT_OPARG
// 1cf: f7 d0                         notl    %eax
// 1d1: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1d6: 48 98                         cltq
// 1d8: 4d 89 64 c6 f0                movq    %r12, -0x10(%r14,%rax,8)
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _JIT_CONTINUE
// 1e7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ec: 4c 89 fa                      movq    %r15, %rdx
// 1ef: 48 83 c4 28                   addq    $0x28, %rsp
// 1f3: 5b                            popq    %rbx
// 1f4: 41 5c                         popq    %r12
// 1f6: 41 5d                         popq    %r13
// 1f8: 41 5e                         popq    %r14
// 1fa: 41 5f                         popq    %r15
// 1fc: 5d                            popq    %rbp
// 1fd: ff e0                         jmpq    *%rax
// 1ff: 49 29 fe                      subq    %rdi, %r14
// 202: 49 83 c6 b8                   addq    $-0x48, %r14
// 206: 49 c1 ee 03                   shrq    $0x3, %r14
// 20a: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 20e: 48 8b 07                      movq    (%rdi), %rax
// 211: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000213:  R_X86_64_64  _JIT_TARGET
// 21b: 89 c9                         movl    %ecx, %ecx
// 21d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 221: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 227: e9 01 01 00 00                jmp     0x32d <_JIT_ENTRY+0x32d>
// 22c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 230: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 236: 45 0f 43 fd                   cmovael %r13d, %r15d
// 23a: 31 db                         xorl    %ebx, %ebx
// 23c: eb 0e                         jmp     0x24c <_JIT_ENTRY+0x24c>
// 23e: 66 90                         nop
// 240: 48 ff c3                      incq    %rbx
// 243: 49 39 df                      cmpq    %rbx, %r15
// 246: 0f 84 74 fe ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 24c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 251: 49 8b 45 00                   movq    (%r13), %rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 7e 06                         jle     0x260 <_JIT_ENTRY+0x260>
// 25a: 85 c0                         testl   %eax, %eax
// 25c: 78 e2                         js      0x240 <_JIT_ENTRY+0x240>
// 25e: eb 26                         jmp     0x286 <_JIT_ENTRY+0x286>
// 260: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000262:  R_X86_64_64  .rodata.str1.1
// 26a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 26f: 4c 89 ea                      movq    %r13, %rdx
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_NegativeRefcount
// 27c: ff d0                         callq   *%rax
// 27e: 49 8b 45 00                   movq    (%r13), %rax
// 282: 85 c0                         testl   %eax, %eax
// 284: 78 ba                         js      0x240 <_JIT_ENTRY+0x240>
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 290: ff d0                         callq   *%rax
// 292: 49 ff 4d 00                   decq    (%r13)
// 296: 75 a8                         jne     0x240 <_JIT_ENTRY+0x240>
// 298: 4c 89 ef                      movq    %r13, %rdi
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_Dealloc
// 2a5: ff d0                         callq   *%rax
// 2a7: eb 97                         jmp     0x240 <_JIT_ENTRY+0x240>
// 2a9: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 2ae: 0f 85 88 00 00 00             jne     0x33c <_JIT_ENTRY+0x33c>
// 2b4: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 2bb: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2c0: 0f 85 f7 fe ff ff             jne     0x1bd <_JIT_ENTRY+0x1bd>
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  PyInterpreterState_Get
// 2d0: ff d0                         callq   *%rax
// 2d2: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2d9: 49 8b 45 00                   movq    (%r13), %rax
// 2dd: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2e1: 49 89 4d 00                   movq    %rcx, (%r13)
// 2e5: 48 83 f8 01                   cmpq    $0x1, %rax
// 2e9: 0f 8f ce fe ff ff             jg      0x1bd <_JIT_ENTRY+0x1bd>
// 2ef: e9 c0 00 00 00                jmp     0x3b4 <_JIT_ENTRY+0x3b4>
// 2f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f6:  R_X86_64_64  _Py_Dealloc
// 2fe: 4c 89 e7                      movq    %r12, %rdi
// 301: ff d0                         callq   *%rax
// 303: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 307: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 30c: 48 85 d2                      testq   %rdx, %rdx
// 30f: 0f 85 0b fe ff ff             jne     0x120 <_JIT_ENTRY+0x120>
// 315: 48 89 c5                      movq    %rax, %rbp
// 318: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 31d: 48 29 c5                      subq    %rax, %rbp
// 320: 48 83 c5 b8                   addq    $-0x48, %rbp
// 324: 48 c1 ed 03                   shrq    $0x3, %rbp
// 328: 89 68 40                      movl    %ebp, 0x40(%rax)
// 32b: 31 c0                         xorl    %eax, %eax
// 32d: 48 83 c4 28                   addq    $0x28, %rsp
// 331: 5b                            popq    %rbx
// 332: 41 5c                         popq    %r12
// 334: 41 5d                         popq    %r13
// 336: 41 5e                         popq    %r14
// 338: 41 5f                         popq    %r15
// 33a: 5d                            popq    %rbp
// 33b: c3                            retq
// 33c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033e:  R_X86_64_64  PyFloat_FromDouble
// 346: ff d0                         callq   *%rax
// 348: 48 85 c0                      testq   %rax, %rax
// 34b: 74 cb                         je      0x318 <_JIT_ENTRY+0x318>
// 34d: 49 89 c7                      movq    %rax, %r15
// 350: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 355: 75 25                         jne     0x37c <_JIT_ENTRY+0x37c>
// 357: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000359:  R_X86_64_64  PyInterpreterState_Get
// 361: ff d0                         callq   *%rax
// 363: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 36a: 49 8b 45 00                   movq    (%r13), %rax
// 36e: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 372: 49 89 4d 00                   movq    %rcx, (%r13)
// 376: 48 83 f8 01                   cmpq    $0x1, %rax
// 37a: 7e 38                         jle     0x3b4 <_JIT_ENTRY+0x3b4>
// 37c: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 382: 75 50                         jne     0x3d4 <_JIT_ENTRY+0x3d4>
// 384: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000386:  R_X86_64_64  PyInterpreterState_Get
// 38e: ff d0                         callq   *%rax
// 390: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 397: 49 8b 04 24                   movq    (%r12), %rax
// 39b: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 39f: 49 89 0c 24                   movq    %rcx, (%r12)
// 3a3: 4d 89 fc                      movq    %r15, %r12
// 3a6: 48 83 f8 01                   cmpq    $0x1, %rax
// 3aa: 4c 8b 3c 24                   movq    (%rsp), %r15
// 3ae: 0f 8f 09 fe ff ff             jg      0x1bd <_JIT_ENTRY+0x1bd>
// 3b4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003b6:  R_X86_64_64  .rodata.str1.1+0x39
// 3be: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000003c0:  R_X86_64_64  .rodata.str1.1+0x4f
// 3c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ca:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 3d2: ff d0                         callq   *%rax
// 3d4: 4d 89 fc                      movq    %r15, %r12
// 3d7: 4c 8b 3c 24                   movq    (%rsp), %r15
// 3db: e9 dd fd ff ff                jmp     0x1bd <_JIT_ENTRY+0x1bd>
// 3e0: 
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_OP_ADD_FLOAT_code_body[993] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x98, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x87, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x6c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xe6, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xf5, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xca, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xde, 0xf0, 0x4d, 0x8b, 0x64, 0xde, 0xf8, 0xf2, 0x41, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x58, 0x44, 0x24, 0x10, 0x49, 0x83, 0x7d, 0x00, 0x01, 0x0f, 0x85, 0x25, 0x01, 0x00, 0x00, 0xf2, 0x41, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xec, 0x49, 0x8d, 0x34, 0xde, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x64, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x01, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x74, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xf7, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0xce, 0xfe, 0xff, 0xff, 0xe9, 0xc0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x0f, 0x85, 0x0b, 0xfe, 0xff, 0xff, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc5, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x68, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0xcb, 0x49, 0x89, 0xc7, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x38, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xfc, 0x48, 0x83, 0xf8, 0x01, 0x4c, 0x8b, 0x3c, 0x24, 0x0f, 0x8f, 0x09, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x4c, 0x8b, 0x3c, 0x24, 0xe9, 0xdd, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_OP_ADD_FLOAT_code_holes[25] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x359, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x386, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x3b6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x3c0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x3ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_OP_ADD_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_OP_ADD_FLOAT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_BINARY_OP_ADD_INT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_BINARY_OP_ADD_INT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 00 01 00 00             je      0x167 <_JIT_ENTRY+0x167>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 ef 00 00 00             je      0x167 <_JIT_ENTRY+0x167>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 82: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 87: 48 89 3c 24                   movq    %rdi, (%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 d4 00 00 00             je      0x194 <_JIT_ENTRY+0x194>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 1c 24                   movq    (%rsp), %rbx
// f1: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// f6: 78 21                         js      0x119 <_JIT_ENTRY+0x119>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 102: ff d0                         callq   *%rax
// 104: 49 ff 0c 24                   decq    (%r12)
// 108: 75 0f                         jne     0x119 <_JIT_ENTRY+0x119>
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: 4c 89 e7                      movq    %r12, %rdi
// 117: ff d0                         callq   *%rax
// 119: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 11e: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 122: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 127: 48 85 c9                      testq   %rcx, %rcx
// 12a: 0f 84 b0 01 00 00             je      0x2e0 <_JIT_ENTRY+0x2e0>
// 130: 48 89 08                      movq    %rcx, (%rax)
// 133: 49 8b 47 10                   movq    0x10(%r15), %rax
// 137: 48 8b 00                      movq    (%rax), %rax
// 13a: 84 c0                         testb   %al, %al
// 13c: 0f 84 d7 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  _Py_HandlePending
// 14c: 4c 89 ff                      movq    %r15, %rdi
// 14f: ff d0                         callq   *%rax
// 151: 85 c0                         testl   %eax, %eax
// 153: 0f 84 c0 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 159: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 15e: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 162: e9 79 01 00 00                jmp     0x2e0 <_JIT_ENTRY+0x2e0>
// 167: 49 29 fe                      subq    %rdi, %r14
// 16a: 49 83 c6 b8                   addq    $-0x48, %r14
// 16e: 49 c1 ee 03                   shrq    $0x3, %r14
// 172: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 176: 48 8b 07                      movq    (%rdi), %rax
// 179: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017b:  R_X86_64_64  _JIT_TARGET
// 183: 89 c9                         movl    %ecx, %ecx
// 185: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 189: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 18f: e9 5c 01 00 00                jmp     0x2f0 <_JIT_ENTRY+0x2f0>
// 194: 41 83 fd 02                   cmpl    $0x2, %r13d
// 198: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 19e: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1a2: 31 db                         xorl    %ebx, %ebx
// 1a4: eb 16                         jmp     0x1bc <_JIT_ENTRY+0x1bc>
// 1a6: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 1b0: 48 ff c3                      incq    %rbx
// 1b3: 49 39 df                      cmpq    %rbx, %r15
// 1b6: 0f 84 04 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1bc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1c1: 49 8b 45 00                   movq    (%r13), %rax
// 1c5: 48 85 c0                      testq   %rax, %rax
// 1c8: 7e 06                         jle     0x1d0 <_JIT_ENTRY+0x1d0>
// 1ca: 85 c0                         testl   %eax, %eax
// 1cc: 78 e2                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1ce: eb 26                         jmp     0x1f6 <_JIT_ENTRY+0x1f6>
// 1d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1
// 1da: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1df: 4c 89 ea                      movq    %r13, %rdx
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_NegativeRefcount
// 1ec: ff d0                         callq   *%rax
// 1ee: 49 8b 45 00                   movq    (%r13), %rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 78 ba                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 200: ff d0                         callq   *%rax
// 202: 49 ff 4d 00                   decq    (%r13)
// 206: 75 a8                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 208: 4c 89 ef                      movq    %r13, %rdi
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_Dealloc
// 215: ff d0                         callq   *%rax
// 217: eb 97                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_OPARG
// 223: f7 d0                         notl    %eax
// 225: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 22a: 48 63 d8                      movslq  %eax, %rbx
// 22d: 4d 8b 64 de f0                movq    -0x10(%r14,%rbx,8), %r12
// 232: 4d 8b 6c de f8                movq    -0x8(%r14,%rbx,8), %r13
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _PyLong_Add
// 241: 4c 89 e7                      movq    %r12, %rdi
// 244: 4c 89 ee                      movq    %r13, %rsi
// 247: ff d0                         callq   *%rax
// 249: 49 89 c7                      movq    %rax, %r15
// 24c: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 251: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000253:  R_X86_64_64  PyInterpreterState_Get
// 25b: 75 1e                         jne     0x27b <_JIT_ENTRY+0x27b>
// 25d: ff d5                         callq   *%rbp
// 25f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 266: 49 ff 4d 00                   decq    (%r13)
// 26a: 75 0f                         jne     0x27b <_JIT_ENTRY+0x27b>
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  PyObject_Free
// 276: 4c 89 ef                      movq    %r13, %rdi
// 279: ff d0                         callq   *%rax
// 27b: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 281: 75 1e                         jne     0x2a1 <_JIT_ENTRY+0x2a1>
// 283: ff d5                         callq   *%rbp
// 285: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 28c: 49 ff 0c 24                   decq    (%r12)
// 290: 75 0f                         jne     0x2a1 <_JIT_ENTRY+0x2a1>
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  PyObject_Free
// 29c: 4c 89 e7                      movq    %r12, %rdi
// 29f: ff d0                         callq   *%rax
// 2a1: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 2a5: 48 83 c0 f0                   addq    $-0x10, %rax
// 2a9: 4d 85 ff                      testq   %r15, %r15
// 2ac: 74 2e                         je      0x2dc <_JIT_ENTRY+0x2dc>
// 2ae: 49 8d 34 de                   leaq    (%r14,%rbx,8), %rsi
// 2b2: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2b6: 4c 89 38                      movq    %r15, (%rax)
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _JIT_CONTINUE
// 2c3: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2c7: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2cc: 48 83 c4 28                   addq    $0x28, %rsp
// 2d0: 5b                            popq    %rbx
// 2d1: 41 5c                         popq    %r12
// 2d3: 41 5d                         popq    %r13
// 2d5: 41 5e                         popq    %r14
// 2d7: 41 5f                         popq    %r15
// 2d9: 5d                            popq    %rbp
// 2da: ff e0                         jmpq    *%rax
// 2dc: 48 8b 1c 24                   movq    (%rsp), %rbx
// 2e0: 48 29 d8                      subq    %rbx, %rax
// 2e3: 48 83 c0 b8                   addq    $-0x48, %rax
// 2e7: 48 c1 e8 03                   shrq    $0x3, %rax
// 2eb: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2ee: 31 c0                         xorl    %eax, %eax
// 2f0: 48 83 c4 28                   addq    $0x28, %rsp
// 2f4: 5b                            popq    %rbx
// 2f5: 41 5c                         popq    %r12
// 2f7: 41 5d                         popq    %r13
// 2f9: 41 5e                         popq    %r14
// 2fb: 41 5f                         popq    %r15
// 2fd: 5d                            popq    %rbp
// 2fe: c3                            retq
// 2ff: 
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_OP_ADD_INT_code_body[768] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x00, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xef, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xd4, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb0, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xc0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0x79, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x5c, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x16, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x04, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x64, 0xde, 0xf0, 0x4d, 0x8b, 0x6c, 0xde, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc7, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x83, 0xc0, 0xf0, 0x4d, 0x85, 0xff, 0x74, 0x2e, 0x49, 0x8d, 0x34, 0xde, 0x48, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x1c, 0x24, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_OP_ADD_INT_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Add, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_OP_ADD_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_OP_ADD_INT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_BINARY_OP_ADD_UNICODE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_BINARY_OP_ADD_UNICODE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 00 01 00 00             je      0x167 <_JIT_ENTRY+0x167>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 ef 00 00 00             je      0x167 <_JIT_ENTRY+0x167>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 82: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 87: 48 89 3c 24                   movq    %rdi, (%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 d4 00 00 00             je      0x194 <_JIT_ENTRY+0x194>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 1c 24                   movq    (%rsp), %rbx
// f1: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// f6: 78 21                         js      0x119 <_JIT_ENTRY+0x119>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 102: ff d0                         callq   *%rax
// 104: 49 ff 0c 24                   decq    (%r12)
// 108: 75 0f                         jne     0x119 <_JIT_ENTRY+0x119>
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: 4c 89 e7                      movq    %r12, %rdi
// 117: ff d0                         callq   *%rax
// 119: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 11e: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 122: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 127: 48 85 c9                      testq   %rcx, %rcx
// 12a: 0f 84 b0 01 00 00             je      0x2e0 <_JIT_ENTRY+0x2e0>
// 130: 48 89 08                      movq    %rcx, (%rax)
// 133: 49 8b 47 10                   movq    0x10(%r15), %rax
// 137: 48 8b 00                      movq    (%rax), %rax
// 13a: 84 c0                         testb   %al, %al
// 13c: 0f 84 d7 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  _Py_HandlePending
// 14c: 4c 89 ff                      movq    %r15, %rdi
// 14f: ff d0                         callq   *%rax
// 151: 85 c0                         testl   %eax, %eax
// 153: 0f 84 c0 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 159: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 15e: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 162: e9 79 01 00 00                jmp     0x2e0 <_JIT_ENTRY+0x2e0>
// 167: 49 29 fe                      subq    %rdi, %r14
// 16a: 49 83 c6 b8                   addq    $-0x48, %r14
// 16e: 49 c1 ee 03                   shrq    $0x3, %r14
// 172: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 176: 48 8b 07                      movq    (%rdi), %rax
// 179: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017b:  R_X86_64_64  _JIT_TARGET
// 183: 89 c9                         movl    %ecx, %ecx
// 185: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 189: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 18f: e9 5c 01 00 00                jmp     0x2f0 <_JIT_ENTRY+0x2f0>
// 194: 41 83 fd 02                   cmpl    $0x2, %r13d
// 198: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 19e: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1a2: 31 db                         xorl    %ebx, %ebx
// 1a4: eb 16                         jmp     0x1bc <_JIT_ENTRY+0x1bc>
// 1a6: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 1b0: 48 ff c3                      incq    %rbx
// 1b3: 49 39 df                      cmpq    %rbx, %r15
// 1b6: 0f 84 04 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1bc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1c1: 49 8b 45 00                   movq    (%r13), %rax
// 1c5: 48 85 c0                      testq   %rax, %rax
// 1c8: 7e 06                         jle     0x1d0 <_JIT_ENTRY+0x1d0>
// 1ca: 85 c0                         testl   %eax, %eax
// 1cc: 78 e2                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1ce: eb 26                         jmp     0x1f6 <_JIT_ENTRY+0x1f6>
// 1d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1
// 1da: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1df: 4c 89 ea                      movq    %r13, %rdx
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_NegativeRefcount
// 1ec: ff d0                         callq   *%rax
// 1ee: 49 8b 45 00                   movq    (%r13), %rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 78 ba                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 200: ff d0                         callq   *%rax
// 202: 49 ff 4d 00                   decq    (%r13)
// 206: 75 a8                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 208: 4c 89 ef                      movq    %r13, %rdi
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_Dealloc
// 215: ff d0                         callq   *%rax
// 217: eb 97                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_OPARG
// 223: f7 d0                         notl    %eax
// 225: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 22a: 48 63 d8                      movslq  %eax, %rbx
// 22d: 4d 8b 6c de f0                movq    -0x10(%r14,%rbx,8), %r13
// 232: 4d 8b 64 de f8                movq    -0x8(%r14,%rbx,8), %r12
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  PyUnicode_Concat
// 241: 4c 89 ef                      movq    %r13, %rdi
// 244: 4c 89 e6                      movq    %r12, %rsi
// 247: ff d0                         callq   *%rax
// 249: 49 89 c7                      movq    %rax, %r15
// 24c: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 251: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000253:  R_X86_64_64  PyInterpreterState_Get
// 25b: 75 1e                         jne     0x27b <_JIT_ENTRY+0x27b>
// 25d: ff d5                         callq   *%rbp
// 25f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 266: 49 ff 4d 00                   decq    (%r13)
// 26a: 75 0f                         jne     0x27b <_JIT_ENTRY+0x27b>
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _PyUnicode_ExactDealloc
// 276: 4c 89 ef                      movq    %r13, %rdi
// 279: ff d0                         callq   *%rax
// 27b: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 281: 75 1e                         jne     0x2a1 <_JIT_ENTRY+0x2a1>
// 283: ff d5                         callq   *%rbp
// 285: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 28c: 49 ff 0c 24                   decq    (%r12)
// 290: 75 0f                         jne     0x2a1 <_JIT_ENTRY+0x2a1>
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _PyUnicode_ExactDealloc
// 29c: 4c 89 e7                      movq    %r12, %rdi
// 29f: ff d0                         callq   *%rax
// 2a1: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 2a5: 48 83 c0 f0                   addq    $-0x10, %rax
// 2a9: 4d 85 ff                      testq   %r15, %r15
// 2ac: 74 2e                         je      0x2dc <_JIT_ENTRY+0x2dc>
// 2ae: 49 8d 34 de                   leaq    (%r14,%rbx,8), %rsi
// 2b2: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2b6: 4c 89 38                      movq    %r15, (%rax)
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _JIT_CONTINUE
// 2c3: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2c7: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2cc: 48 83 c4 28                   addq    $0x28, %rsp
// 2d0: 5b                            popq    %rbx
// 2d1: 41 5c                         popq    %r12
// 2d3: 41 5d                         popq    %r13
// 2d5: 41 5e                         popq    %r14
// 2d7: 41 5f                         popq    %r15
// 2d9: 5d                            popq    %rbp
// 2da: ff e0                         jmpq    *%rax
// 2dc: 48 8b 1c 24                   movq    (%rsp), %rbx
// 2e0: 48 29 d8                      subq    %rbx, %rax
// 2e3: 48 83 c0 b8                   addq    $-0x48, %rax
// 2e7: 48 c1 e8 03                   shrq    $0x3, %rax
// 2eb: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2ee: 31 c0                         xorl    %eax, %eax
// 2f0: 48 83 c4 28                   addq    $0x28, %rsp
// 2f4: 5b                            popq    %rbx
// 2f5: 41 5c                         popq    %r12
// 2f7: 41 5d                         popq    %r13
// 2f9: 41 5e                         popq    %r14
// 2fb: 41 5f                         popq    %r15
// 2fd: 5d                            popq    %rbp
// 2fe: c3                            retq
// 2ff: 
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_OP_ADD_UNICODE_code_body[768] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x00, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xef, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xd4, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb0, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xc0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0x79, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x5c, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x16, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x04, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xde, 0xf0, 0x4d, 0x8b, 0x64, 0xde, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x49, 0x89, 0xc7, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x83, 0xc0, 0xf0, 0x4d, 0x85, 0xff, 0x74, 0x2e, 0x49, 0x8d, 0x34, 0xde, 0x48, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x1c, 0x24, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_OP_ADD_UNICODE_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Concat, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_OP_ADD_UNICODE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_OP_ADD_UNICODE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_BINARY_OP_MULTIPLY_FLOAT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_BINARY_OP_MULTIPLY_FLOAT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 98 01 00 00             je      0x1ff <_JIT_ENTRY+0x1ff>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 87 01 00 00             je      0x1ff <_JIT_ENTRY+0x1ff>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 82: 48 89 14 24                   movq    %rdx, (%rsp)
// 86: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 6c 01 00 00             je      0x22c <_JIT_ENTRY+0x22c>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 4c 8b 3c 24                   movq    (%rsp), %r15
// f1: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f6: 78 16                         js      0x10e <_JIT_ENTRY+0x10e>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 102: ff d0                         callq   *%rax
// 104: 49 ff 0c 24                   decq    (%r12)
// 108: 0f 84 e6 01 00 00             je      0x2f4 <_JIT_ENTRY+0x2f4>
// 10e: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 112: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 117: 48 85 d2                      testq   %rdx, %rdx
// 11a: 0f 84 f5 01 00 00             je      0x315 <_JIT_ENTRY+0x315>
// 120: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 125: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 129: 48 89 10                      movq    %rdx, (%rax)
// 12c: 49 8b 47 10                   movq    0x10(%r15), %rax
// 130: 48 8b 00                      movq    (%rax), %rax
// 133: 84 c0                         testb   %al, %al
// 135: 74 17                         je      0x14e <_JIT_ENTRY+0x14e>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_HandlePending
// 141: 4c 89 ff                      movq    %r15, %rdi
// 144: ff d0                         callq   *%rax
// 146: 85 c0                         testl   %eax, %eax
// 148: 0f 85 ca 01 00 00             jne     0x318 <_JIT_ENTRY+0x318>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _JIT_OPARG
// 158: f7 d0                         notl    %eax
// 15a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 15f: 48 63 d8                      movslq  %eax, %rbx
// 162: 4d 8b 6c de f0                movq    -0x10(%r14,%rbx,8), %r13
// 167: 4d 8b 64 de f8                movq    -0x8(%r14,%rbx,8), %r12
// 16c: f2 41 0f 10 45 10             movsd   0x10(%r13), %xmm0       # xmm0 = mem[0],zero
// 172: f2 41 0f 59 44 24 10          mulsd   0x10(%r12), %xmm0
// 179: 49 83 7d 00 01                cmpq    $0x1, (%r13)
// 17e: 0f 85 25 01 00 00             jne     0x2a9 <_JIT_ENTRY+0x2a9>
// 184: f2 41 0f 11 45 10             movsd   %xmm0, 0x10(%r13)
// 18a: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 190: 75 28                         jne     0x1ba <_JIT_ENTRY+0x1ba>
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  PyInterpreterState_Get
// 19c: ff d0                         callq   *%rax
// 19e: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1a5: 49 ff 0c 24                   decq    (%r12)
// 1a9: 75 0f                         jne     0x1ba <_JIT_ENTRY+0x1ba>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _PyFloat_ExactDealloc
// 1b5: 4c 89 e7                      movq    %r12, %rdi
// 1b8: ff d0                         callq   *%rax
// 1ba: 4d 89 ec                      movq    %r13, %r12
// 1bd: 49 8d 34 de                   leaq    (%r14,%rbx,8), %rsi
// 1c1: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _JIT_OPARG
// 1cf: f7 d0                         notl    %eax
// 1d1: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1d6: 48 98                         cltq
// 1d8: 4d 89 64 c6 f0                movq    %r12, -0x10(%r14,%rax,8)
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _JIT_CONTINUE
// 1e7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ec: 4c 89 fa                      movq    %r15, %rdx
// 1ef: 48 83 c4 28                   addq    $0x28, %rsp
// 1f3: 5b                            popq    %rbx
// 1f4: 41 5c                         popq    %r12
// 1f6: 41 5d                         popq    %r13
// 1f8: 41 5e                         popq    %r14
// 1fa: 41 5f                         popq    %r15
// 1fc: 5d                            popq    %rbp
// 1fd: ff e0                         jmpq    *%rax
// 1ff: 49 29 fe                      subq    %rdi, %r14
// 202: 49 83 c6 b8                   addq    $-0x48, %r14
// 206: 49 c1 ee 03                   shrq    $0x3, %r14
// 20a: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 20e: 48 8b 07                      movq    (%rdi), %rax
// 211: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000213:  R_X86_64_64  _JIT_TARGET
// 21b: 89 c9                         movl    %ecx, %ecx
// 21d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 221: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 227: e9 01 01 00 00                jmp     0x32d <_JIT_ENTRY+0x32d>
// 22c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 230: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 236: 45 0f 43 fd                   cmovael %r13d, %r15d
// 23a: 31 db                         xorl    %ebx, %ebx
// 23c: eb 0e                         jmp     0x24c <_JIT_ENTRY+0x24c>
// 23e: 66 90                         nop
// 240: 48 ff c3                      incq    %rbx
// 243: 49 39 df                      cmpq    %rbx, %r15
// 246: 0f 84 74 fe ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 24c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 251: 49 8b 45 00                   movq    (%r13), %rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 7e 06                         jle     0x260 <_JIT_ENTRY+0x260>
// 25a: 85 c0                         testl   %eax, %eax
// 25c: 78 e2                         js      0x240 <_JIT_ENTRY+0x240>
// 25e: eb 26                         jmp     0x286 <_JIT_ENTRY+0x286>
// 260: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000262:  R_X86_64_64  .rodata.str1.1
// 26a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 26f: 4c 89 ea                      movq    %r13, %rdx
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_NegativeRefcount
// 27c: ff d0                         callq   *%rax
// 27e: 49 8b 45 00                   movq    (%r13), %rax
// 282: 85 c0                         testl   %eax, %eax
// 284: 78 ba                         js      0x240 <_JIT_ENTRY+0x240>
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 290: ff d0                         callq   *%rax
// 292: 49 ff 4d 00                   decq    (%r13)
// 296: 75 a8                         jne     0x240 <_JIT_ENTRY+0x240>
// 298: 4c 89 ef                      movq    %r13, %rdi
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_Dealloc
// 2a5: ff d0                         callq   *%rax
// 2a7: eb 97                         jmp     0x240 <_JIT_ENTRY+0x240>
// 2a9: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 2ae: 0f 85 88 00 00 00             jne     0x33c <_JIT_ENTRY+0x33c>
// 2b4: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 2bb: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2c0: 0f 85 f7 fe ff ff             jne     0x1bd <_JIT_ENTRY+0x1bd>
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  PyInterpreterState_Get
// 2d0: ff d0                         callq   *%rax
// 2d2: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2d9: 49 8b 45 00                   movq    (%r13), %rax
// 2dd: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2e1: 49 89 4d 00                   movq    %rcx, (%r13)
// 2e5: 48 83 f8 01                   cmpq    $0x1, %rax
// 2e9: 0f 8f ce fe ff ff             jg      0x1bd <_JIT_ENTRY+0x1bd>
// 2ef: e9 c0 00 00 00                jmp     0x3b4 <_JIT_ENTRY+0x3b4>
// 2f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f6:  R_X86_64_64  _Py_Dealloc
// 2fe: 4c 89 e7                      movq    %r12, %rdi
// 301: ff d0                         callq   *%rax
// 303: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 307: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 30c: 48 85 d2                      testq   %rdx, %rdx
// 30f: 0f 85 0b fe ff ff             jne     0x120 <_JIT_ENTRY+0x120>
// 315: 48 89 c5                      movq    %rax, %rbp
// 318: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 31d: 48 29 c5                      subq    %rax, %rbp
// 320: 48 83 c5 b8                   addq    $-0x48, %rbp
// 324: 48 c1 ed 03                   shrq    $0x3, %rbp
// 328: 89 68 40                      movl    %ebp, 0x40(%rax)
// 32b: 31 c0                         xorl    %eax, %eax
// 32d: 48 83 c4 28                   addq    $0x28, %rsp
// 331: 5b                            popq    %rbx
// 332: 41 5c                         popq    %r12
// 334: 41 5d                         popq    %r13
// 336: 41 5e                         popq    %r14
// 338: 41 5f                         popq    %r15
// 33a: 5d                            popq    %rbp
// 33b: c3                            retq
// 33c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033e:  R_X86_64_64  PyFloat_FromDouble
// 346: ff d0                         callq   *%rax
// 348: 48 85 c0                      testq   %rax, %rax
// 34b: 74 cb                         je      0x318 <_JIT_ENTRY+0x318>
// 34d: 49 89 c7                      movq    %rax, %r15
// 350: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 355: 75 25                         jne     0x37c <_JIT_ENTRY+0x37c>
// 357: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000359:  R_X86_64_64  PyInterpreterState_Get
// 361: ff d0                         callq   *%rax
// 363: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 36a: 49 8b 45 00                   movq    (%r13), %rax
// 36e: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 372: 49 89 4d 00                   movq    %rcx, (%r13)
// 376: 48 83 f8 01                   cmpq    $0x1, %rax
// 37a: 7e 38                         jle     0x3b4 <_JIT_ENTRY+0x3b4>
// 37c: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 382: 75 50                         jne     0x3d4 <_JIT_ENTRY+0x3d4>
// 384: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000386:  R_X86_64_64  PyInterpreterState_Get
// 38e: ff d0                         callq   *%rax
// 390: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 397: 49 8b 04 24                   movq    (%r12), %rax
// 39b: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 39f: 49 89 0c 24                   movq    %rcx, (%r12)
// 3a3: 4d 89 fc                      movq    %r15, %r12
// 3a6: 48 83 f8 01                   cmpq    $0x1, %rax
// 3aa: 4c 8b 3c 24                   movq    (%rsp), %r15
// 3ae: 0f 8f 09 fe ff ff             jg      0x1bd <_JIT_ENTRY+0x1bd>
// 3b4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003b6:  R_X86_64_64  .rodata.str1.1+0x39
// 3be: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000003c0:  R_X86_64_64  .rodata.str1.1+0x4f
// 3c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ca:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 3d2: ff d0                         callq   *%rax
// 3d4: 4d 89 fc                      movq    %r15, %r12
// 3d7: 4c 8b 3c 24                   movq    (%rsp), %r15
// 3db: e9 dd fd ff ff                jmp     0x1bd <_JIT_ENTRY+0x1bd>
// 3e0: 
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_OP_MULTIPLY_FLOAT_code_body[993] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x98, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x87, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x6c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xe6, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xf5, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xca, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xde, 0xf0, 0x4d, 0x8b, 0x64, 0xde, 0xf8, 0xf2, 0x41, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x59, 0x44, 0x24, 0x10, 0x49, 0x83, 0x7d, 0x00, 0x01, 0x0f, 0x85, 0x25, 0x01, 0x00, 0x00, 0xf2, 0x41, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xec, 0x49, 0x8d, 0x34, 0xde, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x64, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x01, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x74, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xf7, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0xce, 0xfe, 0xff, 0xff, 0xe9, 0xc0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x0f, 0x85, 0x0b, 0xfe, 0xff, 0xff, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc5, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x68, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0xcb, 0x49, 0x89, 0xc7, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x38, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xfc, 0x48, 0x83, 0xf8, 0x01, 0x4c, 0x8b, 0x3c, 0x24, 0x0f, 0x8f, 0x09, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x4c, 0x8b, 0x3c, 0x24, 0xe9, 0xdd, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_OP_MULTIPLY_FLOAT_code_holes[25] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x359, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x386, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x3b6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x3c0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x3ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_OP_MULTIPLY_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_OP_MULTIPLY_FLOAT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_BINARY_OP_MULTIPLY_INT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_BINARY_OP_MULTIPLY_INT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 00 01 00 00             je      0x167 <_JIT_ENTRY+0x167>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 ef 00 00 00             je      0x167 <_JIT_ENTRY+0x167>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 82: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 87: 48 89 3c 24                   movq    %rdi, (%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 d4 00 00 00             je      0x194 <_JIT_ENTRY+0x194>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 1c 24                   movq    (%rsp), %rbx
// f1: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// f6: 78 21                         js      0x119 <_JIT_ENTRY+0x119>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 102: ff d0                         callq   *%rax
// 104: 49 ff 0c 24                   decq    (%r12)
// 108: 75 0f                         jne     0x119 <_JIT_ENTRY+0x119>
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: 4c 89 e7                      movq    %r12, %rdi
// 117: ff d0                         callq   *%rax
// 119: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 11e: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 122: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 127: 48 85 c9                      testq   %rcx, %rcx
// 12a: 0f 84 b0 01 00 00             je      0x2e0 <_JIT_ENTRY+0x2e0>
// 130: 48 89 08                      movq    %rcx, (%rax)
// 133: 49 8b 47 10                   movq    0x10(%r15), %rax
// 137: 48 8b 00                      movq    (%rax), %rax
// 13a: 84 c0                         testb   %al, %al
// 13c: 0f 84 d7 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  _Py_HandlePending
// 14c: 4c 89 ff                      movq    %r15, %rdi
// 14f: ff d0                         callq   *%rax
// 151: 85 c0                         testl   %eax, %eax
// 153: 0f 84 c0 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 159: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 15e: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 162: e9 79 01 00 00                jmp     0x2e0 <_JIT_ENTRY+0x2e0>
// 167: 49 29 fe                      subq    %rdi, %r14
// 16a: 49 83 c6 b8                   addq    $-0x48, %r14
// 16e: 49 c1 ee 03                   shrq    $0x3, %r14
// 172: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 176: 48 8b 07                      movq    (%rdi), %rax
// 179: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017b:  R_X86_64_64  _JIT_TARGET
// 183: 89 c9                         movl    %ecx, %ecx
// 185: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 189: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 18f: e9 5c 01 00 00                jmp     0x2f0 <_JIT_ENTRY+0x2f0>
// 194: 41 83 fd 02                   cmpl    $0x2, %r13d
// 198: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 19e: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1a2: 31 db                         xorl    %ebx, %ebx
// 1a4: eb 16                         jmp     0x1bc <_JIT_ENTRY+0x1bc>
// 1a6: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 1b0: 48 ff c3                      incq    %rbx
// 1b3: 49 39 df                      cmpq    %rbx, %r15
// 1b6: 0f 84 04 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1bc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1c1: 49 8b 45 00                   movq    (%r13), %rax
// 1c5: 48 85 c0                      testq   %rax, %rax
// 1c8: 7e 06                         jle     0x1d0 <_JIT_ENTRY+0x1d0>
// 1ca: 85 c0                         testl   %eax, %eax
// 1cc: 78 e2                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1ce: eb 26                         jmp     0x1f6 <_JIT_ENTRY+0x1f6>
// 1d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1
// 1da: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1df: 4c 89 ea                      movq    %r13, %rdx
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_NegativeRefcount
// 1ec: ff d0                         callq   *%rax
// 1ee: 49 8b 45 00                   movq    (%r13), %rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 78 ba                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 200: ff d0                         callq   *%rax
// 202: 49 ff 4d 00                   decq    (%r13)
// 206: 75 a8                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 208: 4c 89 ef                      movq    %r13, %rdi
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_Dealloc
// 215: ff d0                         callq   *%rax
// 217: eb 97                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_OPARG
// 223: f7 d0                         notl    %eax
// 225: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 22a: 48 63 d8                      movslq  %eax, %rbx
// 22d: 4d 8b 64 de f0                movq    -0x10(%r14,%rbx,8), %r12
// 232: 4d 8b 6c de f8                movq    -0x8(%r14,%rbx,8), %r13
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _PyLong_Multiply
// 241: 4c 89 e7                      movq    %r12, %rdi
// 244: 4c 89 ee                      movq    %r13, %rsi
// 247: ff d0                         callq   *%rax
// 249: 49 89 c7                      movq    %rax, %r15
// 24c: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 251: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000253:  R_X86_64_64  PyInterpreterState_Get
// 25b: 75 1e                         jne     0x27b <_JIT_ENTRY+0x27b>
// 25d: ff d5                         callq   *%rbp
// 25f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 266: 49 ff 4d 00                   decq    (%r13)
// 26a: 75 0f                         jne     0x27b <_JIT_ENTRY+0x27b>
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  PyObject_Free
// 276: 4c 89 ef                      movq    %r13, %rdi
// 279: ff d0                         callq   *%rax
// 27b: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 281: 75 1e                         jne     0x2a1 <_JIT_ENTRY+0x2a1>
// 283: ff d5                         callq   *%rbp
// 285: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 28c: 49 ff 0c 24                   decq    (%r12)
// 290: 75 0f                         jne     0x2a1 <_JIT_ENTRY+0x2a1>
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  PyObject_Free
// 29c: 4c 89 e7                      movq    %r12, %rdi
// 29f: ff d0                         callq   *%rax
// 2a1: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 2a5: 48 83 c0 f0                   addq    $-0x10, %rax
// 2a9: 4d 85 ff                      testq   %r15, %r15
// 2ac: 74 2e                         je      0x2dc <_JIT_ENTRY+0x2dc>
// 2ae: 49 8d 34 de                   leaq    (%r14,%rbx,8), %rsi
// 2b2: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2b6: 4c 89 38                      movq    %r15, (%rax)
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _JIT_CONTINUE
// 2c3: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2c7: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2cc: 48 83 c4 28                   addq    $0x28, %rsp
// 2d0: 5b                            popq    %rbx
// 2d1: 41 5c                         popq    %r12
// 2d3: 41 5d                         popq    %r13
// 2d5: 41 5e                         popq    %r14
// 2d7: 41 5f                         popq    %r15
// 2d9: 5d                            popq    %rbp
// 2da: ff e0                         jmpq    *%rax
// 2dc: 48 8b 1c 24                   movq    (%rsp), %rbx
// 2e0: 48 29 d8                      subq    %rbx, %rax
// 2e3: 48 83 c0 b8                   addq    $-0x48, %rax
// 2e7: 48 c1 e8 03                   shrq    $0x3, %rax
// 2eb: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2ee: 31 c0                         xorl    %eax, %eax
// 2f0: 48 83 c4 28                   addq    $0x28, %rsp
// 2f4: 5b                            popq    %rbx
// 2f5: 41 5c                         popq    %r12
// 2f7: 41 5d                         popq    %r13
// 2f9: 41 5e                         popq    %r14
// 2fb: 41 5f                         popq    %r15
// 2fd: 5d                            popq    %rbp
// 2fe: c3                            retq
// 2ff: 
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_OP_MULTIPLY_INT_code_body[768] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x00, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xef, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xd4, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb0, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xc0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0x79, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x5c, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x16, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x04, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x64, 0xde, 0xf0, 0x4d, 0x8b, 0x6c, 0xde, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc7, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x83, 0xc0, 0xf0, 0x4d, 0x85, 0xff, 0x74, 0x2e, 0x49, 0x8d, 0x34, 0xde, 0x48, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x1c, 0x24, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_OP_MULTIPLY_INT_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Multiply, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_OP_MULTIPLY_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_OP_MULTIPLY_INT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_BINARY_OP_SUBTRACT_FLOAT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_BINARY_OP_SUBTRACT_FLOAT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 98 01 00 00             je      0x1ff <_JIT_ENTRY+0x1ff>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 87 01 00 00             je      0x1ff <_JIT_ENTRY+0x1ff>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 82: 48 89 14 24                   movq    %rdx, (%rsp)
// 86: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 6c 01 00 00             je      0x22c <_JIT_ENTRY+0x22c>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 4c 8b 3c 24                   movq    (%rsp), %r15
// f1: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f6: 78 16                         js      0x10e <_JIT_ENTRY+0x10e>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 102: ff d0                         callq   *%rax
// 104: 49 ff 0c 24                   decq    (%r12)
// 108: 0f 84 e6 01 00 00             je      0x2f4 <_JIT_ENTRY+0x2f4>
// 10e: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 112: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 117: 48 85 d2                      testq   %rdx, %rdx
// 11a: 0f 84 f5 01 00 00             je      0x315 <_JIT_ENTRY+0x315>
// 120: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 125: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 129: 48 89 10                      movq    %rdx, (%rax)
// 12c: 49 8b 47 10                   movq    0x10(%r15), %rax
// 130: 48 8b 00                      movq    (%rax), %rax
// 133: 84 c0                         testb   %al, %al
// 135: 74 17                         je      0x14e <_JIT_ENTRY+0x14e>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_HandlePending
// 141: 4c 89 ff                      movq    %r15, %rdi
// 144: ff d0                         callq   *%rax
// 146: 85 c0                         testl   %eax, %eax
// 148: 0f 85 ca 01 00 00             jne     0x318 <_JIT_ENTRY+0x318>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _JIT_OPARG
// 158: f7 d0                         notl    %eax
// 15a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 15f: 48 63 d8                      movslq  %eax, %rbx
// 162: 4d 8b 6c de f0                movq    -0x10(%r14,%rbx,8), %r13
// 167: 4d 8b 64 de f8                movq    -0x8(%r14,%rbx,8), %r12
// 16c: f2 41 0f 10 45 10             movsd   0x10(%r13), %xmm0       # xmm0 = mem[0],zero
// 172: f2 41 0f 5c 44 24 10          subsd   0x10(%r12), %xmm0
// 179: 49 83 7d 00 01                cmpq    $0x1, (%r13)
// 17e: 0f 85 25 01 00 00             jne     0x2a9 <_JIT_ENTRY+0x2a9>
// 184: f2 41 0f 11 45 10             movsd   %xmm0, 0x10(%r13)
// 18a: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 190: 75 28                         jne     0x1ba <_JIT_ENTRY+0x1ba>
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  PyInterpreterState_Get
// 19c: ff d0                         callq   *%rax
// 19e: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1a5: 49 ff 0c 24                   decq    (%r12)
// 1a9: 75 0f                         jne     0x1ba <_JIT_ENTRY+0x1ba>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _PyFloat_ExactDealloc
// 1b5: 4c 89 e7                      movq    %r12, %rdi
// 1b8: ff d0                         callq   *%rax
// 1ba: 4d 89 ec                      movq    %r13, %r12
// 1bd: 49 8d 34 de                   leaq    (%r14,%rbx,8), %rsi
// 1c1: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _JIT_OPARG
// 1cf: f7 d0                         notl    %eax
// 1d1: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1d6: 48 98                         cltq
// 1d8: 4d 89 64 c6 f0                movq    %r12, -0x10(%r14,%rax,8)
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _JIT_CONTINUE
// 1e7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ec: 4c 89 fa                      movq    %r15, %rdx
// 1ef: 48 83 c4 28                   addq    $0x28, %rsp
// 1f3: 5b                            popq    %rbx
// 1f4: 41 5c                         popq    %r12
// 1f6: 41 5d                         popq    %r13
// 1f8: 41 5e                         popq    %r14
// 1fa: 41 5f                         popq    %r15
// 1fc: 5d                            popq    %rbp
// 1fd: ff e0                         jmpq    *%rax
// 1ff: 49 29 fe                      subq    %rdi, %r14
// 202: 49 83 c6 b8                   addq    $-0x48, %r14
// 206: 49 c1 ee 03                   shrq    $0x3, %r14
// 20a: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 20e: 48 8b 07                      movq    (%rdi), %rax
// 211: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000213:  R_X86_64_64  _JIT_TARGET
// 21b: 89 c9                         movl    %ecx, %ecx
// 21d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 221: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 227: e9 01 01 00 00                jmp     0x32d <_JIT_ENTRY+0x32d>
// 22c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 230: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 236: 45 0f 43 fd                   cmovael %r13d, %r15d
// 23a: 31 db                         xorl    %ebx, %ebx
// 23c: eb 0e                         jmp     0x24c <_JIT_ENTRY+0x24c>
// 23e: 66 90                         nop
// 240: 48 ff c3                      incq    %rbx
// 243: 49 39 df                      cmpq    %rbx, %r15
// 246: 0f 84 74 fe ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 24c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 251: 49 8b 45 00                   movq    (%r13), %rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 7e 06                         jle     0x260 <_JIT_ENTRY+0x260>
// 25a: 85 c0                         testl   %eax, %eax
// 25c: 78 e2                         js      0x240 <_JIT_ENTRY+0x240>
// 25e: eb 26                         jmp     0x286 <_JIT_ENTRY+0x286>
// 260: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000262:  R_X86_64_64  .rodata.str1.1
// 26a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 26f: 4c 89 ea                      movq    %r13, %rdx
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_NegativeRefcount
// 27c: ff d0                         callq   *%rax
// 27e: 49 8b 45 00                   movq    (%r13), %rax
// 282: 85 c0                         testl   %eax, %eax
// 284: 78 ba                         js      0x240 <_JIT_ENTRY+0x240>
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 290: ff d0                         callq   *%rax
// 292: 49 ff 4d 00                   decq    (%r13)
// 296: 75 a8                         jne     0x240 <_JIT_ENTRY+0x240>
// 298: 4c 89 ef                      movq    %r13, %rdi
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_Dealloc
// 2a5: ff d0                         callq   *%rax
// 2a7: eb 97                         jmp     0x240 <_JIT_ENTRY+0x240>
// 2a9: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 2ae: 0f 85 88 00 00 00             jne     0x33c <_JIT_ENTRY+0x33c>
// 2b4: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 2bb: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2c0: 0f 85 f7 fe ff ff             jne     0x1bd <_JIT_ENTRY+0x1bd>
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  PyInterpreterState_Get
// 2d0: ff d0                         callq   *%rax
// 2d2: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2d9: 49 8b 45 00                   movq    (%r13), %rax
// 2dd: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2e1: 49 89 4d 00                   movq    %rcx, (%r13)
// 2e5: 48 83 f8 01                   cmpq    $0x1, %rax
// 2e9: 0f 8f ce fe ff ff             jg      0x1bd <_JIT_ENTRY+0x1bd>
// 2ef: e9 c0 00 00 00                jmp     0x3b4 <_JIT_ENTRY+0x3b4>
// 2f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f6:  R_X86_64_64  _Py_Dealloc
// 2fe: 4c 89 e7                      movq    %r12, %rdi
// 301: ff d0                         callq   *%rax
// 303: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 307: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 30c: 48 85 d2                      testq   %rdx, %rdx
// 30f: 0f 85 0b fe ff ff             jne     0x120 <_JIT_ENTRY+0x120>
// 315: 48 89 c5                      movq    %rax, %rbp
// 318: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 31d: 48 29 c5                      subq    %rax, %rbp
// 320: 48 83 c5 b8                   addq    $-0x48, %rbp
// 324: 48 c1 ed 03                   shrq    $0x3, %rbp
// 328: 89 68 40                      movl    %ebp, 0x40(%rax)
// 32b: 31 c0                         xorl    %eax, %eax
// 32d: 48 83 c4 28                   addq    $0x28, %rsp
// 331: 5b                            popq    %rbx
// 332: 41 5c                         popq    %r12
// 334: 41 5d                         popq    %r13
// 336: 41 5e                         popq    %r14
// 338: 41 5f                         popq    %r15
// 33a: 5d                            popq    %rbp
// 33b: c3                            retq
// 33c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033e:  R_X86_64_64  PyFloat_FromDouble
// 346: ff d0                         callq   *%rax
// 348: 48 85 c0                      testq   %rax, %rax
// 34b: 74 cb                         je      0x318 <_JIT_ENTRY+0x318>
// 34d: 49 89 c7                      movq    %rax, %r15
// 350: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 355: 75 25                         jne     0x37c <_JIT_ENTRY+0x37c>
// 357: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000359:  R_X86_64_64  PyInterpreterState_Get
// 361: ff d0                         callq   *%rax
// 363: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 36a: 49 8b 45 00                   movq    (%r13), %rax
// 36e: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 372: 49 89 4d 00                   movq    %rcx, (%r13)
// 376: 48 83 f8 01                   cmpq    $0x1, %rax
// 37a: 7e 38                         jle     0x3b4 <_JIT_ENTRY+0x3b4>
// 37c: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 382: 75 50                         jne     0x3d4 <_JIT_ENTRY+0x3d4>
// 384: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000386:  R_X86_64_64  PyInterpreterState_Get
// 38e: ff d0                         callq   *%rax
// 390: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 397: 49 8b 04 24                   movq    (%r12), %rax
// 39b: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 39f: 49 89 0c 24                   movq    %rcx, (%r12)
// 3a3: 4d 89 fc                      movq    %r15, %r12
// 3a6: 48 83 f8 01                   cmpq    $0x1, %rax
// 3aa: 4c 8b 3c 24                   movq    (%rsp), %r15
// 3ae: 0f 8f 09 fe ff ff             jg      0x1bd <_JIT_ENTRY+0x1bd>
// 3b4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003b6:  R_X86_64_64  .rodata.str1.1+0x39
// 3be: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000003c0:  R_X86_64_64  .rodata.str1.1+0x4f
// 3c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ca:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 3d2: ff d0                         callq   *%rax
// 3d4: 4d 89 fc                      movq    %r15, %r12
// 3d7: 4c 8b 3c 24                   movq    (%rsp), %r15
// 3db: e9 dd fd ff ff                jmp     0x1bd <_JIT_ENTRY+0x1bd>
// 3e0: 
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_OP_SUBTRACT_FLOAT_code_body[993] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x98, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x87, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x6c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xe6, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xf5, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xca, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xde, 0xf0, 0x4d, 0x8b, 0x64, 0xde, 0xf8, 0xf2, 0x41, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x5c, 0x44, 0x24, 0x10, 0x49, 0x83, 0x7d, 0x00, 0x01, 0x0f, 0x85, 0x25, 0x01, 0x00, 0x00, 0xf2, 0x41, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xec, 0x49, 0x8d, 0x34, 0xde, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x64, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x01, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x74, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xf7, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0xce, 0xfe, 0xff, 0xff, 0xe9, 0xc0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x0f, 0x85, 0x0b, 0xfe, 0xff, 0xff, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc5, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x68, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0xcb, 0x49, 0x89, 0xc7, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x38, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xfc, 0x48, 0x83, 0xf8, 0x01, 0x4c, 0x8b, 0x3c, 0x24, 0x0f, 0x8f, 0x09, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x4c, 0x8b, 0x3c, 0x24, 0xe9, 0xdd, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_OP_SUBTRACT_FLOAT_code_holes[25] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x359, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x386, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x3b6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x3c0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x3ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_OP_SUBTRACT_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_OP_SUBTRACT_FLOAT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_BINARY_OP_SUBTRACT_INT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_BINARY_OP_SUBTRACT_INT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 00 01 00 00             je      0x167 <_JIT_ENTRY+0x167>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 ef 00 00 00             je      0x167 <_JIT_ENTRY+0x167>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 82: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 87: 48 89 3c 24                   movq    %rdi, (%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 d4 00 00 00             je      0x194 <_JIT_ENTRY+0x194>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 1c 24                   movq    (%rsp), %rbx
// f1: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// f6: 78 21                         js      0x119 <_JIT_ENTRY+0x119>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 102: ff d0                         callq   *%rax
// 104: 49 ff 0c 24                   decq    (%r12)
// 108: 75 0f                         jne     0x119 <_JIT_ENTRY+0x119>
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: 4c 89 e7                      movq    %r12, %rdi
// 117: ff d0                         callq   *%rax
// 119: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 11e: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 122: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 127: 48 85 c9                      testq   %rcx, %rcx
// 12a: 0f 84 b0 01 00 00             je      0x2e0 <_JIT_ENTRY+0x2e0>
// 130: 48 89 08                      movq    %rcx, (%rax)
// 133: 49 8b 47 10                   movq    0x10(%r15), %rax
// 137: 48 8b 00                      movq    (%rax), %rax
// 13a: 84 c0                         testb   %al, %al
// 13c: 0f 84 d7 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  _Py_HandlePending
// 14c: 4c 89 ff                      movq    %r15, %rdi
// 14f: ff d0                         callq   *%rax
// 151: 85 c0                         testl   %eax, %eax
// 153: 0f 84 c0 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 159: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 15e: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 162: e9 79 01 00 00                jmp     0x2e0 <_JIT_ENTRY+0x2e0>
// 167: 49 29 fe                      subq    %rdi, %r14
// 16a: 49 83 c6 b8                   addq    $-0x48, %r14
// 16e: 49 c1 ee 03                   shrq    $0x3, %r14
// 172: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 176: 48 8b 07                      movq    (%rdi), %rax
// 179: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017b:  R_X86_64_64  _JIT_TARGET
// 183: 89 c9                         movl    %ecx, %ecx
// 185: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 189: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 18f: e9 5c 01 00 00                jmp     0x2f0 <_JIT_ENTRY+0x2f0>
// 194: 41 83 fd 02                   cmpl    $0x2, %r13d
// 198: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 19e: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1a2: 31 db                         xorl    %ebx, %ebx
// 1a4: eb 16                         jmp     0x1bc <_JIT_ENTRY+0x1bc>
// 1a6: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 1b0: 48 ff c3                      incq    %rbx
// 1b3: 49 39 df                      cmpq    %rbx, %r15
// 1b6: 0f 84 04 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1bc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1c1: 49 8b 45 00                   movq    (%r13), %rax
// 1c5: 48 85 c0                      testq   %rax, %rax
// 1c8: 7e 06                         jle     0x1d0 <_JIT_ENTRY+0x1d0>
// 1ca: 85 c0                         testl   %eax, %eax
// 1cc: 78 e2                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1ce: eb 26                         jmp     0x1f6 <_JIT_ENTRY+0x1f6>
// 1d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1
// 1da: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1df: 4c 89 ea                      movq    %r13, %rdx
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_NegativeRefcount
// 1ec: ff d0                         callq   *%rax
// 1ee: 49 8b 45 00                   movq    (%r13), %rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 78 ba                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 200: ff d0                         callq   *%rax
// 202: 49 ff 4d 00                   decq    (%r13)
// 206: 75 a8                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 208: 4c 89 ef                      movq    %r13, %rdi
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_Dealloc
// 215: ff d0                         callq   *%rax
// 217: eb 97                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_OPARG
// 223: f7 d0                         notl    %eax
// 225: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 22a: 48 63 d8                      movslq  %eax, %rbx
// 22d: 4d 8b 64 de f0                movq    -0x10(%r14,%rbx,8), %r12
// 232: 4d 8b 6c de f8                movq    -0x8(%r14,%rbx,8), %r13
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _PyLong_Subtract
// 241: 4c 89 e7                      movq    %r12, %rdi
// 244: 4c 89 ee                      movq    %r13, %rsi
// 247: ff d0                         callq   *%rax
// 249: 49 89 c7                      movq    %rax, %r15
// 24c: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 251: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000253:  R_X86_64_64  PyInterpreterState_Get
// 25b: 75 1e                         jne     0x27b <_JIT_ENTRY+0x27b>
// 25d: ff d5                         callq   *%rbp
// 25f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 266: 49 ff 4d 00                   decq    (%r13)
// 26a: 75 0f                         jne     0x27b <_JIT_ENTRY+0x27b>
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  PyObject_Free
// 276: 4c 89 ef                      movq    %r13, %rdi
// 279: ff d0                         callq   *%rax
// 27b: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 281: 75 1e                         jne     0x2a1 <_JIT_ENTRY+0x2a1>
// 283: ff d5                         callq   *%rbp
// 285: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 28c: 49 ff 0c 24                   decq    (%r12)
// 290: 75 0f                         jne     0x2a1 <_JIT_ENTRY+0x2a1>
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  PyObject_Free
// 29c: 4c 89 e7                      movq    %r12, %rdi
// 29f: ff d0                         callq   *%rax
// 2a1: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 2a5: 48 83 c0 f0                   addq    $-0x10, %rax
// 2a9: 4d 85 ff                      testq   %r15, %r15
// 2ac: 74 2e                         je      0x2dc <_JIT_ENTRY+0x2dc>
// 2ae: 49 8d 34 de                   leaq    (%r14,%rbx,8), %rsi
// 2b2: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2b6: 4c 89 38                      movq    %r15, (%rax)
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _JIT_CONTINUE
// 2c3: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2c7: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2cc: 48 83 c4 28                   addq    $0x28, %rsp
// 2d0: 5b                            popq    %rbx
// 2d1: 41 5c                         popq    %r12
// 2d3: 41 5d                         popq    %r13
// 2d5: 41 5e                         popq    %r14
// 2d7: 41 5f                         popq    %r15
// 2d9: 5d                            popq    %rbp
// 2da: ff e0                         jmpq    *%rax
// 2dc: 48 8b 1c 24                   movq    (%rsp), %rbx
// 2e0: 48 29 d8                      subq    %rbx, %rax
// 2e3: 48 83 c0 b8                   addq    $-0x48, %rax
// 2e7: 48 c1 e8 03                   shrq    $0x3, %rax
// 2eb: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2ee: 31 c0                         xorl    %eax, %eax
// 2f0: 48 83 c4 28                   addq    $0x28, %rsp
// 2f4: 5b                            popq    %rbx
// 2f5: 41 5c                         popq    %r12
// 2f7: 41 5d                         popq    %r13
// 2f9: 41 5e                         popq    %r14
// 2fb: 41 5f                         popq    %r15
// 2fd: 5d                            popq    %rbp
// 2fe: c3                            retq
// 2ff: 
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_OP_SUBTRACT_INT_code_body[768] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x00, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xef, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xd4, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb0, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xc0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0x79, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x5c, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x16, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x04, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x64, 0xde, 0xf0, 0x4d, 0x8b, 0x6c, 0xde, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc7, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x83, 0xc0, 0xf0, 0x4d, 0x85, 0xff, 0x74, 0x2e, 0x49, 0x8d, 0x34, 0xde, 0x48, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x1c, 0x24, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_OP_SUBTRACT_INT_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Subtract, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_OP_SUBTRACT_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_OP_SUBTRACT_INT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_BINARY_SLICE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_BINARY_SLICE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f6 00 00 00             je      0x15d <_JIT_ENTRY+0x15d>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e5 00 00 00             je      0x15d <_JIT_ENTRY+0x15d>
// 78: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 7d: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 82: 48 89 14 24                   movq    %rdx, (%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 41 0f 94 c7                   sete    %r15b
// 96: 89 da                         movl    %ebx, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 41 84 c7                      testb   %al, %r15b
// bb: 0f 84 c9 00 00 00             je      0x18a <_JIT_ENTRY+0x18a>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e3: 4c 89 e2                      movq    %r12, %rdx
// e6: ff d0                         callq   *%rax
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 85 c0                         testl   %eax, %eax
// ee: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// f3: 48 8b 1c 24                   movq    (%rsp), %rbx
// f7: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// fc: 78 16                         js      0x114 <_JIT_ENTRY+0x114>
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 108: ff d0                         callq   *%rax
// 10a: 49 ff 0c 24                   decq    (%r12)
// 10e: 0f 84 94 01 00 00             je      0x2a8 <_JIT_ENTRY+0x2a8>
// 114: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 118: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 11d: 48 85 c9                      testq   %rcx, %rcx
// 120: 0f 84 34 02 00 00             je      0x35a <_JIT_ENTRY+0x35a>
// 126: 48 89 08                      movq    %rcx, (%rax)
// 129: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 12d: 48 8b 00                      movq    (%rax), %rax
// 130: 84 c0                         testb   %al, %al
// 132: 0f 84 d1 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_HandlePending
// 142: 48 89 df                      movq    %rbx, %rdi
// 145: ff d0                         callq   *%rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 0f 84 ba 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 14f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 154: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 158: e9 fd 01 00 00                jmp     0x35a <_JIT_ENTRY+0x35a>
// 15d: 49 29 fe                      subq    %rdi, %r14
// 160: 49 83 c6 b8                   addq    $-0x48, %r14
// 164: 49 c1 ee 03                   shrq    $0x3, %r14
// 168: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 16c: 48 8b 07                      movq    (%rdi), %rax
// 16f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000171:  R_X86_64_64  _JIT_TARGET
// 179: 89 c9                         movl    %ecx, %ecx
// 17b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 17f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 185: e9 e0 01 00 00                jmp     0x36a <_JIT_ENTRY+0x36a>
// 18a: 83 fb 02                      cmpl    $0x2, %ebx
// 18d: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 193: 44 0f 43 fb                   cmovael %ebx, %r15d
// 197: 31 db                         xorl    %ebx, %ebx
// 199: eb 11                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 df                      cmpq    %rbx, %r15
// 1a6: 0f 84 15 ff ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 63 d8                      movslq  %eax, %rbx
// 21d: 49 8b 74 de f8                movq    -0x8(%r14,%rbx,8), %rsi
// 222: 4d 8b 64 de e8                movq    -0x18(%r14,%rbx,8), %r12
// 227: 49 8b 7c de f0                movq    -0x10(%r14,%rbx,8), %rdi
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 236: ff d0                         callq   *%rax
// 238: 48 85 c0                      testq   %rax, %rax
// 23b: 0f 84 8d 00 00 00             je      0x2ce <_JIT_ENTRY+0x2ce>
// 241: 49 89 c7                      movq    %rax, %r15
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  PyObject_GetItem
// 24e: 4c 89 e7                      movq    %r12, %rdi
// 251: 4c 89 fe                      movq    %r15, %rsi
// 254: ff d0                         callq   *%rax
// 256: 49 89 c5                      movq    %rax, %r13
// 259: 49 8b 07                      movq    (%r15), %rax
// 25c: 48 85 c0                      testq   %rax, %rax
// 25f: 7f 21                         jg      0x282 <_JIT_ENTRY+0x282>
// 261: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000263:  R_X86_64_64  .rodata.str1.1
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _Py_NegativeRefcount
// 275: be 99 01 00 00                movl    $0x199, %esi            # imm = 0x199
// 27a: 4c 89 fa                      movq    %r15, %rdx
// 27d: ff d0                         callq   *%rax
// 27f: 49 8b 07                      movq    (%r15), %rax
// 282: 85 c0                         testl   %eax, %eax
// 284: 78 4b                         js      0x2d1 <_JIT_ENTRY+0x2d1>
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 290: ff d0                         callq   *%rax
// 292: 49 ff 0f                      decq    (%r15)
// 295: 75 3a                         jne     0x2d1 <_JIT_ENTRY+0x2d1>
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _Py_Dealloc
// 2a1: 4c 89 ff                      movq    %r15, %rdi
// 2a4: ff d0                         callq   *%rax
// 2a6: eb 29                         jmp     0x2d1 <_JIT_ENTRY+0x2d1>
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _Py_Dealloc
// 2b2: 4c 89 e7                      movq    %r12, %rdi
// 2b5: ff d0                         callq   *%rax
// 2b7: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 2bb: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 2c0: 48 85 c9                      testq   %rcx, %rcx
// 2c3: 0f 85 5d fe ff ff             jne     0x126 <_JIT_ENTRY+0x126>
// 2c9: e9 8c 00 00 00                jmp     0x35a <_JIT_ENTRY+0x35a>
// 2ce: 45 31 ed                      xorl    %r13d, %r13d
// 2d1: 49 8b 04 24                   movq    (%r12), %rax
// 2d5: 48 85 c0                      testq   %rax, %rax
// 2d8: 7f 22                         jg      0x2fc <_JIT_ENTRY+0x2fc>
// 2da: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002dc:  R_X86_64_64  .rodata.str1.1
// 2e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e6:  R_X86_64_64  _Py_NegativeRefcount
// 2ee: be 9b 01 00 00                movl    $0x19b, %esi            # imm = 0x19B
// 2f3: 4c 89 e2                      movq    %r12, %rdx
// 2f6: ff d0                         callq   *%rax
// 2f8: 49 8b 04 24                   movq    (%r12), %rax
// 2fc: 85 c0                         testl   %eax, %eax
// 2fe: 78 21                         js      0x321 <_JIT_ENTRY+0x321>
// 300: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000302:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 30a: ff d0                         callq   *%rax
// 30c: 49 ff 0c 24                   decq    (%r12)
// 310: 75 0f                         jne     0x321 <_JIT_ENTRY+0x321>
// 312: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000314:  R_X86_64_64  _Py_Dealloc
// 31c: 4c 89 e7                      movq    %r12, %rdi
// 31f: ff d0                         callq   *%rax
// 321: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 325: 48 83 c0 e8                   addq    $-0x18, %rax
// 329: 4d 85 ed                      testq   %r13, %r13
// 32c: 74 2c                         je      0x35a <_JIT_ENTRY+0x35a>
// 32e: 49 8d 34 de                   leaq    (%r14,%rbx,8), %rsi
// 332: 48 83 c6 f0                   addq    $-0x10, %rsi
// 336: 4c 89 28                      movq    %r13, (%rax)
// 339: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033b:  R_X86_64_64  _JIT_CONTINUE
// 343: 48 89 ef                      movq    %rbp, %rdi
// 346: 48 8b 14 24                   movq    (%rsp), %rdx
// 34a: 48 83 c4 28                   addq    $0x28, %rsp
// 34e: 5b                            popq    %rbx
// 34f: 41 5c                         popq    %r12
// 351: 41 5d                         popq    %r13
// 353: 41 5e                         popq    %r14
// 355: 41 5f                         popq    %r15
// 357: 5d                            popq    %rbp
// 358: ff e0                         jmpq    *%rax
// 35a: 48 29 e8                      subq    %rbp, %rax
// 35d: 48 83 c0 b8                   addq    $-0x48, %rax
// 361: 48 c1 e8 03                   shrq    $0x3, %rax
// 365: 89 45 40                      movl    %eax, 0x40(%rbp)
// 368: 31 c0                         xorl    %eax, %eax
// 36a: 48 83 c4 28                   addq    $0x28, %rsp
// 36e: 5b                            popq    %rbx
// 36f: 41 5c                         popq    %r12
// 371: 41 5d                         popq    %r13
// 373: 41 5e                         popq    %r14
// 375: 41 5f                         popq    %r15
// 377: 5d                            popq    %rbp
// 378: c3                            retq
// 379: 
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_SLICE_code_body[890] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf6, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe5, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x94, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x34, 0x02, 0x00, 0x00, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xba, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0xfd, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xe0, 0x01, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfb, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x15, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x49, 0x8b, 0x74, 0xde, 0xf8, 0x4d, 0x8b, 0x64, 0xde, 0xe8, 0x49, 0x8b, 0x7c, 0xde, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x8d, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x4b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x85, 0x5d, 0xfe, 0xff, 0xff, 0xe9, 0x8c, 0x00, 0x00, 0x00, 0x45, 0x31, 0xed, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x9b, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x83, 0xc0, 0xe8, 0x4d, 0x85, 0xed, 0x74, 0x2c, 0x49, 0x8d, 0x34, 0xde, 0x48, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_SLICE_code_holes[25] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x314, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_SLICE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_SLICE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_BINARY_SUBSCR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f5 00 00 00             je      0x15c <_JIT_ENTRY+0x15c>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e4 00 00 00             je      0x15c <_JIT_ENTRY+0x15c>
// 78: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 7d: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 82: 48 89 14 24                   movq    %rdx, (%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 c9 00 00 00             je      0x189 <_JIT_ENTRY+0x189>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// f2: 48 8b 1c 24                   movq    (%rsp), %rbx
// f6: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// fb: 78 16                         js      0x113 <_JIT_ENTRY+0x113>
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 107: ff d0                         callq   *%rax
// 109: 49 ff 0c 24                   decq    (%r12)
// 10d: 0f 84 ff 01 00 00             je      0x312 <_JIT_ENTRY+0x312>
// 113: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 118: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 11c: 4d 85 ff                      testq   %r15, %r15
// 11f: 0f 84 0e 02 00 00             je      0x333 <_JIT_ENTRY+0x333>
// 125: 4c 89 38                      movq    %r15, (%rax)
// 128: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 12c: 48 8b 00                      movq    (%rax), %rax
// 12f: 84 c0                         testb   %al, %al
// 131: 0f 84 d2 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_HandlePending
// 141: 48 89 df                      movq    %rbx, %rdi
// 144: ff d0                         callq   *%rax
// 146: 85 c0                         testl   %eax, %eax
// 148: 0f 84 bb 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 14e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 153: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 157: e9 d7 01 00 00                jmp     0x333 <_JIT_ENTRY+0x333>
// 15c: 49 29 fe                      subq    %rdi, %r14
// 15f: 49 83 c6 b8                   addq    $-0x48, %r14
// 163: 49 c1 ee 03                   shrq    $0x3, %r14
// 167: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 16b: 48 8b 07                      movq    (%rdi), %rax
// 16e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000170:  R_X86_64_64  _JIT_TARGET
// 178: 89 c9                         movl    %ecx, %ecx
// 17a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 17e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 184: e9 ba 01 00 00                jmp     0x343 <_JIT_ENTRY+0x343>
// 189: 41 83 fd 02                   cmpl    $0x2, %r13d
// 18d: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 193: 45 0f 43 fd                   cmovael %r13d, %r15d
// 197: 31 db                         xorl    %ebx, %ebx
// 199: eb 11                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 df                      cmpq    %rbx, %r15
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 63 d8                      movslq  %eax, %rbx
// 21d: 4d 8b 7c de f0                movq    -0x10(%r14,%rbx,8), %r15
// 222: 4d 8b 6c de f8                movq    -0x8(%r14,%rbx,8), %r13
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  PyObject_GetItem
// 231: 4c 89 ff                      movq    %r15, %rdi
// 234: 4c 89 ee                      movq    %r13, %rsi
// 237: ff d0                         callq   *%rax
// 239: 49 89 c4                      movq    %rax, %r12
// 23c: 49 8b 07                      movq    (%r15), %rax
// 23f: 48 85 c0                      testq   %rax, %rax
// 242: 7f 21                         jg      0x265 <_JIT_ENTRY+0x265>
// 244: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000246:  R_X86_64_64  .rodata.str1.1
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_NegativeRefcount
// 258: be 81 01 00 00                movl    $0x181, %esi            # imm = 0x181
// 25d: 4c 89 fa                      movq    %r15, %rdx
// 260: ff d0                         callq   *%rax
// 262: 49 8b 07                      movq    (%r15), %rax
// 265: 85 c0                         testl   %eax, %eax
// 267: 78 20                         js      0x289 <_JIT_ENTRY+0x289>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 273: ff d0                         callq   *%rax
// 275: 49 ff 0f                      decq    (%r15)
// 278: 75 0f                         jne     0x289 <_JIT_ENTRY+0x289>
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  _Py_Dealloc
// 284: 4c 89 ff                      movq    %r15, %rdi
// 287: ff d0                         callq   *%rax
// 289: 49 8b 45 00                   movq    (%r13), %rax
// 28d: 48 85 c0                      testq   %rax, %rax
// 290: 7f 22                         jg      0x2b4 <_JIT_ENTRY+0x2b4>
// 292: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000294:  R_X86_64_64  .rodata.str1.1
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _Py_NegativeRefcount
// 2a6: be 82 01 00 00                movl    $0x182, %esi            # imm = 0x182
// 2ab: 4c 89 ea                      movq    %r13, %rdx
// 2ae: ff d0                         callq   *%rax
// 2b0: 49 8b 45 00                   movq    (%r13), %rax
// 2b4: 85 c0                         testl   %eax, %eax
// 2b6: 78 21                         js      0x2d9 <_JIT_ENTRY+0x2d9>
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c2: ff d0                         callq   *%rax
// 2c4: 49 ff 4d 00                   decq    (%r13)
// 2c8: 75 0f                         jne     0x2d9 <_JIT_ENTRY+0x2d9>
// 2ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cc:  R_X86_64_64  _Py_Dealloc
// 2d4: 4c 89 ef                      movq    %r13, %rdi
// 2d7: ff d0                         callq   *%rax
// 2d9: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 2dd: 48 83 c0 f0                   addq    $-0x10, %rax
// 2e1: 4d 85 e4                      testq   %r12, %r12
// 2e4: 74 4d                         je      0x333 <_JIT_ENTRY+0x333>
// 2e6: 49 8d 34 de                   leaq    (%r14,%rbx,8), %rsi
// 2ea: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2ee: 4c 89 20                      movq    %r12, (%rax)
// 2f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f3:  R_X86_64_64  _JIT_CONTINUE
// 2fb: 48 89 ef                      movq    %rbp, %rdi
// 2fe: 48 8b 14 24                   movq    (%rsp), %rdx
// 302: 48 83 c4 28                   addq    $0x28, %rsp
// 306: 5b                            popq    %rbx
// 307: 41 5c                         popq    %r12
// 309: 41 5d                         popq    %r13
// 30b: 41 5e                         popq    %r14
// 30d: 41 5f                         popq    %r15
// 30f: 5d                            popq    %rbp
// 310: ff e0                         jmpq    *%rax
// 312: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000314:  R_X86_64_64  _Py_Dealloc
// 31c: 4c 89 e7                      movq    %r12, %rdi
// 31f: ff d0                         callq   *%rax
// 321: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 326: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 32a: 4d 85 ff                      testq   %r15, %r15
// 32d: 0f 85 f2 fd ff ff             jne     0x125 <_JIT_ENTRY+0x125>
// 333: 48 29 e8                      subq    %rbp, %rax
// 336: 48 83 c0 b8                   addq    $-0x48, %rax
// 33a: 48 c1 e8 03                   shrq    $0x3, %rax
// 33e: 89 45 40                      movl    %eax, 0x40(%rbp)
// 341: 31 c0                         xorl    %eax, %eax
// 343: 48 83 c4 28                   addq    $0x28, %rsp
// 347: 5b                            popq    %rbx
// 348: 41 5c                         popq    %r12
// 34a: 41 5d                         popq    %r13
// 34c: 41 5e                         popq    %r14
// 34e: 41 5f                         popq    %r15
// 350: 5d                            popq    %rbp
// 351: c3                            retq
// 352: 
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_code_body[851] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf5, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe4, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xff, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x0e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xbb, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0xd7, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xba, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x7c, 0xde, 0xf0, 0x4d, 0x8b, 0x6c, 0xde, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x81, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x82, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x83, 0xc0, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x4d, 0x49, 0x8d, 0x34, 0xde, 0x48, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xff, 0x0f, 0x85, 0xf2, 0xfd, 0xff, 0xff, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_code_holes[24] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x314, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_data_holes[1];

// _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_DICT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_DICT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fd                      movq    %rdi, %rbp
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 0f 01 00 00             je      0x179 <_JIT_ENTRY+0x179>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 fe 00 00 00             je      0x179 <_JIT_ENTRY+0x179>
// 7b: 4c 89 54 24 20                movq    %r10, 0x20(%rsp)
// 80: 4c 89 4c 24 28                movq    %r9, 0x28(%rsp)
// 85: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 8a: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 8f: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 41 0f 94 c6                   sete    %r14b
// 9a: 89 da                         movl    %ebx, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _JIT_OPARG
// b6: 66 85 c0                      testw   %ax, %ax
// b9: 0f 94 c0                      sete    %al
// bc: 41 84 c6                      testb   %al, %r14b
// bf: 0f 84 ef 00 00 00             je      0x1b4 <_JIT_ENTRY+0x1b4>
// c5: 49 8b 04 24                   movq    (%r12), %rax
// c9: 48 85 c0                      testq   %rax, %rax
// cc: 7f 22                         jg      0xf0 <_JIT_ENTRY+0xf0>
// ce: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d0:  R_X86_64_64  .rodata.str1.1
// d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000da:  R_X86_64_64  _Py_NegativeRefcount
// e2: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e7: 4c 89 e2                      movq    %r12, %rdx
// ea: ff d0                         callq   *%rax
// ec: 49 8b 04 24                   movq    (%r12), %rax
// f0: 85 c0                         testl   %eax, %eax
// f2: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// f7: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// fc: 4c 8b 74 24 28                movq    0x28(%rsp), %r14
// 101: 78 21                         js      0x124 <_JIT_ENTRY+0x124>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10d: ff d0                         callq   *%rax
// 10f: 49 ff 0c 24                   decq    (%r12)
// 113: 75 0f                         jne     0x124 <_JIT_ENTRY+0x124>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_Dealloc
// 11f: 4c 89 e7                      movq    %r12, %rdi
// 122: ff d0                         callq   *%rax
// 124: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 129: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 12d: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 132: 48 85 c9                      testq   %rcx, %rcx
// 135: 74 30                         je      0x167 <_JIT_ENTRY+0x167>
// 137: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 13b: 48 89 08                      movq    %rcx, (%rax)
// 13e: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 142: 48 8b 00                      movq    (%rax), %rax
// 145: 84 c0                         testb   %al, %al
// 147: 0f 84 ec 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_HandlePending
// 157: 48 89 df                      movq    %rbx, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 0f 84 d5 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 164: 4c 89 f0                      movq    %r14, %rax
// 167: 48 29 e8                      subq    %rbp, %rax
// 16a: 48 83 c0 b8                   addq    $-0x48, %rax
// 16e: 48 c1 e8 03                   shrq    $0x3, %rax
// 172: 89 45 40                      movl    %eax, 0x40(%rbp)
// 175: 31 c0                         xorl    %eax, %eax
// 177: eb 2c                         jmp     0x1a5 <_JIT_ENTRY+0x1a5>
// 179: 4d 89 fe                      movq    %r15, %r14
// 17c: 49 29 ee                      subq    %rbp, %r14
// 17f: 49 83 c6 b8                   addq    $-0x48, %r14
// 183: 49 c1 ee 03                   shrq    $0x3, %r14
// 187: 44 89 75 40                   movl    %r14d, 0x40(%rbp)
// 18b: 48 8b 45 00                   movq    (%rbp), %rax
// 18f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000191:  R_X86_64_64  _JIT_TARGET
// 199: 89 c9                         movl    %ecx, %ecx
// 19b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 19f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1a5: 48 83 c4 38                   addq    $0x38, %rsp
// 1a9: 5b                            popq    %rbx
// 1aa: 41 5c                         popq    %r12
// 1ac: 41 5d                         popq    %r13
// 1ae: 41 5e                         popq    %r14
// 1b0: 41 5f                         popq    %r15
// 1b2: 5d                            popq    %rbp
// 1b3: c3                            retq
// 1b4: 83 fb 02                      cmpl    $0x2, %ebx
// 1b7: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1bd: 44 0f 43 f3                   cmovael %ebx, %r14d
// 1c1: 31 db                         xorl    %ebx, %ebx
// 1c3: eb 17                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 1d0: 48 ff c3                      incq    %rbx
// 1d3: 49 39 de                      cmpq    %rbx, %r14
// 1d6: 0f 84 e9 fe ff ff             je      0xc5 <_JIT_ENTRY+0xc5>
// 1dc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 48 63 d8                      movslq  %eax, %rbx
// 24d: 4d 8b 6c df f0                movq    -0x10(%r15,%rbx,8), %r13
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  PyDict_Type
// 25c: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 260: 0f 85 16 ff ff ff             jne     0x17c <_JIT_ENTRY+0x17c>
// 266: 4d 8b 64 df f8                movq    -0x8(%r15,%rbx,8), %r12
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  PyDict_GetItemRef
// 275: 48 8d 54 24 30                leaq    0x30(%rsp), %rdx
// 27a: 4c 89 ef                      movq    %r13, %rdi
// 27d: 4c 89 e6                      movq    %r12, %rsi
// 280: ff d0                         callq   *%rax
// 282: 89 c5                         movl    %eax, %ebp
// 284: 85 c0                         testl   %eax, %eax
// 286: 74 0f                         je      0x297 <_JIT_ENTRY+0x297>
// 288: 49 8b 45 00                   movq    (%r13), %rax
// 28c: 48 85 c0                      testq   %rax, %rax
// 28f: 7e 1e                         jle     0x2af <_JIT_ENTRY+0x2af>
// 291: 85 c0                         testl   %eax, %eax
// 293: 79 40                         jns     0x2d5 <_JIT_ENTRY+0x2d5>
// 295: eb 5f                         jmp     0x2f6 <_JIT_ENTRY+0x2f6>
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _PyErr_SetKeyError
// 2a1: 4c 89 e7                      movq    %r12, %rdi
// 2a4: ff d0                         callq   *%rax
// 2a6: 49 8b 45 00                   movq    (%r13), %rax
// 2aa: 48 85 c0                      testq   %rax, %rax
// 2ad: 7f e2                         jg      0x291 <_JIT_ENTRY+0x291>
// 2af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b1:  R_X86_64_64  .rodata.str1.1
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_NegativeRefcount
// 2c3: be 0c 02 00 00                movl    $0x20c, %esi            # imm = 0x20C
// 2c8: 4c 89 ea                      movq    %r13, %rdx
// 2cb: ff d0                         callq   *%rax
// 2cd: 49 8b 45 00                   movq    (%r13), %rax
// 2d1: 85 c0                         testl   %eax, %eax
// 2d3: 78 21                         js      0x2f6 <_JIT_ENTRY+0x2f6>
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2df: ff d0                         callq   *%rax
// 2e1: 49 ff 4d 00                   decq    (%r13)
// 2e5: 75 0f                         jne     0x2f6 <_JIT_ENTRY+0x2f6>
// 2e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e9:  R_X86_64_64  _Py_Dealloc
// 2f1: 4c 89 ef                      movq    %r13, %rdi
// 2f4: ff d0                         callq   *%rax
// 2f6: 49 8b 04 24                   movq    (%r12), %rax
// 2fa: 48 85 c0                      testq   %rax, %rax
// 2fd: 7f 22                         jg      0x321 <_JIT_ENTRY+0x321>
// 2ff: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000301:  R_X86_64_64  .rodata.str1.1
// 309: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030b:  R_X86_64_64  _Py_NegativeRefcount
// 313: be 0d 02 00 00                movl    $0x20d, %esi            # imm = 0x20D
// 318: 4c 89 e2                      movq    %r12, %rdx
// 31b: ff d0                         callq   *%rax
// 31d: 49 8b 04 24                   movq    (%r12), %rax
// 321: 85 c0                         testl   %eax, %eax
// 323: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 328: 78 21                         js      0x34b <_JIT_ENTRY+0x34b>
// 32a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 334: ff d0                         callq   *%rax
// 336: 49 ff 0c 24                   decq    (%r12)
// 33a: 75 0f                         jne     0x34b <_JIT_ENTRY+0x34b>
// 33c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033e:  R_X86_64_64  _Py_Dealloc
// 346: 4c 89 e7                      movq    %r12, %rdi
// 349: ff d0                         callq   *%rax
// 34b: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 34f: 48 83 c0 f0                   addq    $-0x10, %rax
// 353: 85 ed                         testl   %ebp, %ebp
// 355: 7e 32                         jle     0x389 <_JIT_ENTRY+0x389>
// 357: 49 8d 34 df                   leaq    (%r15,%rbx,8), %rsi
// 35b: 48 83 c6 f8                   addq    $-0x8, %rsi
// 35f: 48 8b 4c 24 30                movq    0x30(%rsp), %rcx
// 364: 48 89 08                      movq    %rcx, (%rax)
// 367: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000369:  R_X86_64_64  _JIT_CONTINUE
// 371: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 376: 4c 89 f2                      movq    %r14, %rdx
// 379: 48 83 c4 38                   addq    $0x38, %rsp
// 37d: 5b                            popq    %rbx
// 37e: 41 5c                         popq    %r12
// 380: 41 5d                         popq    %r13
// 382: 41 5e                         popq    %r14
// 384: 41 5f                         popq    %r15
// 386: 5d                            popq    %rbp
// 387: ff e0                         jmpq    *%rax
// 389: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 38e: e9 d4 fd ff ff                jmp     0x167 <_JIT_ENTRY+0x167>
// 393: 
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_DICT_code_body[916] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd7, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x0f, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xfe, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x20, 0x4c, 0x89, 0x4c, 0x24, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xef, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x28, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x30, 0x4f, 0x8d, 0x34, 0xf7, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xd5, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xeb, 0x2c, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xee, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x75, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x17, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0xe9, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xdf, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x16, 0xff, 0xff, 0xff, 0x4d, 0x8b, 0x64, 0xdf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x30, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x85, 0xc0, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0d, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x83, 0xc0, 0xf0, 0x85, 0xed, 0x7e, 0x32, 0x49, 0x8d, 0x34, 0xdf, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x8b, 0x4c, 0x24, 0x30, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0xe9, 0xd4, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_DICT_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetKeyError, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x30b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x32c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x369, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_DICT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_LIST_INT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_LIST_INT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fd                      movq    %rdi, %rbp
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 0d 01 00 00             je      0x177 <_JIT_ENTRY+0x177>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 fc 00 00 00             je      0x177 <_JIT_ENTRY+0x177>
// 7b: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 80: 4c 89 4c 24 08                movq    %r9, 0x8(%rsp)
// 85: 48 89 14 24                   movq    %rdx, (%rsp)
// 89: 48 89 6c 24 20                movq    %rbp, 0x20(%rsp)
// 8e: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 41 0f 94 c6                   sete    %r14b
// 99: 89 da                         movl    %ebx, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c6                      testb   %al, %r14b
// be: 0f 84 ed 00 00 00             je      0x1b1 <_JIT_ENTRY+0x1b1>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// f6: 4c 8b 34 24                   movq    (%rsp), %r14
// fa: 78 21                         js      0x11d <_JIT_ENTRY+0x11d>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 106: ff d0                         callq   *%rax
// 108: 49 ff 0c 24                   decq    (%r12)
// 10c: 75 0f                         jne     0x11d <_JIT_ENTRY+0x11d>
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_Dealloc
// 118: 4c 89 e7                      movq    %r12, %rdi
// 11b: ff d0                         callq   *%rax
// 11d: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 122: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 126: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 12b: 48 85 d2                      testq   %rdx, %rdx
// 12e: 74 35                         je      0x165 <_JIT_ENTRY+0x165>
// 130: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 135: 49 8d 1c cf                   leaq    (%r15,%rcx,8), %rbx
// 139: 48 89 10                      movq    %rdx, (%rax)
// 13c: 49 8b 46 10                   movq    0x10(%r14), %rax
// 140: 48 8b 00                      movq    (%rax), %rax
// 143: 84 c0                         testb   %al, %al
// 145: 0f 84 ee 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_HandlePending
// 155: 4c 89 f7                      movq    %r14, %rdi
// 158: ff d0                         callq   *%rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 84 d7 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 162: 48 89 d8                      movq    %rbx, %rax
// 165: 48 29 e8                      subq    %rbp, %rax
// 168: 48 83 c0 b8                   addq    $-0x48, %rax
// 16c: 48 c1 e8 03                   shrq    $0x3, %rax
// 170: 89 45 40                      movl    %eax, 0x40(%rbp)
// 173: 31 c0                         xorl    %eax, %eax
// 175: eb 2b                         jmp     0x1a2 <_JIT_ENTRY+0x1a2>
// 177: 4c 89 fb                      movq    %r15, %rbx
// 17a: 48 29 eb                      subq    %rbp, %rbx
// 17d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 181: 48 c1 eb 03                   shrq    $0x3, %rbx
// 185: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 188: 48 8b 45 00                   movq    (%rbp), %rax
// 18c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018e:  R_X86_64_64  _JIT_TARGET
// 196: 89 c9                         movl    %ecx, %ecx
// 198: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 19c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1a2: 48 83 c4 28                   addq    $0x28, %rsp
// 1a6: 5b                            popq    %rbx
// 1a7: 41 5c                         popq    %r12
// 1a9: 41 5d                         popq    %r13
// 1ab: 41 5e                         popq    %r14
// 1ad: 41 5f                         popq    %r15
// 1af: 5d                            popq    %rbp
// 1b0: c3                            retq
// 1b1: 83 fb 02                      cmpl    $0x2, %ebx
// 1b4: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1ba: 44 0f 43 f3                   cmovael %ebx, %r14d
// 1be: 31 db                         xorl    %ebx, %ebx
// 1c0: eb 1a                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 1d0: 48 ff c3                      incq    %rbx
// 1d3: 49 39 de                      cmpq    %rbx, %r14
// 1d6: 0f 84 e8 fe ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 1dc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 4c 63 f0                      movslq  %eax, %r14
// 24d: 4f 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %r13
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  PyLong_Type
// 25c: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 260: 0f 85 14 ff ff ff             jne     0x17a <_JIT_ENTRY+0x17a>
// 266: 4f 8b 64 f7 f0                movq    -0x10(%r15,%r14,8), %r12
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  PyList_Type
// 275: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 27a: 0f 85 fa fe ff ff             jne     0x17a <_JIT_ENTRY+0x17a>
// 280: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 285: 0f 87 ef fe ff ff             ja      0x17a <_JIT_ENTRY+0x17a>
// 28b: 41 8b 45 18                   movl    0x18(%r13), %eax
// 28f: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 294: 0f 8e e0 fe ff ff             jle     0x17a <_JIT_ENTRY+0x17a>
// 29a: 49 8b 4c 24 18                movq    0x18(%r12), %rcx
// 29f: 48 8b 1c c1                   movq    (%rcx,%rax,8), %rbx
// 2a3: 8b 03                         movl    (%rbx), %eax
// 2a5: ff c0                         incl    %eax
// 2a7: 74 0e                         je      0x2b7 <_JIT_ENTRY+0x2b7>
// 2a9: 89 03                         movl    %eax, (%rbx)
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2b5: ff d0                         callq   *%rax
// 2b7: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2bc: 75 28                         jne     0x2e6 <_JIT_ENTRY+0x2e6>
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  PyInterpreterState_Get
// 2c8: ff d0                         callq   *%rax
// 2ca: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2d1: 49 ff 4d 00                   decq    (%r13)
// 2d5: 75 0f                         jne     0x2e6 <_JIT_ENTRY+0x2e6>
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  PyObject_Free
// 2e1: 4c 89 ef                      movq    %r13, %rdi
// 2e4: ff d0                         callq   *%rax
// 2e6: 49 8b 04 24                   movq    (%r12), %rax
// 2ea: 48 85 c0                      testq   %rax, %rax
// 2ed: 7f 22                         jg      0x311 <_JIT_ENTRY+0x311>
// 2ef: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f1:  R_X86_64_64  .rodata.str1.1
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _Py_NegativeRefcount
// 303: be cc 01 00 00                movl    $0x1cc, %esi            # imm = 0x1CC
// 308: 4c 89 e2                      movq    %r12, %rdx
// 30b: ff d0                         callq   *%rax
// 30d: 49 8b 04 24                   movq    (%r12), %rax
// 311: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 315: 49 83 c6 f8                   addq    $-0x8, %r14
// 319: 85 c0                         testl   %eax, %eax
// 31b: 78 21                         js      0x33e <_JIT_ENTRY+0x33e>
// 31d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 327: ff d0                         callq   *%rax
// 329: 49 ff 0c 24                   decq    (%r12)
// 32d: 75 0f                         jne     0x33e <_JIT_ENTRY+0x33e>
// 32f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000331:  R_X86_64_64  _Py_Dealloc
// 339: 4c 89 e7                      movq    %r12, %rdi
// 33c: ff d0                         callq   *%rax
// 33e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000340:  R_X86_64_64  _JIT_OPARG
// 348: f7 d0                         notl    %eax
// 34a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 34f: 48 98                         cltq
// 351: 49 89 5c c7 f0                movq    %rbx, -0x10(%r15,%rax,8)
// 356: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000358:  R_X86_64_64  _JIT_CONTINUE
// 360: 48 89 ef                      movq    %rbp, %rdi
// 363: 4c 89 f6                      movq    %r14, %rsi
// 366: 48 8b 14 24                   movq    (%rsp), %rdx
// 36a: 48 83 c4 28                   addq    $0x28, %rsp
// 36e: 5b                            popq    %rbx
// 36f: 41 5c                         popq    %r12
// 371: 41 5d                         popq    %r13
// 373: 41 5e                         popq    %r14
// 375: 41 5f                         popq    %r15
// 377: 5d                            popq    %rbp
// 378: ff e0                         jmpq    *%rax
// 37a: 
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_LIST_INT_code_body[891] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd7, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x0d, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xfc, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x6c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x8d, 0x1c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xee, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x4c, 0x89, 0xfb, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x1a, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0xe8, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x4f, 0x8b, 0x6c, 0xf7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x14, 0xff, 0xff, 0xff, 0x4f, 0x8b, 0x64, 0xf7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xfa, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xef, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xe0, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x8b, 0x1c, 0xc1, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcc, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x5c, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_LIST_INT_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x331, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x340, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x358, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_LIST_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_LIST_INT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_STR_INT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_STR_INT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 ff                      movq    %rdi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c1                   movzwl  %cx, %r8d
// 1f: 44 89 c0                      movl    %r8d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: 41 b9 fe ff ff ff             movl    $0xfffffffe, %r9d       # imm = 0xFFFFFFFE
// 31: 45 29 c1                      subl    %r8d, %r9d
// 34: 45 8d 70 01                   leal    0x1(%r8), %r14d
// 38: 0f b7 c9                      movzwl  %cx, %ecx
// 3b: 48 89 cf                      movq    %rcx, %rdi
// 3e: 48 f7 df                      negq    %rdi
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 45 0f 44 f0                   cmovel  %r8d, %r14d
// 48: 49 63 d9                      movslq  %r9d, %rbx
// 4b: 48 f7 d1                      notq    %rcx
// 4e: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 52: 4c 8b 24 de                   movq    (%rsi,%rbx,8), %r12
// 56: 49 8b 7c 24 08                movq    0x8(%r12), %rdi
// 5b: f6 87 ab 00 00 00 80          testb   $-0x80, 0xab(%rdi)
// 62: 0f 84 08 01 00 00             je      0x170 <_JIT_ENTRY+0x170>
// 68: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 70: 4d 85 c0                      testq   %r8, %r8
// 73: 0f 84 f7 00 00 00             je      0x170 <_JIT_ENTRY+0x170>
// 79: 4c 89 14 24                   movq    %r10, (%rsp)
// 7d: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 82: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// 87: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 8c: 48 8d 2c ce                   leaq    (%rsi,%rcx,8), %rbp
// 90: 48 85 c0                      testq   %rax, %rax
// 93: 41 0f 94 c7                   sete    %r15b
// 97: 44 89 f2                      movl    %r14d, %edx
// 9a: 4c 89 e7                      movq    %r12, %rdi
// 9d: 48 89 ee                      movq    %rbp, %rsi
// a0: 31 c9                         xorl    %ecx, %ecx
// a2: 41 ff d0                      callq   *%r8
// a5: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ac:  R_X86_64_64  _JIT_OPARG
// b4: 66 85 c0                      testw   %ax, %ax
// b7: 0f 94 c0                      sete    %al
// ba: 41 84 c7                      testb   %al, %r15b
// bd: 0f 84 e7 00 00 00             je      0x1aa <_JIT_ENTRY+0x1aa>
// c3: 49 8b 04 24                   movq    (%r12), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f 22                         jg      0xee <_JIT_ENTRY+0xee>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d8:  R_X86_64_64  _Py_NegativeRefcount
// e0: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e5: 4c 89 e2                      movq    %r12, %rdx
// e8: ff d0                         callq   *%rax
// ea: 49 8b 04 24                   movq    (%r12), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// f5: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// fa: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// ff: 78 16                         js      0x117 <_JIT_ENTRY+0x117>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10b: ff d0                         callq   *%rax
// 10d: 49 ff 0c 24                   decq    (%r12)
// 111: 0f 84 9b 01 00 00             je      0x2b2 <_JIT_ENTRY+0x2b2>
// 117: 48 8d 04 dd 00 00 00 00       leaq    (,%rbx,8), %rax
// 11f: 48 01 e8                      addq    %rbp, %rax
// 122: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 127: 48 85 d2                      testq   %rdx, %rdx
// 12a: 0f 84 aa 01 00 00             je      0x2da <_JIT_ENTRY+0x2da>
// 130: 48 8b 0c 24                   movq    (%rsp), %rcx
// 134: 4c 8d 34 cd 00 00 00 00       leaq    (,%rcx,8), %r14
// 13c: 49 01 ee                      addq    %rbp, %r14
// 13f: 48 89 10                      movq    %rdx, (%rax)
// 142: 49 8b 45 10                   movq    0x10(%r13), %rax
// 146: 48 8b 00                      movq    (%rax), %rax
// 149: 84 c0                         testb   %al, %al
// 14b: 0f 84 d8 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_HandlePending
// 15b: 4c 89 ef                      movq    %r13, %rdi
// 15e: ff d0                         callq   *%rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 0f 84 c1 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 168: 4c 89 f0                      movq    %r14, %rax
// 16b: e9 6a 01 00 00                jmp     0x2da <_JIT_ENTRY+0x2da>
// 170: 49 89 f6                      movq    %rsi, %r14
// 173: 4d 29 fe                      subq    %r15, %r14
// 176: 49 83 c6 b8                   addq    $-0x48, %r14
// 17a: 49 c1 ee 03                   shrq    $0x3, %r14
// 17e: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 182: 49 8b 07                      movq    (%r15), %rax
// 185: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000187:  R_X86_64_64  _JIT_TARGET
// 18f: 89 c9                         movl    %ecx, %ecx
// 191: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 195: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 19b: 48 83 c4 28                   addq    $0x28, %rsp
// 19f: 5b                            popq    %rbx
// 1a0: 41 5c                         popq    %r12
// 1a2: 41 5d                         popq    %r13
// 1a4: 41 5e                         popq    %r14
// 1a6: 41 5f                         popq    %r15
// 1a8: 5d                            popq    %rbp
// 1a9: c3                            retq
// 1aa: 41 83 fe 02                   cmpl    $0x2, %r14d
// 1ae: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1b4: 45 0f 43 fe                   cmovael %r14d, %r15d
// 1b8: 45 31 f6                      xorl    %r14d, %r14d
// 1bb: eb 0f                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bd: 0f 1f 00                      nopl    (%rax)
// 1c0: 49 ff c6                      incq    %r14
// 1c3: 4d 39 f7                      cmpq    %r14, %r15
// 1c6: 0f 84 f7 fe ff ff             je      0xc3 <_JIT_ENTRY+0xc3>
// 1cc: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: f7 d0                         notl    %eax
// 235: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23a: 48 98                         cltq
// 23c: 48 8b 7c c5 f8                movq    -0x8(%rbp,%rax,8), %rdi
// 241: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000243:  R_X86_64_64  PyLong_Type
// 24b: 48 39 4f 08                   cmpq    %rcx, 0x8(%rdi)
// 24f: 0f 85 1e ff ff ff             jne     0x173 <_JIT_ENTRY+0x173>
// 255: 4c 8b 64 c5 f0                movq    -0x10(%rbp,%rax,8), %r12
// 25a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025c:  R_X86_64_64  PyUnicode_Type
// 264: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 269: 0f 85 04 ff ff ff             jne     0x173 <_JIT_ENTRY+0x173>
// 26f: 48 83 7f 10 08                cmpq    $0x8, 0x10(%rdi)
// 274: 0f 87 f9 fe ff ff             ja      0x173 <_JIT_ENTRY+0x173>
// 27a: 8b 4f 18                      movl    0x18(%rdi), %ecx
// 27d: 49 39 4c 24 10                cmpq    %rcx, 0x10(%r12)
// 282: 0f 8e eb fe ff ff             jle     0x173 <_JIT_ENTRY+0x173>
// 288: 41 8b 54 24 20                movl    0x20(%r12), %edx
// 28d: 89 d6                         movl    %edx, %esi
// 28f: c1 ee 02                      shrl    $0x2, %esi
// 292: 83 e6 07                      andl    $0x7, %esi
// 295: 83 fe 02                      cmpl    $0x2, %esi
// 298: 74 56                         je      0x2f0 <_JIT_ENTRY+0x2f0>
// 29a: 83 fe 01                      cmpl    $0x1, %esi
// 29d: 75 61                         jne     0x300 <_JIT_ENTRY+0x300>
// 29f: f6 c2 20                      testb   $0x20, %dl
// 2a2: 75 68                         jne     0x30c <_JIT_ENTRY+0x30c>
// 2a4: 49 8b 54 24 38                movq    0x38(%r12), %rdx
// 2a9: 0f b6 0c 0a                   movzbl  (%rdx,%rcx), %ecx
// 2ad: e9 a8 00 00 00                jmp     0x35a <_JIT_ENTRY+0x35a>
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_Dealloc
// 2bc: 4c 89 e7                      movq    %r12, %rdi
// 2bf: ff d0                         callq   *%rax
// 2c1: 48 8d 04 dd 00 00 00 00       leaq    (,%rbx,8), %rax
// 2c9: 48 01 e8                      addq    %rbp, %rax
// 2cc: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2d1: 48 85 d2                      testq   %rdx, %rdx
// 2d4: 0f 85 56 fe ff ff             jne     0x130 <_JIT_ENTRY+0x130>
// 2da: 4c 29 f8                      subq    %r15, %rax
// 2dd: 48 83 c0 b8                   addq    $-0x48, %rax
// 2e1: 48 c1 e8 03                   shrq    $0x3, %rax
// 2e5: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 2e9: 31 c0                         xorl    %eax, %eax
// 2eb: e9 ab fe ff ff                jmp     0x19b <_JIT_ENTRY+0x19b>
// 2f0: f6 c2 20                      testb   $0x20, %dl
// 2f3: 75 32                         jne     0x327 <_JIT_ENTRY+0x327>
// 2f5: 49 8b 54 24 38                movq    0x38(%r12), %rdx
// 2fa: 0f b7 0c 4a                   movzwl  (%rdx,%rcx,2), %ecx
// 2fe: eb 5a                         jmp     0x35a <_JIT_ENTRY+0x35a>
// 300: f6 c2 20                      testb   $0x20, %dl
// 303: 75 3d                         jne     0x342 <_JIT_ENTRY+0x342>
// 305: 49 8b 54 24 38                movq    0x38(%r12), %rdx
// 30a: eb 4b                         jmp     0x357 <_JIT_ENTRY+0x357>
// 30c: 31 f6                         xorl    %esi, %esi
// 30e: f6 c2 40                      testb   $0x40, %dl
// 311: 40 0f 94 c6                   sete    %sil
// 315: 48 c1 e6 04                   shlq    $0x4, %rsi
// 319: 4a 8d 14 26                   leaq    (%rsi,%r12), %rdx
// 31d: 48 83 c2 28                   addq    $0x28, %rdx
// 321: 0f b6 0c 0a                   movzbl  (%rdx,%rcx), %ecx
// 325: eb 33                         jmp     0x35a <_JIT_ENTRY+0x35a>
// 327: 31 f6                         xorl    %esi, %esi
// 329: f6 c2 40                      testb   $0x40, %dl
// 32c: 40 0f 94 c6                   sete    %sil
// 330: 48 c1 e6 04                   shlq    $0x4, %rsi
// 334: 4a 8d 14 26                   leaq    (%rsi,%r12), %rdx
// 338: 48 83 c2 28                   addq    $0x28, %rdx
// 33c: 0f b7 0c 4a                   movzwl  (%rdx,%rcx,2), %ecx
// 340: eb 18                         jmp     0x35a <_JIT_ENTRY+0x35a>
// 342: 31 f6                         xorl    %esi, %esi
// 344: f6 c2 40                      testb   $0x40, %dl
// 347: 40 0f 94 c6                   sete    %sil
// 34b: 48 c1 e6 04                   shlq    $0x4, %rsi
// 34f: 4a 8d 14 26                   leaq    (%rsi,%r12), %rdx
// 353: 48 83 c2 28                   addq    $0x28, %rdx
// 357: 8b 0c 8a                      movl    (%rdx,%rcx,4), %ecx
// 35a: 83 f9 7f                      cmpl    $0x7f, %ecx
// 35d: 0f 87 10 fe ff ff             ja      0x173 <_JIT_ENTRY+0x173>
// 363: 4c 8d 34 c5 f8 ff ff ff       leaq    -0x8(,%rax,8), %r14
// 36b: 49 01 ee                      addq    %rbp, %r14
// 36e: 89 c8                         movl    %ecx, %eax
// 370: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 374: 48 c1 e0 04                   shlq    $0x4, %rax
// 378: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000037a:  R_X86_64_64  _PyRuntime
// 382: 48 8d 1c 01                   leaq    (%rcx,%rax), %rbx
// 386: 48 81 c3 a0 32 01 00          addq    $0x132a0, %rbx          # imm = 0x132A0
// 38d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038f:  R_X86_64_64  .text+0x450
// 397: ff d0                         callq   *%rax
// 399: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039b:  R_X86_64_64  .text+0x3f0
// 3a3: bf e3 01 00 00                movl    $0x1e3, %edi            # imm = 0x1E3
// 3a8: 4c 89 e6                      movq    %r12, %rsi
// 3ab: ff d0                         callq   *%rax
// 3ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003af:  R_X86_64_64  _JIT_OPARG
// 3b7: f7 d0                         notl    %eax
// 3b9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 3be: 48 98                         cltq
// 3c0: 48 89 5c c5 f0                movq    %rbx, -0x10(%rbp,%rax,8)
// 3c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c7:  R_X86_64_64  _JIT_CONTINUE
// 3cf: 4c 89 ff                      movq    %r15, %rdi
// 3d2: 4c 89 f6                      movq    %r14, %rsi
// 3d5: 4c 89 ea                      movq    %r13, %rdx
// 3d8: 48 83 c4 28                   addq    $0x28, %rsp
// 3dc: 5b                            popq    %rbx
// 3dd: 41 5c                         popq    %r12
// 3df: 41 5d                         popq    %r13
// 3e1: 41 5e                         popq    %r14
// 3e3: 41 5f                         popq    %r15
// 3e5: 5d                            popq    %rbp
// 3e6: ff e0                         jmpq    *%rax
// 3e8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 
// 00000000000003f0 <Py_DECREF>:
// 3f0: 53                            pushq   %rbx
// 3f1: 48 89 f3                      movq    %rsi, %rbx
// 3f4: 48 8b 06                      movq    (%rsi), %rax
// 3f7: 48 85 c0                      testq   %rax, %rax
// 3fa: 7e 06                         jle     0x402 <Py_DECREF+0x12>
// 3fc: 85 c0                         testl   %eax, %eax
// 3fe: 79 24                         jns     0x424 <Py_DECREF+0x34>
// 400: eb 33                         jmp     0x435 <Py_DECREF+0x45>
// 402: 89 fe                         movl    %edi, %esi
// 404: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000406:  R_X86_64_64  .rodata.str1.1
// 40e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000410:  R_X86_64_64  _Py_NegativeRefcount
// 418: 48 89 da                      movq    %rbx, %rdx
// 41b: ff d0                         callq   *%rax
// 41d: 48 8b 03                      movq    (%rbx), %rax
// 420: 85 c0                         testl   %eax, %eax
// 422: 78 11                         js      0x435 <Py_DECREF+0x45>
// 424: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000426:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 42e: ff d0                         callq   *%rax
// 430: 48 ff 0b                      decq    (%rbx)
// 433: 74 02                         je      0x437 <Py_DECREF+0x47>
// 435: 5b                            popq    %rbx
// 436: c3                            retq
// 437: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000439:  R_X86_64_64  _Py_Dealloc
// 441: 48 89 df                      movq    %rbx, %rdi
// 444: 5b                            popq    %rbx
// 445: ff e0                         jmpq    *%rax
// 447: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 
// 0000000000000450 <_Py_DECREF_SPECIALIZED>:
// 450: 53                            pushq   %rbx
// 451: f6 47 03 80                   testb   $-0x80, 0x3(%rdi)
// 455: 75 1b                         jne     0x472 <_Py_DECREF_SPECIALIZED+0x22>
// 457: 48 89 fb                      movq    %rdi, %rbx
// 45a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000045c:  R_X86_64_64  PyInterpreterState_Get
// 464: ff d0                         callq   *%rax
// 466: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 46d: 48 ff 0b                      decq    (%rbx)
// 470: 74 02                         je      0x474 <_Py_DECREF_SPECIALIZED+0x24>
// 472: 5b                            popq    %rbx
// 473: c3                            retq
// 474: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000476:  R_X86_64_64  PyObject_Free
// 47e: 48 89 df                      movq    %rbx, %rdi
// 481: 5b                            popq    %rbx
// 482: ff e0                         jmpq    *%rax
// 484: 
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_STR_INT_code_body[1157] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0x41, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x45, 0x29, 0xc1, 0x45, 0x8d, 0x70, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf0, 0x49, 0x63, 0xd9, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4c, 0x8b, 0x24, 0xde, 0x49, 0x8b, 0x7c, 0x24, 0x08, 0xf6, 0x87, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x08, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xf7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x48, 0x89, 0x74, 0x24, 0x10, 0x48, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x44, 0x89, 0xf2, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x9b, 0x01, 0x00, 0x00, 0x48, 0x8d, 0x04, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xe8, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xaa, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4c, 0x8d, 0x34, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xee, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xc1, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0xe9, 0x6a, 0x01, 0x00, 0x00, 0x49, 0x89, 0xf6, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfe, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfe, 0x45, 0x31, 0xf6, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x49, 0xff, 0xc6, 0x4d, 0x39, 0xf7, 0x0f, 0x84, 0xf7, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x8b, 0x7c, 0xc5, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4f, 0x08, 0x0f, 0x85, 0x1e, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x64, 0xc5, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x04, 0xff, 0xff, 0xff, 0x48, 0x83, 0x7f, 0x10, 0x08, 0x0f, 0x87, 0xf9, 0xfe, 0xff, 0xff, 0x8b, 0x4f, 0x18, 0x49, 0x39, 0x4c, 0x24, 0x10, 0x0f, 0x8e, 0xeb, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x54, 0x24, 0x20, 0x89, 0xd6, 0xc1, 0xee, 0x02, 0x83, 0xe6, 0x07, 0x83, 0xfe, 0x02, 0x74, 0x56, 0x83, 0xfe, 0x01, 0x75, 0x61, 0xf6, 0xc2, 0x20, 0x75, 0x68, 0x49, 0x8b, 0x54, 0x24, 0x38, 0x0f, 0xb6, 0x0c, 0x0a, 0xe9, 0xa8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8d, 0x04, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xe8, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x85, 0x56, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0xe9, 0xab, 0xfe, 0xff, 0xff, 0xf6, 0xc2, 0x20, 0x75, 0x32, 0x49, 0x8b, 0x54, 0x24, 0x38, 0x0f, 0xb7, 0x0c, 0x4a, 0xeb, 0x5a, 0xf6, 0xc2, 0x20, 0x75, 0x3d, 0x49, 0x8b, 0x54, 0x24, 0x38, 0xeb, 0x4b, 0x31, 0xf6, 0xf6, 0xc2, 0x40, 0x40, 0x0f, 0x94, 0xc6, 0x48, 0xc1, 0xe6, 0x04, 0x4a, 0x8d, 0x14, 0x26, 0x48, 0x83, 0xc2, 0x28, 0x0f, 0xb6, 0x0c, 0x0a, 0xeb, 0x33, 0x31, 0xf6, 0xf6, 0xc2, 0x40, 0x40, 0x0f, 0x94, 0xc6, 0x48, 0xc1, 0xe6, 0x04, 0x4a, 0x8d, 0x14, 0x26, 0x48, 0x83, 0xc2, 0x28, 0x0f, 0xb7, 0x0c, 0x4a, 0xeb, 0x18, 0x31, 0xf6, 0xf6, 0xc2, 0x40, 0x40, 0x0f, 0x94, 0xc6, 0x48, 0xc1, 0xe6, 0x04, 0x4a, 0x8d, 0x14, 0x26, 0x48, 0x83, 0xc2, 0x28, 0x8b, 0x0c, 0x8a, 0x83, 0xf9, 0x7f, 0x0f, 0x87, 0x10, 0xfe, 0xff, 0xff, 0x4c, 0x8d, 0x34, 0xc5, 0xf8, 0xff, 0xff, 0xff, 0x49, 0x01, 0xee, 0x89, 0xc8, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x1c, 0x01, 0x48, 0x81, 0xc3, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x89, 0x5c, 0xc5, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0xf6, 0x47, 0x03, 0x80, 0x75, 0x1b, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_STR_INT_code_holes[27] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xac, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x37a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x38f, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x450},
    {0x39b, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x3f0},
    {0x3af, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3c7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x406, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x410, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x426, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x439, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x45c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x476, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_STR_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_STR_INT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_TUPLE_INT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_TUPLE_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fd                      movq    %rdi, %rbp
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 0d 01 00 00             je      0x177 <_JIT_ENTRY+0x177>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 fc 00 00 00             je      0x177 <_JIT_ENTRY+0x177>
// 7b: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 80: 4c 89 4c 24 08                movq    %r9, 0x8(%rsp)
// 85: 48 89 14 24                   movq    %rdx, (%rsp)
// 89: 48 89 6c 24 20                movq    %rbp, 0x20(%rsp)
// 8e: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 41 0f 94 c6                   sete    %r14b
// 99: 89 da                         movl    %ebx, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c6                      testb   %al, %r14b
// be: 0f 84 ed 00 00 00             je      0x1b1 <_JIT_ENTRY+0x1b1>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// f6: 4c 8b 34 24                   movq    (%rsp), %r14
// fa: 78 21                         js      0x11d <_JIT_ENTRY+0x11d>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 106: ff d0                         callq   *%rax
// 108: 49 ff 0c 24                   decq    (%r12)
// 10c: 75 0f                         jne     0x11d <_JIT_ENTRY+0x11d>
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_Dealloc
// 118: 4c 89 e7                      movq    %r12, %rdi
// 11b: ff d0                         callq   *%rax
// 11d: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 122: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 126: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 12b: 48 85 d2                      testq   %rdx, %rdx
// 12e: 74 35                         je      0x165 <_JIT_ENTRY+0x165>
// 130: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 135: 49 8d 1c cf                   leaq    (%r15,%rcx,8), %rbx
// 139: 48 89 10                      movq    %rdx, (%rax)
// 13c: 49 8b 46 10                   movq    0x10(%r14), %rax
// 140: 48 8b 00                      movq    (%rax), %rax
// 143: 84 c0                         testb   %al, %al
// 145: 0f 84 ee 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_HandlePending
// 155: 4c 89 f7                      movq    %r14, %rdi
// 158: ff d0                         callq   *%rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 84 d7 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 162: 48 89 d8                      movq    %rbx, %rax
// 165: 48 29 e8                      subq    %rbp, %rax
// 168: 48 83 c0 b8                   addq    $-0x48, %rax
// 16c: 48 c1 e8 03                   shrq    $0x3, %rax
// 170: 89 45 40                      movl    %eax, 0x40(%rbp)
// 173: 31 c0                         xorl    %eax, %eax
// 175: eb 2b                         jmp     0x1a2 <_JIT_ENTRY+0x1a2>
// 177: 4c 89 fb                      movq    %r15, %rbx
// 17a: 48 29 eb                      subq    %rbp, %rbx
// 17d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 181: 48 c1 eb 03                   shrq    $0x3, %rbx
// 185: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 188: 48 8b 45 00                   movq    (%rbp), %rax
// 18c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018e:  R_X86_64_64  _JIT_TARGET
// 196: 89 c9                         movl    %ecx, %ecx
// 198: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 19c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1a2: 48 83 c4 28                   addq    $0x28, %rsp
// 1a6: 5b                            popq    %rbx
// 1a7: 41 5c                         popq    %r12
// 1a9: 41 5d                         popq    %r13
// 1ab: 41 5e                         popq    %r14
// 1ad: 41 5f                         popq    %r15
// 1af: 5d                            popq    %rbp
// 1b0: c3                            retq
// 1b1: 83 fb 02                      cmpl    $0x2, %ebx
// 1b4: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1ba: 44 0f 43 f3                   cmovael %ebx, %r14d
// 1be: 31 db                         xorl    %ebx, %ebx
// 1c0: eb 1a                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 1d0: 48 ff c3                      incq    %rbx
// 1d3: 49 39 de                      cmpq    %rbx, %r14
// 1d6: 0f 84 e8 fe ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 1dc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 4c 63 f0                      movslq  %eax, %r14
// 24d: 4f 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %r13
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  PyLong_Type
// 25c: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 260: 0f 85 14 ff ff ff             jne     0x17a <_JIT_ENTRY+0x17a>
// 266: 4f 8b 64 f7 f0                movq    -0x10(%r15,%r14,8), %r12
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  PyTuple_Type
// 275: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 27a: 0f 85 fa fe ff ff             jne     0x17a <_JIT_ENTRY+0x17a>
// 280: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 285: 0f 87 ef fe ff ff             ja      0x17a <_JIT_ENTRY+0x17a>
// 28b: 41 8b 45 18                   movl    0x18(%r13), %eax
// 28f: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 294: 0f 8e e0 fe ff ff             jle     0x17a <_JIT_ENTRY+0x17a>
// 29a: 49 8b 5c c4 18                movq    0x18(%r12,%rax,8), %rbx
// 29f: 8b 03                         movl    (%rbx), %eax
// 2a1: ff c0                         incl    %eax
// 2a3: 74 0e                         je      0x2b3 <_JIT_ENTRY+0x2b3>
// 2a5: 89 03                         movl    %eax, (%rbx)
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2b1: ff d0                         callq   *%rax
// 2b3: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2b8: 75 28                         jne     0x2e2 <_JIT_ENTRY+0x2e2>
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  PyInterpreterState_Get
// 2c4: ff d0                         callq   *%rax
// 2c6: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2cd: 49 ff 4d 00                   decq    (%r13)
// 2d1: 75 0f                         jne     0x2e2 <_JIT_ENTRY+0x2e2>
// 2d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d5:  R_X86_64_64  PyObject_Free
// 2dd: 4c 89 ef                      movq    %r13, %rdi
// 2e0: ff d0                         callq   *%rax
// 2e2: 49 8b 04 24                   movq    (%r12), %rax
// 2e6: 48 85 c0                      testq   %rax, %rax
// 2e9: 7f 22                         jg      0x30d <_JIT_ENTRY+0x30d>
// 2eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ed:  R_X86_64_64  .rodata.str1.1
// 2f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f7:  R_X86_64_64  _Py_NegativeRefcount
// 2ff: be fa 01 00 00                movl    $0x1fa, %esi            # imm = 0x1FA
// 304: 4c 89 e2                      movq    %r12, %rdx
// 307: ff d0                         callq   *%rax
// 309: 49 8b 04 24                   movq    (%r12), %rax
// 30d: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 311: 49 83 c6 f8                   addq    $-0x8, %r14
// 315: 85 c0                         testl   %eax, %eax
// 317: 78 21                         js      0x33a <_JIT_ENTRY+0x33a>
// 319: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 323: ff d0                         callq   *%rax
// 325: 49 ff 0c 24                   decq    (%r12)
// 329: 75 0f                         jne     0x33a <_JIT_ENTRY+0x33a>
// 32b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032d:  R_X86_64_64  _Py_Dealloc
// 335: 4c 89 e7                      movq    %r12, %rdi
// 338: ff d0                         callq   *%rax
// 33a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033c:  R_X86_64_64  _JIT_OPARG
// 344: f7 d0                         notl    %eax
// 346: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 34b: 48 98                         cltq
// 34d: 49 89 5c c7 f0                movq    %rbx, -0x10(%r15,%rax,8)
// 352: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000354:  R_X86_64_64  _JIT_CONTINUE
// 35c: 48 89 ef                      movq    %rbp, %rdi
// 35f: 4c 89 f6                      movq    %r14, %rsi
// 362: 48 8b 14 24                   movq    (%rsp), %rdx
// 366: 48 83 c4 28                   addq    $0x28, %rsp
// 36a: 5b                            popq    %rbx
// 36b: 41 5c                         popq    %r12
// 36d: 41 5d                         popq    %r13
// 36f: 41 5e                         popq    %r14
// 371: 41 5f                         popq    %r15
// 373: 5d                            popq    %rbp
// 374: ff e0                         jmpq    *%rax
// 376: 
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_TUPLE_INT_code_body[887] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd7, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x0d, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xfc, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x6c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x8d, 0x1c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xee, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x4c, 0x89, 0xfb, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x1a, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0xe8, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x4f, 0x8b, 0x6c, 0xf7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x14, 0xff, 0xff, 0xff, 0x4f, 0x8b, 0x64, 0xf7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xfa, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xef, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xe0, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x5c, 0xc4, 0x18, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfa, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x5c, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_TUPLE_INT_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x32d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x354, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_TUPLE_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_TUPLE_INT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_BUILD_CONST_KEY_MAP
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_BUILD_CONST_KEY_MAP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 8e 01 00 00             je      0x1f5 <_JIT_ENTRY+0x1f5>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 7d 01 00 00             je      0x1f5 <_JIT_ENTRY+0x1f5>
// 78: 4c 89 0c 24                   movq    %r9, (%rsp)
// 7c: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 81: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 86: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 41 0f 94 c6                   sete    %r14b
// 96: 89 da                         movl    %ebx, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 41 84 c6                      testb   %al, %r14b
// bb: 0f 84 ce 01 00 00             je      0x28f <_JIT_ENTRY+0x28f>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e3: 4c 89 e2                      movq    %r12, %rdx
// e6: ff d0                         callq   *%rax
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 85 c0                         testl   %eax, %eax
// ee: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// f3: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// f8: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 0c 24                   decq    (%r12)
// 10f: 0f 84 1c 02 00 00             je      0x331 <_JIT_ENTRY+0x331>
// 115: 48 8b 04 24                   movq    (%rsp), %rax
// 119: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 11d: 4d 85 ed                      testq   %r13, %r13
// 120: 0f 84 2b 02 00 00             je      0x351 <_JIT_ENTRY+0x351>
// 126: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 12b: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 12f: 4c 89 28                      movq    %r13, (%rax)
// 132: 49 8b 46 10                   movq    0x10(%r14), %rax
// 136: 48 8b 00                      movq    (%rax), %rax
// 139: 84 c0                         testb   %al, %al
// 13b: 74 17                         je      0x154 <_JIT_ENTRY+0x154>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_HandlePending
// 147: 4c 89 f7                      movq    %r14, %rdi
// 14a: ff d0                         callq   *%rax
// 14c: 85 c0                         testl   %eax, %eax
// 14e: 0f 85 00 02 00 00             jne     0x354 <_JIT_ENTRY+0x354>
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _JIT_OPARG
// 15e: f7 d0                         notl    %eax
// 160: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 165: 48 98                         cltq
// 167: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 16c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000016e:  R_X86_64_64  PyTuple_Type
// 176: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 17a: 0f 85 89 01 00 00             jne     0x309 <_JIT_ENTRY+0x309>
// 180: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000182:  R_X86_64_64  _JIT_OPARG
// 18a: 0f b7 c9                      movzwl  %cx, %ecx
// 18d: 49 39 4d 10                   cmpq    %rcx, 0x10(%r13)
// 191: 0f 85 72 01 00 00             jne     0x309 <_JIT_ENTRY+0x309>
// 197: 48 01 c0                      addq    %rax, %rax
// 19a: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 19e: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 1a2: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001a4:  R_X86_64_64  _JIT_OPARG
// 1ac: 44 0f b7 c3                   movzwl  %bx, %r8d
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _PyDict_FromItems
// 1ba: be 01 00 00 00                movl    $0x1, %esi
// 1bf: b9 01 00 00 00                movl    $0x1, %ecx
// 1c4: 4c 89 e2                      movq    %r12, %rdx
// 1c7: ff d0                         callq   *%rax
// 1c9: 48 89 04 24                   movq    %rax, (%rsp)
// 1cd: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 1d3: 0f 8e 9b 01 00 00             jle     0x374 <_JIT_ENTRY+0x374>
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _JIT_OPARG
// 1e3: 0f b7 d8                      movzwl  %ax, %ebx
// 1e6: 48 ff c3                      incq    %rbx
// 1e9: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001eb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f3: eb 48                         jmp     0x23d <_JIT_ENTRY+0x23d>
// 1f5: 49 29 ff                      subq    %rdi, %r15
// 1f8: 49 83 c7 b8                   addq    $-0x48, %r15
// 1fc: 49 c1 ef 03                   shrq    $0x3, %r15
// 200: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 204: 48 8b 07                      movq    (%rdi), %rax
// 207: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000209:  R_X86_64_64  _JIT_TARGET
// 211: 89 c9                         movl    %ecx, %ecx
// 213: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 217: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 21d: e9 43 01 00 00                jmp     0x365 <_JIT_ENTRY+0x365>
// 222: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 230: 48 ff cb                      decq    %rbx
// 233: 48 83 fb 01                   cmpq    $0x1, %rbx
// 237: 0f 8e 37 01 00 00             jle     0x374 <_JIT_ENTRY+0x374>
// 23d: 8d 43 fe                      leal    -0x2(%rbx), %eax
// 240: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// 244: 49 8b 06                      movq    (%r14), %rax
// 247: 48 85 c0                      testq   %rax, %rax
// 24a: 7e 06                         jle     0x252 <_JIT_ENTRY+0x252>
// 24c: 85 c0                         testl   %eax, %eax
// 24e: 78 e0                         js      0x230 <_JIT_ENTRY+0x230>
// 250: eb 25                         jmp     0x277 <_JIT_ENTRY+0x277>
// 252: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000254:  R_X86_64_64  .rodata.str1.1
// 25c: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 261: 4c 89 f2                      movq    %r14, %rdx
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_NegativeRefcount
// 26e: ff d0                         callq   *%rax
// 270: 49 8b 06                      movq    (%r14), %rax
// 273: 85 c0                         testl   %eax, %eax
// 275: 78 b9                         js      0x230 <_JIT_ENTRY+0x230>
// 277: ff d5                         callq   *%rbp
// 279: 49 ff 0e                      decq    (%r14)
// 27c: 75 b2                         jne     0x230 <_JIT_ENTRY+0x230>
// 27e: 4c 89 f7                      movq    %r14, %rdi
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  _Py_Dealloc
// 28b: ff d0                         callq   *%rax
// 28d: eb a1                         jmp     0x230 <_JIT_ENTRY+0x230>
// 28f: 83 fb 02                      cmpl    $0x2, %ebx
// 292: 41 be 01 00 00 00             movl    $0x1, %r14d
// 298: 44 0f 43 f3                   cmovael %ebx, %r14d
// 29c: 31 db                         xorl    %ebx, %ebx
// 29e: eb 0c                         jmp     0x2ac <_JIT_ENTRY+0x2ac>
// 2a0: 48 ff c3                      incq    %rbx
// 2a3: 49 39 de                      cmpq    %rbx, %r14
// 2a6: 0f 84 15 fe ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 2ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 2b1: 49 8b 45 00                   movq    (%r13), %rax
// 2b5: 48 85 c0                      testq   %rax, %rax
// 2b8: 7e 06                         jle     0x2c0 <_JIT_ENTRY+0x2c0>
// 2ba: 85 c0                         testl   %eax, %eax
// 2bc: 78 e2                         js      0x2a0 <_JIT_ENTRY+0x2a0>
// 2be: eb 26                         jmp     0x2e6 <_JIT_ENTRY+0x2e6>
// 2c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c2:  R_X86_64_64  .rodata.str1.1
// 2ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 2cf: 4c 89 ea                      movq    %r13, %rdx
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_NegativeRefcount
// 2dc: ff d0                         callq   *%rax
// 2de: 49 8b 45 00                   movq    (%r13), %rax
// 2e2: 85 c0                         testl   %eax, %eax
// 2e4: 78 ba                         js      0x2a0 <_JIT_ENTRY+0x2a0>
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f0: ff d0                         callq   *%rax
// 2f2: 49 ff 4d 00                   decq    (%r13)
// 2f6: 75 a8                         jne     0x2a0 <_JIT_ENTRY+0x2a0>
// 2f8: 4c 89 ef                      movq    %r13, %rdi
// 2fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fd:  R_X86_64_64  _Py_Dealloc
// 305: ff d0                         callq   *%rax
// 307: eb 97                         jmp     0x2a0 <_JIT_ENTRY+0x2a0>
// 309: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030b:  R_X86_64_64  PyExc_SystemError
// 313: 48 8b 30                      movq    (%rax), %rsi
// 316: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000318:  R_X86_64_64  .rodata.str1.1+0x39
// 320: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000322:  R_X86_64_64  _PyErr_SetString
// 32a: 4c 89 f7                      movq    %r14, %rdi
// 32d: ff d0                         callq   *%rax
// 32f: eb 23                         jmp     0x354 <_JIT_ENTRY+0x354>
// 331: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000333:  R_X86_64_64  _Py_Dealloc
// 33b: 4c 89 e7                      movq    %r12, %rdi
// 33e: ff d0                         callq   *%rax
// 340: 48 8b 04 24                   movq    (%rsp), %rax
// 344: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 348: 4d 85 ed                      testq   %r13, %r13
// 34b: 0f 85 d5 fd ff ff             jne     0x126 <_JIT_ENTRY+0x126>
// 351: 49 89 c4                      movq    %rax, %r12
// 354: 49 29 dc                      subq    %rbx, %r12
// 357: 49 83 c4 b8                   addq    $-0x48, %r12
// 35b: 49 c1 ec 03                   shrq    $0x3, %r12
// 35f: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 363: 31 c0                         xorl    %eax, %eax
// 365: 48 83 c4 28                   addq    $0x28, %rsp
// 369: 5b                            popq    %rbx
// 36a: 41 5c                         popq    %r12
// 36c: 41 5d                         popq    %r13
// 36e: 41 5e                         popq    %r14
// 370: 41 5f                         popq    %r15
// 372: 5d                            popq    %rbp
// 373: c3                            retq
// 374: 49 8b 45 00                   movq    (%r13), %rax
// 378: 48 85 c0                      testq   %rax, %rax
// 37b: 7f 22                         jg      0x39f <_JIT_ENTRY+0x39f>
// 37d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000037f:  R_X86_64_64  .rodata.str1.1
// 387: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000389:  R_X86_64_64  _Py_NegativeRefcount
// 391: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 396: 4c 89 ea                      movq    %r13, %rdx
// 399: ff d0                         callq   *%rax
// 39b: 49 8b 45 00                   movq    (%r13), %rax
// 39f: 85 c0                         testl   %eax, %eax
// 3a1: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 3a6: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 3ab: 78 21                         js      0x3ce <_JIT_ENTRY+0x3ce>
// 3ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003af:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3b7: ff d0                         callq   *%rax
// 3b9: 49 ff 4d 00                   decq    (%r13)
// 3bd: 75 0f                         jne     0x3ce <_JIT_ENTRY+0x3ce>
// 3bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c1:  R_X86_64_64  _Py_Dealloc
// 3c9: 4c 89 ef                      movq    %r13, %rdi
// 3cc: ff d0                         callq   *%rax
// 3ce: 48 8b 34 24                   movq    (%rsp), %rsi
// 3d2: 48 85 f6                      testq   %rsi, %rsi
// 3d5: 0f 84 79 ff ff ff             je      0x354 <_JIT_ENTRY+0x354>
// 3db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003dd:  R_X86_64_64  _JIT_OPARG
// 3e5: 0f b7 c8                      movzwl  %ax, %ecx
// 3e8: f7 d0                         notl    %eax
// 3ea: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 3ef: 48 98                         cltq
// 3f1: 48 8d 14 00                   leaq    (%rax,%rax), %rdx
// 3f5: 49 89 34 d7                   movq    %rsi, (%r15,%rdx,8)
// 3f9: 48 29 c8                      subq    %rcx, %rax
// 3fc: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 400: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000402:  R_X86_64_64  _JIT_CONTINUE
// 40a: 48 89 df                      movq    %rbx, %rdi
// 40d: 4c 89 f2                      movq    %r14, %rdx
// 410: 48 83 c4 28                   addq    $0x28, %rsp
// 414: 5b                            popq    %rbx
// 415: 41 5c                         popq    %r12
// 417: 41 5d                         popq    %r13
// 419: 41 5e                         popq    %r14
// 41b: 41 5f                         popq    %r15
// 41d: 5d                            popq    %rbp
// 41e: ff e0                         jmpq    *%rax
// 420: 
static const unsigned char _CALL_BUILTIN_CLASSplus_BUILD_CONST_KEY_MAP_code_body[1057] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x8e, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x7d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x0c, 0x24, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xce, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x1c, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x2b, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x00, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0x89, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x49, 0x39, 0x4d, 0x10, 0x0f, 0x85, 0x72, 0x01, 0x00, 0x00, 0x48, 0x01, 0xc0, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x9b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x48, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x43, 0x01, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x0f, 0x8e, 0x37, 0x01, 0x00, 0x00, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x25, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xb9, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xb2, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xa1, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x0c, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x15, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0xeb, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x85, 0xd5, 0xfd, 0xff, 0xff, 0x49, 0x89, 0xc4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x79, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x8d, 0x14, 0x00, 0x49, 0x89, 0x34, 0xd7, 0x48, 0x29, 0xc8, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_BUILD_CONST_KEY_MAP_code_holes[32] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x16e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x318, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x322, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x333, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x37f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x389, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3dd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x402, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _CALL_BUILTIN_CLASSplus_BUILD_CONST_KEY_MAP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_BUILD_CONST_KEY_MAP_data_holes[1];

// _CALL_BUILTIN_CLASSplus_BUILD_LIST
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_BUILD_LIST.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 14 24                   movq    %r10, (%rsp)
// 79: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 7e: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 83: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 ea                      movl    %r13d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c8 00 00 00             jle     0x189 <_JIT_ENTRY+0x189>
// c1: 85 c0                         testl   %eax, %eax
// c3: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// c8: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// cd: 0f 89 e6 00 00 00             jns     0x1b9 <_JIT_ENTRY+0x1b9>
// d3: e9 02 01 00 00                jmp     0x1da <_JIT_ENTRY+0x1da>
// d8: 49 29 fe                      subq    %rdi, %r14
// db: 49 83 c6 b8                   addq    $-0x48, %r14
// df: 49 c1 ee 03                   shrq    $0x3, %r14
// e3: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 a6 01 00 00                jmp     0x2ab <_JIT_ENTRY+0x2ab>
// 105: 41 83 fd 02                   cmpl    $0x2, %r13d
// 109: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 10f: 45 0f 43 fd                   cmovael %r13d, %r15d
// 113: 31 db                         xorl    %ebx, %ebx
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 48 ff c3                      incq    %rbx
// 123: 49 39 df                      cmpq    %rbx, %r15
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 12d: 49 8b 45 00                   movq    (%r13), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 0a                         jle     0x140 <_JIT_ENTRY+0x140>
// 136: 85 c0                         testl   %eax, %eax
// 138: 78 e6                         js      0x120 <_JIT_ENTRY+0x120>
// 13a: eb 2a                         jmp     0x166 <_JIT_ENTRY+0x166>
// 13c: 0f 1f 40 00                   nopl    (%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 ea                      movq    %r13, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 78 ba                         js      0x120 <_JIT_ENTRY+0x120>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 4d 00                   decq    (%r13)
// 176: 75 a8                         jne     0x120 <_JIT_ENTRY+0x120>
// 178: 4c 89 ef                      movq    %r13, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: eb 97                         jmp     0x120 <_JIT_ENTRY+0x120>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 1b2: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 1b7: 78 21                         js      0x1da <_JIT_ENTRY+0x1da>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c3: ff d0                         callq   *%rax
// 1c5: 49 ff 0c 24                   decq    (%r12)
// 1c9: 75 0f                         jne     0x1da <_JIT_ENTRY+0x1da>
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _Py_Dealloc
// 1d5: 4c 89 e7                      movq    %r12, %rdi
// 1d8: ff d0                         callq   *%rax
// 1da: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1df: 4d 8d 3c c6                   leaq    (%r14,%rax,8), %r15
// 1e3: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1e8: 48 85 c0                      testq   %rax, %rax
// 1eb: 0f 84 a9 00 00 00             je      0x29a <_JIT_ENTRY+0x29a>
// 1f1: 49 89 07                      movq    %rax, (%r15)
// 1f4: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1f8: 48 8b 00                      movq    (%rax), %rax
// 1fb: 84 c0                         testb   %al, %al
// 1fd: 74 1d                         je      0x21c <_JIT_ENTRY+0x21c>
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_HandlePending
// 209: 4c 89 ef                      movq    %r13, %rdi
// 20c: ff d0                         callq   *%rax
// 20e: 85 c0                         testl   %eax, %eax
// 210: 74 0a                         je      0x21c <_JIT_ENTRY+0x21c>
// 212: 48 8b 04 24                   movq    (%rsp), %rax
// 216: 4d 8d 3c c6                   leaq    (%r14,%rax,8), %r15
// 21a: eb 7e                         jmp     0x29a <_JIT_ENTRY+0x29a>
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _JIT_OPARG
// 226: 0f b7 f0                      movzwl  %ax, %esi
// 229: f7 d0                         notl    %eax
// 22b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 230: 48 98                         cltq
// 232: 48 29 f0                      subq    %rsi, %rax
// 235: 4d 8d 3c c6                   leaq    (%r14,%rax,8), %r15
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _PyList_FromArraySteal
// 243: 4c 89 ff                      movq    %r15, %rdi
// 246: ff d0                         callq   *%rax
// 248: 48 85 c0                      testq   %rax, %rax
// 24b: 74 4d                         je      0x29a <_JIT_ENTRY+0x29a>
// 24d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024f:  R_X86_64_64  _JIT_OPARG
// 257: 0f b7 d1                      movzwl  %cx, %edx
// 25a: 0f b7 c9                      movzwl  %cx, %ecx
// 25d: be 01 00 00 00                movl    $0x1, %esi
// 262: 29 ce                         subl    %ecx, %esi
// 264: f7 d1                         notl    %ecx
// 266: 48 63 c9                      movslq  %ecx, %rcx
// 269: 48 63 f6                      movslq  %esi, %rsi
// 26c: 48 01 ce                      addq    %rcx, %rsi
// 26f: 48 29 d1                      subq    %rdx, %rcx
// 272: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 276: 49 8d 34 f6                   leaq    (%r14,%rsi,8), %rsi
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  _JIT_CONTINUE
// 284: 48 89 df                      movq    %rbx, %rdi
// 287: 4c 89 ea                      movq    %r13, %rdx
// 28a: 48 83 c4 28                   addq    $0x28, %rsp
// 28e: 5b                            popq    %rbx
// 28f: 41 5c                         popq    %r12
// 291: 41 5d                         popq    %r13
// 293: 41 5e                         popq    %r14
// 295: 41 5f                         popq    %r15
// 297: 5d                            popq    %rbp
// 298: ff e0                         jmpq    *%rax
// 29a: 49 29 df                      subq    %rbx, %r15
// 29d: 49 83 c7 b8                   addq    $-0x48, %r15
// 2a1: 49 c1 ef 03                   shrq    $0x3, %r15
// 2a5: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2a9: 31 c0                         xorl    %eax, %eax
// 2ab: 48 83 c4 28                   addq    $0x28, %rsp
// 2af: 5b                            popq    %rbx
// 2b0: 41 5c                         popq    %r12
// 2b2: 41 5d                         popq    %r13
// 2b4: 41 5e                         popq    %r14
// 2b6: 41 5f                         popq    %r15
// 2b8: 5d                            popq    %rbp
// 2b9: c3                            retq
// 2ba: 
static const unsigned char _CALL_BUILTIN_CLASSplus_BUILD_LIST_code_body[699] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc8, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x0f, 0x89, 0xe6, 0x00, 0x00, 0x00, 0xe9, 0x02, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x74, 0x8c, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x85, 0xc0, 0x78, 0xe6, 0xeb, 0x2a, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8d, 0x3c, 0xc6, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xa9, 0x00, 0x00, 0x00, 0x49, 0x89, 0x07, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x0a, 0x48, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x3c, 0xc6, 0xeb, 0x7e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xf0, 0x4d, 0x8d, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x4d, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xc9, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xce, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x63, 0xf6, 0x48, 0x01, 0xce, 0x48, 0x29, 0xd1, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_BUILD_LIST_code_holes[17] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_FromArraySteal, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_BUILD_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_BUILD_LIST_data_holes[1];

// _CALL_BUILTIN_CLASSplus_BUILD_MAP
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_BUILD_MAP.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 0c 24                   movq    %r9, (%rsp)
// 74: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 79: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 7e: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 83: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 ea                      movl    %r13d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c8 00 00 00             jle     0x189 <_JIT_ENTRY+0x189>
// c1: 85 c0                         testl   %eax, %eax
// c3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// c8: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// cd: 0f 89 e6 00 00 00             jns     0x1b9 <_JIT_ENTRY+0x1b9>
// d3: e9 02 01 00 00                jmp     0x1da <_JIT_ENTRY+0x1da>
// d8: 49 29 fe                      subq    %rdi, %r14
// db: 49 83 c6 b8                   addq    $-0x48, %r14
// df: 49 c1 ee 03                   shrq    $0x3, %r14
// e3: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 7a 02 00 00                jmp     0x37f <_JIT_ENTRY+0x37f>
// 105: 41 83 fd 02                   cmpl    $0x2, %r13d
// 109: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 10f: 45 0f 43 fd                   cmovael %r13d, %r15d
// 113: 31 db                         xorl    %ebx, %ebx
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 48 ff c3                      incq    %rbx
// 123: 49 39 df                      cmpq    %rbx, %r15
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 12d: 49 8b 45 00                   movq    (%r13), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 0a                         jle     0x140 <_JIT_ENTRY+0x140>
// 136: 85 c0                         testl   %eax, %eax
// 138: 78 e6                         js      0x120 <_JIT_ENTRY+0x120>
// 13a: eb 2a                         jmp     0x166 <_JIT_ENTRY+0x166>
// 13c: 0f 1f 40 00                   nopl    (%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 ea                      movq    %r13, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 78 ba                         js      0x120 <_JIT_ENTRY+0x120>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 4d 00                   decq    (%r13)
// 176: 75 a8                         jne     0x120 <_JIT_ENTRY+0x120>
// 178: 4c 89 ef                      movq    %r13, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: eb 97                         jmp     0x120 <_JIT_ENTRY+0x120>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b2: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1b7: 78 21                         js      0x1da <_JIT_ENTRY+0x1da>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c3: ff d0                         callq   *%rax
// 1c5: 49 ff 0c 24                   decq    (%r12)
// 1c9: 75 0f                         jne     0x1da <_JIT_ENTRY+0x1da>
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _Py_Dealloc
// 1d5: 4c 89 e7                      movq    %r12, %rdi
// 1d8: ff d0                         callq   *%rax
// 1da: 48 8b 04 24                   movq    (%rsp), %rax
// 1de: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 1e2: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e7: 48 85 c0                      testq   %rax, %rax
// 1ea: 0f 84 7e 01 00 00             je      0x36e <_JIT_ENTRY+0x36e>
// 1f0: 49 89 04 24                   movq    %rax, (%r12)
// 1f4: 49 8b 47 10                   movq    0x10(%r15), %rax
// 1f8: 48 8b 00                      movq    (%rax), %rax
// 1fb: 84 c0                         testb   %al, %al
// 1fd: 74 21                         je      0x220 <_JIT_ENTRY+0x220>
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_HandlePending
// 209: 4c 89 ff                      movq    %r15, %rdi
// 20c: ff d0                         callq   *%rax
// 20e: 85 c0                         testl   %eax, %eax
// 210: 74 0e                         je      0x220 <_JIT_ENTRY+0x220>
// 212: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 217: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 21b: e9 4e 01 00 00                jmp     0x36e <_JIT_ENTRY+0x36e>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _JIT_OPARG
// 22a: 0f b7 d8                      movzwl  %ax, %ebx
// 22d: 89 d9                         movl    %ebx, %ecx
// 22f: f7 d1                         notl    %ecx
// 231: 48 63 c9                      movslq  %ecx, %rcx
// 234: 89 da                         movl    %ebx, %edx
// 236: f7 da                         negl    %edx
// 238: 01 d2                         addl    %edx, %edx
// 23a: 48 63 d2                      movslq  %edx, %rdx
// 23d: 48 01 ca                      addq    %rcx, %rdx
// 240: 4d 8d 24 d6                   leaq    (%r14,%rdx,8), %r12
// 244: 49 8d 14 d6                   leaq    (%r14,%rdx,8), %rdx
// 248: 48 83 c2 08                   addq    $0x8, %rdx
// 24c: 44 0f b7 c0                   movzwl  %ax, %r8d
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _PyDict_FromItems
// 25a: be 02 00 00 00                movl    $0x2, %esi
// 25f: b9 02 00 00 00                movl    $0x2, %ecx
// 264: 4c 89 e7                      movq    %r12, %rdi
// 267: ff d0                         callq   *%rax
// 269: 48 89 04 24                   movq    %rax, (%rsp)
// 26d: 01 db                         addl    %ebx, %ebx
// 26f: 85 db                         testl   %ebx, %ebx
// 271: 0f 8e 90 00 00 00             jle     0x307 <_JIT_ENTRY+0x307>
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _JIT_OPARG
// 281: 0f b7 c0                      movzwl  %ax, %eax
// 284: 48 8d 1c 00                   leaq    (%rax,%rax), %rbx
// 288: 48 ff c3                      incq    %rbx
// 28b: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000028d:  R_X86_64_64  .rodata.str1.1
// 295: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000297:  R_X86_64_64  _Py_NegativeRefcount
// 29f: eb 18                         jmp     0x2b9 <_JIT_ENTRY+0x2b9>
// 2a1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 2b0: 48 ff cb                      decq    %rbx
// 2b3: 48 83 fb 01                   cmpq    $0x1, %rbx
// 2b7: 7e 4e                         jle     0x307 <_JIT_ENTRY+0x307>
// 2b9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// 2bc: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// 2c0: 49 8b 07                      movq    (%r15), %rax
// 2c3: 48 85 c0                      testq   %rax, %rax
// 2c6: 7e 08                         jle     0x2d0 <_JIT_ENTRY+0x2d0>
// 2c8: 85 c0                         testl   %eax, %eax
// 2ca: 78 e4                         js      0x2b0 <_JIT_ENTRY+0x2b0>
// 2cc: eb 17                         jmp     0x2e5 <_JIT_ENTRY+0x2e5>
// 2ce: 66 90                         nop
// 2d0: 48 89 ef                      movq    %rbp, %rdi
// 2d3: be 7b 05 00 00                movl    $0x57b, %esi            # imm = 0x57B
// 2d8: 4c 89 fa                      movq    %r15, %rdx
// 2db: 41 ff d5                      callq   *%r13
// 2de: 49 8b 07                      movq    (%r15), %rax
// 2e1: 85 c0                         testl   %eax, %eax
// 2e3: 78 cb                         js      0x2b0 <_JIT_ENTRY+0x2b0>
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ef: ff d0                         callq   *%rax
// 2f1: 49 ff 0f                      decq    (%r15)
// 2f4: 75 ba                         jne     0x2b0 <_JIT_ENTRY+0x2b0>
// 2f6: 4c 89 ff                      movq    %r15, %rdi
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _Py_Dealloc
// 303: ff d0                         callq   *%rax
// 305: eb a9                         jmp     0x2b0 <_JIT_ENTRY+0x2b0>
// 307: 48 8b 34 24                   movq    (%rsp), %rsi
// 30b: 48 85 f6                      testq   %rsi, %rsi
// 30e: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 313: 74 59                         je      0x36e <_JIT_ENTRY+0x36e>
// 315: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000317:  R_X86_64_64  _JIT_OPARG
// 31f: 0f b7 c0                      movzwl  %ax, %eax
// 322: 89 c1                         movl    %eax, %ecx
// 324: f7 d1                         notl    %ecx
// 326: 48 63 c9                      movslq  %ecx, %rcx
// 329: 89 c2                         movl    %eax, %edx
// 32b: f7 da                         negl    %edx
// 32d: 01 d2                         addl    %edx, %edx
// 32f: 48 63 d2                      movslq  %edx, %rdx
// 332: 48 01 ca                      addq    %rcx, %rdx
// 335: 49 89 34 d6                   movq    %rsi, (%r14,%rdx,8)
// 339: 01 c0                         addl    %eax, %eax
// 33b: ba 01 00 00 00                movl    $0x1, %edx
// 340: 29 c2                         subl    %eax, %edx
// 342: 48 63 c2                      movslq  %edx, %rax
// 345: 48 01 c8                      addq    %rcx, %rax
// 348: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 34c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034e:  R_X86_64_64  _JIT_CONTINUE
// 356: 48 89 df                      movq    %rbx, %rdi
// 359: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 35e: 48 83 c4 28                   addq    $0x28, %rsp
// 362: 5b                            popq    %rbx
// 363: 41 5c                         popq    %r12
// 365: 41 5d                         popq    %r13
// 367: 41 5e                         popq    %r14
// 369: 41 5f                         popq    %r15
// 36b: 5d                            popq    %rbp
// 36c: ff e0                         jmpq    *%rax
// 36e: 49 29 dc                      subq    %rbx, %r12
// 371: 49 83 c4 b8                   addq    $-0x48, %r12
// 375: 49 c1 ec 03                   shrq    $0x3, %r12
// 379: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 37d: 31 c0                         xorl    %eax, %eax
// 37f: 48 83 c4 28                   addq    $0x28, %rsp
// 383: 5b                            popq    %rbx
// 384: 41 5c                         popq    %r12
// 386: 41 5d                         popq    %r13
// 388: 41 5e                         popq    %r14
// 38a: 41 5f                         popq    %r15
// 38c: 5d                            popq    %rbp
// 38d: c3                            retq
// 38e: 
static const unsigned char _CALL_BUILTIN_CLASSplus_BUILD_MAP_code_body[911] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x0c, 0x24, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc8, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x0f, 0x89, 0xe6, 0x00, 0x00, 0x00, 0xe9, 0x02, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x7a, 0x02, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x74, 0x8c, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x85, 0xc0, 0x78, 0xe6, 0xeb, 0x2a, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x24, 0xc6, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x7e, 0x01, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x0e, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x4d, 0x8d, 0x24, 0xc6, 0xe9, 0x4e, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x89, 0xd9, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x89, 0xda, 0xf7, 0xda, 0x01, 0xd2, 0x48, 0x63, 0xd2, 0x48, 0x01, 0xca, 0x4d, 0x8d, 0x24, 0xd6, 0x49, 0x8d, 0x14, 0xd6, 0x48, 0x83, 0xc2, 0x08, 0x44, 0x0f, 0xb7, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x01, 0xdb, 0x85, 0xdb, 0x0f, 0x8e, 0x90, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x1c, 0x00, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x4e, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x7b, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xcb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xba, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xa9, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x74, 0x59, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x89, 0xc2, 0xf7, 0xda, 0x01, 0xd2, 0x48, 0x63, 0xd2, 0x48, 0x01, 0xca, 0x49, 0x89, 0x34, 0xd6, 0x01, 0xc0, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc2, 0x48, 0x63, 0xc2, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_BUILD_MAP_code_holes[22] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x317, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x34e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_BUILD_MAP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_BUILD_MAP_data_holes[1];

// _CALL_BUILTIN_CLASSplus_BUILD_SET
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_BUILD_SET.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f4 01 00 00             je      0x25b <_JIT_ENTRY+0x25b>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e3 01 00 00             je      0x25b <_JIT_ENTRY+0x25b>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 86: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 41 0f 94 c7                   sete    %r15b
// 96: 89 da                         movl    %ebx, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 41 84 c7                      testb   %al, %r15b
// bb: 0f 84 c7 01 00 00             je      0x288 <_JIT_ENTRY+0x288>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e3: 4c 89 e2                      movq    %r12, %rdx
// e6: ff d0                         callq   *%rax
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 85 c0                         testl   %eax, %eax
// ee: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// f3: 4c 8b 3c 24                   movq    (%rsp), %r15
// f7: 78 21                         js      0x11a <_JIT_ENTRY+0x11a>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 0c 24                   decq    (%r12)
// 109: 75 0f                         jne     0x11a <_JIT_ENTRY+0x11a>
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_Dealloc
// 115: 4c 89 e7                      movq    %r12, %rdi
// 118: ff d0                         callq   *%rax
// 11a: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 11f: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 123: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 128: 48 85 c9                      testq   %rcx, %rcx
// 12b: 0f 84 d8 01 00 00             je      0x309 <_JIT_ENTRY+0x309>
// 131: 4f 8d 2c fe                   leaq    (%r14,%r15,8), %r13
// 135: 48 89 08                      movq    %rcx, (%rax)
// 138: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 13c: 48 8b 00                      movq    (%rax), %rax
// 13f: 84 c0                         testb   %al, %al
// 141: 74 17                         je      0x15a <_JIT_ENTRY+0x15a>
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_HandlePending
// 14d: 48 89 df                      movq    %rbx, %rdi
// 150: ff d0                         callq   *%rax
// 152: 85 c0                         testl   %eax, %eax
// 154: 0f 85 b2 01 00 00             jne     0x30c <_JIT_ENTRY+0x30c>
// 15a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015c:  R_X86_64_64  PySet_New
// 164: 31 ff                         xorl    %edi, %edi
// 166: ff d0                         callq   *%rax
// 168: 48 85 c0                      testq   %rax, %rax
// 16b: 0f 84 9b 01 00 00             je      0x30c <_JIT_ENTRY+0x30c>
// 171: 49 89 c7                      movq    %rax, %r15
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _JIT_OPARG
// 17e: 66 85 c0                      testw   %ax, %ax
// 181: 0f 84 09 02 00 00             je      0x390 <_JIT_ENTRY+0x390>
// 187: 4c 89 3c 24                   movq    %r15, (%rsp)
// 18b: 0f b7 c8                      movzwl  %ax, %ecx
// 18e: f7 d0                         notl    %eax
// 190: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 195: 48 98                         cltq
// 197: 48 29 c8                      subq    %rcx, %rax
// 19a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019c:  R_X86_64_64  _JIT_OPARG
// 1a4: 0f b7 c9                      movzwl  %cx, %ecx
// 1a7: 83 f9 02                      cmpl    $0x2, %ecx
// 1aa: bb 01 00 00 00                movl    $0x1, %ebx
// 1af: 0f 43 d9                      cmovael %ecx, %ebx
// 1b2: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 1b6: 45 31 e4                      xorl    %r12d, %r12d
// 1b9: 31 ed                         xorl    %ebp, %ebp
// 1bb: eb 0f                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bd: 0f 1f 00                      nopl    (%rax)
// 1c0: 49 ff c4                      incq    %r12
// 1c3: 4c 39 e3                      cmpq    %r12, %rbx
// 1c6: 0f 84 65 01 00 00             je      0x331 <_JIT_ENTRY+0x331>
// 1cc: 4f 8b 7c e5 00                movq    (%r13,%r12,8), %r15
// 1d1: 85 ed                         testl   %ebp, %ebp
// 1d3: 74 1b                         je      0x1f0 <_JIT_ENTRY+0x1f0>
// 1d5: 49 8b 07                      movq    (%r15), %rax
// 1d8: 48 85 c0                      testq   %rax, %rax
// 1db: 7e 30                         jle     0x20d <_JIT_ENTRY+0x20d>
// 1dd: 85 c0                         testl   %eax, %eax
// 1df: 78 df                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1e1: eb 4f                         jmp     0x232 <_JIT_ENTRY+0x232>
// 1e3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 1f0: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f4: 4c 89 fe                      movq    %r15, %rsi
// 1f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f9:  R_X86_64_64  PySet_Add
// 201: ff d0                         callq   *%rax
// 203: 89 c5                         movl    %eax, %ebp
// 205: 49 8b 07                      movq    (%r15), %rax
// 208: 48 85 c0                      testq   %rax, %rax
// 20b: 7f d0                         jg      0x1dd <_JIT_ENTRY+0x1dd>
// 20d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020f:  R_X86_64_64  .rodata.str1.1
// 217: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// 21c: 4c 89 fa                      movq    %r15, %rdx
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_NegativeRefcount
// 229: ff d0                         callq   *%rax
// 22b: 49 8b 07                      movq    (%r15), %rax
// 22e: 85 c0                         testl   %eax, %eax
// 230: 78 8e                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23c: ff d0                         callq   *%rax
// 23e: 49 ff 0f                      decq    (%r15)
// 241: 0f 85 79 ff ff ff             jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 247: 4c 89 ff                      movq    %r15, %rdi
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _Py_Dealloc
// 254: ff d0                         callq   *%rax
// 256: e9 65 ff ff ff                jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 25b: 49 29 fe                      subq    %rdi, %r14
// 25e: 49 83 c6 b8                   addq    $-0x48, %r14
// 262: 49 c1 ee 03                   shrq    $0x3, %r14
// 266: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 26a: 48 8b 07                      movq    (%rdi), %rax
// 26d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000026f:  R_X86_64_64  _JIT_TARGET
// 277: 89 c9                         movl    %ecx, %ecx
// 279: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 27d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 283: e9 9a 00 00 00                jmp     0x322 <_JIT_ENTRY+0x322>
// 288: 83 fb 02                      cmpl    $0x2, %ebx
// 28b: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 291: 44 0f 43 fb                   cmovael %ebx, %r15d
// 295: 31 db                         xorl    %ebx, %ebx
// 297: eb 13                         jmp     0x2ac <_JIT_ENTRY+0x2ac>
// 299: 0f 1f 80 00 00 00 00          nopl    (%rax)
// 2a0: 48 ff c3                      incq    %rbx
// 2a3: 49 39 df                      cmpq    %rbx, %r15
// 2a6: 0f 84 15 fe ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 2ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 2b1: 49 8b 45 00                   movq    (%r13), %rax
// 2b5: 48 85 c0                      testq   %rax, %rax
// 2b8: 7e 06                         jle     0x2c0 <_JIT_ENTRY+0x2c0>
// 2ba: 85 c0                         testl   %eax, %eax
// 2bc: 78 e2                         js      0x2a0 <_JIT_ENTRY+0x2a0>
// 2be: eb 26                         jmp     0x2e6 <_JIT_ENTRY+0x2e6>
// 2c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c2:  R_X86_64_64  .rodata.str1.1
// 2ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 2cf: 4c 89 ea                      movq    %r13, %rdx
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_NegativeRefcount
// 2dc: ff d0                         callq   *%rax
// 2de: 49 8b 45 00                   movq    (%r13), %rax
// 2e2: 85 c0                         testl   %eax, %eax
// 2e4: 78 ba                         js      0x2a0 <_JIT_ENTRY+0x2a0>
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f0: ff d0                         callq   *%rax
// 2f2: 49 ff 4d 00                   decq    (%r13)
// 2f6: 75 a8                         jne     0x2a0 <_JIT_ENTRY+0x2a0>
// 2f8: 4c 89 ef                      movq    %r13, %rdi
// 2fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fd:  R_X86_64_64  _Py_Dealloc
// 305: ff d0                         callq   *%rax
// 307: eb 97                         jmp     0x2a0 <_JIT_ENTRY+0x2a0>
// 309: 49 89 c5                      movq    %rax, %r13
// 30c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 311: 49 29 c5                      subq    %rax, %r13
// 314: 49 83 c5 b8                   addq    $-0x48, %r13
// 318: 49 c1 ed 03                   shrq    $0x3, %r13
// 31c: 44 89 68 40                   movl    %r13d, 0x40(%rax)
// 320: 31 c0                         xorl    %eax, %eax
// 322: 48 83 c4 28                   addq    $0x28, %rsp
// 326: 5b                            popq    %rbx
// 327: 41 5c                         popq    %r12
// 329: 41 5d                         popq    %r13
// 32b: 41 5e                         popq    %r14
// 32d: 41 5f                         popq    %r15
// 32f: 5d                            popq    %rbp
// 330: c3                            retq
// 331: 85 ed                         testl   %ebp, %ebp
// 333: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 338: 4c 8b 3c 24                   movq    (%rsp), %r15
// 33c: 74 52                         je      0x390 <_JIT_ENTRY+0x390>
// 33e: 49 8b 07                      movq    (%r15), %rax
// 341: 48 85 c0                      testq   %rax, %rax
// 344: 7f 21                         jg      0x367 <_JIT_ENTRY+0x367>
// 346: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000348:  R_X86_64_64  .rodata.str1.1
// 350: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 355: 4c 89 fa                      movq    %r15, %rdx
// 358: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035a:  R_X86_64_64  _Py_NegativeRefcount
// 362: ff d0                         callq   *%rax
// 364: 49 8b 07                      movq    (%r15), %rax
// 367: 85 c0                         testl   %eax, %eax
// 369: 78 a1                         js      0x30c <_JIT_ENTRY+0x30c>
// 36b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 375: ff d0                         callq   *%rax
// 377: 49 ff 0f                      decq    (%r15)
// 37a: 75 90                         jne     0x30c <_JIT_ENTRY+0x30c>
// 37c: 4c 89 ff                      movq    %r15, %rdi
// 37f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000381:  R_X86_64_64  _Py_Dealloc
// 389: ff d0                         callq   *%rax
// 38b: e9 7c ff ff ff                jmp     0x30c <_JIT_ENTRY+0x30c>
// 390: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000392:  R_X86_64_64  _JIT_OPARG
// 39a: 0f b7 c8                      movzwl  %ax, %ecx
// 39d: 0f b7 c0                      movzwl  %ax, %eax
// 3a0: ba 01 00 00 00                movl    $0x1, %edx
// 3a5: 29 c2                         subl    %eax, %edx
// 3a7: f7 d0                         notl    %eax
// 3a9: 48 98                         cltq
// 3ab: 48 63 d2                      movslq  %edx, %rdx
// 3ae: 48 01 c2                      addq    %rax, %rdx
// 3b1: 48 29 c8                      subq    %rcx, %rax
// 3b4: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 3b8: 49 8d 34 d6                   leaq    (%r14,%rdx,8), %rsi
// 3bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003be:  R_X86_64_64  _JIT_CONTINUE
// 3c6: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 3cb: 48 89 da                      movq    %rbx, %rdx
// 3ce: 48 83 c4 28                   addq    $0x28, %rsp
// 3d2: 5b                            popq    %rbx
// 3d3: 41 5c                         popq    %r12
// 3d5: 41 5d                         popq    %r13
// 3d7: 41 5e                         popq    %r14
// 3d9: 41 5f                         popq    %r15
// 3db: 5d                            popq    %rbp
// 3dc: ff e0                         jmpq    *%rax
// 3de: 
static const unsigned char _CALL_BUILTIN_CLASSplus_BUILD_SET_code_body[991] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf4, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xc7, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x3c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xd8, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xfe, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xb2, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x9b, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x09, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x3c, 0x24, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xc8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x83, 0xf9, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xd9, 0x4d, 0x8d, 0x2c, 0xc6, 0x45, 0x31, 0xe4, 0x31, 0xed, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x49, 0xff, 0xc4, 0x4c, 0x39, 0xe3, 0x0f, 0x84, 0x65, 0x01, 0x00, 0x00, 0x4f, 0x8b, 0x7c, 0xe5, 0x00, 0x85, 0xed, 0x74, 0x1b, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x9a, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfb, 0x31, 0xdb, 0xeb, 0x13, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x15, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc5, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x68, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x3c, 0x24, 0x74, 0x52, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xa1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x90, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x7c, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc2, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x63, 0xd2, 0x48, 0x01, 0xc2, 0x48, 0x29, 0xc8, 0x4d, 0x89, 0x3c, 0xc6, 0x49, 0x8d, 0x34, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_BUILD_SET_code_holes[27] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x348, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x35a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x36d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x381, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x392, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3be, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_BUILD_SET_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_BUILD_SET_data_holes[1];

// _CALL_BUILTIN_CLASSplus_BUILD_SLICE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_BUILD_SLICE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 01 01 00 00             je      0x168 <_JIT_ENTRY+0x168>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 f0 00 00 00             je      0x168 <_JIT_ENTRY+0x168>
// 78: 4c 89 0c 24                   movq    %r9, (%rsp)
// 7c: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 81: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 86: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 41 0f 94 c7                   sete    %r15b
// 96: 89 da                         movl    %ebx, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 41 84 c7                      testb   %al, %r15b
// bb: 0f 84 d4 00 00 00             je      0x195 <_JIT_ENTRY+0x195>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e3: 4c 89 e2                      movq    %r12, %rdx
// e6: ff d0                         callq   *%rax
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 85 c0                         testl   %eax, %eax
// ee: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// f3: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// f8: 78 21                         js      0x11b <_JIT_ENTRY+0x11b>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 0c 24                   decq    (%r12)
// 10a: 75 0f                         jne     0x11b <_JIT_ENTRY+0x11b>
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_Dealloc
// 116: 4c 89 e7                      movq    %r12, %rdi
// 119: ff d0                         callq   *%rax
// 11b: 48 8b 04 24                   movq    (%rsp), %rax
// 11f: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 123: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 128: 48 85 c9                      testq   %rcx, %rcx
// 12b: 0f 84 95 02 00 00             je      0x3c6 <_JIT_ENTRY+0x3c6>
// 131: 48 89 08                      movq    %rcx, (%rax)
// 134: 49 8b 47 10                   movq    0x10(%r15), %rax
// 138: 48 8b 00                      movq    (%rax), %rax
// 13b: 84 c0                         testb   %al, %al
// 13d: 0f 84 d6 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_HandlePending
// 14d: 4c 89 ff                      movq    %r15, %rdi
// 150: ff d0                         callq   *%rax
// 152: 85 c0                         testl   %eax, %eax
// 154: 0f 84 bf 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 15a: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 15f: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 163: e9 5e 02 00 00                jmp     0x3c6 <_JIT_ENTRY+0x3c6>
// 168: 49 29 fe                      subq    %rdi, %r14
// 16b: 49 83 c6 b8                   addq    $-0x48, %r14
// 16f: 49 c1 ee 03                   shrq    $0x3, %r14
// 173: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 177: 48 8b 07                      movq    (%rdi), %rax
// 17a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017c:  R_X86_64_64  _JIT_TARGET
// 184: 89 c9                         movl    %ecx, %ecx
// 186: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 18a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 190: e9 41 02 00 00                jmp     0x3d6 <_JIT_ENTRY+0x3d6>
// 195: 83 fb 02                      cmpl    $0x2, %ebx
// 198: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 19e: 44 0f 43 fb                   cmovael %ebx, %r15d
// 1a2: 31 db                         xorl    %ebx, %ebx
// 1a4: eb 16                         jmp     0x1bc <_JIT_ENTRY+0x1bc>
// 1a6: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 1b0: 48 ff c3                      incq    %rbx
// 1b3: 49 39 df                      cmpq    %rbx, %r15
// 1b6: 0f 84 05 ff ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 1bc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1c1: 49 8b 45 00                   movq    (%r13), %rax
// 1c5: 48 85 c0                      testq   %rax, %rax
// 1c8: 7e 06                         jle     0x1d0 <_JIT_ENTRY+0x1d0>
// 1ca: 85 c0                         testl   %eax, %eax
// 1cc: 78 e2                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1ce: eb 26                         jmp     0x1f6 <_JIT_ENTRY+0x1f6>
// 1d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1
// 1da: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1df: 4c 89 ea                      movq    %r13, %rdx
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_NegativeRefcount
// 1ec: ff d0                         callq   *%rax
// 1ee: 49 8b 45 00                   movq    (%r13), %rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 78 ba                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 200: ff d0                         callq   *%rax
// 202: 49 ff 4d 00                   decq    (%r13)
// 206: 75 a8                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 208: 4c 89 ef                      movq    %r13, %rdi
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_Dealloc
// 215: ff d0                         callq   *%rax
// 217: eb 97                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_OPARG
// 223: 66 83 f8 03                   cmpw    $0x3, %ax
// 227: 75 1f                         jne     0x248 <_JIT_ENTRY+0x248>
// 229: 89 c1                         movl    %eax, %ecx
// 22b: f7 d1                         notl    %ecx
// 22d: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 233: 48 63 c9                      movslq  %ecx, %rcx
// 236: 31 d2                         xorl    %edx, %edx
// 238: 66 83 f8 03                   cmpw    $0x3, %ax
// 23c: 0f 94 c2                      sete    %dl
// 23f: 48 29 d1                      subq    %rdx, %rcx
// 242: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// 246: eb 03                         jmp     0x24b <_JIT_ENTRY+0x24b>
// 248: 45 31 e4                      xorl    %r12d, %r12d
// 24b: 89 c1                         movl    %eax, %ecx
// 24d: f7 d1                         notl    %ecx
// 24f: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 255: 48 63 c9                      movslq  %ecx, %rcx
// 258: 31 d2                         xorl    %edx, %edx
// 25a: 66 83 f8 03                   cmpw    $0x3, %ax
// 25e: 0f 94 c2                      sete    %dl
// 261: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
// 266: 29 d0                         subl    %edx, %eax
// 268: f7 d2                         notl    %edx
// 26a: 48 63 da                      movslq  %edx, %rbx
// 26d: 48 01 cb                      addq    %rcx, %rbx
// 270: 49 8b 2c de                   movq    (%r14,%rbx,8), %rbp
// 274: 4c 63 e8                      movslq  %eax, %r13
// 277: 49 01 cd                      addq    %rcx, %r13
// 27a: 4f 8b 3c ee                   movq    (%r14,%r13,8), %r15
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  PySlice_New
// 288: 4c 89 ff                      movq    %r15, %rdi
// 28b: 48 89 ee                      movq    %rbp, %rsi
// 28e: 4c 89 e2                      movq    %r12, %rdx
// 291: ff d0                         callq   *%rax
// 293: 48 89 04 24                   movq    %rax, (%rsp)
// 297: 49 8b 07                      movq    (%r15), %rax
// 29a: 48 85 c0                      testq   %rax, %rax
// 29d: 7f 21                         jg      0x2c0 <_JIT_ENTRY+0x2c0>
// 29f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a1:  R_X86_64_64  .rodata.str1.1
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _Py_NegativeRefcount
// 2b3: be 86 0c 00 00                movl    $0xc86, %esi            # imm = 0xC86
// 2b8: 4c 89 fa                      movq    %r15, %rdx
// 2bb: ff d0                         callq   *%rax
// 2bd: 49 8b 07                      movq    (%r15), %rax
// 2c0: 85 c0                         testl   %eax, %eax
// 2c2: 78 20                         js      0x2e4 <_JIT_ENTRY+0x2e4>
// 2c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ce: ff d0                         callq   *%rax
// 2d0: 49 ff 0f                      decq    (%r15)
// 2d3: 75 0f                         jne     0x2e4 <_JIT_ENTRY+0x2e4>
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  _Py_Dealloc
// 2df: 4c 89 ff                      movq    %r15, %rdi
// 2e2: ff d0                         callq   *%rax
// 2e4: 48 8b 45 00                   movq    (%rbp), %rax
// 2e8: 48 85 c0                      testq   %rax, %rax
// 2eb: 7f 22                         jg      0x30f <_JIT_ENTRY+0x30f>
// 2ed: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ef:  R_X86_64_64  .rodata.str1.1
// 2f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f9:  R_X86_64_64  _Py_NegativeRefcount
// 301: be 87 0c 00 00                movl    $0xc87, %esi            # imm = 0xC87
// 306: 48 89 ea                      movq    %rbp, %rdx
// 309: ff d0                         callq   *%rax
// 30b: 48 8b 45 00                   movq    (%rbp), %rax
// 30f: 85 c0                         testl   %eax, %eax
// 311: 4c 8b 3c 24                   movq    (%rsp), %r15
// 315: 78 21                         js      0x338 <_JIT_ENTRY+0x338>
// 317: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000319:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 321: ff d0                         callq   *%rax
// 323: 48 ff 4d 00                   decq    (%rbp)
// 327: 75 0f                         jne     0x338 <_JIT_ENTRY+0x338>
// 329: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032b:  R_X86_64_64  _Py_Dealloc
// 333: 48 89 ef                      movq    %rbp, %rdi
// 336: ff d0                         callq   *%rax
// 338: 4d 85 e4                      testq   %r12, %r12
// 33b: 74 50                         je      0x38d <_JIT_ENTRY+0x38d>
// 33d: 49 8b 04 24                   movq    (%r12), %rax
// 341: 48 85 c0                      testq   %rax, %rax
// 344: 7f 22                         jg      0x368 <_JIT_ENTRY+0x368>
// 346: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000348:  R_X86_64_64  .rodata.str1.1+0x39
// 350: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000352:  R_X86_64_64  _Py_NegativeRefcount
// 35a: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 35f: 4c 89 e2                      movq    %r12, %rdx
// 362: ff d0                         callq   *%rax
// 364: 49 8b 04 24                   movq    (%r12), %rax
// 368: 85 c0                         testl   %eax, %eax
// 36a: 78 21                         js      0x38d <_JIT_ENTRY+0x38d>
// 36c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 376: ff d0                         callq   *%rax
// 378: 49 ff 0c 24                   decq    (%r12)
// 37c: 75 0f                         jne     0x38d <_JIT_ENTRY+0x38d>
// 37e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000380:  R_X86_64_64  _Py_Dealloc
// 388: 4c 89 e7                      movq    %r12, %rdi
// 38b: ff d0                         callq   *%rax
// 38d: 4b 8d 04 ee                   leaq    (%r14,%r13,8), %rax
// 391: 4d 85 ff                      testq   %r15, %r15
// 394: 74 2b                         je      0x3c1 <_JIT_ENTRY+0x3c1>
// 396: 49 8d 34 de                   leaq    (%r14,%rbx,8), %rsi
// 39a: 4c 89 38                      movq    %r15, (%rax)
// 39d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039f:  R_X86_64_64  _JIT_CONTINUE
// 3a7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 3ac: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 3b1: 48 83 c4 28                   addq    $0x28, %rsp
// 3b5: 5b                            popq    %rbx
// 3b6: 41 5c                         popq    %r12
// 3b8: 41 5d                         popq    %r13
// 3ba: 41 5e                         popq    %r14
// 3bc: 41 5f                         popq    %r15
// 3be: 5d                            popq    %rbp
// 3bf: ff e0                         jmpq    *%rax
// 3c1: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 3c6: 48 29 d8                      subq    %rbx, %rax
// 3c9: 48 83 c0 b8                   addq    $-0x48, %rax
// 3cd: 48 c1 e8 03                   shrq    $0x3, %rax
// 3d1: 89 43 40                      movl    %eax, 0x40(%rbx)
// 3d4: 31 c0                         xorl    %eax, %eax
// 3d6: 48 83 c4 28                   addq    $0x28, %rsp
// 3da: 5b                            popq    %rbx
// 3db: 41 5c                         popq    %r12
// 3dd: 41 5d                         popq    %r13
// 3df: 41 5e                         popq    %r14
// 3e1: 41 5f                         popq    %r15
// 3e3: 5d                            popq    %rbp
// 3e4: c3                            retq
// 3e5: 
static const unsigned char _CALL_BUILTIN_CLASSplus_BUILD_SLICE_code_body[998] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x01, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xf0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x0c, 0x24, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xd4, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x95, 0x02, 0x00, 0x00, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xbf, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0x5e, 0x02, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x41, 0x02, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfb, 0x31, 0xdb, 0xeb, 0x16, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x05, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xf8, 0x03, 0x75, 0x1f, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x31, 0xd2, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x94, 0xc2, 0x48, 0x29, 0xd1, 0x4d, 0x8b, 0x24, 0xce, 0xeb, 0x03, 0x45, 0x31, 0xe4, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x31, 0xd2, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x94, 0xc2, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd0, 0xf7, 0xd2, 0x48, 0x63, 0xda, 0x48, 0x01, 0xcb, 0x49, 0x8b, 0x2c, 0xde, 0x4c, 0x63, 0xe8, 0x49, 0x01, 0xcd, 0x4f, 0x8b, 0x3c, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x3c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xee, 0x4d, 0x85, 0xff, 0x74, 0x2b, 0x49, 0x8d, 0x34, 0xde, 0x4c, 0x89, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_BUILD_SLICE_code_holes[28] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySlice_New, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x319, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x32b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x348, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x352, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x36e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x380, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x39f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_BUILD_SLICE_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_BUILD_SLICE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_BUILD_STRING
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_BUILD_STRING.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 0c 24                   movq    %r9, (%rsp)
// 74: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 79: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 7e: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 83: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 ea                      movl    %r13d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c8 00 00 00             jle     0x189 <_JIT_ENTRY+0x189>
// c1: 85 c0                         testl   %eax, %eax
// c3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// c8: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// cd: 0f 89 e6 00 00 00             jns     0x1b9 <_JIT_ENTRY+0x1b9>
// d3: e9 02 01 00 00                jmp     0x1da <_JIT_ENTRY+0x1da>
// d8: 49 29 fe                      subq    %rdi, %r14
// db: 49 83 c6 b8                   addq    $-0x48, %r14
// df: 49 c1 ee 03                   shrq    $0x3, %r14
// e3: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 4f 02 00 00                jmp     0x354 <_JIT_ENTRY+0x354>
// 105: 41 83 fd 02                   cmpl    $0x2, %r13d
// 109: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 10f: 45 0f 43 fd                   cmovael %r13d, %r15d
// 113: 31 db                         xorl    %ebx, %ebx
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 48 ff c3                      incq    %rbx
// 123: 49 39 df                      cmpq    %rbx, %r15
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 12d: 49 8b 45 00                   movq    (%r13), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 0a                         jle     0x140 <_JIT_ENTRY+0x140>
// 136: 85 c0                         testl   %eax, %eax
// 138: 78 e6                         js      0x120 <_JIT_ENTRY+0x120>
// 13a: eb 2a                         jmp     0x166 <_JIT_ENTRY+0x166>
// 13c: 0f 1f 40 00                   nopl    (%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 ea                      movq    %r13, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 78 ba                         js      0x120 <_JIT_ENTRY+0x120>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 4d 00                   decq    (%r13)
// 176: 75 a8                         jne     0x120 <_JIT_ENTRY+0x120>
// 178: 4c 89 ef                      movq    %r13, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: eb 97                         jmp     0x120 <_JIT_ENTRY+0x120>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b2: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1b7: 78 21                         js      0x1da <_JIT_ENTRY+0x1da>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c3: ff d0                         callq   *%rax
// 1c5: 49 ff 0c 24                   decq    (%r12)
// 1c9: 75 0f                         jne     0x1da <_JIT_ENTRY+0x1da>
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _Py_Dealloc
// 1d5: 4c 89 e7                      movq    %r12, %rdi
// 1d8: ff d0                         callq   *%rax
// 1da: 48 8b 04 24                   movq    (%rsp), %rax
// 1de: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 1e2: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e7: 48 85 c0                      testq   %rax, %rax
// 1ea: 0f 84 53 01 00 00             je      0x343 <_JIT_ENTRY+0x343>
// 1f0: 49 89 04 24                   movq    %rax, (%r12)
// 1f4: 49 8b 47 10                   movq    0x10(%r15), %rax
// 1f8: 48 8b 00                      movq    (%rax), %rax
// 1fb: 84 c0                         testb   %al, %al
// 1fd: 74 21                         je      0x220 <_JIT_ENTRY+0x220>
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_HandlePending
// 209: 4c 89 ff                      movq    %r15, %rdi
// 20c: ff d0                         callq   *%rax
// 20e: 85 c0                         testl   %eax, %eax
// 210: 74 0e                         je      0x220 <_JIT_ENTRY+0x220>
// 212: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 217: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 21b: e9 23 01 00 00                jmp     0x343 <_JIT_ENTRY+0x343>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _JIT_OPARG
// 22a: 0f b7 d8                      movzwl  %ax, %ebx
// 22d: 89 d9                         movl    %ebx, %ecx
// 22f: f7 d1                         notl    %ecx
// 231: 48 63 c9                      movslq  %ecx, %rcx
// 234: 0f b7 d0                      movzwl  %ax, %edx
// 237: 48 29 d1                      subq    %rdx, %rcx
// 23a: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _PyUnicode_JoinArray
// 248: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024a:  R_X86_64_64  _PyRuntime
// 252: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 259: 4c 89 e6                      movq    %r12, %rsi
// 25c: ff d0                         callq   *%rax
// 25e: 48 89 04 24                   movq    %rax, (%rsp)
// 262: 85 db                         testl   %ebx, %ebx
// 264: 0f 8e 7d 00 00 00             jle     0x2e7 <_JIT_ENTRY+0x2e7>
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _JIT_OPARG
// 274: 0f b7 d8                      movzwl  %ax, %ebx
// 277: 48 ff c3                      incq    %rbx
// 27a: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000027c:  R_X86_64_64  .rodata.str1.1
// 284: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000286:  R_X86_64_64  _Py_NegativeRefcount
// 28e: eb 09                         jmp     0x299 <_JIT_ENTRY+0x299>
// 290: 48 ff cb                      decq    %rbx
// 293: 48 83 fb 01                   cmpq    $0x1, %rbx
// 297: 7e 4e                         jle     0x2e7 <_JIT_ENTRY+0x2e7>
// 299: 8d 43 fe                      leal    -0x2(%rbx), %eax
// 29c: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// 2a0: 49 8b 07                      movq    (%r15), %rax
// 2a3: 48 85 c0                      testq   %rax, %rax
// 2a6: 7e 08                         jle     0x2b0 <_JIT_ENTRY+0x2b0>
// 2a8: 85 c0                         testl   %eax, %eax
// 2aa: 78 e4                         js      0x290 <_JIT_ENTRY+0x290>
// 2ac: eb 17                         jmp     0x2c5 <_JIT_ENTRY+0x2c5>
// 2ae: 66 90                         nop
// 2b0: 48 89 ef                      movq    %rbp, %rdi
// 2b3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// 2b8: 4c 89 fa                      movq    %r15, %rdx
// 2bb: 41 ff d5                      callq   *%r13
// 2be: 49 8b 07                      movq    (%r15), %rax
// 2c1: 85 c0                         testl   %eax, %eax
// 2c3: 78 cb                         js      0x290 <_JIT_ENTRY+0x290>
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2cf: ff d0                         callq   *%rax
// 2d1: 49 ff 0f                      decq    (%r15)
// 2d4: 75 ba                         jne     0x290 <_JIT_ENTRY+0x290>
// 2d6: 4c 89 ff                      movq    %r15, %rdi
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  _Py_Dealloc
// 2e3: ff d0                         callq   *%rax
// 2e5: eb a9                         jmp     0x290 <_JIT_ENTRY+0x290>
// 2e7: 48 8b 34 24                   movq    (%rsp), %rsi
// 2eb: 48 85 f6                      testq   %rsi, %rsi
// 2ee: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 2f3: 74 4e                         je      0x343 <_JIT_ENTRY+0x343>
// 2f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f7:  R_X86_64_64  _JIT_OPARG
// 2ff: 0f b7 c8                      movzwl  %ax, %ecx
// 302: 0f b7 c0                      movzwl  %ax, %eax
// 305: ba 01 00 00 00                movl    $0x1, %edx
// 30a: 29 c2                         subl    %eax, %edx
// 30c: f7 d0                         notl    %eax
// 30e: 48 98                         cltq
// 310: 48 63 d2                      movslq  %edx, %rdx
// 313: 48 01 c2                      addq    %rax, %rdx
// 316: 48 29 c8                      subq    %rcx, %rax
// 319: 49 89 34 c6                   movq    %rsi, (%r14,%rax,8)
// 31d: 49 8d 34 d6                   leaq    (%r14,%rdx,8), %rsi
// 321: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000323:  R_X86_64_64  _JIT_CONTINUE
// 32b: 48 89 df                      movq    %rbx, %rdi
// 32e: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 333: 48 83 c4 28                   addq    $0x28, %rsp
// 337: 5b                            popq    %rbx
// 338: 41 5c                         popq    %r12
// 33a: 41 5d                         popq    %r13
// 33c: 41 5e                         popq    %r14
// 33e: 41 5f                         popq    %r15
// 340: 5d                            popq    %rbp
// 341: ff e0                         jmpq    *%rax
// 343: 49 29 dc                      subq    %rbx, %r12
// 346: 49 83 c4 b8                   addq    $-0x48, %r12
// 34a: 49 c1 ec 03                   shrq    $0x3, %r12
// 34e: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 352: 31 c0                         xorl    %eax, %eax
// 354: 48 83 c4 28                   addq    $0x28, %rsp
// 358: 5b                            popq    %rbx
// 359: 41 5c                         popq    %r12
// 35b: 41 5d                         popq    %r13
// 35d: 41 5e                         popq    %r14
// 35f: 41 5f                         popq    %r15
// 361: 5d                            popq    %rbp
// 362: c3                            retq
// 363: 
static const unsigned char _CALL_BUILTIN_CLASSplus_BUILD_STRING_code_body[868] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x0c, 0x24, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc8, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x0f, 0x89, 0xe6, 0x00, 0x00, 0x00, 0xe9, 0x02, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x4f, 0x02, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x74, 0x8c, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x85, 0xc0, 0x78, 0xe6, 0xeb, 0x2a, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x24, 0xc6, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x53, 0x01, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x0e, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x4d, 0x8d, 0x24, 0xc6, 0xe9, 0x23, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x89, 0xd9, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x0f, 0xb7, 0xd0, 0x48, 0x29, 0xd1, 0x4d, 0x8d, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x85, 0xdb, 0x0f, 0x8e, 0x7d, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x09, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x4e, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xcb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xba, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xa9, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x74, 0x4e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc2, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x63, 0xd2, 0x48, 0x01, 0xc2, 0x48, 0x29, 0xc8, 0x49, 0x89, 0x34, 0xc6, 0x49, 0x8d, 0x34, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_BUILD_STRING_code_holes[23] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x323, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_BUILD_STRING_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_BUILD_STRING_data_holes[1];

// _CALL_BUILTIN_CLASSplus_BUILD_TUPLE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_BUILD_TUPLE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 14 24                   movq    %r10, (%rsp)
// 79: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 7e: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 83: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 ea                      movl    %r13d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c8 00 00 00             jle     0x189 <_JIT_ENTRY+0x189>
// c1: 85 c0                         testl   %eax, %eax
// c3: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// c8: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// cd: 0f 89 e6 00 00 00             jns     0x1b9 <_JIT_ENTRY+0x1b9>
// d3: e9 02 01 00 00                jmp     0x1da <_JIT_ENTRY+0x1da>
// d8: 49 29 fe                      subq    %rdi, %r14
// db: 49 83 c6 b8                   addq    $-0x48, %r14
// df: 49 c1 ee 03                   shrq    $0x3, %r14
// e3: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 a6 01 00 00                jmp     0x2ab <_JIT_ENTRY+0x2ab>
// 105: 41 83 fd 02                   cmpl    $0x2, %r13d
// 109: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 10f: 45 0f 43 fd                   cmovael %r13d, %r15d
// 113: 31 db                         xorl    %ebx, %ebx
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 48 ff c3                      incq    %rbx
// 123: 49 39 df                      cmpq    %rbx, %r15
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 12d: 49 8b 45 00                   movq    (%r13), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 0a                         jle     0x140 <_JIT_ENTRY+0x140>
// 136: 85 c0                         testl   %eax, %eax
// 138: 78 e6                         js      0x120 <_JIT_ENTRY+0x120>
// 13a: eb 2a                         jmp     0x166 <_JIT_ENTRY+0x166>
// 13c: 0f 1f 40 00                   nopl    (%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 ea                      movq    %r13, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 78 ba                         js      0x120 <_JIT_ENTRY+0x120>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 4d 00                   decq    (%r13)
// 176: 75 a8                         jne     0x120 <_JIT_ENTRY+0x120>
// 178: 4c 89 ef                      movq    %r13, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: eb 97                         jmp     0x120 <_JIT_ENTRY+0x120>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 1b2: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 1b7: 78 21                         js      0x1da <_JIT_ENTRY+0x1da>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c3: ff d0                         callq   *%rax
// 1c5: 49 ff 0c 24                   decq    (%r12)
// 1c9: 75 0f                         jne     0x1da <_JIT_ENTRY+0x1da>
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _Py_Dealloc
// 1d5: 4c 89 e7                      movq    %r12, %rdi
// 1d8: ff d0                         callq   *%rax
// 1da: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1df: 4d 8d 3c c6                   leaq    (%r14,%rax,8), %r15
// 1e3: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1e8: 48 85 c0                      testq   %rax, %rax
// 1eb: 0f 84 a9 00 00 00             je      0x29a <_JIT_ENTRY+0x29a>
// 1f1: 49 89 07                      movq    %rax, (%r15)
// 1f4: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1f8: 48 8b 00                      movq    (%rax), %rax
// 1fb: 84 c0                         testb   %al, %al
// 1fd: 74 1d                         je      0x21c <_JIT_ENTRY+0x21c>
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_HandlePending
// 209: 4c 89 ef                      movq    %r13, %rdi
// 20c: ff d0                         callq   *%rax
// 20e: 85 c0                         testl   %eax, %eax
// 210: 74 0a                         je      0x21c <_JIT_ENTRY+0x21c>
// 212: 48 8b 04 24                   movq    (%rsp), %rax
// 216: 4d 8d 3c c6                   leaq    (%r14,%rax,8), %r15
// 21a: eb 7e                         jmp     0x29a <_JIT_ENTRY+0x29a>
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _JIT_OPARG
// 226: 0f b7 f0                      movzwl  %ax, %esi
// 229: f7 d0                         notl    %eax
// 22b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 230: 48 98                         cltq
// 232: 48 29 f0                      subq    %rsi, %rax
// 235: 4d 8d 3c c6                   leaq    (%r14,%rax,8), %r15
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _PyTuple_FromArraySteal
// 243: 4c 89 ff                      movq    %r15, %rdi
// 246: ff d0                         callq   *%rax
// 248: 48 85 c0                      testq   %rax, %rax
// 24b: 74 4d                         je      0x29a <_JIT_ENTRY+0x29a>
// 24d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024f:  R_X86_64_64  _JIT_OPARG
// 257: 0f b7 d1                      movzwl  %cx, %edx
// 25a: 0f b7 c9                      movzwl  %cx, %ecx
// 25d: be 01 00 00 00                movl    $0x1, %esi
// 262: 29 ce                         subl    %ecx, %esi
// 264: f7 d1                         notl    %ecx
// 266: 48 63 c9                      movslq  %ecx, %rcx
// 269: 48 63 f6                      movslq  %esi, %rsi
// 26c: 48 01 ce                      addq    %rcx, %rsi
// 26f: 48 29 d1                      subq    %rdx, %rcx
// 272: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 276: 49 8d 34 f6                   leaq    (%r14,%rsi,8), %rsi
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  _JIT_CONTINUE
// 284: 48 89 df                      movq    %rbx, %rdi
// 287: 4c 89 ea                      movq    %r13, %rdx
// 28a: 48 83 c4 28                   addq    $0x28, %rsp
// 28e: 5b                            popq    %rbx
// 28f: 41 5c                         popq    %r12
// 291: 41 5d                         popq    %r13
// 293: 41 5e                         popq    %r14
// 295: 41 5f                         popq    %r15
// 297: 5d                            popq    %rbp
// 298: ff e0                         jmpq    *%rax
// 29a: 49 29 df                      subq    %rbx, %r15
// 29d: 49 83 c7 b8                   addq    $-0x48, %r15
// 2a1: 49 c1 ef 03                   shrq    $0x3, %r15
// 2a5: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2a9: 31 c0                         xorl    %eax, %eax
// 2ab: 48 83 c4 28                   addq    $0x28, %rsp
// 2af: 5b                            popq    %rbx
// 2b0: 41 5c                         popq    %r12
// 2b2: 41 5d                         popq    %r13
// 2b4: 41 5e                         popq    %r14
// 2b6: 41 5f                         popq    %r15
// 2b8: 5d                            popq    %rbp
// 2b9: c3                            retq
// 2ba: 
static const unsigned char _CALL_BUILTIN_CLASSplus_BUILD_TUPLE_code_body[699] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc8, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x0f, 0x89, 0xe6, 0x00, 0x00, 0x00, 0xe9, 0x02, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x74, 0x8c, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x85, 0xc0, 0x78, 0xe6, 0xeb, 0x2a, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8d, 0x3c, 0xc6, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xa9, 0x00, 0x00, 0x00, 0x49, 0x89, 0x07, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x0a, 0x48, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x3c, 0xc6, 0xeb, 0x7e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xf0, 0x4d, 0x8d, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x4d, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xc9, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xce, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x63, 0xf6, 0x48, 0x01, 0xce, 0x48, 0x29, 0xd1, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_BUILD_TUPLE_code_holes[17] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyTuple_FromArraySteal, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_BUILD_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_BUILD_TUPLE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CALL_BUILTIN_CLASS
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CALL_BUILTIN_CLASS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 fd                      movq    %rdi, %r13
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 f9 02 00 00             je      0x363 <_JIT_ENTRY+0x363>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 e8 02 00 00             je      0x363 <_JIT_ENTRY+0x363>
// 7b: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 80: 4c 89 0c 24                   movq    %r9, (%rsp)
// 84: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 89: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 8e: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 41 0f 94 c6                   sete    %r14b
// 99: 89 da                         movl    %ebx, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c6                      testb   %al, %r14b
// be: 0f 84 b7 00 00 00             je      0x17b <_JIT_ENTRY+0x17b>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// f6: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// fb: 4c 8b 34 24                   movq    (%rsp), %r14
// ff: 78 21                         js      0x122 <_JIT_ENTRY+0x122>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10b: ff d0                         callq   *%rax
// 10d: 49 ff 0c 24                   decq    (%r12)
// 111: 75 0f                         jne     0x122 <_JIT_ENTRY+0x122>
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _Py_Dealloc
// 11d: 4c 89 e7                      movq    %r12, %rdi
// 120: ff d0                         callq   *%rax
// 122: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 127: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 12b: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 130: 48 85 c9                      testq   %rcx, %rcx
// 133: 74 30                         je      0x165 <_JIT_ENTRY+0x165>
// 135: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 139: 48 89 08                      movq    %rcx, (%rax)
// 13c: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 140: 48 8b 00                      movq    (%rax), %rax
// 143: 84 c0                         testb   %al, %al
// 145: 0f 84 ae 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_HandlePending
// 155: 48 89 df                      movq    %rbx, %rdi
// 158: ff d0                         callq   *%rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 84 97 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 162: 4c 89 f0                      movq    %r14, %rax
// 165: 4c 29 e8                      subq    %r13, %rax
// 168: 48 83 c0 b8                   addq    $-0x48, %rax
// 16c: 48 c1 e8 03                   shrq    $0x3, %rax
// 170: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 174: 31 c0                         xorl    %eax, %eax
// 176: e9 11 02 00 00                jmp     0x38c <_JIT_ENTRY+0x38c>
// 17b: 83 fb 02                      cmpl    $0x2, %ebx
// 17e: 41 be 01 00 00 00             movl    $0x1, %r14d
// 184: 44 0f 43 f3                   cmovael %ebx, %r14d
// 188: 31 db                         xorl    %ebx, %ebx
// 18a: eb 10                         jmp     0x19c <_JIT_ENTRY+0x19c>
// 18c: 0f 1f 40 00                   nopl    (%rax)
// 190: 48 ff c3                      incq    %rbx
// 193: 49 39 de                      cmpq    %rbx, %r14
// 196: 0f 84 28 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 19c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1a1: 49 8b 45 00                   movq    (%r13), %rax
// 1a5: 48 85 c0                      testq   %rax, %rax
// 1a8: 7e 06                         jle     0x1b0 <_JIT_ENTRY+0x1b0>
// 1aa: 85 c0                         testl   %eax, %eax
// 1ac: 78 e2                         js      0x190 <_JIT_ENTRY+0x190>
// 1ae: eb 26                         jmp     0x1d6 <_JIT_ENTRY+0x1d6>
// 1b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1
// 1ba: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1bf: 4c 89 ea                      movq    %r13, %rdx
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _Py_NegativeRefcount
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 8b 45 00                   movq    (%r13), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 ba                         js      0x190 <_JIT_ENTRY+0x190>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 ff 4d 00                   decq    (%r13)
// 1e6: 75 a8                         jne     0x190 <_JIT_ENTRY+0x190>
// 1e8: 4c 89 ef                      movq    %r13, %rdi
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: ff d0                         callq   *%rax
// 1f7: eb 97                         jmp     0x190 <_JIT_ENTRY+0x190>
// 1f9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001fb:  R_X86_64_64  _JIT_OPARG
// 203: 0f b7 d1                      movzwl  %cx, %edx
// 206: 89 d0                         movl    %edx, %eax
// 208: f7 d0                         notl    %eax
// 20a: 48 63 f0                      movslq  %eax, %rsi
// 20d: 4c 8d 0c 36                   leaq    (%rsi,%rsi), %r9
// 211: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 215: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 21a: 29 d7                         subl    %edx, %edi
// 21c: 48 63 df                      movslq  %edi, %rbx
// 21f: 48 01 f3                      addq    %rsi, %rbx
// 222: 0f b7 c9                      movzwl  %cx, %ecx
// 225: 48 89 ce                      movq    %rcx, %rsi
// 228: 48 f7 de                      negq    %rsi
// 22b: 44 8d 62 01                   leal    0x1(%rdx), %r12d
// 22f: 48 85 c0                      testq   %rax, %rax
// 232: 48 f7 d1                      notq    %rcx
// 235: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 239: 44 0f 44 e2                   cmovel  %edx, %r12d
// 23d: 49 8b 3c df                   movq    (%r15,%rbx,8), %rdi
// 241: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 245: f6 82 ab 00 00 00 80          testb   $-0x80, 0xab(%rdx)
// 24c: 0f 84 0e 01 00 00             je      0x360 <_JIT_ENTRY+0x360>
// 252: 4c 8b 87 90 01 00 00          movq    0x190(%rdi), %r8
// 259: 4d 85 c0                      testq   %r8, %r8
// 25c: 0f 84 fe 00 00 00             je      0x360 <_JIT_ENTRY+0x360>
// 262: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 267: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 26b: 48 85 c0                      testq   %rax, %rax
// 26e: 41 0f 94 c6                   sete    %r14b
// 272: 44 89 e2                      movl    %r12d, %edx
// 275: 48 89 3c 24                   movq    %rdi, (%rsp)
// 279: 48 89 ee                      movq    %rbp, %rsi
// 27c: 31 c9                         xorl    %ecx, %ecx
// 27e: 41 ff d0                      callq   *%r8
// 281: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _JIT_OPARG
// 290: 66 85 c0                      testw   %ax, %ax
// 293: 0f 94 c0                      sete    %al
// 296: 41 84 c6                      testb   %al, %r14b
// 299: 0f 84 fc 00 00 00             je      0x39b <_JIT_ENTRY+0x39b>
// 29f: 48 8b 14 24                   movq    (%rsp), %rdx
// 2a3: 48 8b 02                      movq    (%rdx), %rax
// 2a6: 48 85 c0                      testq   %rax, %rax
// 2a9: 4c 8b 64 24 18                movq    0x18(%rsp), %r12
// 2ae: 7f 22                         jg      0x2d2 <_JIT_ENTRY+0x2d2>
// 2b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b2:  R_X86_64_64  .rodata.str1.1
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _Py_NegativeRefcount
// 2c4: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 2c9: ff d0                         callq   *%rax
// 2cb: 48 8b 04 24                   movq    (%rsp), %rax
// 2cf: 48 8b 00                      movq    (%rax), %rax
// 2d2: 85 c0                         testl   %eax, %eax
// 2d4: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// 2d9: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 2de: 78 21                         js      0x301 <_JIT_ENTRY+0x301>
// 2e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ea: ff d0                         callq   *%rax
// 2ec: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2f0: 48 ff 0f                      decq    (%rdi)
// 2f3: 75 0c                         jne     0x301 <_JIT_ENTRY+0x301>
// 2f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f7:  R_X86_64_64  _Py_Dealloc
// 2ff: ff d0                         callq   *%rax
// 301: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 305: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 30a: 48 85 c9                      testq   %rcx, %rcx
// 30d: 0f 84 52 fe ff ff             je      0x165 <_JIT_ENTRY+0x165>
// 313: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 317: 48 89 08                      movq    %rcx, (%rax)
// 31a: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 31f: 48 8b 00                      movq    (%rax), %rax
// 322: 84 c0                         testb   %al, %al
// 324: 74 17                         je      0x33d <_JIT_ENTRY+0x33d>
// 326: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000328:  R_X86_64_64  _Py_HandlePending
// 330: 4c 89 e7                      movq    %r12, %rdi
// 333: ff d0                         callq   *%rax
// 335: 85 c0                         testl   %eax, %eax
// 337: 0f 85 25 fe ff ff             jne     0x162 <_JIT_ENTRY+0x162>
// 33d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033f:  R_X86_64_64  _JIT_CONTINUE
// 347: 4c 89 ef                      movq    %r13, %rdi
// 34a: 4c 89 f6                      movq    %r14, %rsi
// 34d: 4c 89 e2                      movq    %r12, %rdx
// 350: 48 83 c4 28                   addq    $0x28, %rsp
// 354: 5b                            popq    %rbx
// 355: 41 5c                         popq    %r12
// 357: 41 5d                         popq    %r13
// 359: 41 5e                         popq    %r14
// 35b: 41 5f                         popq    %r15
// 35d: 5d                            popq    %rbp
// 35e: ff e0                         jmpq    *%rax
// 360: 4d 89 f7                      movq    %r14, %r15
// 363: 4d 29 ef                      subq    %r13, %r15
// 366: 49 83 c7 b8                   addq    $-0x48, %r15
// 36a: 49 c1 ef 03                   shrq    $0x3, %r15
// 36e: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 372: 49 8b 45 00                   movq    (%r13), %rax
// 376: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000378:  R_X86_64_64  _JIT_TARGET
// 380: 89 c9                         movl    %ecx, %ecx
// 382: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 386: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 38c: 48 83 c4 28                   addq    $0x28, %rsp
// 390: 5b                            popq    %rbx
// 391: 41 5c                         popq    %r12
// 393: 41 5d                         popq    %r13
// 395: 41 5e                         popq    %r14
// 397: 41 5f                         popq    %r15
// 399: 5d                            popq    %rbp
// 39a: c3                            retq
// 39b: 41 83 fc 02                   cmpl    $0x2, %r12d
// 39f: 41 be 01 00 00 00             movl    $0x1, %r14d
// 3a5: 45 0f 43 f4                   cmovael %r12d, %r14d
// 3a9: 45 31 e4                      xorl    %r12d, %r12d
// 3ac: eb 0e                         jmp     0x3bc <_JIT_ENTRY+0x3bc>
// 3ae: 66 90                         nop
// 3b0: 49 ff c4                      incq    %r12
// 3b3: 4d 39 e6                      cmpq    %r12, %r14
// 3b6: 0f 84 e3 fe ff ff             je      0x29f <_JIT_ENTRY+0x29f>
// 3bc: 4e 8b 6c e5 00                movq    (%rbp,%r12,8), %r13
// 3c1: 49 8b 45 00                   movq    (%r13), %rax
// 3c5: 48 85 c0                      testq   %rax, %rax
// 3c8: 7e 06                         jle     0x3d0 <_JIT_ENTRY+0x3d0>
// 3ca: 85 c0                         testl   %eax, %eax
// 3cc: 78 e2                         js      0x3b0 <_JIT_ENTRY+0x3b0>
// 3ce: eb 26                         jmp     0x3f6 <_JIT_ENTRY+0x3f6>
// 3d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003d2:  R_X86_64_64  .rodata.str1.1
// 3da: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 3df: 4c 89 ea                      movq    %r13, %rdx
// 3e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e4:  R_X86_64_64  _Py_NegativeRefcount
// 3ec: ff d0                         callq   *%rax
// 3ee: 49 8b 45 00                   movq    (%r13), %rax
// 3f2: 85 c0                         testl   %eax, %eax
// 3f4: 78 ba                         js      0x3b0 <_JIT_ENTRY+0x3b0>
// 3f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 400: ff d0                         callq   *%rax
// 402: 49 ff 4d 00                   decq    (%r13)
// 406: 75 a8                         jne     0x3b0 <_JIT_ENTRY+0x3b0>
// 408: 4c 89 ef                      movq    %r13, %rdi
// 40b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000040d:  R_X86_64_64  _Py_Dealloc
// 415: ff d0                         callq   *%rax
// 417: eb 97                         jmp     0x3b0 <_JIT_ENTRY+0x3b0>
// 419: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_BUILTIN_CLASS_code_body[1050] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd7, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf9, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe8, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x30, 0x4f, 0x8d, 0x34, 0xf7, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xe9, 0x11, 0x02, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x48, 0x63, 0xf0, 0x4c, 0x8d, 0x0c, 0x36, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd7, 0x48, 0x63, 0xdf, 0x48, 0x01, 0xf3, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x62, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xe2, 0x49, 0x8b, 0x3c, 0xdf, 0x48, 0x8b, 0x57, 0x08, 0xf6, 0x82, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x0e, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x87, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xfe, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x44, 0x89, 0xe2, 0x48, 0x89, 0x3c, 0x24, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xfc, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x02, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x18, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x52, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xf7, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x25, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xf7, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfc, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf4, 0x45, 0x31, 0xe4, 0xeb, 0x0e, 0x66, 0x90, 0x49, 0xff, 0xc4, 0x4d, 0x39, 0xe6, 0x0f, 0x84, 0xe3, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xe5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_BUILTIN_CLASS_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x33f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x378, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x3d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x40d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_BUILTIN_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_BUILTIN_CLASS_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CALL_BUILTIN_FAST
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CALL_BUILTIN_FAST.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fd                      movq    %rdi, %rbp
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 ee 02 00 00             je      0x358 <_JIT_ENTRY+0x358>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 dd 02 00 00             je      0x358 <_JIT_ENTRY+0x358>
// 7b: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 80: 4c 89 0c 24                   movq    %r9, (%rsp)
// 84: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 89: 48 89 6c 24 20                movq    %rbp, 0x20(%rsp)
// 8e: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 41 0f 94 c6                   sete    %r14b
// 99: 89 da                         movl    %ebx, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c6                      testb   %al, %r14b
// be: 0f 84 b6 00 00 00             je      0x17a <_JIT_ENTRY+0x17a>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// f6: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// fb: 4c 8b 34 24                   movq    (%rsp), %r14
// ff: 78 21                         js      0x122 <_JIT_ENTRY+0x122>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10b: ff d0                         callq   *%rax
// 10d: 49 ff 0c 24                   decq    (%r12)
// 111: 75 0f                         jne     0x122 <_JIT_ENTRY+0x122>
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _Py_Dealloc
// 11d: 4c 89 e7                      movq    %r12, %rdi
// 120: ff d0                         callq   *%rax
// 122: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 127: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 12b: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 130: 48 85 c9                      testq   %rcx, %rcx
// 133: 74 30                         je      0x165 <_JIT_ENTRY+0x165>
// 135: 4f 8d 2c f7                   leaq    (%r15,%r14,8), %r13
// 139: 48 89 08                      movq    %rcx, (%rax)
// 13c: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 140: 48 8b 00                      movq    (%rax), %rax
// 143: 84 c0                         testb   %al, %al
// 145: 0f 84 ae 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_HandlePending
// 155: 48 89 df                      movq    %rbx, %rdi
// 158: ff d0                         callq   *%rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 84 97 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 162: 4c 89 e8                      movq    %r13, %rax
// 165: 48 29 e8                      subq    %rbp, %rax
// 168: 48 83 c0 b8                   addq    $-0x48, %rax
// 16c: 48 c1 e8 03                   shrq    $0x3, %rax
// 170: 89 45 40                      movl    %eax, 0x40(%rbp)
// 173: 31 c0                         xorl    %eax, %eax
// 175: e9 07 02 00 00                jmp     0x381 <_JIT_ENTRY+0x381>
// 17a: 83 fb 02                      cmpl    $0x2, %ebx
// 17d: 41 be 01 00 00 00             movl    $0x1, %r14d
// 183: 44 0f 43 f3                   cmovael %ebx, %r14d
// 187: 31 db                         xorl    %ebx, %ebx
// 189: eb 11                         jmp     0x19c <_JIT_ENTRY+0x19c>
// 18b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 190: 48 ff c3                      incq    %rbx
// 193: 49 39 de                      cmpq    %rbx, %r14
// 196: 0f 84 28 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 19c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1a1: 49 8b 45 00                   movq    (%r13), %rax
// 1a5: 48 85 c0                      testq   %rax, %rax
// 1a8: 7e 06                         jle     0x1b0 <_JIT_ENTRY+0x1b0>
// 1aa: 85 c0                         testl   %eax, %eax
// 1ac: 78 e2                         js      0x190 <_JIT_ENTRY+0x190>
// 1ae: eb 26                         jmp     0x1d6 <_JIT_ENTRY+0x1d6>
// 1b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1
// 1ba: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1bf: 4c 89 ea                      movq    %r13, %rdx
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _Py_NegativeRefcount
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 8b 45 00                   movq    (%r13), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 ba                         js      0x190 <_JIT_ENTRY+0x190>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 ff 4d 00                   decq    (%r13)
// 1e6: 75 a8                         jne     0x190 <_JIT_ENTRY+0x190>
// 1e8: 4c 89 ef                      movq    %r13, %rdi
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: ff d0                         callq   *%rax
// 1f7: eb 97                         jmp     0x190 <_JIT_ENTRY+0x190>
// 1f9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001fb:  R_X86_64_64  _JIT_OPARG
// 203: 0f b7 d1                      movzwl  %cx, %edx
// 206: 89 d0                         movl    %edx, %eax
// 208: f7 d0                         notl    %eax
// 20a: 48 63 f0                      movslq  %eax, %rsi
// 20d: 4c 8d 0c 36                   leaq    (%rsi,%rsi), %r9
// 211: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 215: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 21a: 29 d7                         subl    %edx, %edi
// 21c: 4c 63 f7                      movslq  %edi, %r14
// 21f: 49 01 f6                      addq    %rsi, %r14
// 222: 0f b7 c9                      movzwl  %cx, %ecx
// 225: 48 89 ce                      movq    %rcx, %rsi
// 228: 48 f7 de                      negq    %rsi
// 22b: 44 8d 62 01                   leal    0x1(%rdx), %r12d
// 22f: 48 85 c0                      testq   %rax, %rax
// 232: 48 f7 d1                      notq    %rcx
// 235: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 239: 44 0f 44 e2                   cmovel  %edx, %r12d
// 23d: 4b 8b 34 f7                   movq    (%r15,%r14,8), %rsi
// 241: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000243:  R_X86_64_64  PyCFunction_Type
// 24b: 48 39 56 08                   cmpq    %rdx, 0x8(%rsi)
// 24f: 0f 85 00 01 00 00             jne     0x355 <_JIT_ENTRY+0x355>
// 255: 4c 8b 46 10                   movq    0x10(%rsi), %r8
// 259: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 261: 0f 85 ee 00 00 00             jne     0x355 <_JIT_ENTRY+0x355>
// 267: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 26c: 48 8d 2c cd 00 00 00 00       leaq    (,%rcx,8), %rbp
// 274: 4c 01 ed                      addq    %r13, %rbp
// 277: 48 85 c0                      testq   %rax, %rax
// 27a: 0f 94 c3                      sete    %bl
// 27d: 48 89 34 24                   movq    %rsi, (%rsp)
// 281: 48 8b 7e 18                   movq    0x18(%rsi), %rdi
// 285: 44 89 e2                      movl    %r12d, %edx
// 288: 48 89 ee                      movq    %rbp, %rsi
// 28b: 41 ff 50 08                   callq   *0x8(%r8)
// 28f: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _JIT_OPARG
// 29e: 66 85 c0                      testw   %ax, %ax
// 2a1: 0f 94 c0                      sete    %al
// 2a4: 84 c3                         testb   %al, %bl
// 2a6: 0f 84 e4 00 00 00             je      0x390 <_JIT_ENTRY+0x390>
// 2ac: 48 8b 14 24                   movq    (%rsp), %rdx
// 2b0: 48 8b 02                      movq    (%rdx), %rax
// 2b3: 48 85 c0                      testq   %rax, %rax
// 2b6: 7f 22                         jg      0x2da <_JIT_ENTRY+0x2da>
// 2b8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ba:  R_X86_64_64  .rodata.str1.1
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_NegativeRefcount
// 2cc: be 28 0b 00 00                movl    $0xb28, %esi            # imm = 0xB28
// 2d1: ff d0                         callq   *%rax
// 2d3: 48 8b 04 24                   movq    (%rsp), %rax
// 2d7: 48 8b 00                      movq    (%rax), %rax
// 2da: 85 c0                         testl   %eax, %eax
// 2dc: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// 2e1: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 2e6: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 2eb: 78 21                         js      0x30e <_JIT_ENTRY+0x30e>
// 2ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ef:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f7: ff d0                         callq   *%rax
// 2f9: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2fd: 48 ff 0f                      decq    (%rdi)
// 300: 75 0c                         jne     0x30e <_JIT_ENTRY+0x30e>
// 302: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000304:  R_X86_64_64  _Py_Dealloc
// 30c: ff d0                         callq   *%rax
// 30e: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 312: 4d 85 e4                      testq   %r12, %r12
// 315: 0f 84 4a fe ff ff             je      0x165 <_JIT_ENTRY+0x165>
// 31b: 4d 8d 34 df                   leaq    (%r15,%rbx,8), %r14
// 31f: 4c 89 20                      movq    %r12, (%rax)
// 322: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 327: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 32b: 48 8b 00                      movq    (%rax), %rax
// 32e: 84 c0                         testb   %al, %al
// 330: 0f 84 e3 00 00 00             je      0x419 <_JIT_ENTRY+0x419>
// 336: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000338:  R_X86_64_64  _Py_HandlePending
// 340: 48 89 df                      movq    %rbx, %rdi
// 343: ff d0                         callq   *%rax
// 345: 85 c0                         testl   %eax, %eax
// 347: 0f 84 cc 00 00 00             je      0x419 <_JIT_ENTRY+0x419>
// 34d: 4c 89 f0                      movq    %r14, %rax
// 350: e9 10 fe ff ff                jmp     0x165 <_JIT_ENTRY+0x165>
// 355: 4d 89 ef                      movq    %r13, %r15
// 358: 49 29 ef                      subq    %rbp, %r15
// 35b: 49 83 c7 b8                   addq    $-0x48, %r15
// 35f: 49 c1 ef 03                   shrq    $0x3, %r15
// 363: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 367: 48 8b 45 00                   movq    (%rbp), %rax
// 36b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000036d:  R_X86_64_64  _JIT_TARGET
// 375: 89 c9                         movl    %ecx, %ecx
// 377: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 37b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 381: 48 83 c4 28                   addq    $0x28, %rsp
// 385: 5b                            popq    %rbx
// 386: 41 5c                         popq    %r12
// 388: 41 5d                         popq    %r13
// 38a: 41 5e                         popq    %r14
// 38c: 41 5f                         popq    %r15
// 38e: 5d                            popq    %rbp
// 38f: c3                            retq
// 390: 41 83 fc 02                   cmpl    $0x2, %r12d
// 394: bb 01 00 00 00                movl    $0x1, %ebx
// 399: 41 0f 43 dc                   cmovael %r12d, %ebx
// 39d: 45 31 e4                      xorl    %r12d, %r12d
// 3a0: eb 1a                         jmp     0x3bc <_JIT_ENTRY+0x3bc>
// 3a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 3b0: 49 ff c4                      incq    %r12
// 3b3: 4c 39 e3                      cmpq    %r12, %rbx
// 3b6: 0f 84 f0 fe ff ff             je      0x2ac <_JIT_ENTRY+0x2ac>
// 3bc: 4e 8b 6c e5 00                movq    (%rbp,%r12,8), %r13
// 3c1: 49 8b 45 00                   movq    (%r13), %rax
// 3c5: 48 85 c0                      testq   %rax, %rax
// 3c8: 7e 06                         jle     0x3d0 <_JIT_ENTRY+0x3d0>
// 3ca: 85 c0                         testl   %eax, %eax
// 3cc: 78 e2                         js      0x3b0 <_JIT_ENTRY+0x3b0>
// 3ce: eb 26                         jmp     0x3f6 <_JIT_ENTRY+0x3f6>
// 3d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003d2:  R_X86_64_64  .rodata.str1.1
// 3da: be 26 0b 00 00                movl    $0xb26, %esi            # imm = 0xB26
// 3df: 4c 89 ea                      movq    %r13, %rdx
// 3e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e4:  R_X86_64_64  _Py_NegativeRefcount
// 3ec: ff d0                         callq   *%rax
// 3ee: 49 8b 45 00                   movq    (%r13), %rax
// 3f2: 85 c0                         testl   %eax, %eax
// 3f4: 78 ba                         js      0x3b0 <_JIT_ENTRY+0x3b0>
// 3f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 400: ff d0                         callq   *%rax
// 402: 49 ff 4d 00                   decq    (%r13)
// 406: 75 a8                         jne     0x3b0 <_JIT_ENTRY+0x3b0>
// 408: 4c 89 ef                      movq    %r13, %rdi
// 40b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000040d:  R_X86_64_64  _Py_Dealloc
// 415: ff d0                         callq   *%rax
// 417: eb 97                         jmp     0x3b0 <_JIT_ENTRY+0x3b0>
// 419: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000041b:  R_X86_64_64  _JIT_CONTINUE
// 423: 48 89 ef                      movq    %rbp, %rdi
// 426: 4c 89 f6                      movq    %r14, %rsi
// 429: 48 89 da                      movq    %rbx, %rdx
// 42c: 48 83 c4 28                   addq    $0x28, %rsp
// 430: 5b                            popq    %rbx
// 431: 41 5c                         popq    %r12
// 433: 41 5d                         popq    %r13
// 435: 41 5e                         popq    %r14
// 437: 41 5f                         popq    %r15
// 439: 5d                            popq    %rbp
// 43a: ff e0                         jmpq    *%rax
// 43c: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_BUILTIN_FAST_code_body[1085] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd7, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xee, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xdd, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x6c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x30, 0x4f, 0x8d, 0x2c, 0xf7, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe8, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xe9, 0x07, 0x02, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x48, 0x63, 0xf0, 0x4c, 0x8d, 0x0c, 0x36, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd7, 0x4c, 0x63, 0xf7, 0x49, 0x01, 0xf6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x62, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xe2, 0x4b, 0x8b, 0x34, 0xf7, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x56, 0x08, 0x0f, 0x85, 0x00, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x46, 0x10, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xee, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x8d, 0x2c, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xed, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x48, 0x89, 0x34, 0x24, 0x48, 0x8b, 0x7e, 0x18, 0x44, 0x89, 0xe2, 0x48, 0x89, 0xee, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xe4, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x02, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x28, 0x0b, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xf7, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x4a, 0xfe, 0xff, 0xff, 0x4d, 0x8d, 0x34, 0xdf, 0x4c, 0x89, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xe3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0xe9, 0x10, 0xfe, 0xff, 0xff, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfc, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdc, 0x45, 0x31, 0xe4, 0xeb, 0x1a, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc4, 0x4c, 0x39, 0xe3, 0x0f, 0x84, 0xf0, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xe5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x26, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_BUILTIN_FAST_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x304, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x338, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x36d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x3d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x40d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x41b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_BUILTIN_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_BUILTIN_FAST_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CALL_BUILTIN_FAST_WITH_KEYWORDS
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CALL_BUILTIN_FAST_WITH_KEYWORDS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fd                      movq    %rdi, %rbp
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 f2 02 00 00             je      0x35c <_JIT_ENTRY+0x35c>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 e1 02 00 00             je      0x35c <_JIT_ENTRY+0x35c>
// 7b: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 80: 4c 89 0c 24                   movq    %r9, (%rsp)
// 84: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 89: 48 89 6c 24 20                movq    %rbp, 0x20(%rsp)
// 8e: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 41 0f 94 c6                   sete    %r14b
// 99: 89 da                         movl    %ebx, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c6                      testb   %al, %r14b
// be: 0f 84 b6 00 00 00             je      0x17a <_JIT_ENTRY+0x17a>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// f6: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// fb: 4c 8b 34 24                   movq    (%rsp), %r14
// ff: 78 21                         js      0x122 <_JIT_ENTRY+0x122>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10b: ff d0                         callq   *%rax
// 10d: 49 ff 0c 24                   decq    (%r12)
// 111: 75 0f                         jne     0x122 <_JIT_ENTRY+0x122>
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _Py_Dealloc
// 11d: 4c 89 e7                      movq    %r12, %rdi
// 120: ff d0                         callq   *%rax
// 122: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 127: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 12b: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 130: 48 85 c9                      testq   %rcx, %rcx
// 133: 74 30                         je      0x165 <_JIT_ENTRY+0x165>
// 135: 4f 8d 2c f7                   leaq    (%r15,%r14,8), %r13
// 139: 48 89 08                      movq    %rcx, (%rax)
// 13c: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 140: 48 8b 00                      movq    (%rax), %rax
// 143: 84 c0                         testb   %al, %al
// 145: 0f 84 ae 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_HandlePending
// 155: 48 89 df                      movq    %rbx, %rdi
// 158: ff d0                         callq   *%rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 84 97 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 162: 4c 89 e8                      movq    %r13, %rax
// 165: 48 29 e8                      subq    %rbp, %rax
// 168: 48 83 c0 b8                   addq    $-0x48, %rax
// 16c: 48 c1 e8 03                   shrq    $0x3, %rax
// 170: 89 45 40                      movl    %eax, 0x40(%rbp)
// 173: 31 c0                         xorl    %eax, %eax
// 175: e9 0b 02 00 00                jmp     0x385 <_JIT_ENTRY+0x385>
// 17a: 83 fb 02                      cmpl    $0x2, %ebx
// 17d: 41 be 01 00 00 00             movl    $0x1, %r14d
// 183: 44 0f 43 f3                   cmovael %ebx, %r14d
// 187: 31 db                         xorl    %ebx, %ebx
// 189: eb 11                         jmp     0x19c <_JIT_ENTRY+0x19c>
// 18b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 190: 48 ff c3                      incq    %rbx
// 193: 49 39 de                      cmpq    %rbx, %r14
// 196: 0f 84 28 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 19c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1a1: 49 8b 45 00                   movq    (%r13), %rax
// 1a5: 48 85 c0                      testq   %rax, %rax
// 1a8: 7e 06                         jle     0x1b0 <_JIT_ENTRY+0x1b0>
// 1aa: 85 c0                         testl   %eax, %eax
// 1ac: 78 e2                         js      0x190 <_JIT_ENTRY+0x190>
// 1ae: eb 26                         jmp     0x1d6 <_JIT_ENTRY+0x1d6>
// 1b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1
// 1ba: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1bf: 4c 89 ea                      movq    %r13, %rdx
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _Py_NegativeRefcount
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 8b 45 00                   movq    (%r13), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 ba                         js      0x190 <_JIT_ENTRY+0x190>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 ff 4d 00                   decq    (%r13)
// 1e6: 75 a8                         jne     0x190 <_JIT_ENTRY+0x190>
// 1e8: 4c 89 ef                      movq    %r13, %rdi
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: ff d0                         callq   *%rax
// 1f7: eb 97                         jmp     0x190 <_JIT_ENTRY+0x190>
// 1f9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001fb:  R_X86_64_64  _JIT_OPARG
// 203: 0f b7 d1                      movzwl  %cx, %edx
// 206: 89 d0                         movl    %edx, %eax
// 208: f7 d0                         notl    %eax
// 20a: 48 63 f0                      movslq  %eax, %rsi
// 20d: 4c 8d 0c 36                   leaq    (%rsi,%rsi), %r9
// 211: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 215: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 21a: 29 d7                         subl    %edx, %edi
// 21c: 48 63 df                      movslq  %edi, %rbx
// 21f: 48 01 f3                      addq    %rsi, %rbx
// 222: 0f b7 c9                      movzwl  %cx, %ecx
// 225: 48 89 ce                      movq    %rcx, %rsi
// 228: 48 f7 de                      negq    %rsi
// 22b: 44 8d 62 01                   leal    0x1(%rdx), %r12d
// 22f: 48 85 c0                      testq   %rax, %rax
// 232: 48 f7 d1                      notq    %rcx
// 235: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 239: 44 0f 44 e2                   cmovel  %edx, %r12d
// 23d: 49 8b 34 df                   movq    (%r15,%rbx,8), %rsi
// 241: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000243:  R_X86_64_64  PyCFunction_Type
// 24b: 48 39 56 08                   cmpq    %rdx, 0x8(%rsi)
// 24f: 0f 85 04 01 00 00             jne     0x359 <_JIT_ENTRY+0x359>
// 255: 4c 8b 46 10                   movq    0x10(%rsi), %r8
// 259: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 261: 0f 85 f2 00 00 00             jne     0x359 <_JIT_ENTRY+0x359>
// 267: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 26c: 48 8d 2c cd 00 00 00 00       leaq    (,%rcx,8), %rbp
// 274: 4c 01 ed                      addq    %r13, %rbp
// 277: 48 85 c0                      testq   %rax, %rax
// 27a: 41 0f 94 c6                   sete    %r14b
// 27e: 48 89 34 24                   movq    %rsi, (%rsp)
// 282: 48 8b 7e 18                   movq    0x18(%rsi), %rdi
// 286: 44 89 e2                      movl    %r12d, %edx
// 289: 48 89 ee                      movq    %rbp, %rsi
// 28c: 31 c9                         xorl    %ecx, %ecx
// 28e: 41 ff 50 08                   callq   *0x8(%r8)
// 292: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _JIT_OPARG
// 2a1: 66 85 c0                      testw   %ax, %ax
// 2a4: 0f 94 c0                      sete    %al
// 2a7: 41 84 c6                      testb   %al, %r14b
// 2aa: 0f 84 e4 00 00 00             je      0x394 <_JIT_ENTRY+0x394>
// 2b0: 48 8b 14 24                   movq    (%rsp), %rdx
// 2b4: 48 8b 02                      movq    (%rdx), %rax
// 2b7: 48 85 c0                      testq   %rax, %rax
// 2ba: 7f 22                         jg      0x2de <_JIT_ENTRY+0x2de>
// 2bc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002be:  R_X86_64_64  .rodata.str1.1
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _Py_NegativeRefcount
// 2d0: be 51 0b 00 00                movl    $0xb51, %esi            # imm = 0xB51
// 2d5: ff d0                         callq   *%rax
// 2d7: 48 8b 04 24                   movq    (%rsp), %rax
// 2db: 48 8b 00                      movq    (%rax), %rax
// 2de: 85 c0                         testl   %eax, %eax
// 2e0: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// 2e5: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 2ea: 78 21                         js      0x30d <_JIT_ENTRY+0x30d>
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f6: ff d0                         callq   *%rax
// 2f8: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2fc: 48 ff 0f                      decq    (%rdi)
// 2ff: 75 0c                         jne     0x30d <_JIT_ENTRY+0x30d>
// 301: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000303:  R_X86_64_64  _Py_Dealloc
// 30b: ff d0                         callq   *%rax
// 30d: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 311: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 316: 48 85 c9                      testq   %rcx, %rcx
// 319: 0f 84 46 fe ff ff             je      0x165 <_JIT_ENTRY+0x165>
// 31f: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 323: 48 89 08                      movq    %rcx, (%rax)
// 326: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 32b: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 32f: 48 8b 00                      movq    (%rax), %rax
// 332: 84 c0                         testb   %al, %al
// 334: 0f 84 df 00 00 00             je      0x419 <_JIT_ENTRY+0x419>
// 33a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033c:  R_X86_64_64  _Py_HandlePending
// 344: 48 89 df                      movq    %rbx, %rdi
// 347: ff d0                         callq   *%rax
// 349: 85 c0                         testl   %eax, %eax
// 34b: 0f 84 c8 00 00 00             je      0x419 <_JIT_ENTRY+0x419>
// 351: 4c 89 f0                      movq    %r14, %rax
// 354: e9 0c fe ff ff                jmp     0x165 <_JIT_ENTRY+0x165>
// 359: 4d 89 ef                      movq    %r13, %r15
// 35c: 49 29 ef                      subq    %rbp, %r15
// 35f: 49 83 c7 b8                   addq    $-0x48, %r15
// 363: 49 c1 ef 03                   shrq    $0x3, %r15
// 367: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 36b: 48 8b 45 00                   movq    (%rbp), %rax
// 36f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000371:  R_X86_64_64  _JIT_TARGET
// 379: 89 c9                         movl    %ecx, %ecx
// 37b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 37f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 385: 48 83 c4 28                   addq    $0x28, %rsp
// 389: 5b                            popq    %rbx
// 38a: 41 5c                         popq    %r12
// 38c: 41 5d                         popq    %r13
// 38e: 41 5e                         popq    %r14
// 390: 41 5f                         popq    %r15
// 392: 5d                            popq    %rbp
// 393: c3                            retq
// 394: 41 83 fc 02                   cmpl    $0x2, %r12d
// 398: 41 be 01 00 00 00             movl    $0x1, %r14d
// 39e: 45 0f 43 f4                   cmovael %r12d, %r14d
// 3a2: 45 31 e4                      xorl    %r12d, %r12d
// 3a5: eb 15                         jmp     0x3bc <_JIT_ENTRY+0x3bc>
// 3a7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 3b0: 49 ff c4                      incq    %r12
// 3b3: 4d 39 e6                      cmpq    %r12, %r14
// 3b6: 0f 84 f4 fe ff ff             je      0x2b0 <_JIT_ENTRY+0x2b0>
// 3bc: 4e 8b 6c e5 00                movq    (%rbp,%r12,8), %r13
// 3c1: 49 8b 45 00                   movq    (%r13), %rax
// 3c5: 48 85 c0                      testq   %rax, %rax
// 3c8: 7e 06                         jle     0x3d0 <_JIT_ENTRY+0x3d0>
// 3ca: 85 c0                         testl   %eax, %eax
// 3cc: 78 e2                         js      0x3b0 <_JIT_ENTRY+0x3b0>
// 3ce: eb 26                         jmp     0x3f6 <_JIT_ENTRY+0x3f6>
// 3d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003d2:  R_X86_64_64  .rodata.str1.1
// 3da: be 4f 0b 00 00                movl    $0xb4f, %esi            # imm = 0xB4F
// 3df: 4c 89 ea                      movq    %r13, %rdx
// 3e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e4:  R_X86_64_64  _Py_NegativeRefcount
// 3ec: ff d0                         callq   *%rax
// 3ee: 49 8b 45 00                   movq    (%r13), %rax
// 3f2: 85 c0                         testl   %eax, %eax
// 3f4: 78 ba                         js      0x3b0 <_JIT_ENTRY+0x3b0>
// 3f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 400: ff d0                         callq   *%rax
// 402: 49 ff 4d 00                   decq    (%r13)
// 406: 75 a8                         jne     0x3b0 <_JIT_ENTRY+0x3b0>
// 408: 4c 89 ef                      movq    %r13, %rdi
// 40b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000040d:  R_X86_64_64  _Py_Dealloc
// 415: ff d0                         callq   *%rax
// 417: eb 97                         jmp     0x3b0 <_JIT_ENTRY+0x3b0>
// 419: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000041b:  R_X86_64_64  _JIT_CONTINUE
// 423: 48 89 ef                      movq    %rbp, %rdi
// 426: 4c 89 f6                      movq    %r14, %rsi
// 429: 48 89 da                      movq    %rbx, %rdx
// 42c: 48 83 c4 28                   addq    $0x28, %rsp
// 430: 5b                            popq    %rbx
// 431: 41 5c                         popq    %r12
// 433: 41 5d                         popq    %r13
// 435: 41 5e                         popq    %r14
// 437: 41 5f                         popq    %r15
// 439: 5d                            popq    %rbp
// 43a: ff e0                         jmpq    *%rax
// 43c: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_body[1085] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd7, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf2, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe1, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x6c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x30, 0x4f, 0x8d, 0x2c, 0xf7, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe8, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xe9, 0x0b, 0x02, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x48, 0x63, 0xf0, 0x4c, 0x8d, 0x0c, 0x36, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd7, 0x48, 0x63, 0xdf, 0x48, 0x01, 0xf3, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x62, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xe2, 0x49, 0x8b, 0x34, 0xdf, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x56, 0x08, 0x0f, 0x85, 0x04, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x46, 0x10, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xf2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x8d, 0x2c, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xed, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x48, 0x89, 0x34, 0x24, 0x48, 0x8b, 0x7e, 0x18, 0x44, 0x89, 0xe2, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xe4, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x02, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x51, 0x0b, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x46, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xf7, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xdf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xc8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0xe9, 0x0c, 0xfe, 0xff, 0xff, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfc, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf4, 0x45, 0x31, 0xe4, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc4, 0x4d, 0x39, 0xe6, 0x0f, 0x84, 0xf4, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xe5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4f, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x303, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x371, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x3d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x40d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x41b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CALL_BUILTIN_O
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CALL_BUILTIN_O.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 24 02 00 00             je      0x28b <_JIT_ENTRY+0x28b>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 13 02 00 00             je      0x28b <_JIT_ENTRY+0x28b>
// 78: 4c 89 4c 24 08                movq    %r9, 0x8(%rsp)
// 7d: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 82: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 87: 48 89 3c 24                   movq    %rdi, (%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 41 0f 94 c6                   sete    %r14b
// 96: 89 da                         movl    %ebx, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 41 84 c6                      testb   %al, %r14b
// bb: 0f 84 99 00 00 00             je      0x15a <_JIT_ENTRY+0x15a>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// cd: 7f 22                         jg      0xf1 <_JIT_ENTRY+0xf1>
// cf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d1:  R_X86_64_64  .rodata.str1.1
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _Py_NegativeRefcount
// e3: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e8: 4c 89 e2                      movq    %r12, %rdx
// eb: ff d0                         callq   *%rax
// ed: 49 8b 04 24                   movq    (%r12), %rax
// f1: 85 c0                         testl   %eax, %eax
// f3: 78 16                         js      0x10b <_JIT_ENTRY+0x10b>
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ff: ff d0                         callq   *%rax
// 101: 49 ff 0c 24                   decq    (%r12)
// 105: 0f 84 aa 01 00 00             je      0x2b5 <_JIT_ENTRY+0x2b5>
// 10b: 49 8d 2c df                   leaq    (%r15,%rbx,8), %rbp
// 10f: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 114: 48 85 c9                      testq   %rcx, %rcx
// 117: 0f 84 b9 01 00 00             je      0x2d6 <_JIT_ENTRY+0x2d6>
// 11d: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 122: 4d 8d 34 c7                   leaq    (%r15,%rax,8), %r14
// 126: 48 89 4d 00                   movq    %rcx, (%rbp)
// 12a: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 12f: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 84 c0                         testb   %al, %al
// 138: 0f 84 9b 00 00 00             je      0x1d9 <_JIT_ENTRY+0x1d9>
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _Py_HandlePending
// 148: ff d0                         callq   *%rax
// 14a: 85 c0                         testl   %eax, %eax
// 14c: 0f 84 87 00 00 00             je      0x1d9 <_JIT_ENTRY+0x1d9>
// 152: 4c 89 f5                      movq    %r14, %rbp
// 155: e9 7c 01 00 00                jmp     0x2d6 <_JIT_ENTRY+0x2d6>
// 15a: 83 fb 02                      cmpl    $0x2, %ebx
// 15d: 41 be 01 00 00 00             movl    $0x1, %r14d
// 163: 44 0f 43 f3                   cmovael %ebx, %r14d
// 167: 31 db                         xorl    %ebx, %ebx
// 169: eb 11                         jmp     0x17c <_JIT_ENTRY+0x17c>
// 16b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 170: 48 ff c3                      incq    %rbx
// 173: 49 39 de                      cmpq    %rbx, %r14
// 176: 0f 84 45 ff ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 17c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 181: 49 8b 45 00                   movq    (%r13), %rax
// 185: 48 85 c0                      testq   %rax, %rax
// 188: 7e 06                         jle     0x190 <_JIT_ENTRY+0x190>
// 18a: 85 c0                         testl   %eax, %eax
// 18c: 78 e2                         js      0x170 <_JIT_ENTRY+0x170>
// 18e: eb 26                         jmp     0x1b6 <_JIT_ENTRY+0x1b6>
// 190: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000192:  R_X86_64_64  .rodata.str1.1
// 19a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 19f: 4c 89 ea                      movq    %r13, %rdx
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _Py_NegativeRefcount
// 1ac: ff d0                         callq   *%rax
// 1ae: 49 8b 45 00                   movq    (%r13), %rax
// 1b2: 85 c0                         testl   %eax, %eax
// 1b4: 78 ba                         js      0x170 <_JIT_ENTRY+0x170>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 4d 00                   decq    (%r13)
// 1c6: 75 a8                         jne     0x170 <_JIT_ENTRY+0x170>
// 1c8: 4c 89 ef                      movq    %r13, %rdi
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _Py_Dealloc
// 1d5: ff d0                         callq   *%rax
// 1d7: eb 97                         jmp     0x170 <_JIT_ENTRY+0x170>
// 1d9: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001db:  R_X86_64_64  _JIT_OPARG
// 1e3: 0f b7 c2                      movzwl  %dx, %eax
// 1e6: 89 c1                         movl    %eax, %ecx
// 1e8: f7 d1                         notl    %ecx
// 1ea: 48 63 c9                      movslq  %ecx, %rcx
// 1ed: 48 8d 1c 09                   leaq    (%rcx,%rcx), %rbx
// 1f1: 44 0f b7 ea                   movzwl  %dx, %r13d
// 1f5: 4c 89 ea                      movq    %r13, %rdx
// 1f8: 48 f7 da                      negq    %rdx
// 1fb: 31 f6                         xorl    %esi, %esi
// 1fd: 66 45 85 ed                   testw   %r13w, %r13w
// 201: 40 0f 94 c6                   sete    %sil
// 205: 31 ff                         xorl    %edi, %edi
// 207: 66 41 83 fd 01                cmpw    $0x1, %r13w
// 20c: 40 0f 94 c7                   sete    %dil
// 210: 49 83 3c df 00                cmpq    $0x0, (%r15,%rbx,8)
// 215: 49 f7 d5                      notq    %r13
// 218: 4c 0f 44 ea                   cmoveq  %rdx, %r13
// 21c: 0f 44 f7                      cmovel  %edi, %esi
// 21f: 40 80 fe 01                   cmpb    $0x1, %sil
// 223: 75 5f                         jne     0x284 <_JIT_ENTRY+0x284>
// 225: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 22a: 29 c2                         subl    %eax, %edx
// 22c: 48 63 ea                      movslq  %edx, %rbp
// 22f: 48 01 cd                      addq    %rcx, %rbp
// 232: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  PyCFunction_Type
// 240: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 245: 75 3d                         jne     0x284 <_JIT_ENTRY+0x284>
// 247: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 24c: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 250: 75 32                         jne     0x284 <_JIT_ENTRY+0x284>
// 252: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 256: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 25b: 8b 4e 2c                      movl    0x2c(%rsi), %ecx
// 25e: 8d 51 ff                      leal    -0x1(%rcx), %edx
// 261: 89 56 2c                      movl    %edx, 0x2c(%rsi)
// 264: 85 c9                         testl   %ecx, %ecx
// 266: 0f 8e 8d 00 00 00             jle     0x2f9 <_JIT_ENTRY+0x2f9>
// 26c: 4f 8b 34 ee                   movq    (%r14,%r13,8), %r14
// 270: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 274: 0f 85 bf 00 00 00             jne     0x339 <_JIT_ENTRY+0x339>
// 27a: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// 27f: e9 b7 00 00 00                jmp     0x33b <_JIT_ENTRY+0x33b>
// 284: 4d 89 f7                      movq    %r14, %r15
// 287: 48 8b 3c 24                   movq    (%rsp), %rdi
// 28b: 49 29 ff                      subq    %rdi, %r15
// 28e: 49 83 c7 b8                   addq    $-0x48, %r15
// 292: 49 c1 ef 03                   shrq    $0x3, %r15
// 296: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 29a: 48 8b 07                      movq    (%rdi), %rax
// 29d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000029f:  R_X86_64_64  _JIT_TARGET
// 2a7: 89 c9                         movl    %ecx, %ecx
// 2a9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2ad: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2b3: eb 35                         jmp     0x2ea <_JIT_ENTRY+0x2ea>
// 2b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b7:  R_X86_64_64  _Py_Dealloc
// 2bf: 4c 89 e7                      movq    %r12, %rdi
// 2c2: ff d0                         callq   *%rax
// 2c4: 49 8d 2c df                   leaq    (%r15,%rbx,8), %rbp
// 2c8: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 2cd: 48 85 c9                      testq   %rcx, %rcx
// 2d0: 0f 85 47 fe ff ff             jne     0x11d <_JIT_ENTRY+0x11d>
// 2d6: 48 8b 04 24                   movq    (%rsp), %rax
// 2da: 48 29 c5                      subq    %rax, %rbp
// 2dd: 48 83 c5 b8                   addq    $-0x48, %rbp
// 2e1: 48 c1 ed 03                   shrq    $0x3, %rbp
// 2e5: 89 68 40                      movl    %ebp, 0x40(%rax)
// 2e8: 31 c0                         xorl    %eax, %eax
// 2ea: 48 83 c4 28                   addq    $0x28, %rsp
// 2ee: 5b                            popq    %rbx
// 2ef: 41 5c                         popq    %r12
// 2f1: 41 5d                         popq    %r13
// 2f3: 41 5e                         popq    %r14
// 2f5: 41 5f                         popq    %r15
// 2f7: 5d                            popq    %rbp
// 2f8: c3                            retq
// 2f9: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// 2fe: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000300:  R_X86_64_64  .rodata.str1.1+0x39
// 308: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030a:  R_X86_64_64  _Py_CheckRecursiveCall
// 312: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 317: ff d0                         callq   *%rax
// 319: 85 c0                         testl   %eax, %eax
// 31b: 0f 85 31 fe ff ff             jne     0x152 <_JIT_ENTRY+0x152>
// 321: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 326: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 32b: 4f 8b 34 ee                   movq    (%r14,%r13,8), %r14
// 32f: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 333: 0f 84 41 ff ff ff             je      0x27a <_JIT_ENTRY+0x27a>
// 339: 31 ff                         xorl    %edi, %edi
// 33b: 49 8d 2c ef                   leaq    (%r15,%rbp,8), %rbp
// 33f: 4c 89 f6                      movq    %r14, %rsi
// 342: 41 ff d0                      callq   *%r8
// 345: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 34a: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 34f: 41 ff 45 2c                   incl    0x2c(%r13)
// 353: bf 02 0b 00 00                movl    $0xb02, %edi            # imm = 0xB02
// 358: 4c 89 f6                      movq    %r14, %rsi
// 35b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035d:  R_X86_64_64  .text+0x3e0
// 365: ff d0                         callq   *%rax
// 367: bf 03 0b 00 00                movl    $0xb03, %edi            # imm = 0xB03
// 36c: 4c 89 e6                      movq    %r12, %rsi
// 36f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000371:  R_X86_64_64  .text+0x3e0
// 379: ff d0                         callq   *%rax
// 37b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 380: 48 85 c0                      testq   %rax, %rax
// 383: 0f 84 4d ff ff ff             je      0x2d6 <_JIT_ENTRY+0x2d6>
// 389: 4d 8d 34 df                   leaq    (%r15,%rbx,8), %r14
// 38d: 48 89 45 00                   movq    %rax, (%rbp)
// 391: 49 8b 45 10                   movq    0x10(%r13), %rax
// 395: 48 8b 00                      movq    (%rax), %rax
// 398: 84 c0                         testb   %al, %al
// 39a: 74 17                         je      0x3b3 <_JIT_ENTRY+0x3b3>
// 39c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039e:  R_X86_64_64  _Py_HandlePending
// 3a6: 4c 89 ef                      movq    %r13, %rdi
// 3a9: ff d0                         callq   *%rax
// 3ab: 85 c0                         testl   %eax, %eax
// 3ad: 0f 85 9f fd ff ff             jne     0x152 <_JIT_ENTRY+0x152>
// 3b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b5:  R_X86_64_64  _JIT_CONTINUE
// 3bd: 48 8b 3c 24                   movq    (%rsp), %rdi
// 3c1: 4c 89 f6                      movq    %r14, %rsi
// 3c4: 4c 89 ea                      movq    %r13, %rdx
// 3c7: 48 83 c4 28                   addq    $0x28, %rsp
// 3cb: 5b                            popq    %rbx
// 3cc: 41 5c                         popq    %r12
// 3ce: 41 5d                         popq    %r13
// 3d0: 41 5e                         popq    %r14
// 3d2: 41 5f                         popq    %r15
// 3d4: 5d                            popq    %rbp
// 3d5: ff e0                         jmpq    *%rax
// 3d7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 
// 00000000000003e0 <Py_DECREF>:
// 3e0: 53                            pushq   %rbx
// 3e1: 48 89 f3                      movq    %rsi, %rbx
// 3e4: 48 8b 06                      movq    (%rsi), %rax
// 3e7: 48 85 c0                      testq   %rax, %rax
// 3ea: 7e 06                         jle     0x3f2 <Py_DECREF+0x12>
// 3ec: 85 c0                         testl   %eax, %eax
// 3ee: 79 24                         jns     0x414 <Py_DECREF+0x34>
// 3f0: eb 33                         jmp     0x425 <Py_DECREF+0x45>
// 3f2: 89 fe                         movl    %edi, %esi
// 3f4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003f6:  R_X86_64_64  .rodata.str1.1
// 3fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000400:  R_X86_64_64  _Py_NegativeRefcount
// 408: 48 89 da                      movq    %rbx, %rdx
// 40b: ff d0                         callq   *%rax
// 40d: 48 8b 03                      movq    (%rbx), %rax
// 410: 85 c0                         testl   %eax, %eax
// 412: 78 11                         js      0x425 <Py_DECREF+0x45>
// 414: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000416:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 41e: ff d0                         callq   *%rax
// 420: 48 ff 0b                      decq    (%rbx)
// 423: 74 02                         je      0x427 <Py_DECREF+0x47>
// 425: 5b                            popq    %rbx
// 426: c3                            retq
// 427: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000429:  R_X86_64_64  _Py_Dealloc
// 431: 48 89 df                      movq    %rbx, %rdi
// 434: 5b                            popq    %rbx
// 435: ff e0                         jmpq    *%rax
// 437: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_BUILTIN_O_code_body[1080] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x24, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x13, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0x99, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xaa, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x2c, 0xdf, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb9, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x4d, 0x8d, 0x34, 0xc7, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x87, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf5, 0xe9, 0x7c, 0x01, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x45, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc2, 0x89, 0xc1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x8d, 0x1c, 0x09, 0x44, 0x0f, 0xb7, 0xea, 0x4c, 0x89, 0xea, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x45, 0x85, 0xed, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x41, 0x83, 0xfd, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x49, 0x83, 0x3c, 0xdf, 0x00, 0x49, 0xf7, 0xd5, 0x4c, 0x0f, 0x44, 0xea, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x5f, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xea, 0x48, 0x01, 0xcd, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3d, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x32, 0x4c, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x8b, 0x4e, 0x2c, 0x8d, 0x51, 0xff, 0x89, 0x56, 0x2c, 0x85, 0xc9, 0x0f, 0x8e, 0x8d, 0x00, 0x00, 0x00, 0x4f, 0x8b, 0x34, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0xbf, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0xb7, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf7, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x2c, 0xdf, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x48, 0x85, 0xc9, 0x0f, 0x85, 0x47, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x29, 0xc5, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x68, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x31, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4f, 0x8b, 0x34, 0xee, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x41, 0xff, 0xff, 0xff, 0x31, 0xff, 0x49, 0x8d, 0x2c, 0xef, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x41, 0xff, 0x45, 0x2c, 0xbf, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xbf, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0xff, 0xff, 0xff, 0x4d, 0x8d, 0x34, 0xdf, 0x48, 0x89, 0x45, 0x00, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x9f, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_BUILTIN_O_code_holes[25] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x300, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x30a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x35d, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x3e0},
    {0x371, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x3e0},
    {0x39e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x3b5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3f6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x400, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x416, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x429, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_BUILTIN_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_BUILTIN_O_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CALL_INTRINSIC_1
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CALL_INTRINSIC_1.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f8 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e7 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 78: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 7d: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 82: 48 89 14 24                   movq    %rdx, (%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 cc 00 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// f2: 4c 8b 34 24                   movq    (%rsp), %r14
// f6: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// fb: 78 16                         js      0x113 <_JIT_ENTRY+0x113>
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 107: ff d0                         callq   *%rax
// 109: 49 ff 0c 24                   decq    (%r12)
// 10d: 0f 84 b0 01 00 00             je      0x2c3 <_JIT_ENTRY+0x2c3>
// 113: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 117: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 11c: 48 85 d2                      testq   %rdx, %rdx
// 11f: 0f 84 bf 01 00 00             je      0x2e4 <_JIT_ENTRY+0x2e4>
// 125: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 12a: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 12e: 48 89 10                      movq    %rdx, (%rax)
// 131: 49 8b 46 10                   movq    0x10(%r14), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 0f 84 c9 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_HandlePending
// 14a: 4c 89 f7                      movq    %r14, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 0f 84 b2 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 157: 4c 89 e0                      movq    %r12, %rax
// 15a: e9 85 01 00 00                jmp     0x2e4 <_JIT_ENTRY+0x2e4>
// 15f: 49 29 ff                      subq    %rdi, %r15
// 162: 49 83 c7 b8                   addq    $-0x48, %r15
// 166: 49 c1 ef 03                   shrq    $0x3, %r15
// 16a: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 16e: 48 8b 07                      movq    (%rdi), %rax
// 171: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000173:  R_X86_64_64  _JIT_TARGET
// 17b: 89 c9                         movl    %ecx, %ecx
// 17d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 181: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 187: e9 68 01 00 00                jmp     0x2f4 <_JIT_ENTRY+0x2f4>
// 18c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 190: 41 be 01 00 00 00             movl    $0x1, %r14d
// 196: 45 0f 43 f5                   cmovael %r13d, %r14d
// 19a: 31 db                         xorl    %ebx, %ebx
// 19c: eb 0e                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19e: 66 90                         nop
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 de                      cmpq    %rbx, %r14
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: 0f b7 c8                      movzwl  %ax, %ecx
// 216: f7 d0                         notl    %eax
// 218: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21d: 48 63 d8                      movslq  %eax, %rbx
// 220: 4d 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %r13
// 225: 48 c1 e1 04                   shlq    $0x4, %rcx
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _PyIntrinsics_UnaryFunctions
// 233: 4c 89 f7                      movq    %r14, %rdi
// 236: 4c 89 ee                      movq    %r13, %rsi
// 239: ff 14 01                      callq   *(%rcx,%rax)
// 23c: 49 89 c6                      movq    %rax, %r14
// 23f: 49 8b 45 00                   movq    (%r13), %rax
// 243: 48 85 c0                      testq   %rax, %rax
// 246: 7f 22                         jg      0x26a <_JIT_ENTRY+0x26a>
// 248: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024a:  R_X86_64_64  .rodata.str1.1
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_NegativeRefcount
// 25c: be 7e 02 00 00                movl    $0x27e, %esi            # imm = 0x27E
// 261: 4c 89 ea                      movq    %r13, %rdx
// 264: ff d0                         callq   *%rax
// 266: 49 8b 45 00                   movq    (%r13), %rax
// 26a: 85 c0                         testl   %eax, %eax
// 26c: 78 21                         js      0x28f <_JIT_ENTRY+0x28f>
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 278: ff d0                         callq   *%rax
// 27a: 49 ff 4d 00                   decq    (%r13)
// 27e: 75 0f                         jne     0x28f <_JIT_ENTRY+0x28f>
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_Dealloc
// 28a: 4c 89 ef                      movq    %r13, %rdi
// 28d: ff d0                         callq   *%rax
// 28f: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 293: 48 83 c0 f8                   addq    $-0x8, %rax
// 297: 4d 85 f6                      testq   %r14, %r14
// 29a: 74 48                         je      0x2e4 <_JIT_ENTRY+0x2e4>
// 29c: 4c 89 30                      movq    %r14, (%rax)
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  _JIT_CONTINUE
// 2a9: 48 89 ef                      movq    %rbp, %rdi
// 2ac: 4c 89 e6                      movq    %r12, %rsi
// 2af: 48 8b 14 24                   movq    (%rsp), %rdx
// 2b3: 48 83 c4 28                   addq    $0x28, %rsp
// 2b7: 5b                            popq    %rbx
// 2b8: 41 5c                         popq    %r12
// 2ba: 41 5d                         popq    %r13
// 2bc: 41 5e                         popq    %r14
// 2be: 41 5f                         popq    %r15
// 2c0: 5d                            popq    %rbp
// 2c1: ff e0                         jmpq    *%rax
// 2c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c5:  R_X86_64_64  _Py_Dealloc
// 2cd: 4c 89 e7                      movq    %r12, %rdi
// 2d0: ff d0                         callq   *%rax
// 2d2: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 2d6: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2db: 48 85 d2                      testq   %rdx, %rdx
// 2de: 0f 85 41 fe ff ff             jne     0x125 <_JIT_ENTRY+0x125>
// 2e4: 48 29 e8                      subq    %rbp, %rax
// 2e7: 48 83 c0 b8                   addq    $-0x48, %rax
// 2eb: 48 c1 e8 03                   shrq    $0x3, %rax
// 2ef: 89 45 40                      movl    %eax, 0x40(%rbp)
// 2f2: 31 c0                         xorl    %eax, %eax
// 2f4: 48 83 c4 28                   addq    $0x28, %rsp
// 2f8: 5b                            popq    %rbx
// 2f9: 41 5c                         popq    %r12
// 2fb: 41 5d                         popq    %r13
// 2fd: 41 5e                         popq    %r14
// 2ff: 41 5f                         popq    %r15
// 301: 5d                            popq    %rbp
// 302: c3                            retq
// 303: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_INTRINSIC_1_code_body[772] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x4c, 0x8b, 0x34, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xb0, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xbf, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x85, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x68, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xdf, 0xf8, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xee, 0xff, 0x14, 0x01, 0x49, 0x89, 0xc6, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x83, 0xc0, 0xf8, 0x4d, 0x85, 0xf6, 0x74, 0x48, 0x4c, 0x89, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x85, 0x41, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_INTRINSIC_1_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_UnaryFunctions, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_INTRINSIC_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_INTRINSIC_1_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CALL_INTRINSIC_2
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CALL_INTRINSIC_2.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f5 00 00 00             je      0x15c <_JIT_ENTRY+0x15c>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e4 00 00 00             je      0x15c <_JIT_ENTRY+0x15c>
// 78: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 7d: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 82: 48 89 14 24                   movq    %rdx, (%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 c9 00 00 00             je      0x189 <_JIT_ENTRY+0x189>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// f2: 48 8b 1c 24                   movq    (%rsp), %rbx
// f6: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// fb: 78 16                         js      0x113 <_JIT_ENTRY+0x113>
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 107: ff d0                         callq   *%rax
// 109: 49 ff 0c 24                   decq    (%r12)
// 10d: 0f 84 0a 02 00 00             je      0x31d <_JIT_ENTRY+0x31d>
// 113: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 118: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 11c: 4d 85 ff                      testq   %r15, %r15
// 11f: 0f 84 19 02 00 00             je      0x33e <_JIT_ENTRY+0x33e>
// 125: 4c 89 38                      movq    %r15, (%rax)
// 128: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 12c: 48 8b 00                      movq    (%rax), %rax
// 12f: 84 c0                         testb   %al, %al
// 131: 0f 84 d2 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_HandlePending
// 141: 48 89 df                      movq    %rbx, %rdi
// 144: ff d0                         callq   *%rax
// 146: 85 c0                         testl   %eax, %eax
// 148: 0f 84 bb 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 14e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 153: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 157: e9 e2 01 00 00                jmp     0x33e <_JIT_ENTRY+0x33e>
// 15c: 49 29 fe                      subq    %rdi, %r14
// 15f: 49 83 c6 b8                   addq    $-0x48, %r14
// 163: 49 c1 ee 03                   shrq    $0x3, %r14
// 167: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 16b: 48 8b 07                      movq    (%rdi), %rax
// 16e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000170:  R_X86_64_64  _JIT_TARGET
// 178: 89 c9                         movl    %ecx, %ecx
// 17a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 17e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 184: e9 c5 01 00 00                jmp     0x34e <_JIT_ENTRY+0x34e>
// 189: 41 83 fd 02                   cmpl    $0x2, %r13d
// 18d: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 193: 45 0f 43 fd                   cmovael %r13d, %r15d
// 197: 31 db                         xorl    %ebx, %ebx
// 199: eb 11                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 df                      cmpq    %rbx, %r15
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: 0f b7 c8                      movzwl  %ax, %ecx
// 216: f7 d0                         notl    %eax
// 218: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21d: 48 89 df                      movq    %rbx, %rdi
// 220: 48 63 d8                      movslq  %eax, %rbx
// 223: 4d 8b 7c de f0                movq    -0x10(%r14,%rbx,8), %r15
// 228: 4d 8b 6c de f8                movq    -0x8(%r14,%rbx,8), %r13
// 22d: 48 c1 e1 04                   shlq    $0x4, %rcx
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _PyIntrinsics_BinaryFunctions
// 23b: 4c 89 fe                      movq    %r15, %rsi
// 23e: 4c 89 ea                      movq    %r13, %rdx
// 241: ff 14 01                      callq   *(%rcx,%rax)
// 244: 49 89 c4                      movq    %rax, %r12
// 247: 49 8b 07                      movq    (%r15), %rax
// 24a: 48 85 c0                      testq   %rax, %rax
// 24d: 7f 21                         jg      0x270 <_JIT_ENTRY+0x270>
// 24f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000251:  R_X86_64_64  .rodata.str1.1
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _Py_NegativeRefcount
// 263: be 8d 02 00 00                movl    $0x28d, %esi            # imm = 0x28D
// 268: 4c 89 fa                      movq    %r15, %rdx
// 26b: ff d0                         callq   *%rax
// 26d: 49 8b 07                      movq    (%r15), %rax
// 270: 85 c0                         testl   %eax, %eax
// 272: 78 20                         js      0x294 <_JIT_ENTRY+0x294>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27e: ff d0                         callq   *%rax
// 280: 49 ff 0f                      decq    (%r15)
// 283: 75 0f                         jne     0x294 <_JIT_ENTRY+0x294>
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _Py_Dealloc
// 28f: 4c 89 ff                      movq    %r15, %rdi
// 292: ff d0                         callq   *%rax
// 294: 49 8b 45 00                   movq    (%r13), %rax
// 298: 48 85 c0                      testq   %rax, %rax
// 29b: 7f 22                         jg      0x2bf <_JIT_ENTRY+0x2bf>
// 29d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029f:  R_X86_64_64  .rodata.str1.1
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _Py_NegativeRefcount
// 2b1: be 8e 02 00 00                movl    $0x28e, %esi            # imm = 0x28E
// 2b6: 4c 89 ea                      movq    %r13, %rdx
// 2b9: ff d0                         callq   *%rax
// 2bb: 49 8b 45 00                   movq    (%r13), %rax
// 2bf: 85 c0                         testl   %eax, %eax
// 2c1: 78 21                         js      0x2e4 <_JIT_ENTRY+0x2e4>
// 2c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2cd: ff d0                         callq   *%rax
// 2cf: 49 ff 4d 00                   decq    (%r13)
// 2d3: 75 0f                         jne     0x2e4 <_JIT_ENTRY+0x2e4>
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  _Py_Dealloc
// 2df: 4c 89 ef                      movq    %r13, %rdi
// 2e2: ff d0                         callq   *%rax
// 2e4: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 2e8: 48 83 c0 f0                   addq    $-0x10, %rax
// 2ec: 4d 85 e4                      testq   %r12, %r12
// 2ef: 74 4d                         je      0x33e <_JIT_ENTRY+0x33e>
// 2f1: 49 8d 34 de                   leaq    (%r14,%rbx,8), %rsi
// 2f5: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2f9: 4c 89 20                      movq    %r12, (%rax)
// 2fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fe:  R_X86_64_64  _JIT_CONTINUE
// 306: 48 89 ef                      movq    %rbp, %rdi
// 309: 48 8b 14 24                   movq    (%rsp), %rdx
// 30d: 48 83 c4 28                   addq    $0x28, %rsp
// 311: 5b                            popq    %rbx
// 312: 41 5c                         popq    %r12
// 314: 41 5d                         popq    %r13
// 316: 41 5e                         popq    %r14
// 318: 41 5f                         popq    %r15
// 31a: 5d                            popq    %rbp
// 31b: ff e0                         jmpq    *%rax
// 31d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031f:  R_X86_64_64  _Py_Dealloc
// 327: 4c 89 e7                      movq    %r12, %rdi
// 32a: ff d0                         callq   *%rax
// 32c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 331: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 335: 4d 85 ff                      testq   %r15, %r15
// 338: 0f 85 e7 fd ff ff             jne     0x125 <_JIT_ENTRY+0x125>
// 33e: 48 29 e8                      subq    %rbp, %rax
// 341: 48 83 c0 b8                   addq    $-0x48, %rax
// 345: 48 c1 e8 03                   shrq    $0x3, %rax
// 349: 89 45 40                      movl    %eax, 0x40(%rbp)
// 34c: 31 c0                         xorl    %eax, %eax
// 34e: 48 83 c4 28                   addq    $0x28, %rsp
// 352: 5b                            popq    %rbx
// 353: 41 5c                         popq    %r12
// 355: 41 5d                         popq    %r13
// 357: 41 5e                         popq    %r14
// 359: 41 5f                         popq    %r15
// 35b: 5d                            popq    %rbp
// 35c: c3                            retq
// 35d: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_INTRINSIC_2_code_body[862] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf5, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe4, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x0a, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x19, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xbb, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0xe2, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xc5, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x7c, 0xde, 0xf0, 0x4d, 0x8b, 0x6c, 0xde, 0xf8, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xea, 0xff, 0x14, 0x01, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8d, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x83, 0xc0, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x4d, 0x49, 0x8d, 0x34, 0xde, 0x48, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xff, 0x0f, 0x85, 0xe7, 0xfd, 0xff, 0xff, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_INTRINSIC_2_code_holes[24] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_BinaryFunctions, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2fe, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_INTRINSIC_2_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_INTRINSIC_2_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CALL_ISINSTANCE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CALL_ISINSTANCE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 5e 01 00 00             je      0x1c5 <_JIT_ENTRY+0x1c5>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 4d 01 00 00             je      0x1c5 <_JIT_ENTRY+0x1c5>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 54 24 20                movq    %r10, 0x20(%rsp)
// 82: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 87: 48 89 3c 24                   movq    %rdi, (%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 41 0f 94 c7                   sete    %r15b
// 96: 89 da                         movl    %ebx, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 41 84 c7                      testb   %al, %r15b
// bb: 0f 84 31 01 00 00             je      0x1f2 <_JIT_ENTRY+0x1f2>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// cd: 7f 22                         jg      0xf1 <_JIT_ENTRY+0xf1>
// cf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d1:  R_X86_64_64  .rodata.str1.1
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _Py_NegativeRefcount
// e3: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e8: 4c 89 e2                      movq    %r12, %rdx
// eb: ff d0                         callq   *%rax
// ed: 49 8b 04 24                   movq    (%r12), %rax
// f1: 85 c0                         testl   %eax, %eax
// f3: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 0c 24                   decq    (%r12)
// 10a: 0f 84 69 01 00 00             je      0x279 <_JIT_ENTRY+0x279>
// 110: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 114: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 119: 48 85 d2                      testq   %rdx, %rdx
// 11c: 0f 84 78 01 00 00             je      0x29a <_JIT_ENTRY+0x29a>
// 122: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 127: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 12b: 48 89 10                      movq    %rdx, (%rax)
// 12e: 49 8b 45 10                   movq    0x10(%r13), %rax
// 132: 48 8b 00                      movq    (%rax), %rax
// 135: 84 c0                         testb   %al, %al
// 137: 74 17                         je      0x150 <_JIT_ENTRY+0x150>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_HandlePending
// 143: 4c 89 ef                      movq    %r13, %rdi
// 146: ff d0                         callq   *%rax
// 148: 85 c0                         testl   %eax, %eax
// 14a: 0f 85 4d 01 00 00             jne     0x29d <_JIT_ENTRY+0x29d>
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _JIT_OPARG
// 15a: 0f b7 c8                      movzwl  %ax, %ecx
// 15d: 89 ca                         movl    %ecx, %edx
// 15f: f7 d2                         notl    %edx
// 161: 48 63 d2                      movslq  %edx, %rdx
// 164: 4c 8d 3c 12                   leaq    (%rdx,%rdx), %r15
// 168: 0f b7 c0                      movzwl  %ax, %eax
// 16b: 48 89 c6                      movq    %rax, %rsi
// 16e: 48 f7 de                      negq    %rsi
// 171: 31 ff                         xorl    %edi, %edi
// 173: 66 83 f8 01                   cmpw    $0x1, %ax
// 177: 40 0f 94 c7                   sete    %dil
// 17b: 45 31 c0                      xorl    %r8d, %r8d
// 17e: 66 83 f8 02                   cmpw    $0x2, %ax
// 182: 41 0f 94 c0                   sete    %r8b
// 186: 4b 83 3c fe 00                cmpq    $0x0, (%r14,%r15,8)
// 18b: 48 f7 d0                      notq    %rax
// 18e: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 192: 41 0f 44 f8                   cmovel  %r8d, %edi
// 196: 40 80 ff 01                   cmpb    $0x1, %dil
// 19a: 75 22                         jne     0x1be <_JIT_ENTRY+0x1be>
// 19c: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 1a1: 29 ce                         subl    %ecx, %esi
// 1a3: 48 63 de                      movslq  %esi, %rbx
// 1a6: 48 01 d3                      addq    %rdx, %rbx
// 1a9: 4d 8b 24 de                   movq    (%r14,%rbx,8), %r12
// 1ad: 49 8b 4d 10                   movq    0x10(%r13), %rcx
// 1b1: 4c 3b a1 b8 54 06 00          cmpq    0x654b8(%rcx), %r12
// 1b8: 0f 84 02 01 00 00             je      0x2c0 <_JIT_ENTRY+0x2c0>
// 1be: 49 89 ee                      movq    %rbp, %r14
// 1c1: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1c5: 49 29 fe                      subq    %rdi, %r14
// 1c8: 49 83 c6 b8                   addq    $-0x48, %r14
// 1cc: 49 c1 ee 03                   shrq    $0x3, %r14
// 1d0: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 1d4: 48 8b 07                      movq    (%rdi), %rax
// 1d7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d9:  R_X86_64_64  _JIT_TARGET
// 1e1: 89 c9                         movl    %ecx, %ecx
// 1e3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1e7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ed: e9 bf 00 00 00                jmp     0x2b1 <_JIT_ENTRY+0x2b1>
// 1f2: 83 fb 02                      cmpl    $0x2, %ebx
// 1f5: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1fb: 44 0f 43 fb                   cmovael %ebx, %r15d
// 1ff: 31 db                         xorl    %ebx, %ebx
// 201: eb 19                         jmp     0x21c <_JIT_ENTRY+0x21c>
// 203: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 210: 48 ff c3                      incq    %rbx
// 213: 49 39 df                      cmpq    %rbx, %r15
// 216: 0f 84 a5 fe ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 21c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 221: 49 8b 45 00                   movq    (%r13), %rax
// 225: 48 85 c0                      testq   %rax, %rax
// 228: 7e 06                         jle     0x230 <_JIT_ENTRY+0x230>
// 22a: 85 c0                         testl   %eax, %eax
// 22c: 78 e2                         js      0x210 <_JIT_ENTRY+0x210>
// 22e: eb 26                         jmp     0x256 <_JIT_ENTRY+0x256>
// 230: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000232:  R_X86_64_64  .rodata.str1.1
// 23a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 23f: 4c 89 ea                      movq    %r13, %rdx
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _Py_NegativeRefcount
// 24c: ff d0                         callq   *%rax
// 24e: 49 8b 45 00                   movq    (%r13), %rax
// 252: 85 c0                         testl   %eax, %eax
// 254: 78 ba                         js      0x210 <_JIT_ENTRY+0x210>
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 260: ff d0                         callq   *%rax
// 262: 49 ff 4d 00                   decq    (%r13)
// 266: 75 a8                         jne     0x210 <_JIT_ENTRY+0x210>
// 268: 4c 89 ef                      movq    %r13, %rdi
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _Py_Dealloc
// 275: ff d0                         callq   *%rax
// 277: eb 97                         jmp     0x210 <_JIT_ENTRY+0x210>
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_Dealloc
// 283: 4c 89 e7                      movq    %r12, %rdi
// 286: ff d0                         callq   *%rax
// 288: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 28c: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 291: 48 85 d2                      testq   %rdx, %rdx
// 294: 0f 85 88 fe ff ff             jne     0x122 <_JIT_ENTRY+0x122>
// 29a: 48 89 c5                      movq    %rax, %rbp
// 29d: 48 8b 04 24                   movq    (%rsp), %rax
// 2a1: 48 29 c5                      subq    %rax, %rbp
// 2a4: 48 83 c5 b8                   addq    $-0x48, %rbp
// 2a8: 48 c1 ed 03                   shrq    $0x3, %rbp
// 2ac: 89 68 40                      movl    %ebp, 0x40(%rax)
// 2af: 31 c0                         xorl    %eax, %eax
// 2b1: 48 83 c4 28                   addq    $0x28, %rsp
// 2b5: 5b                            popq    %rbx
// 2b6: 41 5c                         popq    %r12
// 2b8: 41 5d                         popq    %r13
// 2ba: 41 5e                         popq    %r14
// 2bc: 41 5f                         popq    %r15
// 2be: 5d                            popq    %rbp
// 2bf: c3                            retq
// 2c0: 4c 8b 6c c5 00                movq    (%rbp,%rax,8), %r13
// 2c5: 48 8b 74 c5 08                movq    0x8(%rbp,%rax,8), %rsi
// 2ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cc:  R_X86_64_64  PyObject_IsInstance
// 2d4: 4c 89 ef                      movq    %r13, %rdi
// 2d7: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 2dc: ff d0                         callq   *%rax
// 2de: 85 c0                         testl   %eax, %eax
// 2e0: 78 bb                         js      0x29d <_JIT_ENTRY+0x29d>
// 2e2: 89 c7                         movl    %eax, %edi
// 2e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e6:  R_X86_64_64  PyBool_FromLong
// 2ee: ff d0                         callq   *%rax
// 2f0: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 2f5: 49 8b 45 00                   movq    (%r13), %rax
// 2f9: 48 85 c0                      testq   %rax, %rax
// 2fc: 7f 22                         jg      0x320 <_JIT_ENTRY+0x320>
// 2fe: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000300:  R_X86_64_64  .rodata.str1.1
// 308: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030a:  R_X86_64_64  _Py_NegativeRefcount
// 312: be 96 0b 00 00                movl    $0xb96, %esi            # imm = 0xB96
// 317: 4c 89 ea                      movq    %r13, %rdx
// 31a: ff d0                         callq   *%rax
// 31c: 49 8b 45 00                   movq    (%r13), %rax
// 320: 85 c0                         testl   %eax, %eax
// 322: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 327: 78 21                         js      0x34a <_JIT_ENTRY+0x34a>
// 329: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 333: ff d0                         callq   *%rax
// 335: 49 ff 4d 00                   decq    (%r13)
// 339: 75 0f                         jne     0x34a <_JIT_ENTRY+0x34a>
// 33b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033d:  R_X86_64_64  _Py_Dealloc
// 345: 4c 89 ef                      movq    %r13, %rdi
// 348: ff d0                         callq   *%rax
// 34a: 48 8b 45 00                   movq    (%rbp), %rax
// 34e: 48 85 c0                      testq   %rax, %rax
// 351: 7f 22                         jg      0x375 <_JIT_ENTRY+0x375>
// 353: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000355:  R_X86_64_64  .rodata.str1.1
// 35d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035f:  R_X86_64_64  _Py_NegativeRefcount
// 367: be 97 0b 00 00                movl    $0xb97, %esi            # imm = 0xB97
// 36c: 48 89 ea                      movq    %rbp, %rdx
// 36f: ff d0                         callq   *%rax
// 371: 48 8b 45 00                   movq    (%rbp), %rax
// 375: 85 c0                         testl   %eax, %eax
// 377: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 37c: 78 21                         js      0x39f <_JIT_ENTRY+0x39f>
// 37e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000380:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 388: ff d0                         callq   *%rax
// 38a: 48 ff 4d 00                   decq    (%rbp)
// 38e: 75 0f                         jne     0x39f <_JIT_ENTRY+0x39f>
// 390: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000392:  R_X86_64_64  _Py_Dealloc
// 39a: 48 89 ef                      movq    %rbp, %rdi
// 39d: ff d0                         callq   *%rax
// 39f: 49 8b 04 24                   movq    (%r12), %rax
// 3a3: 48 85 c0                      testq   %rax, %rax
// 3a6: 7f 22                         jg      0x3ca <_JIT_ENTRY+0x3ca>
// 3a8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003aa:  R_X86_64_64  .rodata.str1.1
// 3b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b4:  R_X86_64_64  _Py_NegativeRefcount
// 3bc: be 98 0b 00 00                movl    $0xb98, %esi            # imm = 0xB98
// 3c1: 4c 89 e2                      movq    %r12, %rdx
// 3c4: ff d0                         callq   *%rax
// 3c6: 49 8b 04 24                   movq    (%r12), %rax
// 3ca: 85 c0                         testl   %eax, %eax
// 3cc: 78 21                         js      0x3ef <_JIT_ENTRY+0x3ef>
// 3ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3d8: ff d0                         callq   *%rax
// 3da: 49 ff 0c 24                   decq    (%r12)
// 3de: 75 0f                         jne     0x3ef <_JIT_ENTRY+0x3ef>
// 3e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e2:  R_X86_64_64  _Py_Dealloc
// 3ea: 4c 89 e7                      movq    %r12, %rdi
// 3ed: ff d0                         callq   *%rax
// 3ef: 49 8d 2c de                   leaq    (%r14,%rbx,8), %rbp
// 3f3: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 3f8: 48 85 c0                      testq   %rax, %rax
// 3fb: 0f 84 9c fe ff ff             je      0x29d <_JIT_ENTRY+0x29d>
// 401: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 405: 48 89 45 00                   movq    %rax, (%rbp)
// 409: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000040b:  R_X86_64_64  _JIT_CONTINUE
// 413: 48 8b 3c 24                   movq    (%rsp), %rdi
// 417: 4c 89 ea                      movq    %r13, %rdx
// 41a: 48 83 c4 28                   addq    $0x28, %rsp
// 41e: 5b                            popq    %rbx
// 41f: 41 5c                         popq    %r12
// 421: 41 5d                         popq    %r13
// 423: 41 5e                         popq    %r14
// 425: 41 5f                         popq    %r15
// 427: 5d                            popq    %rbp
// 428: ff e0                         jmpq    *%rax
// 42a: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_ISINSTANCE_code_body[1067] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x5e, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x54, 0x24, 0x20, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x31, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x69, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x78, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x4d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x4c, 0x8d, 0x3c, 0x12, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x02, 0x41, 0x0f, 0x94, 0xc0, 0x4b, 0x83, 0x3c, 0xfe, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x75, 0x22, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x48, 0x63, 0xde, 0x48, 0x01, 0xd3, 0x4d, 0x8b, 0x24, 0xde, 0x49, 0x8b, 0x4d, 0x10, 0x4c, 0x3b, 0xa1, 0xb8, 0x54, 0x06, 0x00, 0x0f, 0x84, 0x02, 0x01, 0x00, 0x00, 0x49, 0x89, 0xee, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xbf, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfb, 0x31, 0xdb, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0xa5, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x85, 0x88, 0xfe, 0xff, 0xff, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x29, 0xc5, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x68, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x74, 0xc5, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0x74, 0x24, 0x10, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xbb, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x2c, 0xde, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x9c, 0xfe, 0xff, 0xff, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_ISINSTANCE_code_holes[29] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsInstance, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_FromLong, 0x0},
    {0x300, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x30a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x32b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x33d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x355, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x35f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x380, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x392, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3aa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x40b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_ISINSTANCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_ISINSTANCE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CALL_LEN
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CALL_LEN.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 60 01 00 00             je      0x1c7 <_JIT_ENTRY+0x1c7>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 4f 01 00 00             je      0x1c7 <_JIT_ENTRY+0x1c7>
// 78: 4c 89 4c 24 08                movq    %r9, 0x8(%rsp)
// 7d: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 82: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 87: 48 89 3c 24                   movq    %rdi, (%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 41 0f 94 c7                   sete    %r15b
// 96: 89 da                         movl    %ebx, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 41 84 c7                      testb   %al, %r15b
// bb: 0f 84 33 01 00 00             je      0x1f4 <_JIT_ENTRY+0x1f4>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e3: 4c 89 e2                      movq    %r12, %rdx
// e6: ff d0                         callq   *%rax
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 85 c0                         testl   %eax, %eax
// ee: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// f3: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 0c 24                   decq    (%r12)
// 10a: 0f 84 69 01 00 00             je      0x279 <_JIT_ENTRY+0x279>
// 110: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 115: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 119: 48 85 db                      testq   %rbx, %rbx
// 11c: 0f 84 78 01 00 00             je      0x29a <_JIT_ENTRY+0x29a>
// 122: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 127: 4d 8d 2c ce                   leaq    (%r14,%rcx,8), %r13
// 12b: 48 89 18                      movq    %rbx, (%rax)
// 12e: 49 8b 47 10                   movq    0x10(%r15), %rax
// 132: 48 8b 00                      movq    (%rax), %rax
// 135: 84 c0                         testb   %al, %al
// 137: 74 17                         je      0x150 <_JIT_ENTRY+0x150>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_HandlePending
// 143: 4c 89 ff                      movq    %r15, %rdi
// 146: ff d0                         callq   *%rax
// 148: 85 c0                         testl   %eax, %eax
// 14a: 0f 85 4d 01 00 00             jne     0x29d <_JIT_ENTRY+0x29d>
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _JIT_OPARG
// 15a: 0f b7 c8                      movzwl  %ax, %ecx
// 15d: 89 ca                         movl    %ecx, %edx
// 15f: f7 d2                         notl    %edx
// 161: 48 63 d2                      movslq  %edx, %rdx
// 164: 48 8d 1c 12                   leaq    (%rdx,%rdx), %rbx
// 168: 0f b7 c0                      movzwl  %ax, %eax
// 16b: 48 89 c6                      movq    %rax, %rsi
// 16e: 48 f7 de                      negq    %rsi
// 171: 31 ff                         xorl    %edi, %edi
// 173: 66 85 c0                      testw   %ax, %ax
// 176: 40 0f 94 c7                   sete    %dil
// 17a: 45 31 c0                      xorl    %r8d, %r8d
// 17d: 66 83 f8 01                   cmpw    $0x1, %ax
// 181: 41 0f 94 c0                   sete    %r8b
// 185: 49 83 3c de 00                cmpq    $0x0, (%r14,%rbx,8)
// 18a: 48 f7 d0                      notq    %rax
// 18d: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 191: 41 0f 44 f8                   cmovel  %r8d, %edi
// 195: 40 80 ff 01                   cmpb    $0x1, %dil
// 199: 75 25                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 19b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 1a0: 29 ce                         subl    %ecx, %esi
// 1a2: 4c 89 f9                      movq    %r15, %rcx
// 1a5: 4c 63 fe                      movslq  %esi, %r15
// 1a8: 49 01 d7                      addq    %rdx, %r15
// 1ab: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 1af: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 1b3: 48 3b a9 c0 54 06 00          cmpq    0x654c0(%rcx), %rbp
// 1ba: 0f 84 01 01 00 00             je      0x2c1 <_JIT_ENTRY+0x2c1>
// 1c0: 4d 89 ee                      movq    %r13, %r14
// 1c3: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1c7: 49 29 fe                      subq    %rdi, %r14
// 1ca: 49 83 c6 b8                   addq    $-0x48, %r14
// 1ce: 49 c1 ee 03                   shrq    $0x3, %r14
// 1d2: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 1d6: 48 8b 07                      movq    (%rdi), %rax
// 1d9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001db:  R_X86_64_64  _JIT_TARGET
// 1e3: 89 c9                         movl    %ecx, %ecx
// 1e5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1e9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ef: e9 be 00 00 00                jmp     0x2b2 <_JIT_ENTRY+0x2b2>
// 1f4: 83 fb 02                      cmpl    $0x2, %ebx
// 1f7: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1fd: 44 0f 43 fb                   cmovael %ebx, %r15d
// 201: 31 db                         xorl    %ebx, %ebx
// 203: eb 17                         jmp     0x21c <_JIT_ENTRY+0x21c>
// 205: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 210: 48 ff c3                      incq    %rbx
// 213: 49 39 df                      cmpq    %rbx, %r15
// 216: 0f 84 a5 fe ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 21c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 221: 49 8b 45 00                   movq    (%r13), %rax
// 225: 48 85 c0                      testq   %rax, %rax
// 228: 7e 06                         jle     0x230 <_JIT_ENTRY+0x230>
// 22a: 85 c0                         testl   %eax, %eax
// 22c: 78 e2                         js      0x210 <_JIT_ENTRY+0x210>
// 22e: eb 26                         jmp     0x256 <_JIT_ENTRY+0x256>
// 230: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000232:  R_X86_64_64  .rodata.str1.1
// 23a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 23f: 4c 89 ea                      movq    %r13, %rdx
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _Py_NegativeRefcount
// 24c: ff d0                         callq   *%rax
// 24e: 49 8b 45 00                   movq    (%r13), %rax
// 252: 85 c0                         testl   %eax, %eax
// 254: 78 ba                         js      0x210 <_JIT_ENTRY+0x210>
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 260: ff d0                         callq   *%rax
// 262: 49 ff 4d 00                   decq    (%r13)
// 266: 75 a8                         jne     0x210 <_JIT_ENTRY+0x210>
// 268: 4c 89 ef                      movq    %r13, %rdi
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _Py_Dealloc
// 275: ff d0                         callq   *%rax
// 277: eb 97                         jmp     0x210 <_JIT_ENTRY+0x210>
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_Dealloc
// 283: 4c 89 e7                      movq    %r12, %rdi
// 286: ff d0                         callq   *%rax
// 288: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 28d: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 291: 48 85 db                      testq   %rbx, %rbx
// 294: 0f 85 88 fe ff ff             jne     0x122 <_JIT_ENTRY+0x122>
// 29a: 49 89 c5                      movq    %rax, %r13
// 29d: 48 8b 04 24                   movq    (%rsp), %rax
// 2a1: 49 29 c5                      subq    %rax, %r13
// 2a4: 49 83 c5 b8                   addq    $-0x48, %r13
// 2a8: 49 c1 ed 03                   shrq    $0x3, %r13
// 2ac: 44 89 68 40                   movl    %r13d, 0x40(%rax)
// 2b0: 31 c0                         xorl    %eax, %eax
// 2b2: 48 83 c4 28                   addq    $0x28, %rsp
// 2b6: 5b                            popq    %rbx
// 2b7: 41 5c                         popq    %r12
// 2b9: 41 5d                         popq    %r13
// 2bb: 41 5e                         popq    %r14
// 2bd: 41 5f                         popq    %r15
// 2bf: 5d                            popq    %rbp
// 2c0: c3                            retq
// 2c1: 4d 8b 64 c5 00                movq    (%r13,%rax,8), %r12
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  PyObject_Size
// 2d0: 4c 89 e7                      movq    %r12, %rdi
// 2d3: ff d0                         callq   *%rax
// 2d5: 48 85 c0                      testq   %rax, %rax
// 2d8: 78 c3                         js      0x29d <_JIT_ENTRY+0x29d>
// 2da: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002dc:  R_X86_64_64  PyLong_FromSsize_t
// 2e4: 48 89 c7                      movq    %rax, %rdi
// 2e7: ff d1                         callq   *%rcx
// 2e9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 2ee: 48 8b 45 00                   movq    (%rbp), %rax
// 2f2: 48 85 c0                      testq   %rax, %rax
// 2f5: 7f 22                         jg      0x319 <_JIT_ENTRY+0x319>
// 2f7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f9:  R_X86_64_64  .rodata.str1.1
// 301: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000303:  R_X86_64_64  _Py_NegativeRefcount
// 30b: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 310: 48 89 ea                      movq    %rbp, %rdx
// 313: ff d0                         callq   *%rax
// 315: 48 8b 45 00                   movq    (%rbp), %rax
// 319: 85 c0                         testl   %eax, %eax
// 31b: 78 21                         js      0x33e <_JIT_ENTRY+0x33e>
// 31d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 327: ff d0                         callq   *%rax
// 329: 48 ff 4d 00                   decq    (%rbp)
// 32d: 75 0f                         jne     0x33e <_JIT_ENTRY+0x33e>
// 32f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000331:  R_X86_64_64  _Py_Dealloc
// 339: 48 89 ef                      movq    %rbp, %rdi
// 33c: ff d0                         callq   *%rax
// 33e: 49 8b 04 24                   movq    (%r12), %rax
// 342: 48 85 c0                      testq   %rax, %rax
// 345: 7f 22                         jg      0x369 <_JIT_ENTRY+0x369>
// 347: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000349:  R_X86_64_64  .rodata.str1.1
// 351: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000353:  R_X86_64_64  _Py_NegativeRefcount
// 35b: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 360: 4c 89 e2                      movq    %r12, %rdx
// 363: ff d0                         callq   *%rax
// 365: 49 8b 04 24                   movq    (%r12), %rax
// 369: 85 c0                         testl   %eax, %eax
// 36b: 78 21                         js      0x38e <_JIT_ENTRY+0x38e>
// 36d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 377: ff d0                         callq   *%rax
// 379: 49 ff 0c 24                   decq    (%r12)
// 37d: 75 0f                         jne     0x38e <_JIT_ENTRY+0x38e>
// 37f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000381:  R_X86_64_64  _Py_Dealloc
// 389: 4c 89 e7                      movq    %r12, %rdi
// 38c: ff d0                         callq   *%rax
// 38e: 4f 8d 2c fe                   leaq    (%r14,%r15,8), %r13
// 392: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 397: 48 85 c0                      testq   %rax, %rax
// 39a: 0f 84 fd fe ff ff             je      0x29d <_JIT_ENTRY+0x29d>
// 3a0: 49 8d 34 de                   leaq    (%r14,%rbx,8), %rsi
// 3a4: 49 89 45 00                   movq    %rax, (%r13)
// 3a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003aa:  R_X86_64_64  _JIT_CONTINUE
// 3b2: 48 8b 3c 24                   movq    (%rsp), %rdi
// 3b6: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 3bb: 48 83 c4 28                   addq    $0x28, %rsp
// 3bf: 5b                            popq    %rbx
// 3c0: 41 5c                         popq    %r12
// 3c2: 41 5d                         popq    %r13
// 3c4: 41 5e                         popq    %r14
// 3c6: 41 5f                         popq    %r15
// 3c8: 5d                            popq    %rbp
// 3c9: ff e0                         jmpq    *%rax
// 3cb: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_LEN_code_body[972] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x60, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x4f, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x33, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x69, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xdb, 0x0f, 0x84, 0x78, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x4d, 0x8d, 0x2c, 0xce, 0x48, 0x89, 0x18, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x4d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x48, 0x8d, 0x1c, 0x12, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x31, 0xff, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x01, 0x41, 0x0f, 0x94, 0xc0, 0x49, 0x83, 0x3c, 0xde, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x75, 0x25, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x4c, 0x89, 0xf9, 0x4c, 0x63, 0xfe, 0x49, 0x01, 0xd7, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x3b, 0xa9, 0xc0, 0x54, 0x06, 0x00, 0x0f, 0x84, 0x01, 0x01, 0x00, 0x00, 0x4d, 0x89, 0xee, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xbe, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfb, 0x31, 0xdb, 0xeb, 0x17, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0xa5, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xdb, 0x0f, 0x85, 0x88, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc5, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x68, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x64, 0xc5, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x78, 0xc3, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4f, 0x8d, 0x2c, 0xfe, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xfd, 0xfe, 0xff, 0xff, 0x49, 0x8d, 0x34, 0xde, 0x49, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_LEN_code_holes[25] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x2f9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x303, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x331, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x349, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x353, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x36f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x381, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3aa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_LEN_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_LEN_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_FAST
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_FAST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 48 89 f5                      movq    %rsi, %rbp
// 11: 49 89 ff                      movq    %rdi, %r15
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 45 8d 70 01                   leal    0x1(%r8), %r14d
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 45 0f 44 f0                   cmovel  %r8d, %r14d
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4e 8b 64 d5 00                movq    (%rbp,%r10,8), %r12
// 59: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5e: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 65: 0f 84 24 02 00 00             je      0x28f <_JIT_ENTRY+0x28f>
// 6b: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 73: 4d 85 c0                      testq   %r8, %r8
// 76: 0f 84 13 02 00 00             je      0x28f <_JIT_ENTRY+0x28f>
// 7c: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 81: 4c 89 4c 24 30                movq    %r9, 0x30(%rsp)
// 86: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8b: 4c 89 7c 24 28                movq    %r15, 0x28(%rsp)
// 90: 48 89 6c 24 20                movq    %rbp, 0x20(%rsp)
// 95: 48 8d 6c cd 00                leaq    (%rbp,%rcx,8), %rbp
// 9a: 48 85 c0                      testq   %rax, %rax
// 9d: 0f 94 c3                      sete    %bl
// a0: 44 89 f2                      movl    %r14d, %edx
// a3: 4c 89 e7                      movq    %r12, %rdi
// a6: 48 89 ee                      movq    %rbp, %rsi
// a9: 31 c9                         xorl    %ecx, %ecx
// ab: 41 ff d0                      callq   *%r8
// ae: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _JIT_OPARG
// bd: 66 85 c0                      testw   %ax, %ax
// c0: 0f 94 c0                      sete    %al
// c3: 84 c3                         testb   %al, %bl
// c5: 0f 84 bd 00 00 00             je      0x188 <_JIT_ENTRY+0x188>
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 48 85 c0                      testq   %rax, %rax
// d2: 7f 22                         jg      0xf6 <_JIT_ENTRY+0xf6>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// ed: 4c 89 e2                      movq    %r12, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 04 24                   movq    (%r12), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 4c 8b 7c 24 28                movq    0x28(%rsp), %r15
// fd: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 102: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 49 ff 0c 24                   decq    (%r12)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 4c 89 e7                      movq    %r12, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 12f: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 133: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 138: 48 85 d2                      testq   %rdx, %rdx
// 13b: 74 35                         je      0x172 <_JIT_ENTRY+0x172>
// 13d: 48 8b 4c 24 30                movq    0x30(%rsp), %rcx
// 142: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 146: 48 89 10                      movq    %rdx, (%rax)
// 149: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 14d: 48 8b 00                      movq    (%rax), %rax
// 150: 84 c0                         testb   %al, %al
// 152: 0f 84 b7 00 00 00             je      0x20f <_JIT_ENTRY+0x20f>
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  _Py_HandlePending
// 162: 48 89 df                      movq    %rbx, %rdi
// 165: ff d0                         callq   *%rax
// 167: 85 c0                         testl   %eax, %eax
// 169: 0f 84 a0 00 00 00             je      0x20f <_JIT_ENTRY+0x20f>
// 16f: 48 89 e8                      movq    %rbp, %rax
// 172: 4c 29 f8                      subq    %r15, %rax
// 175: 48 83 c0 b8                   addq    $-0x48, %rax
// 179: 48 c1 e8 03                   shrq    $0x3, %rax
// 17d: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 181: 31 c0                         xorl    %eax, %eax
// 183: e9 2f 01 00 00                jmp     0x2b7 <_JIT_ENTRY+0x2b7>
// 188: 41 83 fe 02                   cmpl    $0x2, %r14d
// 18c: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 192: 45 0f 43 fe                   cmovael %r14d, %r15d
// 196: 45 31 f6                      xorl    %r14d, %r14d
// 199: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000019b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a3: eb 17                         jmp     0x1bc <_JIT_ENTRY+0x1bc>
// 1a5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 1b0: 49 ff c6                      incq    %r14
// 1b3: 4d 39 f7                      cmpq    %r14, %r15
// 1b6: 0f 84 0f ff ff ff             je      0xcb <_JIT_ENTRY+0xcb>
// 1bc: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 1c1: 49 8b 45 00                   movq    (%r13), %rax
// 1c5: 48 85 c0                      testq   %rax, %rax
// 1c8: 7e 06                         jle     0x1d0 <_JIT_ENTRY+0x1d0>
// 1ca: 85 c0                         testl   %eax, %eax
// 1cc: 78 e2                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1ce: eb 26                         jmp     0x1f6 <_JIT_ENTRY+0x1f6>
// 1d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1
// 1da: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1df: 4c 89 ea                      movq    %r13, %rdx
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_NegativeRefcount
// 1ec: ff d0                         callq   *%rax
// 1ee: 49 8b 45 00                   movq    (%r13), %rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 78 ba                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1f6: ff d3                         callq   *%rbx
// 1f8: 49 ff 4d 00                   decq    (%r13)
// 1fc: 75 b2                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 1fe: 4c 89 ef                      movq    %r13, %rdi
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_Dealloc
// 20b: ff d0                         callq   *%rax
// 20d: eb a1                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 20f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000211:  R_X86_64_64  _JIT_OPARG
// 219: 0f b7 f1                      movzwl  %cx, %esi
// 21c: 89 f0                         movl    %esi, %eax
// 21e: f7 d0                         notl    %eax
// 220: 48 63 d0                      movslq  %eax, %rdx
// 223: 4c 8d 04 12                   leaq    (%rdx,%rdx), %r8
// 227: 4b 8b 04 c6                   movq    (%r14,%r8,8), %rax
// 22b: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 230: 29 f7                         subl    %esi, %edi
// 232: 48 63 df                      movslq  %edi, %rbx
// 235: 48 01 d3                      addq    %rdx, %rbx
// 238: 0f b7 d1                      movzwl  %cx, %edx
// 23b: 48 89 d1                      movq    %rdx, %rcx
// 23e: 48 f7 d9                      negq    %rcx
// 241: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 245: 48 85 c0                      testq   %rax, %rax
// 248: 48 f7 d2                      notq    %rdx
// 24b: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 24f: 44 0f 44 ee                   cmovel  %esi, %r13d
// 253: 4d 8b 24 de                   movq    (%r14,%rbx,8), %r12
// 257: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000259:  R_X86_64_64  PyMethodDescr_Type
// 261: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 266: 75 27                         jne     0x28f <_JIT_ENTRY+0x28f>
// 268: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 26d: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 274: 75 19                         jne     0x28f <_JIT_ENTRY+0x28f>
// 276: 4c 8d 34 d5 00 00 00 00       leaq    (,%rdx,8), %r14
// 27e: 49 01 ee                      addq    %rbp, %r14
// 281: 49 8b 3e                      movq    (%r14), %rdi
// 284: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 288: 49 3b 54 24 10                cmpq    0x10(%r12), %rdx
// 28d: 74 37                         je      0x2c6 <_JIT_ENTRY+0x2c6>
// 28f: 4c 29 fd                      subq    %r15, %rbp
// 292: 48 83 c5 b8                   addq    $-0x48, %rbp
// 296: 48 c1 ed 03                   shrq    $0x3, %rbp
// 29a: 41 89 6f 40                   movl    %ebp, 0x40(%r15)
// 29e: 49 8b 07                      movq    (%r15), %rax
// 2a1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002a3:  R_X86_64_64  _JIT_TARGET
// 2ab: 89 c9                         movl    %ecx, %ecx
// 2ad: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2b1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2b7: 48 83 c4 38                   addq    $0x38, %rsp
// 2bb: 5b                            popq    %rbx
// 2bc: 41 5c                         popq    %r12
// 2be: 41 5d                         popq    %r13
// 2c0: 41 5e                         popq    %r14
// 2c2: 41 5f                         popq    %r15
// 2c4: 5d                            popq    %rbp
// 2c5: c3                            retq
// 2c6: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// 2cb: 48 85 c0                      testq   %rax, %rax
// 2ce: 40 0f 94 c5                   sete    %bpl
// 2d2: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// 2d6: 49 8d 76 08                   leaq    0x8(%r14), %rsi
// 2da: 48 63 d0                      movslq  %eax, %rdx
// 2dd: ff 51 08                      callq   *0x8(%rcx)
// 2e0: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _JIT_OPARG
// 2ef: 66 85 c0                      testw   %ax, %ax
// 2f2: 0f 94 c0                      sete    %al
// 2f5: 40 84 c5                      testb   %al, %bpl
// 2f8: 0f 84 b6 00 00 00             je      0x3b4 <_JIT_ENTRY+0x3b4>
// 2fe: 49 8b 04 24                   movq    (%r12), %rax
// 302: 48 85 c0                      testq   %rax, %rax
// 305: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 30a: 7f 27                         jg      0x333 <_JIT_ENTRY+0x333>
// 30c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000030e:  R_X86_64_64  .rodata.str1.1
// 316: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000318:  R_X86_64_64  _Py_NegativeRefcount
// 320: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 325: 4c 89 e2                      movq    %r12, %rdx
// 328: ff d0                         callq   *%rax
// 32a: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 32f: 49 8b 04 24                   movq    (%r12), %rax
// 333: 85 c0                         testl   %eax, %eax
// 335: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 33a: 78 2b                         js      0x367 <_JIT_ENTRY+0x367>
// 33c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 346: ff d0                         callq   *%rax
// 348: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 34d: 49 ff 0c 24                   decq    (%r12)
// 351: 75 14                         jne     0x367 <_JIT_ENTRY+0x367>
// 353: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000355:  R_X86_64_64  _Py_Dealloc
// 35d: 4c 89 e7                      movq    %r12, %rdi
// 360: ff d0                         callq   *%rax
// 362: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 367: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 36b: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 370: 48 85 d2                      testq   %rdx, %rdx
// 373: 4c 8b 7c 24 28                movq    0x28(%rsp), %r15
// 378: 0f 84 f4 fd ff ff             je      0x172 <_JIT_ENTRY+0x172>
// 37e: 4d 8d 34 ce                   leaq    (%r14,%rcx,8), %r14
// 382: 48 89 10                      movq    %rdx, (%rax)
// 385: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 38a: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 38e: 48 8b 00                      movq    (%rax), %rax
// 391: 84 c0                         testb   %al, %al
// 393: 0f 84 90 00 00 00             je      0x429 <_JIT_ENTRY+0x429>
// 399: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039b:  R_X86_64_64  _Py_HandlePending
// 3a3: 48 89 df                      movq    %rbx, %rdi
// 3a6: ff d0                         callq   *%rax
// 3a8: 85 c0                         testl   %eax, %eax
// 3aa: 74 7d                         je      0x429 <_JIT_ENTRY+0x429>
// 3ac: 4c 89 f0                      movq    %r14, %rax
// 3af: e9 be fd ff ff                jmp     0x172 <_JIT_ENTRY+0x172>
// 3b4: 41 83 fd 02                   cmpl    $0x2, %r13d
// 3b8: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 3be: 45 0f 43 fd                   cmovael %r13d, %r15d
// 3c2: 45 31 ed                      xorl    %r13d, %r13d
// 3c5: eb 0c                         jmp     0x3d3 <_JIT_ENTRY+0x3d3>
// 3c7: 49 ff c5                      incq    %r13
// 3ca: 4d 39 ef                      cmpq    %r13, %r15
// 3cd: 0f 84 2b ff ff ff             je      0x2fe <_JIT_ENTRY+0x2fe>
// 3d3: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 3d7: 48 8b 45 00                   movq    (%rbp), %rax
// 3db: 48 85 c0                      testq   %rax, %rax
// 3de: 7f 22                         jg      0x402 <_JIT_ENTRY+0x402>
// 3e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003e2:  R_X86_64_64  .rodata.str1.1
// 3ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 3ef: 48 89 ea                      movq    %rbp, %rdx
// 3f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f4:  R_X86_64_64  _Py_NegativeRefcount
// 3fc: ff d0                         callq   *%rax
// 3fe: 48 8b 45 00                   movq    (%rbp), %rax
// 402: 85 c0                         testl   %eax, %eax
// 404: 78 c1                         js      0x3c7 <_JIT_ENTRY+0x3c7>
// 406: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000408:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 410: ff d0                         callq   *%rax
// 412: 48 ff 4d 00                   decq    (%rbp)
// 416: 75 af                         jne     0x3c7 <_JIT_ENTRY+0x3c7>
// 418: 48 89 ef                      movq    %rbp, %rdi
// 41b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000041d:  R_X86_64_64  _Py_Dealloc
// 425: ff d0                         callq   *%rax
// 427: eb 9e                         jmp     0x3c7 <_JIT_ENTRY+0x3c7>
// 429: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000042b:  R_X86_64_64  _JIT_CONTINUE
// 433: 4c 89 ff                      movq    %r15, %rdi
// 436: 4c 89 f6                      movq    %r14, %rsi
// 439: 48 89 da                      movq    %rbx, %rdx
// 43c: 48 83 c4 38                   addq    $0x38, %rsp
// 440: 5b                            popq    %rbx
// 441: 41 5c                         popq    %r12
// 443: 41 5d                         popq    %r13
// 445: 41 5e                         popq    %r14
// 447: 41 5f                         popq    %r15
// 449: 5d                            popq    %rbp
// 44a: ff e0                         jmpq    *%rax
// 44c: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_FAST_code_body[1101] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x48, 0x89, 0xf5, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x45, 0x8d, 0x70, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf0, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4e, 0x8b, 0x64, 0xd5, 0x00, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x24, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x13, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x30, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x28, 0x48, 0x89, 0x6c, 0x24, 0x20, 0x48, 0x8d, 0x6c, 0xcd, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xf2, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xbd, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x28, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x30, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xa0, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe8, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0xe9, 0x2f, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfe, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfe, 0x45, 0x31, 0xf6, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x17, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc6, 0x4d, 0x39, 0xf7, 0x0f, 0x84, 0x0f, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0xff, 0xd3, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xb2, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xa1, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x48, 0x63, 0xd0, 0x4c, 0x8d, 0x04, 0x12, 0x4b, 0x8b, 0x04, 0xc6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x48, 0x63, 0xdf, 0x48, 0x01, 0xd3, 0x0f, 0xb7, 0xd1, 0x48, 0x89, 0xd1, 0x48, 0xf7, 0xd9, 0x44, 0x8d, 0x6e, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd2, 0x48, 0x0f, 0x44, 0xd1, 0x44, 0x0f, 0x44, 0xee, 0x4d, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x19, 0x4c, 0x8d, 0x34, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xee, 0x49, 0x8b, 0x3e, 0x48, 0x8b, 0x57, 0x08, 0x49, 0x3b, 0x54, 0x24, 0x10, 0x74, 0x37, 0x4c, 0x29, 0xfd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x41, 0x89, 0x6f, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x49, 0x8d, 0x76, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x78, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x4c, 0x8b, 0x7c, 0x24, 0x28, 0x0f, 0x84, 0xf4, 0xfd, 0xff, 0xff, 0x4d, 0x8d, 0x34, 0xce, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x7d, 0x4c, 0x89, 0xf0, 0xe9, 0xbe, 0xfd, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x45, 0x31, 0xed, 0xeb, 0x0c, 0x49, 0xff, 0xc5, 0x4d, 0x39, 0xef, 0x0f, 0x84, 0x2b, 0xff, 0xff, 0xff, 0x4b, 0x8b, 0x2c, 0xee, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0xaf, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x9e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_FAST_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x30e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x318, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x355, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x39b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x3e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x408, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x41d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x42b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_FAST_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 48 89 f5                      movq    %rsi, %rbp
// 11: 49 89 ff                      movq    %rdi, %r15
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 45 8d 70 01                   leal    0x1(%r8), %r14d
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 45 0f 44 f0                   cmovel  %r8d, %r14d
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4e 8b 64 d5 00                movq    (%rbp,%r10,8), %r12
// 59: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5e: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 65: 0f 84 1e 02 00 00             je      0x289 <_JIT_ENTRY+0x289>
// 6b: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 73: 4d 85 c0                      testq   %r8, %r8
// 76: 0f 84 0d 02 00 00             je      0x289 <_JIT_ENTRY+0x289>
// 7c: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 81: 4c 89 4c 24 30                movq    %r9, 0x30(%rsp)
// 86: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 8b: 4c 89 7c 24 28                movq    %r15, 0x28(%rsp)
// 90: 48 89 6c 24 18                movq    %rbp, 0x18(%rsp)
// 95: 48 8d 6c cd 00                leaq    (%rbp,%rcx,8), %rbp
// 9a: 48 85 c0                      testq   %rax, %rax
// 9d: 0f 94 c3                      sete    %bl
// a0: 44 89 f2                      movl    %r14d, %edx
// a3: 4c 89 e7                      movq    %r12, %rdi
// a6: 48 89 ee                      movq    %rbp, %rsi
// a9: 31 c9                         xorl    %ecx, %ecx
// ab: 41 ff d0                      callq   *%r8
// ae: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _JIT_OPARG
// bd: 66 85 c0                      testw   %ax, %ax
// c0: 0f 94 c0                      sete    %al
// c3: 84 c3                         testb   %al, %bl
// c5: 0f 84 b3 00 00 00             je      0x17e <_JIT_ENTRY+0x17e>
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 48 85 c0                      testq   %rax, %rax
// d2: 7f 22                         jg      0xf6 <_JIT_ENTRY+0xf6>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// ed: 4c 89 e2                      movq    %r12, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 04 24                   movq    (%r12), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 4c 8b 7c 24 28                movq    0x28(%rsp), %r15
// fd: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 102: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 107: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 10c: 78 16                         js      0x124 <_JIT_ENTRY+0x124>
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 118: ff d0                         callq   *%rax
// 11a: 49 ff 0c 24                   decq    (%r12)
// 11e: 0f 84 9c 01 00 00             je      0x2c0 <_JIT_ENTRY+0x2c0>
// 124: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 129: 48 8d 04 c5 00 00 00 00       leaq    (,%rax,8), %rax
// 131: 4c 01 e8                      addq    %r13, %rax
// 134: 4d 85 f6                      testq   %r14, %r14
// 137: 0f 84 ab 01 00 00             je      0x2e8 <_JIT_ENTRY+0x2e8>
// 13d: 48 8b 4c 24 30                movq    0x30(%rsp), %rcx
// 142: 48 8d 2c cd 00 00 00 00       leaq    (,%rcx,8), %rbp
// 14a: 4c 01 ed                      addq    %r13, %rbp
// 14d: 4c 89 30                      movq    %r14, (%rax)
// 150: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 154: 48 8b 00                      movq    (%rax), %rax
// 157: 84 c0                         testb   %al, %al
// 159: 0f 84 a0 00 00 00             je      0x1ff <_JIT_ENTRY+0x1ff>
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_HandlePending
// 169: 48 89 df                      movq    %rbx, %rdi
// 16c: ff d0                         callq   *%rax
// 16e: 85 c0                         testl   %eax, %eax
// 170: 0f 84 89 00 00 00             je      0x1ff <_JIT_ENTRY+0x1ff>
// 176: 48 89 e8                      movq    %rbp, %rax
// 179: e9 6a 01 00 00                jmp     0x2e8 <_JIT_ENTRY+0x2e8>
// 17e: 41 83 fe 02                   cmpl    $0x2, %r14d
// 182: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 188: 45 0f 43 fe                   cmovael %r14d, %r15d
// 18c: 45 31 f6                      xorl    %r14d, %r14d
// 18f: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000191:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 199: eb 11                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1a0: 49 ff c6                      incq    %r14
// 1a3: 4d 39 f7                      cmpq    %r14, %r15
// 1a6: 0f 84 1f ff ff ff             je      0xcb <_JIT_ENTRY+0xcb>
// 1ac: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: ff d3                         callq   *%rbx
// 1e8: 49 ff 4d 00                   decq    (%r13)
// 1ec: 75 b2                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1ee: 4c 89 ef                      movq    %r13, %rdi
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_Dealloc
// 1fb: ff d0                         callq   *%rax
// 1fd: eb a1                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 1ff: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000201:  R_X86_64_64  _JIT_OPARG
// 209: 0f b7 d1                      movzwl  %cx, %edx
// 20c: 89 d0                         movl    %edx, %eax
// 20e: f7 d0                         notl    %eax
// 210: 48 63 f0                      movslq  %eax, %rsi
// 213: 4c 8d 0c 36                   leaq    (%rsi,%rsi), %r9
// 217: 4b 8b 44 cd 00                movq    (%r13,%r9,8), %rax
// 21c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 221: 29 d7                         subl    %edx, %edi
// 223: 4c 63 f7                      movslq  %edi, %r14
// 226: 49 01 f6                      addq    %rsi, %r14
// 229: 0f b7 c9                      movzwl  %cx, %ecx
// 22c: 48 89 ce                      movq    %rcx, %rsi
// 22f: 48 f7 de                      negq    %rsi
// 232: 4c 89 ef                      movq    %r13, %rdi
// 235: 44 8d 6a 01                   leal    0x1(%rdx), %r13d
// 239: 48 85 c0                      testq   %rax, %rax
// 23c: 48 f7 d1                      notq    %rcx
// 23f: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 243: 44 0f 44 ea                   cmovel  %edx, %r13d
// 247: 4e 8b 24 f7                   movq    (%rdi,%r14,8), %r12
// 24b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000024d:  R_X86_64_64  PyMethodDescr_Type
// 255: 49 39 54 24 08                cmpq    %rdx, 0x8(%r12)
// 25a: 75 2d                         jne     0x289 <_JIT_ENTRY+0x289>
// 25c: 4d 8b 44 24 28                movq    0x28(%r12), %r8
// 261: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 269: 75 1e                         jne     0x289 <_JIT_ENTRY+0x289>
// 26b: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 270: 48 8d 1c cd 00 00 00 00       leaq    (,%rcx,8), %rbx
// 278: 48 01 eb                      addq    %rbp, %rbx
// 27b: 48 8b 3b                      movq    (%rbx), %rdi
// 27e: 48 8b 4f 08                   movq    0x8(%rdi), %rcx
// 282: 49 3b 4c 24 10                cmpq    0x10(%r12), %rcx
// 287: 74 72                         je      0x2fb <_JIT_ENTRY+0x2fb>
// 289: 4c 29 fd                      subq    %r15, %rbp
// 28c: 48 83 c5 b8                   addq    $-0x48, %rbp
// 290: 48 c1 ed 03                   shrq    $0x3, %rbp
// 294: 41 89 6f 40                   movl    %ebp, 0x40(%r15)
// 298: 49 8b 07                      movq    (%r15), %rax
// 29b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000029d:  R_X86_64_64  _JIT_TARGET
// 2a5: 89 c9                         movl    %ecx, %ecx
// 2a7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2ab: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2b1: 48 83 c4 38                   addq    $0x38, %rsp
// 2b5: 5b                            popq    %rbx
// 2b6: 41 5c                         popq    %r12
// 2b8: 41 5d                         popq    %r13
// 2ba: 41 5e                         popq    %r14
// 2bc: 41 5f                         popq    %r15
// 2be: 5d                            popq    %rbp
// 2bf: c3                            retq
// 2c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c2:  R_X86_64_64  _Py_Dealloc
// 2ca: 4c 89 e7                      movq    %r12, %rdi
// 2cd: ff d0                         callq   *%rax
// 2cf: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2d4: 48 8d 04 c5 00 00 00 00       leaq    (,%rax,8), %rax
// 2dc: 4c 01 e8                      addq    %r13, %rax
// 2df: 4d 85 f6                      testq   %r14, %r14
// 2e2: 0f 85 55 fe ff ff             jne     0x13d <_JIT_ENTRY+0x13d>
// 2e8: 4c 29 f8                      subq    %r15, %rax
// 2eb: 48 83 c0 b8                   addq    $-0x48, %rax
// 2ef: 48 c1 e8 03                   shrq    $0x3, %rax
// 2f3: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 2f7: 31 c0                         xorl    %eax, %eax
// 2f9: eb b6                         jmp     0x2b1 <_JIT_ENTRY+0x2b1>
// 2fb: 48 85 c0                      testq   %rax, %rax
// 2fe: 40 0f 94 c5                   sete    %bpl
// 302: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// 306: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// 30a: 48 63 d0                      movslq  %eax, %rdx
// 30d: 31 c9                         xorl    %ecx, %ecx
// 30f: 41 ff 50 08                   callq   *0x8(%r8)
// 313: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 318: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031a:  R_X86_64_64  _JIT_OPARG
// 322: 66 85 c0                      testw   %ax, %ax
// 325: 0f 94 c0                      sete    %al
// 328: 40 84 c5                      testb   %al, %bpl
// 32b: 0f 84 b5 00 00 00             je      0x3e6 <_JIT_ENTRY+0x3e6>
// 331: 49 8b 04 24                   movq    (%r12), %rax
// 335: 48 85 c0                      testq   %rax, %rax
// 338: 7f 22                         jg      0x35c <_JIT_ENTRY+0x35c>
// 33a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000033c:  R_X86_64_64  .rodata.str1.1
// 344: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000346:  R_X86_64_64  _Py_NegativeRefcount
// 34e: be e8 0b 00 00                movl    $0xbe8, %esi            # imm = 0xBE8
// 353: 4c 89 e2                      movq    %r12, %rdx
// 356: ff d0                         callq   *%rax
// 358: 49 8b 04 24                   movq    (%r12), %rax
// 35c: 85 c0                         testl   %eax, %eax
// 35e: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 363: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 368: 78 21                         js      0x38b <_JIT_ENTRY+0x38b>
// 36a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 374: ff d0                         callq   *%rax
// 376: 49 ff 0c 24                   decq    (%r12)
// 37a: 75 0f                         jne     0x38b <_JIT_ENTRY+0x38b>
// 37c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037e:  R_X86_64_64  _Py_Dealloc
// 386: 4c 89 e7                      movq    %r12, %rdi
// 389: ff d0                         callq   *%rax
// 38b: 4a 8d 04 f5 00 00 00 00       leaq    (,%r14,8), %rax
// 393: 4c 01 e8                      addq    %r13, %rax
// 396: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 39b: 48 85 d2                      testq   %rdx, %rdx
// 39e: 4c 8b 7c 24 28                movq    0x28(%rsp), %r15
// 3a3: 0f 84 3f ff ff ff             je      0x2e8 <_JIT_ENTRY+0x2e8>
// 3a9: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 3ae: 4c 8d 34 cd 00 00 00 00       leaq    (,%rcx,8), %r14
// 3b6: 4d 01 ee                      addq    %r13, %r14
// 3b9: 48 89 10                      movq    %rdx, (%rax)
// 3bc: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 3c0: 48 8b 00                      movq    (%rax), %rax
// 3c3: 84 c0                         testb   %al, %al
// 3c5: 0f 84 90 00 00 00             je      0x45b <_JIT_ENTRY+0x45b>
// 3cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003cd:  R_X86_64_64  _Py_HandlePending
// 3d5: 48 89 df                      movq    %rbx, %rdi
// 3d8: ff d0                         callq   *%rax
// 3da: 85 c0                         testl   %eax, %eax
// 3dc: 74 7d                         je      0x45b <_JIT_ENTRY+0x45b>
// 3de: 4c 89 f0                      movq    %r14, %rax
// 3e1: e9 02 ff ff ff                jmp     0x2e8 <_JIT_ENTRY+0x2e8>
// 3e6: 41 83 fd 02                   cmpl    $0x2, %r13d
// 3ea: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 3f0: 45 0f 43 fd                   cmovael %r13d, %r15d
// 3f4: 45 31 ed                      xorl    %r13d, %r13d
// 3f7: eb 0c                         jmp     0x405 <_JIT_ENTRY+0x405>
// 3f9: 49 ff c5                      incq    %r13
// 3fc: 4d 39 ef                      cmpq    %r13, %r15
// 3ff: 0f 84 2c ff ff ff             je      0x331 <_JIT_ENTRY+0x331>
// 405: 4a 8b 2c eb                   movq    (%rbx,%r13,8), %rbp
// 409: 48 8b 45 00                   movq    (%rbp), %rax
// 40d: 48 85 c0                      testq   %rax, %rax
// 410: 7f 22                         jg      0x434 <_JIT_ENTRY+0x434>
// 412: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000414:  R_X86_64_64  .rodata.str1.1
// 41c: be e6 0b 00 00                movl    $0xbe6, %esi            # imm = 0xBE6
// 421: 48 89 ea                      movq    %rbp, %rdx
// 424: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000426:  R_X86_64_64  _Py_NegativeRefcount
// 42e: ff d0                         callq   *%rax
// 430: 48 8b 45 00                   movq    (%rbp), %rax
// 434: 85 c0                         testl   %eax, %eax
// 436: 78 c1                         js      0x3f9 <_JIT_ENTRY+0x3f9>
// 438: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000043a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 442: ff d0                         callq   *%rax
// 444: 48 ff 4d 00                   decq    (%rbp)
// 448: 75 af                         jne     0x3f9 <_JIT_ENTRY+0x3f9>
// 44a: 48 89 ef                      movq    %rbp, %rdi
// 44d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000044f:  R_X86_64_64  _Py_Dealloc
// 457: ff d0                         callq   *%rax
// 459: eb 9e                         jmp     0x3f9 <_JIT_ENTRY+0x3f9>
// 45b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000045d:  R_X86_64_64  _JIT_CONTINUE
// 465: 4c 89 ff                      movq    %r15, %rdi
// 468: 4c 89 f6                      movq    %r14, %rsi
// 46b: 48 89 da                      movq    %rbx, %rdx
// 46e: 48 83 c4 38                   addq    $0x38, %rsp
// 472: 5b                            popq    %rbx
// 473: 41 5c                         popq    %r12
// 475: 41 5d                         popq    %r13
// 477: 41 5e                         popq    %r14
// 479: 41 5f                         popq    %r15
// 47b: 5d                            popq    %rbp
// 47c: ff e0                         jmpq    *%rax
// 47e: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_body[1151] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x48, 0x89, 0xf5, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x45, 0x8d, 0x70, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf0, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4e, 0x8b, 0x64, 0xd5, 0x00, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x1e, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x0d, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x4c, 0x24, 0x30, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4c, 0x89, 0x7c, 0x24, 0x28, 0x48, 0x89, 0x6c, 0x24, 0x18, 0x48, 0x8d, 0x6c, 0xcd, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xf2, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x28, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x9c, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8d, 0x04, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xe8, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0xab, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x30, 0x48, 0x8d, 0x2c, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xed, 0x4c, 0x89, 0x30, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x89, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe8, 0xe9, 0x6a, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfe, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfe, 0x45, 0x31, 0xf6, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xc6, 0x4d, 0x39, 0xf7, 0x0f, 0x84, 0x1f, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0xff, 0xd3, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xb2, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xa1, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x48, 0x63, 0xf0, 0x4c, 0x8d, 0x0c, 0x36, 0x4b, 0x8b, 0x44, 0xcd, 0x00, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd7, 0x4c, 0x63, 0xf7, 0x49, 0x01, 0xf6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x4c, 0x89, 0xef, 0x44, 0x8d, 0x6a, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xea, 0x4e, 0x8b, 0x24, 0xf7, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x54, 0x24, 0x08, 0x75, 0x2d, 0x4d, 0x8b, 0x44, 0x24, 0x28, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x75, 0x1e, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x8d, 0x1c, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xeb, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x4f, 0x08, 0x49, 0x3b, 0x4c, 0x24, 0x10, 0x74, 0x72, 0x4c, 0x29, 0xfd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x41, 0x89, 0x6f, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8d, 0x04, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xe8, 0x4d, 0x85, 0xf6, 0x0f, 0x85, 0x55, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0xeb, 0xb6, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb5, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe8, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4a, 0x8d, 0x04, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xe8, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x4c, 0x8b, 0x7c, 0x24, 0x28, 0x0f, 0x84, 0x3f, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4c, 0x8d, 0x34, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0xee, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x7d, 0x4c, 0x89, 0xf0, 0xe9, 0x02, 0xff, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x45, 0x31, 0xed, 0xeb, 0x0c, 0x49, 0xff, 0xc5, 0x4d, 0x39, 0xef, 0x0f, 0x84, 0x2c, 0xff, 0xff, 0xff, 0x4a, 0x8b, 0x2c, 0xeb, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0xaf, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x9e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x33c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x346, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x36c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x37e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x414, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x426, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x43a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x44f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x45d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_NOARGS
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_NOARGS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 c4 02 00 00             je      0x32b <_JIT_ENTRY+0x32b>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 b3 02 00 00             je      0x32b <_JIT_ENTRY+0x32b>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 82: 48 89 14 24                   movq    %rdx, (%rsp)
// 86: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 41 0f 94 c6                   sete    %r14b
// 96: 89 da                         movl    %ebx, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 41 84 c6                      testb   %al, %r14b
// bb: 0f 84 c4 01 00 00             je      0x285 <_JIT_ENTRY+0x285>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e3: 4c 89 e2                      movq    %r12, %rdx
// e6: ff d0                         callq   *%rax
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 85 c0                         testl   %eax, %eax
// ee: 4c 8b 34 24                   movq    (%rsp), %r14
// f2: 78 21                         js      0x115 <_JIT_ENTRY+0x115>
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fe: ff d0                         callq   *%rax
// 100: 49 ff 0c 24                   decq    (%r12)
// 104: 75 0f                         jne     0x115 <_JIT_ENTRY+0x115>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_Dealloc
// 110: 4c 89 e7                      movq    %r12, %rdi
// 113: ff d0                         callq   *%rax
// 115: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 11a: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 11e: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 123: 48 85 d2                      testq   %rdx, %rdx
// 126: 0f 84 dd 01 00 00             je      0x309 <_JIT_ENTRY+0x309>
// 12c: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 131: 49 8d 1c cf                   leaq    (%r15,%rcx,8), %rbx
// 135: 48 89 10                      movq    %rdx, (%rax)
// 138: 49 8b 46 10                   movq    0x10(%r14), %rax
// 13c: 48 8b 00                      movq    (%rax), %rax
// 13f: 84 c0                         testb   %al, %al
// 141: 74 17                         je      0x15a <_JIT_ENTRY+0x15a>
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_HandlePending
// 14d: 4c 89 f7                      movq    %r14, %rdi
// 150: ff d0                         callq   *%rax
// 152: 85 c0                         testl   %eax, %eax
// 154: 0f 85 b2 01 00 00             jne     0x30c <_JIT_ENTRY+0x30c>
// 15a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015c:  R_X86_64_64  _JIT_OPARG
// 164: 0f b7 c8                      movzwl  %ax, %ecx
// 167: 89 ca                         movl    %ecx, %edx
// 169: f7 d2                         notl    %edx
// 16b: 48 63 d2                      movslq  %edx, %rdx
// 16e: 48 8d 2c 12                   leaq    (%rdx,%rdx), %rbp
// 172: 0f b7 c0                      movzwl  %ax, %eax
// 175: 48 89 c6                      movq    %rax, %rsi
// 178: 48 f7 de                      negq    %rsi
// 17b: 31 ff                         xorl    %edi, %edi
// 17d: 66 85 c0                      testw   %ax, %ax
// 180: 40 0f 94 c7                   sete    %dil
// 184: 45 31 c0                      xorl    %r8d, %r8d
// 187: 66 83 f8 01                   cmpw    $0x1, %ax
// 18b: 41 0f 94 c0                   sete    %r8b
// 18f: 49 83 3c ef 00                cmpq    $0x0, (%r15,%rbp,8)
// 194: 48 f7 d0                      notq    %rax
// 197: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 19b: 41 0f 44 f8                   cmovel  %r8d, %edi
// 19f: 40 80 ff 01                   cmpb    $0x1, %dil
// 1a3: 0f 85 7a 01 00 00             jne     0x323 <_JIT_ENTRY+0x323>
// 1a9: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 1ae: 29 ce                         subl    %ecx, %esi
// 1b0: 4c 63 ee                      movslq  %esi, %r13
// 1b3: 49 01 d5                      addq    %rdx, %r13
// 1b6: 4f 8b 24 ef                   movq    (%r15,%r13,8), %r12
// 1ba: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bc:  R_X86_64_64  PyMethodDescr_Type
// 1c4: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 1c9: 0f 85 54 01 00 00             jne     0x323 <_JIT_ENTRY+0x323>
// 1cf: 4c 8b 34 c3                   movq    (%rbx,%rax,8), %r14
// 1d3: 49 8b 46 08                   movq    0x8(%r14), %rax
// 1d7: 49 3b 44 24 10                cmpq    0x10(%r12), %rax
// 1dc: 0f 85 41 01 00 00             jne     0x323 <_JIT_ENTRY+0x323>
// 1e2: 49 8b 44 24 28                movq    0x28(%r12), %rax
// 1e7: 83 78 10 04                   cmpl    $0x4, 0x10(%rax)
// 1eb: 0f 85 32 01 00 00             jne     0x323 <_JIT_ENTRY+0x323>
// 1f1: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 1f5: 48 8b 14 24                   movq    (%rsp), %rdx
// 1f9: 8b 42 2c                      movl    0x2c(%rdx), %eax
// 1fc: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 1ff: 89 4a 2c                      movl    %ecx, 0x2c(%rdx)
// 202: 85 c0                         testl   %eax, %eax
// 204: 0f 8e 58 01 00 00             jle     0x362 <_JIT_ENTRY+0x362>
// 20a: 4b 8d 1c ef                   leaq    (%r15,%r13,8), %rbx
// 20e: 4c 89 f7                      movq    %r14, %rdi
// 211: 31 f6                         xorl    %esi, %esi
// 213: 41 ff d0                      callq   *%r8
// 216: 49 89 c5                      movq    %rax, %r13
// 219: 48 8b 04 24                   movq    (%rsp), %rax
// 21d: ff 40 2c                      incl    0x2c(%rax)
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  .text+0x3c0
// 22a: bf 10 0c 00 00                movl    $0xc10, %edi            # imm = 0xC10
// 22f: 4c 89 f6                      movq    %r14, %rsi
// 232: 49 89 c6                      movq    %rax, %r14
// 235: ff d0                         callq   *%rax
// 237: bf 11 0c 00 00                movl    $0xc11, %edi            # imm = 0xC11
// 23c: 4c 89 e6                      movq    %r12, %rsi
// 23f: 41 ff d6                      callq   *%r14
// 242: 4d 85 ed                      testq   %r13, %r13
// 245: 0f 84 c1 00 00 00             je      0x30c <_JIT_ENTRY+0x30c>
// 24b: 4d 8d 34 ef                   leaq    (%r15,%rbp,8), %r14
// 24f: 4c 89 2b                      movq    %r13, (%rbx)
// 252: 48 8b 04 24                   movq    (%rsp), %rax
// 256: 48 8b 40 10                   movq    0x10(%rax), %rax
// 25a: 48 8b 00                      movq    (%rax), %rax
// 25d: 84 c0                         testb   %al, %al
// 25f: 0f 84 2a 01 00 00             je      0x38f <_JIT_ENTRY+0x38f>
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _Py_HandlePending
// 26f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 273: ff d0                         callq   *%rax
// 275: 85 c0                         testl   %eax, %eax
// 277: 0f 84 12 01 00 00             je      0x38f <_JIT_ENTRY+0x38f>
// 27d: 4c 89 f3                      movq    %r14, %rbx
// 280: e9 87 00 00 00                jmp     0x30c <_JIT_ENTRY+0x30c>
// 285: 83 fb 02                      cmpl    $0x2, %ebx
// 288: 41 be 01 00 00 00             movl    $0x1, %r14d
// 28e: 44 0f 43 f3                   cmovael %ebx, %r14d
// 292: 31 db                         xorl    %ebx, %ebx
// 294: eb 16                         jmp     0x2ac <_JIT_ENTRY+0x2ac>
// 296: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 2a0: 48 ff c3                      incq    %rbx
// 2a3: 49 39 de                      cmpq    %rbx, %r14
// 2a6: 0f 84 15 fe ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 2ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 2b1: 49 8b 45 00                   movq    (%r13), %rax
// 2b5: 48 85 c0                      testq   %rax, %rax
// 2b8: 7e 06                         jle     0x2c0 <_JIT_ENTRY+0x2c0>
// 2ba: 85 c0                         testl   %eax, %eax
// 2bc: 78 e2                         js      0x2a0 <_JIT_ENTRY+0x2a0>
// 2be: eb 26                         jmp     0x2e6 <_JIT_ENTRY+0x2e6>
// 2c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c2:  R_X86_64_64  .rodata.str1.1
// 2ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 2cf: 4c 89 ea                      movq    %r13, %rdx
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_NegativeRefcount
// 2dc: ff d0                         callq   *%rax
// 2de: 49 8b 45 00                   movq    (%r13), %rax
// 2e2: 85 c0                         testl   %eax, %eax
// 2e4: 78 ba                         js      0x2a0 <_JIT_ENTRY+0x2a0>
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f0: ff d0                         callq   *%rax
// 2f2: 49 ff 4d 00                   decq    (%r13)
// 2f6: 75 a8                         jne     0x2a0 <_JIT_ENTRY+0x2a0>
// 2f8: 4c 89 ef                      movq    %r13, %rdi
// 2fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fd:  R_X86_64_64  _Py_Dealloc
// 305: ff d0                         callq   *%rax
// 307: eb 97                         jmp     0x2a0 <_JIT_ENTRY+0x2a0>
// 309: 48 89 c3                      movq    %rax, %rbx
// 30c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 311: 48 29 c3                      subq    %rax, %rbx
// 314: 48 83 c3 b8                   addq    $-0x48, %rbx
// 318: 48 c1 eb 03                   shrq    $0x3, %rbx
// 31c: 89 58 40                      movl    %ebx, 0x40(%rax)
// 31f: 31 c0                         xorl    %eax, %eax
// 321: eb 30                         jmp     0x353 <_JIT_ENTRY+0x353>
// 323: 49 89 df                      movq    %rbx, %r15
// 326: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 32b: 49 29 ff                      subq    %rdi, %r15
// 32e: 49 83 c7 b8                   addq    $-0x48, %r15
// 332: 49 c1 ef 03                   shrq    $0x3, %r15
// 336: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 33a: 48 8b 07                      movq    (%rdi), %rax
// 33d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000033f:  R_X86_64_64  _JIT_TARGET
// 347: 89 c9                         movl    %ecx, %ecx
// 349: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 34d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 353: 48 83 c4 28                   addq    $0x28, %rsp
// 357: 5b                            popq    %rbx
// 358: 41 5c                         popq    %r12
// 35a: 41 5d                         popq    %r13
// 35c: 41 5e                         popq    %r14
// 35e: 41 5f                         popq    %r15
// 360: 5d                            popq    %rbp
// 361: c3                            retq
// 362: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000364:  R_X86_64_64  .rodata.str1.1+0x39
// 36c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036e:  R_X86_64_64  _Py_CheckRecursiveCall
// 376: 48 8b 3c 24                   movq    (%rsp), %rdi
// 37a: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// 37f: ff d0                         callq   *%rax
// 381: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 386: 85 c0                         testl   %eax, %eax
// 388: 75 82                         jne     0x30c <_JIT_ENTRY+0x30c>
// 38a: e9 7b fe ff ff                jmp     0x20a <_JIT_ENTRY+0x20a>
// 38f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000391:  R_X86_64_64  _JIT_CONTINUE
// 399: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 39e: 4c 89 f6                      movq    %r14, %rsi
// 3a1: 48 8b 14 24                   movq    (%rsp), %rdx
// 3a5: 48 83 c4 28                   addq    $0x28, %rsp
// 3a9: 5b                            popq    %rbx
// 3aa: 41 5c                         popq    %r12
// 3ac: 41 5d                         popq    %r13
// 3ae: 41 5e                         popq    %r14
// 3b0: 41 5f                         popq    %r15
// 3b2: 5d                            popq    %rbp
// 3b3: ff e0                         jmpq    *%rax
// 3b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 
// 00000000000003c0 <Py_DECREF>:
// 3c0: 53                            pushq   %rbx
// 3c1: 48 89 f3                      movq    %rsi, %rbx
// 3c4: 48 8b 06                      movq    (%rsi), %rax
// 3c7: 48 85 c0                      testq   %rax, %rax
// 3ca: 7e 06                         jle     0x3d2 <Py_DECREF+0x12>
// 3cc: 85 c0                         testl   %eax, %eax
// 3ce: 79 24                         jns     0x3f4 <Py_DECREF+0x34>
// 3d0: eb 33                         jmp     0x405 <Py_DECREF+0x45>
// 3d2: 89 fe                         movl    %edi, %esi
// 3d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003d6:  R_X86_64_64  .rodata.str1.1
// 3de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e0:  R_X86_64_64  _Py_NegativeRefcount
// 3e8: 48 89 da                      movq    %rbx, %rdx
// 3eb: ff d0                         callq   *%rax
// 3ed: 48 8b 03                      movq    (%rbx), %rax
// 3f0: 85 c0                         testl   %eax, %eax
// 3f2: 78 11                         js      0x405 <Py_DECREF+0x45>
// 3f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3fe: ff d0                         callq   *%rax
// 400: 48 ff 0b                      decq    (%rbx)
// 403: 74 02                         je      0x407 <Py_DECREF+0x47>
// 405: 5b                            popq    %rbx
// 406: c3                            retq
// 407: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000409:  R_X86_64_64  _Py_Dealloc
// 411: 48 89 df                      movq    %rbx, %rdi
// 414: 5b                            popq    %rbx
// 415: ff e0                         jmpq    *%rax
// 417: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_body[1048] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xc4, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xb3, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xc4, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xdd, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x49, 0x8d, 0x1c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xb2, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x48, 0x8d, 0x2c, 0x12, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x31, 0xff, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x01, 0x41, 0x0f, 0x94, 0xc0, 0x49, 0x83, 0x3c, 0xef, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x7a, 0x01, 0x00, 0x00, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x4c, 0x63, 0xee, 0x49, 0x01, 0xd5, 0x4f, 0x8b, 0x24, 0xef, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x54, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x34, 0xc3, 0x49, 0x8b, 0x46, 0x08, 0x49, 0x3b, 0x44, 0x24, 0x10, 0x0f, 0x85, 0x41, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x28, 0x83, 0x78, 0x10, 0x04, 0x0f, 0x85, 0x32, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x14, 0x24, 0x8b, 0x42, 0x2c, 0x8d, 0x48, 0xff, 0x89, 0x4a, 0x2c, 0x85, 0xc0, 0x0f, 0x8e, 0x58, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x1c, 0xef, 0x4c, 0x89, 0xf7, 0x31, 0xf6, 0x41, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x04, 0x24, 0xff, 0x40, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x10, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xf6, 0x49, 0x89, 0xc6, 0xff, 0xd0, 0xbf, 0x11, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd6, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xc1, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x34, 0xef, 0x4c, 0x89, 0x2b, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x2a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x12, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xf3, 0xe9, 0x87, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x16, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x15, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0x89, 0xc3, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x58, 0x40, 0x31, 0xc0, 0xeb, 0x30, 0x49, 0x89, 0xdf, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x10, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x85, 0xc0, 0x75, 0x82, 0xe9, 0x7b, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_holes[24] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x3c0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x364, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x36e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x391, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3d6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x409, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_O
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_O.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 87 01 00 00             je      0x1ee <_JIT_ENTRY+0x1ee>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 76 01 00 00             je      0x1ee <_JIT_ENTRY+0x1ee>
// 78: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 7d: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 82: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 87: 48 89 3c 24                   movq    %rdi, (%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 41 0f 94 c6                   sete    %r14b
// 96: 89 da                         movl    %ebx, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 41 84 c6                      testb   %al, %r14b
// bb: 0f 84 64 01 00 00             je      0x225 <_JIT_ENTRY+0x225>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e3: 4c 89 e2                      movq    %r12, %rdx
// e6: ff d0                         callq   *%rax
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 85 c0                         testl   %eax, %eax
// ee: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// f3: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// f8: 78 21                         js      0x11b <_JIT_ENTRY+0x11b>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 0c 24                   decq    (%r12)
// 10a: 75 0f                         jne     0x11b <_JIT_ENTRY+0x11b>
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_Dealloc
// 116: 4c 89 e7                      movq    %r12, %rdi
// 119: ff d0                         callq   *%rax
// 11b: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 120: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 124: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 129: 48 85 c9                      testq   %rcx, %rcx
// 12c: 0f 84 77 01 00 00             je      0x2a9 <_JIT_ENTRY+0x2a9>
// 132: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 136: 48 89 08                      movq    %rcx, (%rax)
// 139: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 13d: 48 8b 00                      movq    (%rax), %rax
// 140: 84 c0                         testb   %al, %al
// 142: 74 17                         je      0x15b <_JIT_ENTRY+0x15b>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_HandlePending
// 14e: 48 89 df                      movq    %rbx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 85 51 01 00 00             jne     0x2ac <_JIT_ENTRY+0x2ac>
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _JIT_OPARG
// 165: 0f b7 c8                      movzwl  %ax, %ecx
// 168: 89 ca                         movl    %ecx, %edx
// 16a: f7 d2                         notl    %edx
// 16c: 48 63 d2                      movslq  %edx, %rdx
// 16f: 48 8d 1c 12                   leaq    (%rdx,%rdx), %rbx
// 173: 0f b7 c0                      movzwl  %ax, %eax
// 176: 48 89 c6                      movq    %rax, %rsi
// 179: 48 f7 de                      negq    %rsi
// 17c: 31 ff                         xorl    %edi, %edi
// 17e: 66 83 f8 01                   cmpw    $0x1, %ax
// 182: 40 0f 94 c7                   sete    %dil
// 186: 45 31 c0                      xorl    %r8d, %r8d
// 189: 66 83 f8 02                   cmpw    $0x2, %ax
// 18d: 41 0f 94 c0                   sete    %r8b
// 191: 49 83 3c df 00                cmpq    $0x0, (%r15,%rbx,8)
// 196: 48 f7 d0                      notq    %rax
// 199: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 19d: 41 0f 44 f8                   cmovel  %r8d, %edi
// 1a1: 40 80 ff 01                   cmpb    $0x1, %dil
// 1a5: 75 40                         jne     0x1e7 <_JIT_ENTRY+0x1e7>
// 1a7: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 1ac: 29 ce                         subl    %ecx, %esi
// 1ae: 48 63 ee                      movslq  %esi, %rbp
// 1b1: 48 01 d5                      addq    %rdx, %rbp
// 1b4: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 1b8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ba:  R_X86_64_64  PyMethodDescr_Type
// 1c2: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 1c7: 75 1e                         jne     0x1e7 <_JIT_ENTRY+0x1e7>
// 1c9: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 1ce: 83 79 10 08                   cmpl    $0x8, 0x10(%rcx)
// 1d2: 75 13                         jne     0x1e7 <_JIT_ENTRY+0x1e7>
// 1d4: 4d 8b 2c c6                   movq    (%r14,%rax,8), %r13
// 1d8: 49 8b 55 08                   movq    0x8(%r13), %rdx
// 1dc: 49 3b 54 24 10                cmpq    0x10(%r12), %rdx
// 1e1: 0f 84 df 00 00 00             je      0x2c6 <_JIT_ENTRY+0x2c6>
// 1e7: 4d 89 f7                      movq    %r14, %r15
// 1ea: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ee: 49 29 ff                      subq    %rdi, %r15
// 1f1: 49 83 c7 b8                   addq    $-0x48, %r15
// 1f5: 49 c1 ef 03                   shrq    $0x3, %r15
// 1f9: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 1fd: 48 8b 07                      movq    (%rdi), %rax
// 200: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000202:  R_X86_64_64  _JIT_TARGET
// 20a: 89 c9                         movl    %ecx, %ecx
// 20c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 210: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 216: 48 83 c4 28                   addq    $0x28, %rsp
// 21a: 5b                            popq    %rbx
// 21b: 41 5c                         popq    %r12
// 21d: 41 5d                         popq    %r13
// 21f: 41 5e                         popq    %r14
// 221: 41 5f                         popq    %r15
// 223: 5d                            popq    %rbp
// 224: c3                            retq
// 225: 83 fb 02                      cmpl    $0x2, %ebx
// 228: 41 be 01 00 00 00             movl    $0x1, %r14d
// 22e: 44 0f 43 f3                   cmovael %ebx, %r14d
// 232: 31 db                         xorl    %ebx, %ebx
// 234: eb 16                         jmp     0x24c <_JIT_ENTRY+0x24c>
// 236: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 240: 48 ff c3                      incq    %rbx
// 243: 49 39 de                      cmpq    %rbx, %r14
// 246: 0f 84 75 fe ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 24c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 251: 49 8b 45 00                   movq    (%r13), %rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 7e 06                         jle     0x260 <_JIT_ENTRY+0x260>
// 25a: 85 c0                         testl   %eax, %eax
// 25c: 78 e2                         js      0x240 <_JIT_ENTRY+0x240>
// 25e: eb 26                         jmp     0x286 <_JIT_ENTRY+0x286>
// 260: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000262:  R_X86_64_64  .rodata.str1.1
// 26a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 26f: 4c 89 ea                      movq    %r13, %rdx
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_NegativeRefcount
// 27c: ff d0                         callq   *%rax
// 27e: 49 8b 45 00                   movq    (%r13), %rax
// 282: 85 c0                         testl   %eax, %eax
// 284: 78 ba                         js      0x240 <_JIT_ENTRY+0x240>
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 290: ff d0                         callq   *%rax
// 292: 49 ff 4d 00                   decq    (%r13)
// 296: 75 a8                         jne     0x240 <_JIT_ENTRY+0x240>
// 298: 4c 89 ef                      movq    %r13, %rdi
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_Dealloc
// 2a5: ff d0                         callq   *%rax
// 2a7: eb 97                         jmp     0x240 <_JIT_ENTRY+0x240>
// 2a9: 49 89 c6                      movq    %rax, %r14
// 2ac: 48 8b 04 24                   movq    (%rsp), %rax
// 2b0: 49 29 c6                      subq    %rax, %r14
// 2b3: 49 83 c6 b8                   addq    $-0x48, %r14
// 2b7: 49 c1 ee 03                   shrq    $0x3, %r14
// 2bb: 44 89 70 40                   movl    %r14d, 0x40(%rax)
// 2bf: 31 c0                         xorl    %eax, %eax
// 2c1: e9 50 ff ff ff                jmp     0x216 <_JIT_ENTRY+0x216>
// 2c6: 49 8b 74 c6 08                movq    0x8(%r14,%rax,8), %rsi
// 2cb: 4c 8b 41 08                   movq    0x8(%rcx), %r8
// 2cf: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2d4: 8b 42 2c                      movl    0x2c(%rdx), %eax
// 2d7: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 2da: 89 4a 2c                      movl    %ecx, 0x2c(%rdx)
// 2dd: 85 c0                         testl   %eax, %eax
// 2df: 0f 8e 87 00 00 00             jle     0x36c <_JIT_ENTRY+0x36c>
// 2e5: 4d 8d 34 ef                   leaq    (%r15,%rbp,8), %r14
// 2e9: 4c 89 ef                      movq    %r13, %rdi
// 2ec: 48 89 f5                      movq    %rsi, %rbp
// 2ef: 41 ff d0                      callq   *%r8
// 2f2: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 2f7: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2fc: ff 40 2c                      incl    0x2c(%rax)
// 2ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000301:  R_X86_64_64  .text+0x3d0
// 309: bf bf 0b 00 00                movl    $0xbbf, %edi            # imm = 0xBBF
// 30e: 4c 89 ee                      movq    %r13, %rsi
// 311: 49 89 c5                      movq    %rax, %r13
// 314: ff d0                         callq   *%rax
// 316: bf c0 0b 00 00                movl    $0xbc0, %edi            # imm = 0xBC0
// 31b: 48 89 ee                      movq    %rbp, %rsi
// 31e: 41 ff d5                      callq   *%r13
// 321: bf c1 0b 00 00                movl    $0xbc1, %edi            # imm = 0xBC1
// 326: 4c 89 e6                      movq    %r12, %rsi
// 329: 41 ff d5                      callq   *%r13
// 32c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 331: 48 85 c0                      testq   %rax, %rax
// 334: 0f 84 72 ff ff ff             je      0x2ac <_JIT_ENTRY+0x2ac>
// 33a: 4d 8d 3c df                   leaq    (%r15,%rbx,8), %r15
// 33e: 49 89 06                      movq    %rax, (%r14)
// 341: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 346: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 34a: 48 8b 00                      movq    (%rax), %rax
// 34d: 84 c0                         testb   %al, %al
// 34f: 74 57                         je      0x3a8 <_JIT_ENTRY+0x3a8>
// 351: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000353:  R_X86_64_64  _Py_HandlePending
// 35b: 48 89 df                      movq    %rbx, %rdi
// 35e: ff d0                         callq   *%rax
// 360: 85 c0                         testl   %eax, %eax
// 362: 74 44                         je      0x3a8 <_JIT_ENTRY+0x3a8>
// 364: 4d 89 fe                      movq    %r15, %r14
// 367: e9 40 ff ff ff                jmp     0x2ac <_JIT_ENTRY+0x2ac>
// 36c: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 371: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000373:  R_X86_64_64  .rodata.str1.1+0x39
// 37b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037d:  R_X86_64_64  _Py_CheckRecursiveCall
// 385: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 38a: 4c 89 44 24 18                movq    %r8, 0x18(%rsp)
// 38f: ff d0                         callq   *%rax
// 391: 4c 8b 44 24 18                movq    0x18(%rsp), %r8
// 396: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 39b: 85 c0                         testl   %eax, %eax
// 39d: 0f 85 09 ff ff ff             jne     0x2ac <_JIT_ENTRY+0x2ac>
// 3a3: e9 3d ff ff ff                jmp     0x2e5 <_JIT_ENTRY+0x2e5>
// 3a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003aa:  R_X86_64_64  _JIT_CONTINUE
// 3b2: 48 8b 3c 24                   movq    (%rsp), %rdi
// 3b6: 4c 89 fe                      movq    %r15, %rsi
// 3b9: 48 89 da                      movq    %rbx, %rdx
// 3bc: 48 83 c4 28                   addq    $0x28, %rsp
// 3c0: 5b                            popq    %rbx
// 3c1: 41 5c                         popq    %r12
// 3c3: 41 5d                         popq    %r13
// 3c5: 41 5e                         popq    %r14
// 3c7: 41 5f                         popq    %r15
// 3c9: 5d                            popq    %rbp
// 3ca: ff e0                         jmpq    *%rax
// 3cc: 0f 1f 40 00                   nopl    (%rax)
// 
// 00000000000003d0 <Py_DECREF>:
// 3d0: 53                            pushq   %rbx
// 3d1: 48 89 f3                      movq    %rsi, %rbx
// 3d4: 48 8b 06                      movq    (%rsi), %rax
// 3d7: 48 85 c0                      testq   %rax, %rax
// 3da: 7e 06                         jle     0x3e2 <Py_DECREF+0x12>
// 3dc: 85 c0                         testl   %eax, %eax
// 3de: 79 24                         jns     0x404 <Py_DECREF+0x34>
// 3e0: eb 33                         jmp     0x415 <Py_DECREF+0x45>
// 3e2: 89 fe                         movl    %edi, %esi
// 3e4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003e6:  R_X86_64_64  .rodata.str1.1
// 3ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f0:  R_X86_64_64  _Py_NegativeRefcount
// 3f8: 48 89 da                      movq    %rbx, %rdx
// 3fb: ff d0                         callq   *%rax
// 3fd: 48 8b 03                      movq    (%rbx), %rax
// 400: 85 c0                         testl   %eax, %eax
// 402: 78 11                         js      0x415 <Py_DECREF+0x45>
// 404: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000406:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 40e: ff d0                         callq   *%rax
// 410: 48 ff 0b                      decq    (%rbx)
// 413: 74 02                         je      0x417 <Py_DECREF+0x47>
// 415: 5b                            popq    %rbx
// 416: c3                            retq
// 417: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000419:  R_X86_64_64  _Py_Dealloc
// 421: 48 89 df                      movq    %rbx, %rdi
// 424: 5b                            popq    %rbx
// 425: ff e0                         jmpq    *%rax
// 427: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_O_code_body[1064] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x87, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x76, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0x64, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x77, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xf7, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x51, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x48, 0x8d, 0x1c, 0x12, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x02, 0x41, 0x0f, 0x94, 0xc0, 0x49, 0x83, 0x3c, 0xdf, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x75, 0x40, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x48, 0x63, 0xee, 0x48, 0x01, 0xd5, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x1e, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x83, 0x79, 0x10, 0x08, 0x75, 0x13, 0x4d, 0x8b, 0x2c, 0xc6, 0x49, 0x8b, 0x55, 0x08, 0x49, 0x3b, 0x54, 0x24, 0x10, 0x0f, 0x84, 0xdf, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf7, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x16, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x75, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc6, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x70, 0x40, 0x31, 0xc0, 0xe9, 0x50, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x74, 0xc6, 0x08, 0x4c, 0x8b, 0x41, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x42, 0x2c, 0x8d, 0x48, 0xff, 0x89, 0x4a, 0x2c, 0x85, 0xc0, 0x0f, 0x8e, 0x87, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x34, 0xef, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xf5, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0xff, 0x40, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xbf, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x49, 0x89, 0xc5, 0xff, 0xd0, 0xbf, 0xc0, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd5, 0xbf, 0xc1, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x72, 0xff, 0xff, 0xff, 0x4d, 0x8d, 0x3c, 0xdf, 0x49, 0x89, 0x06, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x57, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x44, 0x4d, 0x89, 0xfe, 0xe9, 0x40, 0xff, 0xff, 0xff, 0x48, 0x89, 0x74, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0x44, 0x24, 0x18, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x85, 0xc0, 0x0f, 0x85, 0x09, 0xff, 0xff, 0xff, 0xe9, 0x3d, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x0f, 0x1f, 0x40, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_O_code_holes[24] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x3d0},
    {0x353, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x373, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x37d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x3aa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3e6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x406, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x419, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_O_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CALL_STR_1
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CALL_STR_1.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 fd                      movq    %rdi, %r13
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 45 8d 78 01                   leal    0x1(%r8), %r15d
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 45 0f 44 f8                   cmovel  %r8d, %r15d
// 4a: 48 63 de                      movslq  %esi, %rbx
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4d 8b 24 de                   movq    (%r14,%rbx,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 c4 01 00 00             je      0x22e <_JIT_ENTRY+0x22e>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 b3 01 00 00             je      0x22e <_JIT_ENTRY+0x22e>
// 7b: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 80: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 85: 4c 89 2c 24                   movq    %r13, (%rsp)
// 89: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 8e: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 41 0f 94 c6                   sete    %r14b
// 99: 44 89 fa                      movl    %r15d, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _JIT_OPARG
// b6: 66 85 c0                      testw   %ax, %ax
// b9: 0f 94 c0                      sete    %al
// bc: 41 84 c6                      testb   %al, %r14b
// bf: 0f 84 9d 00 00 00             je      0x162 <_JIT_ENTRY+0x162>
// c5: 49 8b 04 24                   movq    (%r12), %rax
// c9: 48 85 c0                      testq   %rax, %rax
// cc: 7f 22                         jg      0xf0 <_JIT_ENTRY+0xf0>
// ce: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d0:  R_X86_64_64  .rodata.str1.1
// d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000da:  R_X86_64_64  _Py_NegativeRefcount
// e2: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e7: 4c 89 e2                      movq    %r12, %rdx
// ea: ff d0                         callq   *%rax
// ec: 49 8b 04 24                   movq    (%r12), %rax
// f0: 85 c0                         testl   %eax, %eax
// f2: 4c 8b 2c 24                   movq    (%rsp), %r13
// f6: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// fb: 78 16                         js      0x113 <_JIT_ENTRY+0x113>
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 107: ff d0                         callq   *%rax
// 109: 49 ff 0c 24                   decq    (%r12)
// 10d: 0f 84 49 01 00 00             je      0x25c <_JIT_ENTRY+0x25c>
// 113: 49 8d 2c de                   leaq    (%r14,%rbx,8), %rbp
// 117: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 11c: 48 85 c9                      testq   %rcx, %rcx
// 11f: 0f 84 6c 02 00 00             je      0x391 <_JIT_ENTRY+0x391>
// 125: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 12a: 4d 8d 34 c6                   leaq    (%r14,%rax,8), %r14
// 12e: 48 89 4d 00                   movq    %rcx, (%rbp)
// 132: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 137: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 13b: 48 8b 00                      movq    (%rax), %rax
// 13e: 84 c0                         testb   %al, %al
// 140: 0f 84 a3 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_HandlePending
// 150: ff d0                         callq   *%rax
// 152: 85 c0                         testl   %eax, %eax
// 154: 0f 84 8f 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 15a: 4c 89 f5                      movq    %r14, %rbp
// 15d: e9 2f 02 00 00                jmp     0x391 <_JIT_ENTRY+0x391>
// 162: 41 83 ff 02                   cmpl    $0x2, %r15d
// 166: 41 be 01 00 00 00             movl    $0x1, %r14d
// 16c: 45 0f 43 f7                   cmovael %r15d, %r14d
// 170: 45 31 ff                      xorl    %r15d, %r15d
// 173: eb 17                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 175: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 180: 49 ff c7                      incq    %r15
// 183: 4d 39 fe                      cmpq    %r15, %r14
// 186: 0f 84 39 ff ff ff             je      0xc5 <_JIT_ENTRY+0xc5>
// 18c: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 191: 49 8b 45 00                   movq    (%r13), %rax
// 195: 48 85 c0                      testq   %rax, %rax
// 198: 7e 06                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 78 e2                         js      0x180 <_JIT_ENTRY+0x180>
// 19e: eb 26                         jmp     0x1c6 <_JIT_ENTRY+0x1c6>
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 ea                      movq    %r13, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 45 00                   movq    (%r13), %rax
// 1c2: 85 c0                         testl   %eax, %eax
// 1c4: 78 ba                         js      0x180 <_JIT_ENTRY+0x180>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d0: ff d0                         callq   *%rax
// 1d2: 49 ff 4d 00                   decq    (%r13)
// 1d6: 75 a8                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d8: 4c 89 ef                      movq    %r13, %rdi
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_Dealloc
// 1e5: ff d0                         callq   *%rax
// 1e7: eb 97                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_OPARG
// 1f3: 0f b7 c0                      movzwl  %ax, %eax
// 1f6: 89 c1                         movl    %eax, %ecx
// 1f8: f7 d1                         notl    %ecx
// 1fa: 48 63 c9                      movslq  %ecx, %rcx
// 1fd: 48 8d 1c 09                   leaq    (%rcx,%rcx), %rbx
// 201: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 206: 48 83 3c de 00                cmpq    $0x0, (%rsi,%rbx,8)
// 20b: 75 21                         jne     0x22e <_JIT_ENTRY+0x22e>
// 20d: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 212: 29 c2                         subl    %eax, %edx
// 214: 48 63 c2                      movslq  %edx, %rax
// 217: 48 01 c8                      addq    %rcx, %rax
// 21a: 48 8d 2c c6                   leaq    (%rsi,%rax,8), %rbp
// 21e: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000220:  R_X86_64_64  PyUnicode_Type
// 228: 4c 39 65 00                   cmpq    %r12, (%rbp)
// 22c: 74 54                         je      0x282 <_JIT_ENTRY+0x282>
// 22e: 4d 29 ee                      subq    %r13, %r14
// 231: 49 83 c6 b8                   addq    $-0x48, %r14
// 235: 49 c1 ee 03                   shrq    $0x3, %r14
// 239: 45 89 75 40                   movl    %r14d, 0x40(%r13)
// 23d: 49 8b 45 00                   movq    (%r13), %rax
// 241: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000243:  R_X86_64_64  _JIT_TARGET
// 24b: 89 c9                         movl    %ecx, %ecx
// 24d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 251: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 257: e9 46 01 00 00                jmp     0x3a2 <_JIT_ENTRY+0x3a2>
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  _Py_Dealloc
// 266: 4c 89 e7                      movq    %r12, %rdi
// 269: ff d0                         callq   *%rax
// 26b: 49 8d 2c de                   leaq    (%r14,%rbx,8), %rbp
// 26f: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 274: 48 85 c9                      testq   %rcx, %rcx
// 277: 0f 85 a8 fe ff ff             jne     0x125 <_JIT_ENTRY+0x125>
// 27d: e9 0f 01 00 00                jmp     0x391 <_JIT_ENTRY+0x391>
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _JIT_OPARG
// 28c: 0f b7 c8                      movzwl  %ax, %ecx
// 28f: f7 d0                         notl    %eax
// 291: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 296: 48 98                         cltq
// 298: 48 29 c8                      subq    %rcx, %rax
// 29b: 4c 8b 34 c6                   movq    (%rsi,%rax,8), %r14
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  PyObject_Str
// 2a9: 4c 89 f7                      movq    %r14, %rdi
// 2ac: ff d0                         callq   *%rax
// 2ae: 49 89 c5                      movq    %rax, %r13
// 2b1: 49 8b 06                      movq    (%r14), %rax
// 2b4: 48 85 c0                      testq   %rax, %rax
// 2b7: 7f 21                         jg      0x2da <_JIT_ENTRY+0x2da>
// 2b9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002bb:  R_X86_64_64  .rodata.str1.1
// 2c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c5:  R_X86_64_64  _Py_NegativeRefcount
// 2cd: be 95 0a 00 00                movl    $0xa95, %esi            # imm = 0xA95
// 2d2: 4c 89 f2                      movq    %r14, %rdx
// 2d5: ff d0                         callq   *%rax
// 2d7: 49 8b 06                      movq    (%r14), %rax
// 2da: 85 c0                         testl   %eax, %eax
// 2dc: 78 20                         js      0x2fe <_JIT_ENTRY+0x2fe>
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e8: ff d0                         callq   *%rax
// 2ea: 49 ff 0e                      decq    (%r14)
// 2ed: 75 0f                         jne     0x2fe <_JIT_ENTRY+0x2fe>
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  _Py_Dealloc
// 2f9: 4c 89 f7                      movq    %r14, %rdi
// 2fc: ff d0                         callq   *%rax
// 2fe: 49 8b 04 24                   movq    (%r12), %rax
// 302: 48 85 c0                      testq   %rax, %rax
// 305: 7f 22                         jg      0x329 <_JIT_ENTRY+0x329>
// 307: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000309:  R_X86_64_64  .rodata.str1.1
// 311: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000313:  R_X86_64_64  _Py_NegativeRefcount
// 31b: be 96 0a 00 00                movl    $0xa96, %esi            # imm = 0xA96
// 320: 4c 89 e2                      movq    %r12, %rdx
// 323: ff d0                         callq   *%rax
// 325: 49 8b 04 24                   movq    (%r12), %rax
// 329: 85 c0                         testl   %eax, %eax
// 32b: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 330: 78 28                         js      0x35a <_JIT_ENTRY+0x35a>
// 332: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000334:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 33c: ff d0                         callq   *%rax
// 33e: 49 ff 0c 24                   decq    (%r12)
// 342: 75 16                         jne     0x35a <_JIT_ENTRY+0x35a>
// 344: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000346:  R_X86_64_64  PyUnicode_Type
// 34e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000350:  R_X86_64_64  _Py_Dealloc
// 358: ff d0                         callq   *%rax
// 35a: 4d 85 ed                      testq   %r13, %r13
// 35d: 74 2e                         je      0x38d <_JIT_ENTRY+0x38d>
// 35f: 4d 8d 34 de                   leaq    (%r14,%rbx,8), %r14
// 363: 4c 89 6d 00                   movq    %r13, (%rbp)
// 367: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 36c: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 370: 48 8b 00                      movq    (%rax), %rax
// 373: 84 c0                         testb   %al, %al
// 375: 74 3a                         je      0x3b1 <_JIT_ENTRY+0x3b1>
// 377: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000379:  R_X86_64_64  _Py_HandlePending
// 381: 48 89 df                      movq    %rbx, %rdi
// 384: ff d0                         callq   *%rax
// 386: 85 c0                         testl   %eax, %eax
// 388: 74 27                         je      0x3b1 <_JIT_ENTRY+0x3b1>
// 38a: 4c 89 f5                      movq    %r14, %rbp
// 38d: 4c 8b 2c 24                   movq    (%rsp), %r13
// 391: 4c 29 ed                      subq    %r13, %rbp
// 394: 48 83 c5 b8                   addq    $-0x48, %rbp
// 398: 48 c1 ed 03                   shrq    $0x3, %rbp
// 39c: 41 89 6d 40                   movl    %ebp, 0x40(%r13)
// 3a0: 31 c0                         xorl    %eax, %eax
// 3a2: 48 83 c4 28                   addq    $0x28, %rsp
// 3a6: 5b                            popq    %rbx
// 3a7: 41 5c                         popq    %r12
// 3a9: 41 5d                         popq    %r13
// 3ab: 41 5e                         popq    %r14
// 3ad: 41 5f                         popq    %r15
// 3af: 5d                            popq    %rbp
// 3b0: c3                            retq
// 3b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b3:  R_X86_64_64  _JIT_CONTINUE
// 3bb: 48 8b 3c 24                   movq    (%rsp), %rdi
// 3bf: 4c 89 f6                      movq    %r14, %rsi
// 3c2: 48 89 da                      movq    %rbx, %rdx
// 3c5: 48 83 c4 28                   addq    $0x28, %rsp
// 3c9: 5b                            popq    %rbx
// 3ca: 41 5c                         popq    %r12
// 3cc: 41 5d                         popq    %r13
// 3ce: 41 5e                         popq    %r14
// 3d0: 41 5f                         popq    %r15
// 3d2: 5d                            popq    %rbp
// 3d3: ff e0                         jmpq    *%rax
// 3d5: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_STR_1_code_body[982] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x45, 0x8d, 0x78, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf8, 0x48, 0x63, 0xde, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4d, 0x8b, 0x24, 0xde, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xc4, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xb3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x2c, 0x24, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0x9d, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x2c, 0x24, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x49, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x2c, 0xde, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x6c, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x4d, 0x8d, 0x34, 0xc6, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8f, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf5, 0xe9, 0x2f, 0x02, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf7, 0x45, 0x31, 0xff, 0xeb, 0x17, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4d, 0x39, 0xfe, 0x0f, 0x84, 0x39, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x8d, 0x1c, 0x09, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x83, 0x3c, 0xde, 0x00, 0x75, 0x21, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xc2, 0x48, 0x01, 0xc8, 0x48, 0x8d, 0x2c, 0xc6, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x65, 0x00, 0x74, 0x54, 0x4d, 0x29, 0xee, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x75, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x46, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x2c, 0xde, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x48, 0x85, 0xc9, 0x0f, 0x85, 0xa8, 0xfe, 0xff, 0xff, 0xe9, 0x0f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xc8, 0x4c, 0x8b, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x95, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x74, 0x2e, 0x4d, 0x8d, 0x34, 0xde, 0x4c, 0x89, 0x6d, 0x00, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x27, 0x4c, 0x89, 0xf5, 0x4c, 0x8b, 0x2c, 0x24, 0x4c, 0x29, 0xed, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x41, 0x89, 0x6d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_STR_1_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x313, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x334, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x346, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x350, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x379, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x3b3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_STR_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_STR_1_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CALL_TUPLE_1
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CALL_TUPLE_1.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 fd                      movq    %rdi, %r13
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 45 8d 78 01                   leal    0x1(%r8), %r15d
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 45 0f 44 f8                   cmovel  %r8d, %r15d
// 4a: 48 63 de                      movslq  %esi, %rbx
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4d 8b 24 de                   movq    (%r14,%rbx,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 c4 01 00 00             je      0x22e <_JIT_ENTRY+0x22e>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 b3 01 00 00             je      0x22e <_JIT_ENTRY+0x22e>
// 7b: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 80: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 85: 4c 89 2c 24                   movq    %r13, (%rsp)
// 89: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 8e: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 41 0f 94 c6                   sete    %r14b
// 99: 44 89 fa                      movl    %r15d, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _JIT_OPARG
// b6: 66 85 c0                      testw   %ax, %ax
// b9: 0f 94 c0                      sete    %al
// bc: 41 84 c6                      testb   %al, %r14b
// bf: 0f 84 9d 00 00 00             je      0x162 <_JIT_ENTRY+0x162>
// c5: 49 8b 04 24                   movq    (%r12), %rax
// c9: 48 85 c0                      testq   %rax, %rax
// cc: 7f 22                         jg      0xf0 <_JIT_ENTRY+0xf0>
// ce: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d0:  R_X86_64_64  .rodata.str1.1
// d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000da:  R_X86_64_64  _Py_NegativeRefcount
// e2: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e7: 4c 89 e2                      movq    %r12, %rdx
// ea: ff d0                         callq   *%rax
// ec: 49 8b 04 24                   movq    (%r12), %rax
// f0: 85 c0                         testl   %eax, %eax
// f2: 4c 8b 2c 24                   movq    (%rsp), %r13
// f6: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// fb: 78 16                         js      0x113 <_JIT_ENTRY+0x113>
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 107: ff d0                         callq   *%rax
// 109: 49 ff 0c 24                   decq    (%r12)
// 10d: 0f 84 49 01 00 00             je      0x25c <_JIT_ENTRY+0x25c>
// 113: 49 8d 2c de                   leaq    (%r14,%rbx,8), %rbp
// 117: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 11c: 48 85 c9                      testq   %rcx, %rcx
// 11f: 0f 84 6c 02 00 00             je      0x391 <_JIT_ENTRY+0x391>
// 125: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 12a: 4d 8d 34 c6                   leaq    (%r14,%rax,8), %r14
// 12e: 48 89 4d 00                   movq    %rcx, (%rbp)
// 132: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 137: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 13b: 48 8b 00                      movq    (%rax), %rax
// 13e: 84 c0                         testb   %al, %al
// 140: 0f 84 a3 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_HandlePending
// 150: ff d0                         callq   *%rax
// 152: 85 c0                         testl   %eax, %eax
// 154: 0f 84 8f 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 15a: 4c 89 f5                      movq    %r14, %rbp
// 15d: e9 2f 02 00 00                jmp     0x391 <_JIT_ENTRY+0x391>
// 162: 41 83 ff 02                   cmpl    $0x2, %r15d
// 166: 41 be 01 00 00 00             movl    $0x1, %r14d
// 16c: 45 0f 43 f7                   cmovael %r15d, %r14d
// 170: 45 31 ff                      xorl    %r15d, %r15d
// 173: eb 17                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 175: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 180: 49 ff c7                      incq    %r15
// 183: 4d 39 fe                      cmpq    %r15, %r14
// 186: 0f 84 39 ff ff ff             je      0xc5 <_JIT_ENTRY+0xc5>
// 18c: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 191: 49 8b 45 00                   movq    (%r13), %rax
// 195: 48 85 c0                      testq   %rax, %rax
// 198: 7e 06                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 78 e2                         js      0x180 <_JIT_ENTRY+0x180>
// 19e: eb 26                         jmp     0x1c6 <_JIT_ENTRY+0x1c6>
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 ea                      movq    %r13, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 45 00                   movq    (%r13), %rax
// 1c2: 85 c0                         testl   %eax, %eax
// 1c4: 78 ba                         js      0x180 <_JIT_ENTRY+0x180>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d0: ff d0                         callq   *%rax
// 1d2: 49 ff 4d 00                   decq    (%r13)
// 1d6: 75 a8                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d8: 4c 89 ef                      movq    %r13, %rdi
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_Dealloc
// 1e5: ff d0                         callq   *%rax
// 1e7: eb 97                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_OPARG
// 1f3: 0f b7 c0                      movzwl  %ax, %eax
// 1f6: 89 c1                         movl    %eax, %ecx
// 1f8: f7 d1                         notl    %ecx
// 1fa: 48 63 c9                      movslq  %ecx, %rcx
// 1fd: 48 8d 1c 09                   leaq    (%rcx,%rcx), %rbx
// 201: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 206: 48 83 3c de 00                cmpq    $0x0, (%rsi,%rbx,8)
// 20b: 75 21                         jne     0x22e <_JIT_ENTRY+0x22e>
// 20d: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 212: 29 c2                         subl    %eax, %edx
// 214: 48 63 c2                      movslq  %edx, %rax
// 217: 48 01 c8                      addq    %rcx, %rax
// 21a: 48 8d 2c c6                   leaq    (%rsi,%rax,8), %rbp
// 21e: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000220:  R_X86_64_64  PyTuple_Type
// 228: 4c 39 65 00                   cmpq    %r12, (%rbp)
// 22c: 74 54                         je      0x282 <_JIT_ENTRY+0x282>
// 22e: 4d 29 ee                      subq    %r13, %r14
// 231: 49 83 c6 b8                   addq    $-0x48, %r14
// 235: 49 c1 ee 03                   shrq    $0x3, %r14
// 239: 45 89 75 40                   movl    %r14d, 0x40(%r13)
// 23d: 49 8b 45 00                   movq    (%r13), %rax
// 241: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000243:  R_X86_64_64  _JIT_TARGET
// 24b: 89 c9                         movl    %ecx, %ecx
// 24d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 251: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 257: e9 46 01 00 00                jmp     0x3a2 <_JIT_ENTRY+0x3a2>
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  _Py_Dealloc
// 266: 4c 89 e7                      movq    %r12, %rdi
// 269: ff d0                         callq   *%rax
// 26b: 49 8d 2c de                   leaq    (%r14,%rbx,8), %rbp
// 26f: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 274: 48 85 c9                      testq   %rcx, %rcx
// 277: 0f 85 a8 fe ff ff             jne     0x125 <_JIT_ENTRY+0x125>
// 27d: e9 0f 01 00 00                jmp     0x391 <_JIT_ENTRY+0x391>
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _JIT_OPARG
// 28c: 0f b7 c8                      movzwl  %ax, %ecx
// 28f: f7 d0                         notl    %eax
// 291: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 296: 48 98                         cltq
// 298: 48 29 c8                      subq    %rcx, %rax
// 29b: 4c 8b 34 c6                   movq    (%rsi,%rax,8), %r14
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  PySequence_Tuple
// 2a9: 4c 89 f7                      movq    %r14, %rdi
// 2ac: ff d0                         callq   *%rax
// 2ae: 49 89 c5                      movq    %rax, %r13
// 2b1: 49 8b 06                      movq    (%r14), %rax
// 2b4: 48 85 c0                      testq   %rax, %rax
// 2b7: 7f 21                         jg      0x2da <_JIT_ENTRY+0x2da>
// 2b9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002bb:  R_X86_64_64  .rodata.str1.1
// 2c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c5:  R_X86_64_64  _Py_NegativeRefcount
// 2cd: be ad 0a 00 00                movl    $0xaad, %esi            # imm = 0xAAD
// 2d2: 4c 89 f2                      movq    %r14, %rdx
// 2d5: ff d0                         callq   *%rax
// 2d7: 49 8b 06                      movq    (%r14), %rax
// 2da: 85 c0                         testl   %eax, %eax
// 2dc: 78 20                         js      0x2fe <_JIT_ENTRY+0x2fe>
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e8: ff d0                         callq   *%rax
// 2ea: 49 ff 0e                      decq    (%r14)
// 2ed: 75 0f                         jne     0x2fe <_JIT_ENTRY+0x2fe>
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  _Py_Dealloc
// 2f9: 4c 89 f7                      movq    %r14, %rdi
// 2fc: ff d0                         callq   *%rax
// 2fe: 49 8b 04 24                   movq    (%r12), %rax
// 302: 48 85 c0                      testq   %rax, %rax
// 305: 7f 22                         jg      0x329 <_JIT_ENTRY+0x329>
// 307: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000309:  R_X86_64_64  .rodata.str1.1
// 311: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000313:  R_X86_64_64  _Py_NegativeRefcount
// 31b: be ae 0a 00 00                movl    $0xaae, %esi            # imm = 0xAAE
// 320: 4c 89 e2                      movq    %r12, %rdx
// 323: ff d0                         callq   *%rax
// 325: 49 8b 04 24                   movq    (%r12), %rax
// 329: 85 c0                         testl   %eax, %eax
// 32b: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 330: 78 28                         js      0x35a <_JIT_ENTRY+0x35a>
// 332: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000334:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 33c: ff d0                         callq   *%rax
// 33e: 49 ff 0c 24                   decq    (%r12)
// 342: 75 16                         jne     0x35a <_JIT_ENTRY+0x35a>
// 344: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000346:  R_X86_64_64  PyTuple_Type
// 34e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000350:  R_X86_64_64  _Py_Dealloc
// 358: ff d0                         callq   *%rax
// 35a: 4d 85 ed                      testq   %r13, %r13
// 35d: 74 2e                         je      0x38d <_JIT_ENTRY+0x38d>
// 35f: 4d 8d 34 de                   leaq    (%r14,%rbx,8), %r14
// 363: 4c 89 6d 00                   movq    %r13, (%rbp)
// 367: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 36c: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 370: 48 8b 00                      movq    (%rax), %rax
// 373: 84 c0                         testb   %al, %al
// 375: 74 3a                         je      0x3b1 <_JIT_ENTRY+0x3b1>
// 377: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000379:  R_X86_64_64  _Py_HandlePending
// 381: 48 89 df                      movq    %rbx, %rdi
// 384: ff d0                         callq   *%rax
// 386: 85 c0                         testl   %eax, %eax
// 388: 74 27                         je      0x3b1 <_JIT_ENTRY+0x3b1>
// 38a: 4c 89 f5                      movq    %r14, %rbp
// 38d: 4c 8b 2c 24                   movq    (%rsp), %r13
// 391: 4c 29 ed                      subq    %r13, %rbp
// 394: 48 83 c5 b8                   addq    $-0x48, %rbp
// 398: 48 c1 ed 03                   shrq    $0x3, %rbp
// 39c: 41 89 6d 40                   movl    %ebp, 0x40(%r13)
// 3a0: 31 c0                         xorl    %eax, %eax
// 3a2: 48 83 c4 28                   addq    $0x28, %rsp
// 3a6: 5b                            popq    %rbx
// 3a7: 41 5c                         popq    %r12
// 3a9: 41 5d                         popq    %r13
// 3ab: 41 5e                         popq    %r14
// 3ad: 41 5f                         popq    %r15
// 3af: 5d                            popq    %rbp
// 3b0: c3                            retq
// 3b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b3:  R_X86_64_64  _JIT_CONTINUE
// 3bb: 48 8b 3c 24                   movq    (%rsp), %rdi
// 3bf: 4c 89 f6                      movq    %r14, %rsi
// 3c2: 48 89 da                      movq    %rbx, %rdx
// 3c5: 48 83 c4 28                   addq    $0x28, %rsp
// 3c9: 5b                            popq    %rbx
// 3ca: 41 5c                         popq    %r12
// 3cc: 41 5d                         popq    %r13
// 3ce: 41 5e                         popq    %r14
// 3d0: 41 5f                         popq    %r15
// 3d2: 5d                            popq    %rbp
// 3d3: ff e0                         jmpq    *%rax
// 3d5: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_TUPLE_1_code_body[982] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x45, 0x8d, 0x78, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf8, 0x48, 0x63, 0xde, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4d, 0x8b, 0x24, 0xde, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xc4, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xb3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x2c, 0x24, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0x9d, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x2c, 0x24, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x49, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x2c, 0xde, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x6c, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x4d, 0x8d, 0x34, 0xc6, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8f, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf5, 0xe9, 0x2f, 0x02, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf7, 0x45, 0x31, 0xff, 0xeb, 0x17, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4d, 0x39, 0xfe, 0x0f, 0x84, 0x39, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x8d, 0x1c, 0x09, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x83, 0x3c, 0xde, 0x00, 0x75, 0x21, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xc2, 0x48, 0x01, 0xc8, 0x48, 0x8d, 0x2c, 0xc6, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x65, 0x00, 0x74, 0x54, 0x4d, 0x29, 0xee, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x75, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x46, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x2c, 0xde, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x48, 0x85, 0xc9, 0x0f, 0x85, 0xa8, 0xfe, 0xff, 0xff, 0xe9, 0x0f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xc8, 0x4c, 0x8b, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xad, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x74, 0x2e, 0x4d, 0x8d, 0x34, 0xde, 0x4c, 0x89, 0x6d, 0x00, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x27, 0x4c, 0x89, 0xf5, 0x4c, 0x8b, 0x2c, 0x24, 0x4c, 0x29, 0xed, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x41, 0x89, 0x6d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_TUPLE_1_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Tuple, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x313, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x334, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x346, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x350, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x379, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x3b3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_TUPLE_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_TUPLE_1_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CALL_TYPE_1
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CALL_TYPE_1.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 ff                      movq    %rdi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c1                   movzwl  %cx, %r8d
// 1f: 44 89 c0                      movl    %r8d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: 41 b9 fe ff ff ff             movl    $0xfffffffe, %r9d       # imm = 0xFFFFFFFE
// 31: 45 29 c1                      subl    %r8d, %r9d
// 34: 45 8d 70 01                   leal    0x1(%r8), %r14d
// 38: 0f b7 c9                      movzwl  %cx, %ecx
// 3b: 48 89 cf                      movq    %rcx, %rdi
// 3e: 48 f7 df                      negq    %rdi
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 45 0f 44 f0                   cmovel  %r8d, %r14d
// 48: 49 63 d9                      movslq  %r9d, %rbx
// 4b: 48 f7 d1                      notq    %rcx
// 4e: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 52: 4c 8b 24 de                   movq    (%rsi,%rbx,8), %r12
// 56: 49 8b 7c 24 08                movq    0x8(%r12), %rdi
// 5b: f6 87 ab 00 00 00 80          testb   $-0x80, 0xab(%rdi)
// 62: 0f 84 08 01 00 00             je      0x170 <_JIT_ENTRY+0x170>
// 68: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 70: 4d 85 c0                      testq   %r8, %r8
// 73: 0f 84 f7 00 00 00             je      0x170 <_JIT_ENTRY+0x170>
// 79: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 7e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 83: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// 88: 48 89 34 24                   movq    %rsi, (%rsp)
// 8c: 48 8d 2c ce                   leaq    (%rsi,%rcx,8), %rbp
// 90: 48 85 c0                      testq   %rax, %rax
// 93: 41 0f 94 c7                   sete    %r15b
// 97: 44 89 f2                      movl    %r14d, %edx
// 9a: 4c 89 e7                      movq    %r12, %rdi
// 9d: 48 89 ee                      movq    %rbp, %rsi
// a0: 31 c9                         xorl    %ecx, %ecx
// a2: 41 ff d0                      callq   *%r8
// a5: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ac:  R_X86_64_64  _JIT_OPARG
// b4: 66 85 c0                      testw   %ax, %ax
// b7: 0f 94 c0                      sete    %al
// ba: 41 84 c7                      testb   %al, %r15b
// bd: 0f 84 e7 00 00 00             je      0x1aa <_JIT_ENTRY+0x1aa>
// c3: 49 8b 04 24                   movq    (%r12), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f 22                         jg      0xee <_JIT_ENTRY+0xee>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d8:  R_X86_64_64  _Py_NegativeRefcount
// e0: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e5: 4c 89 e2                      movq    %r12, %rdx
// e8: ff d0                         callq   *%rax
// ea: 49 8b 04 24                   movq    (%r12), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// f5: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// fa: 4c 8b 2c 24                   movq    (%rsp), %r13
// fe: 78 16                         js      0x116 <_JIT_ENTRY+0x116>
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10a: ff d0                         callq   *%rax
// 10c: 49 ff 0c 24                   decq    (%r12)
// 110: 0f 84 a8 01 00 00             je      0x2be <_JIT_ENTRY+0x2be>
// 116: 48 8d 04 dd 00 00 00 00       leaq    (,%rbx,8), %rax
// 11e: 4c 01 e8                      addq    %r13, %rax
// 121: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 126: 48 85 d2                      testq   %rdx, %rdx
// 129: 0f 84 b7 01 00 00             je      0x2e6 <_JIT_ENTRY+0x2e6>
// 12f: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 134: 4c 8d 34 cd 00 00 00 00       leaq    (,%rcx,8), %r14
// 13c: 4d 01 ee                      addq    %r13, %r14
// 13f: 48 89 10                      movq    %rdx, (%rax)
// 142: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 146: 48 8b 00                      movq    (%rax), %rax
// 149: 84 c0                         testb   %al, %al
// 14b: 0f 84 d8 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_HandlePending
// 15b: 48 89 ef                      movq    %rbp, %rdi
// 15e: ff d0                         callq   *%rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 0f 84 c1 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 168: 4c 89 f0                      movq    %r14, %rax
// 16b: e9 76 01 00 00                jmp     0x2e6 <_JIT_ENTRY+0x2e6>
// 170: 49 89 f6                      movq    %rsi, %r14
// 173: 4d 29 fe                      subq    %r15, %r14
// 176: 49 83 c6 b8                   addq    $-0x48, %r14
// 17a: 49 c1 ee 03                   shrq    $0x3, %r14
// 17e: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 182: 49 8b 07                      movq    (%r15), %rax
// 185: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000187:  R_X86_64_64  _JIT_TARGET
// 18f: 89 c9                         movl    %ecx, %ecx
// 191: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 195: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 19b: 48 83 c4 28                   addq    $0x28, %rsp
// 19f: 5b                            popq    %rbx
// 1a0: 41 5c                         popq    %r12
// 1a2: 41 5d                         popq    %r13
// 1a4: 41 5e                         popq    %r14
// 1a6: 41 5f                         popq    %r15
// 1a8: 5d                            popq    %rbp
// 1a9: c3                            retq
// 1aa: 41 83 fe 02                   cmpl    $0x2, %r14d
// 1ae: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1b4: 45 0f 43 fe                   cmovael %r14d, %r15d
// 1b8: 45 31 f6                      xorl    %r14d, %r14d
// 1bb: eb 0f                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bd: 0f 1f 00                      nopl    (%rax)
// 1c0: 49 ff c6                      incq    %r14
// 1c3: 4d 39 f7                      cmpq    %r14, %r15
// 1c6: 0f 84 f7 fe ff ff             je      0xc3 <_JIT_ENTRY+0xc3>
// 1cc: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: f7 d0                         notl    %eax
// 235: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23a: 48 63 d8                      movslq  %eax, %rbx
// 23d: 48 01 db                      addq    %rbx, %rbx
// 240: 49 83 7c dd 00 00             cmpq    $0x0, (%r13,%rbx,8)
// 246: 0f 85 27 ff ff ff             jne     0x173 <_JIT_ENTRY+0x173>
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _JIT_OPARG
// 256: 0f b7 c0                      movzwl  %ax, %eax
// 259: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 25e: 29 c1                         subl    %eax, %ecx
// 260: 48 63 c9                      movslq  %ecx, %rcx
// 263: f7 d0                         notl    %eax
// 265: 48 98                         cltq
// 267: 48 01 c8                      addq    %rcx, %rax
// 26a: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000026c:  R_X86_64_64  PyType_Type
// 274: 4d 39 64 c5 00                cmpq    %r12, (%r13,%rax,8)
// 279: 0f 85 f4 fe ff ff             jne     0x173 <_JIT_ENTRY+0x173>
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _JIT_OPARG
// 289: 0f b7 c8                      movzwl  %ax, %ecx
// 28c: f7 d0                         notl    %eax
// 28e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 293: 48 98                         cltq
// 295: 48 29 c8                      subq    %rcx, %rax
// 298: 4d 8b 74 c5 00                movq    (%r13,%rax,8), %r14
// 29d: 4d 8b 6e 08                   movq    0x8(%r14), %r13
// 2a1: 41 8b 45 00                   movl    (%r13), %eax
// 2a5: ff c0                         incl    %eax
// 2a7: 75 53                         jne     0x2fc <_JIT_ENTRY+0x2fc>
// 2a9: 49 8b 06                      movq    (%r14), %rax
// 2ac: 48 85 c0                      testq   %rax, %rax
// 2af: 7e 63                         jle     0x314 <_JIT_ENTRY+0x314>
// 2b1: 85 c0                         testl   %eax, %eax
// 2b3: 0f 89 80 00 00 00             jns     0x339 <_JIT_ENTRY+0x339>
// 2b9: e9 9b 00 00 00                jmp     0x359 <_JIT_ENTRY+0x359>
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _Py_Dealloc
// 2c8: 4c 89 e7                      movq    %r12, %rdi
// 2cb: ff d0                         callq   *%rax
// 2cd: 48 8d 04 dd 00 00 00 00       leaq    (,%rbx,8), %rax
// 2d5: 4c 01 e8                      addq    %r13, %rax
// 2d8: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2dd: 48 85 d2                      testq   %rdx, %rdx
// 2e0: 0f 85 49 fe ff ff             jne     0x12f <_JIT_ENTRY+0x12f>
// 2e6: 4c 29 f8                      subq    %r15, %rax
// 2e9: 48 83 c0 b8                   addq    $-0x48, %rax
// 2ed: 48 c1 e8 03                   shrq    $0x3, %rax
// 2f1: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 2f5: 31 c0                         xorl    %eax, %eax
// 2f7: e9 9f fe ff ff                jmp     0x19b <_JIT_ENTRY+0x19b>
// 2fc: 41 89 45 00                   movl    %eax, (%r13)
// 300: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000302:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 30a: ff d0                         callq   *%rax
// 30c: 49 8b 06                      movq    (%r14), %rax
// 30f: 48 85 c0                      testq   %rax, %rax
// 312: 7f 9d                         jg      0x2b1 <_JIT_ENTRY+0x2b1>
// 314: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000316:  R_X86_64_64  .rodata.str1.1
// 31e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000320:  R_X86_64_64  _Py_NegativeRefcount
// 328: be 7f 0a 00 00                movl    $0xa7f, %esi            # imm = 0xA7F
// 32d: 4c 89 f2                      movq    %r14, %rdx
// 330: ff d0                         callq   *%rax
// 332: 49 8b 06                      movq    (%r14), %rax
// 335: 85 c0                         testl   %eax, %eax
// 337: 78 20                         js      0x359 <_JIT_ENTRY+0x359>
// 339: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 343: ff d0                         callq   *%rax
// 345: 49 ff 0e                      decq    (%r14)
// 348: 75 0f                         jne     0x359 <_JIT_ENTRY+0x359>
// 34a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034c:  R_X86_64_64  _Py_Dealloc
// 354: 4c 89 f7                      movq    %r14, %rdi
// 357: ff d0                         callq   *%rax
// 359: 49 8b 04 24                   movq    (%r12), %rax
// 35d: 48 85 c0                      testq   %rax, %rax
// 360: 7f 22                         jg      0x384 <_JIT_ENTRY+0x384>
// 362: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000364:  R_X86_64_64  .rodata.str1.1
// 36c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036e:  R_X86_64_64  _Py_NegativeRefcount
// 376: be 80 0a 00 00                movl    $0xa80, %esi            # imm = 0xA80
// 37b: 4c 89 e2                      movq    %r12, %rdx
// 37e: ff d0                         callq   *%rax
// 380: 49 8b 04 24                   movq    (%r12), %rax
// 384: 48 8b 0c 24                   movq    (%rsp), %rcx
// 388: 4c 8d 34 d9                   leaq    (%rcx,%rbx,8), %r14
// 38c: 85 c0                         testl   %eax, %eax
// 38e: 78 28                         js      0x3b8 <_JIT_ENTRY+0x3b8>
// 390: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000392:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 39a: ff d0                         callq   *%rax
// 39c: 49 ff 0c 24                   decq    (%r12)
// 3a0: 75 16                         jne     0x3b8 <_JIT_ENTRY+0x3b8>
// 3a2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003a4:  R_X86_64_64  PyType_Type
// 3ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ae:  R_X86_64_64  _Py_Dealloc
// 3b6: ff d0                         callq   *%rax
// 3b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ba:  R_X86_64_64  _JIT_OPARG
// 3c2: 0f b7 c0                      movzwl  %ax, %eax
// 3c5: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 3ca: 29 c1                         subl    %eax, %ecx
// 3cc: 48 63 c9                      movslq  %ecx, %rcx
// 3cf: f7 d0                         notl    %eax
// 3d1: 48 98                         cltq
// 3d3: 48 01 c8                      addq    %rcx, %rax
// 3d6: 48 8b 0c 24                   movq    (%rsp), %rcx
// 3da: 4c 89 2c c1                   movq    %r13, (%rcx,%rax,8)
// 3de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e0:  R_X86_64_64  _JIT_CONTINUE
// 3e8: 4c 89 ff                      movq    %r15, %rdi
// 3eb: 4c 89 f6                      movq    %r14, %rsi
// 3ee: 48 89 ea                      movq    %rbp, %rdx
// 3f1: 48 83 c4 28                   addq    $0x28, %rsp
// 3f5: 5b                            popq    %rbx
// 3f6: 41 5c                         popq    %r12
// 3f8: 41 5d                         popq    %r13
// 3fa: 41 5e                         popq    %r14
// 3fc: 41 5f                         popq    %r15
// 3fe: 5d                            popq    %rbp
// 3ff: ff e0                         jmpq    *%rax
// 401: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_TYPE_1_code_body[1026] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0x41, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x45, 0x29, 0xc1, 0x45, 0x8d, 0x70, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf0, 0x49, 0x63, 0xd9, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4c, 0x8b, 0x24, 0xde, 0x49, 0x8b, 0x7c, 0x24, 0x08, 0xf6, 0x87, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x08, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xf7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x48, 0x89, 0x34, 0x24, 0x48, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x44, 0x89, 0xf2, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x2c, 0x24, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xa8, 0x01, 0x00, 0x00, 0x48, 0x8d, 0x04, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xe8, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xb7, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4c, 0x8d, 0x34, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0xee, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xc1, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0xe9, 0x76, 0x01, 0x00, 0x00, 0x49, 0x89, 0xf6, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfe, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfe, 0x45, 0x31, 0xf6, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x49, 0xff, 0xc6, 0x4d, 0x39, 0xf7, 0x0f, 0x84, 0xf7, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x48, 0x01, 0xdb, 0x49, 0x83, 0x7c, 0xdd, 0x00, 0x00, 0x0f, 0x85, 0x27, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x64, 0xc5, 0x00, 0x0f, 0x85, 0xf4, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xc8, 0x4d, 0x8b, 0x74, 0xc5, 0x00, 0x4d, 0x8b, 0x6e, 0x08, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x53, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x80, 0x00, 0x00, 0x00, 0xe9, 0x9b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8d, 0x04, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xe8, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x85, 0x49, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0xe9, 0x9f, 0xfe, 0xff, 0xff, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x9d, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7f, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x0c, 0x24, 0x4c, 0x8d, 0x34, 0xd9, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x48, 0x8b, 0x0c, 0x24, 0x4c, 0x89, 0x2c, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_TYPE_1_code_holes[29] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xac, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x316, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x320, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x33b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x34c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x364, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x36e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x392, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x3ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3ba, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3e0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CALL_TYPE_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CALL_TYPE_1_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CHECK_ATTR_CLASS
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CHECK_ATTR_CLASS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 45 8d 78 01                   leal    0x1(%r8), %r15d
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 45 0f 44 f8                   cmovel  %r8d, %r15d
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 01 02 00 00             je      0x26b <_JIT_ENTRY+0x26b>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 f0 01 00 00             je      0x26b <_JIT_ENTRY+0x26b>
// 7b: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 80: 4c 89 0c 24                   movq    %r9, (%rsp)
// 84: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 89: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 8e: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 0f 94 c3                      sete    %bl
// 98: 44 89 fa                      movl    %r15d, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 84 c3                         testb   %al, %bl
// bd: 74 24                         je      0xe3 <_JIT_ENTRY+0xe3>
// bf: 49 8b 04 24                   movq    (%r12), %rax
// c3: 48 85 c0                      testq   %rax, %rax
// c6: 0f 8e 9d 00 00 00             jle     0x169 <_JIT_ENTRY+0x169>
// cc: 85 c0                         testl   %eax, %eax
// ce: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// d3: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// d8: 0f 89 bb 00 00 00             jns     0x199 <_JIT_ENTRY+0x199>
// de: e9 d7 00 00 00                jmp     0x1ba <_JIT_ENTRY+0x1ba>
// e3: 41 83 ff 02                   cmpl    $0x2, %r15d
// e7: bb 01 00 00 00                movl    $0x1, %ebx
// ec: 41 0f 43 df                   cmovael %r15d, %ebx
// f0: 45 31 ff                      xorl    %r15d, %r15d
// f3: eb 13                         jmp     0x108 <_JIT_ENTRY+0x108>
// f5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 100: 49 ff c7                      incq    %r15
// 103: 4c 39 fb                      cmpq    %r15, %rbx
// 106: 74 b7                         je      0xbf <_JIT_ENTRY+0xbf>
// 108: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 10d: 49 8b 45 00                   movq    (%r13), %rax
// 111: 48 85 c0                      testq   %rax, %rax
// 114: 7e 0a                         jle     0x120 <_JIT_ENTRY+0x120>
// 116: 85 c0                         testl   %eax, %eax
// 118: 78 e6                         js      0x100 <_JIT_ENTRY+0x100>
// 11a: eb 2a                         jmp     0x146 <_JIT_ENTRY+0x146>
// 11c: 0f 1f 40 00                   nopl    (%rax)
// 120: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000122:  R_X86_64_64  .rodata.str1.1
// 12a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 12f: 4c 89 ea                      movq    %r13, %rdx
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _Py_NegativeRefcount
// 13c: ff d0                         callq   *%rax
// 13e: 49 8b 45 00                   movq    (%r13), %rax
// 142: 85 c0                         testl   %eax, %eax
// 144: 78 ba                         js      0x100 <_JIT_ENTRY+0x100>
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 150: ff d0                         callq   *%rax
// 152: 49 ff 4d 00                   decq    (%r13)
// 156: 75 a8                         jne     0x100 <_JIT_ENTRY+0x100>
// 158: 4c 89 ef                      movq    %r13, %rdi
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_Dealloc
// 165: ff d0                         callq   *%rax
// 167: eb 97                         jmp     0x100 <_JIT_ENTRY+0x100>
// 169: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000016b:  R_X86_64_64  .rodata.str1.1
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_NegativeRefcount
// 17d: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 182: 4c 89 e2                      movq    %r12, %rdx
// 185: ff d0                         callq   *%rax
// 187: 49 8b 04 24                   movq    (%r12), %rax
// 18b: 85 c0                         testl   %eax, %eax
// 18d: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 192: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 197: 78 21                         js      0x1ba <_JIT_ENTRY+0x1ba>
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 ff 0c 24                   decq    (%r12)
// 1a9: 75 0f                         jne     0x1ba <_JIT_ENTRY+0x1ba>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_Dealloc
// 1b5: 4c 89 e7                      movq    %r12, %rdi
// 1b8: ff d0                         callq   *%rax
// 1ba: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1bf: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1c3: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1c8: 48 85 d2                      testq   %rdx, %rdx
// 1cb: 74 2c                         je      0x1f9 <_JIT_ENTRY+0x1f9>
// 1cd: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1d1: 4d 8d 3c ce                   leaq    (%r14,%rcx,8), %r15
// 1d5: 48 89 10                      movq    %rdx, (%rax)
// 1d8: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1dc: 48 8b 00                      movq    (%rax), %rax
// 1df: 84 c0                         testb   %al, %al
// 1e1: 74 2b                         je      0x20e <_JIT_ENTRY+0x20e>
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _Py_HandlePending
// 1ed: 4c 89 ef                      movq    %r13, %rdi
// 1f0: ff d0                         callq   *%rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 74 18                         je      0x20e <_JIT_ENTRY+0x20e>
// 1f6: 4c 89 f8                      movq    %r15, %rax
// 1f9: 48 29 d8                      subq    %rbx, %rax
// 1fc: 48 83 c0 b8                   addq    $-0x48, %rax
// 200: 48 c1 e8 03                   shrq    $0x3, %rax
// 204: 89 43 40                      movl    %eax, 0x40(%rbx)
// 207: 31 c0                         xorl    %eax, %eax
// 209: e9 85 00 00 00                jmp     0x293 <_JIT_ENTRY+0x293>
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _JIT_OPARG
// 218: f7 d0                         notl    %eax
// 21a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21f: 48 98                         cltq
// 221: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 226: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 22a: f6 81 ab 00 00 00 80          testb   $-0x80, 0xab(%rcx)
// 231: 74 35                         je      0x268 <_JIT_ENTRY+0x268>
// 233: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000235:  R_X86_64_64  _JIT_OPERAND
// 23d: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 243: 75 23                         jne     0x268 <_JIT_ENTRY+0x268>
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _JIT_CONTINUE
// 24f: 48 89 df                      movq    %rbx, %rdi
// 252: 4c 89 fe                      movq    %r15, %rsi
// 255: 4c 89 ea                      movq    %r13, %rdx
// 258: 48 83 c4 28                   addq    $0x28, %rsp
// 25c: 5b                            popq    %rbx
// 25d: 41 5c                         popq    %r12
// 25f: 41 5d                         popq    %r13
// 261: 41 5e                         popq    %r14
// 263: 41 5f                         popq    %r15
// 265: 5d                            popq    %rbp
// 266: ff e0                         jmpq    *%rax
// 268: 4d 89 fe                      movq    %r15, %r14
// 26b: 49 29 de                      subq    %rbx, %r14
// 26e: 49 83 c6 b8                   addq    $-0x48, %r14
// 272: 49 c1 ee 03                   shrq    $0x3, %r14
// 276: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 27a: 48 8b 03                      movq    (%rbx), %rax
// 27d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027f:  R_X86_64_64  _JIT_TARGET
// 287: 89 c9                         movl    %ecx, %ecx
// 289: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 28d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 293: 48 83 c4 28                   addq    $0x28, %rsp
// 297: 5b                            popq    %rbx
// 298: 41 5c                         popq    %r12
// 29a: 41 5d                         popq    %r13
// 29c: 41 5e                         popq    %r14
// 29e: 41 5f                         popq    %r15
// 2a0: 5d                            popq    %rbp
// 2a1: c3                            retq
// 2a2: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CHECK_ATTR_CLASS_code_body[675] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x45, 0x8d, 0x78, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x01, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xf0, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x9d, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x0f, 0x89, 0xbb, 0x00, 0x00, 0x00, 0xe9, 0xd7, 0x00, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdf, 0x45, 0x31, 0xff, 0xeb, 0x13, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x74, 0xb7, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x85, 0xc0, 0x78, 0xe6, 0xeb, 0x2a, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x2c, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x18, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x35, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_CHECK_ATTR_CLASS_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CHECK_ATTR_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CHECK_ATTR_CLASS_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CHECK_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CHECK_ATTR_METHOD_LAZY_DICT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 ff                      movq    %rdi, %r15
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 aa 01 00 00             je      0x214 <_JIT_ENTRY+0x214>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 99 01 00 00             je      0x214 <_JIT_ENTRY+0x214>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// 8f: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 41 0f 94 c7                   sete    %r15b
// 9a: 89 da                         movl    %ebx, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 9f 00 00 00             je      0x163 <_JIT_ENTRY+0x163>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// f6: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// fb: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 100: 48 8b 2c 24                   movq    (%rsp), %rbp
// 104: 78 16                         js      0x11c <_JIT_ENTRY+0x11c>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 0c 24                   decq    (%r12)
// 116: 0f 84 22 01 00 00             je      0x23e <_JIT_ENTRY+0x23e>
// 11c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 121: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 125: 48 85 ed                      testq   %rbp, %rbp
// 128: 0f 84 31 01 00 00             je      0x25f <_JIT_ENTRY+0x25f>
// 12e: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 132: 48 89 28                      movq    %rbp, (%rax)
// 135: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 139: 48 8b 00                      movq    (%rax), %rax
// 13c: 84 c0                         testb   %al, %al
// 13e: 0f 84 a3 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_HandlePending
// 14e: 48 89 df                      movq    %rbx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 84 8c 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 15b: 4c 89 e0                      movq    %r12, %rax
// 15e: e9 fc 00 00 00                jmp     0x25f <_JIT_ENTRY+0x25f>
// 163: 83 fb 02                      cmpl    $0x2, %ebx
// 166: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 16c: 44 0f 43 eb                   cmovael %ebx, %r13d
// 170: 31 db                         xorl    %ebx, %ebx
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 48 ff c3                      incq    %rbx
// 183: 49 39 dd                      cmpq    %rbx, %r13
// 186: 0f 84 38 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 18c: 4c 8b 7c dd 00                movq    (%rbp,%rbx,8), %r15
// 191: 49 8b 07                      movq    (%r15), %rax
// 194: 48 85 c0                      testq   %rax, %rax
// 197: 7e 07                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 199: 85 c0                         testl   %eax, %eax
// 19b: 78 e3                         js      0x180 <_JIT_ENTRY+0x180>
// 19d: eb 26                         jmp     0x1c5 <_JIT_ENTRY+0x1c5>
// 19f: 90                            nop
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 fa                      movq    %r15, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 07                      movq    (%r15), %rax
// 1c1: 85 c0                         testl   %eax, %eax
// 1c3: 78 bb                         js      0x180 <_JIT_ENTRY+0x180>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 ff 0f                      decq    (%r15)
// 1d4: 75 aa                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d6: 4c 89 ff                      movq    %r15, %rdi
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_Dealloc
// 1e3: ff d0                         callq   *%rax
// 1e5: eb 99                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _JIT_OPARG
// 1f1: f7 d0                         notl    %eax
// 1f3: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f8: 48 98                         cltq
// 1fa: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1ff: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 203: 48 8b 89 20 01 00 00          movq    0x120(%rcx), %rcx
// 20a: 48 83 3c 08 00                cmpq    $0x0, (%rax,%rcx)
// 20f: 74 6e                         je      0x27f <_JIT_ENTRY+0x27f>
// 211: 4d 89 e6                      movq    %r12, %r14
// 214: 4d 29 fe                      subq    %r15, %r14
// 217: 49 83 c6 b8                   addq    $-0x48, %r14
// 21b: 49 c1 ee 03                   shrq    $0x3, %r14
// 21f: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 223: 49 8b 07                      movq    (%r15), %rax
// 226: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000228:  R_X86_64_64  _JIT_TARGET
// 230: 89 c9                         movl    %ecx, %ecx
// 232: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 236: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 23c: eb 32                         jmp     0x270 <_JIT_ENTRY+0x270>
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _Py_Dealloc
// 248: 4c 89 e7                      movq    %r12, %rdi
// 24b: ff d0                         callq   *%rax
// 24d: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 252: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 256: 48 85 ed                      testq   %rbp, %rbp
// 259: 0f 85 cf fe ff ff             jne     0x12e <_JIT_ENTRY+0x12e>
// 25f: 4c 29 f8                      subq    %r15, %rax
// 262: 48 83 c0 b8                   addq    $-0x48, %rax
// 266: 48 c1 e8 03                   shrq    $0x3, %rax
// 26a: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 26e: 31 c0                         xorl    %eax, %eax
// 270: 48 83 c4 28                   addq    $0x28, %rsp
// 274: 5b                            popq    %rbx
// 275: 41 5c                         popq    %r12
// 277: 41 5d                         popq    %r13
// 279: 41 5e                         popq    %r14
// 27b: 41 5f                         popq    %r15
// 27d: 5d                            popq    %rbp
// 27e: c3                            retq
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _JIT_CONTINUE
// 289: 4c 89 ff                      movq    %r15, %rdi
// 28c: 4c 89 e6                      movq    %r12, %rsi
// 28f: 48 89 da                      movq    %rbx, %rdx
// 292: 48 83 c4 28                   addq    $0x28, %rsp
// 296: 5b                            popq    %rbx
// 297: 41 5c                         popq    %r12
// 299: 41 5d                         popq    %r13
// 29b: 41 5e                         popq    %r14
// 29d: 41 5f                         popq    %r15
// 29f: 5d                            popq    %rbp
// 2a0: ff e0                         jmpq    *%rax
// 2a2: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CHECK_ATTR_METHOD_LAZY_DICT_code_body[675] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xaa, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x99, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x22, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x31, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0xfc, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xeb, 0x31, 0xdb, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x7c, 0xdd, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0x48, 0x8b, 0x89, 0x20, 0x01, 0x00, 0x00, 0x48, 0x83, 0x3c, 0x08, 0x00, 0x74, 0x6e, 0x4d, 0x89, 0xe6, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x85, 0xcf, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_CHECK_ATTR_METHOD_LAZY_DICT_code_holes[15] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CHECK_ATTR_METHOD_LAZY_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CHECK_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CHECK_ATTR_MODULE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CHECK_ATTR_MODULE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 45 8d 78 01                   leal    0x1(%r8), %r15d
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 45 0f 44 f8                   cmovel  %r8d, %r15d
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 f4 01 00 00             je      0x25e <_JIT_ENTRY+0x25e>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 e3 01 00 00             je      0x25e <_JIT_ENTRY+0x25e>
// 7b: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 80: 4c 89 0c 24                   movq    %r9, (%rsp)
// 84: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 89: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 8e: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 0f 94 c3                      sete    %bl
// 98: 44 89 fa                      movl    %r15d, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 84 c3                         testb   %al, %bl
// bd: 0f 84 b6 00 00 00             je      0x179 <_JIT_ENTRY+0x179>
// c3: 49 8b 04 24                   movq    (%r12), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f 22                         jg      0xee <_JIT_ENTRY+0xee>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d8:  R_X86_64_64  _Py_NegativeRefcount
// e0: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e5: 4c 89 e2                      movq    %r12, %rdx
// e8: ff d0                         callq   *%rax
// ea: 49 8b 04 24                   movq    (%r12), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f5: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// fa: 78 21                         js      0x11d <_JIT_ENTRY+0x11d>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 106: ff d0                         callq   *%rax
// 108: 49 ff 0c 24                   decq    (%r12)
// 10c: 75 0f                         jne     0x11d <_JIT_ENTRY+0x11d>
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_Dealloc
// 118: 4c 89 e7                      movq    %r12, %rdi
// 11b: ff d0                         callq   *%rax
// 11d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 122: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 126: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 12b: 48 85 d2                      testq   %rdx, %rdx
// 12e: 74 34                         je      0x164 <_JIT_ENTRY+0x164>
// 130: 48 8b 0c 24                   movq    (%rsp), %rcx
// 134: 4d 8d 3c ce                   leaq    (%r14,%rcx,8), %r15
// 138: 48 89 10                      movq    %rdx, (%rax)
// 13b: 49 8b 45 10                   movq    0x10(%r13), %rax
// 13f: 48 8b 00                      movq    (%rax), %rax
// 142: 84 c0                         testb   %al, %al
// 144: 0f 84 af 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_HandlePending
// 154: 4c 89 ef                      movq    %r13, %rdi
// 157: ff d0                         callq   *%rax
// 159: 85 c0                         testl   %eax, %eax
// 15b: 0f 84 98 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 161: 4c 89 f8                      movq    %r15, %rax
// 164: 48 29 d8                      subq    %rbx, %rax
// 167: 48 83 c0 b8                   addq    $-0x48, %rax
// 16b: 48 c1 e8 03                   shrq    $0x3, %rax
// 16f: 89 43 40                      movl    %eax, 0x40(%rbx)
// 172: 31 c0                         xorl    %eax, %eax
// 174: e9 0d 01 00 00                jmp     0x286 <_JIT_ENTRY+0x286>
// 179: 41 83 ff 02                   cmpl    $0x2, %r15d
// 17d: bb 01 00 00 00                movl    $0x1, %ebx
// 182: 41 0f 43 df                   cmovael %r15d, %ebx
// 186: 45 31 ff                      xorl    %r15d, %r15d
// 189: eb 11                         jmp     0x19c <_JIT_ENTRY+0x19c>
// 18b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 190: 49 ff c7                      incq    %r15
// 193: 4c 39 fb                      cmpq    %r15, %rbx
// 196: 0f 84 27 ff ff ff             je      0xc3 <_JIT_ENTRY+0xc3>
// 19c: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 1a1: 49 8b 45 00                   movq    (%r13), %rax
// 1a5: 48 85 c0                      testq   %rax, %rax
// 1a8: 7e 06                         jle     0x1b0 <_JIT_ENTRY+0x1b0>
// 1aa: 85 c0                         testl   %eax, %eax
// 1ac: 78 e2                         js      0x190 <_JIT_ENTRY+0x190>
// 1ae: eb 26                         jmp     0x1d6 <_JIT_ENTRY+0x1d6>
// 1b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1
// 1ba: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1bf: 4c 89 ea                      movq    %r13, %rdx
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _Py_NegativeRefcount
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 8b 45 00                   movq    (%r13), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 ba                         js      0x190 <_JIT_ENTRY+0x190>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 ff 4d 00                   decq    (%r13)
// 1e6: 75 a8                         jne     0x190 <_JIT_ENTRY+0x190>
// 1e8: 4c 89 ef                      movq    %r13, %rdi
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: ff d0                         callq   *%rax
// 1f7: eb 97                         jmp     0x190 <_JIT_ENTRY+0x190>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _JIT_OPARG
// 203: f7 d0                         notl    %eax
// 205: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 20a: 48 98                         cltq
// 20c: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 211: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000213:  R_X86_64_64  PyModule_Type
// 21b: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 21f: 75 3a                         jne     0x25b <_JIT_ENTRY+0x25b>
// 221: 48 8b 40 10                   movq    0x10(%rax), %rax
// 225: 48 8b 40 20                   movq    0x20(%rax), %rax
// 229: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000022b:  R_X86_64_64  _JIT_OPERAND
// 233: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 236: 75 23                         jne     0x25b <_JIT_ENTRY+0x25b>
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _JIT_CONTINUE
// 242: 48 89 df                      movq    %rbx, %rdi
// 245: 4c 89 fe                      movq    %r15, %rsi
// 248: 4c 89 ea                      movq    %r13, %rdx
// 24b: 48 83 c4 28                   addq    $0x28, %rsp
// 24f: 5b                            popq    %rbx
// 250: 41 5c                         popq    %r12
// 252: 41 5d                         popq    %r13
// 254: 41 5e                         popq    %r14
// 256: 41 5f                         popq    %r15
// 258: 5d                            popq    %rbp
// 259: ff e0                         jmpq    *%rax
// 25b: 4d 89 fe                      movq    %r15, %r14
// 25e: 49 29 de                      subq    %rbx, %r14
// 261: 49 83 c6 b8                   addq    $-0x48, %r14
// 265: 49 c1 ee 03                   shrq    $0x3, %r14
// 269: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 26d: 48 8b 03                      movq    (%rbx), %rax
// 270: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000272:  R_X86_64_64  _JIT_TARGET
// 27a: 89 c9                         movl    %ecx, %ecx
// 27c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 280: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 286: 48 83 c4 28                   addq    $0x28, %rsp
// 28a: 5b                            popq    %rbx
// 28b: 41 5c                         popq    %r12
// 28d: 41 5d                         popq    %r13
// 28f: 41 5e                         popq    %r14
// 291: 41 5f                         popq    %r15
// 293: 5d                            popq    %rbp
// 294: c3                            retq
// 295: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CHECK_ATTR_MODULE_code_body[662] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x45, 0x8d, 0x78, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf4, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x0d, 0x01, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdf, 0x45, 0x31, 0xff, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x3a, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_CHECK_ATTR_MODULE_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyModule_Type, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CHECK_ATTR_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CHECK_ATTR_MODULE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CHECK_ATTR_WITH_HINT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CHECK_ATTR_WITH_HINT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 45 8d 78 01                   leal    0x1(%r8), %r15d
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 45 0f 44 f8                   cmovel  %r8d, %r15d
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 fb 01 00 00             je      0x265 <_JIT_ENTRY+0x265>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 ea 01 00 00             je      0x265 <_JIT_ENTRY+0x265>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 8f: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 0f 94 c3                      sete    %bl
// 99: 44 89 fa                      movl    %r15d, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 84 c3                         testb   %al, %bl
// bd: 0f 84 9f 00 00 00             je      0x162 <_JIT_ENTRY+0x162>
// c3: 49 8b 04 24                   movq    (%r12), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f 22                         jg      0xee <_JIT_ENTRY+0xee>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d8:  R_X86_64_64  _Py_NegativeRefcount
// e0: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e5: 4c 89 e2                      movq    %r12, %rdx
// e8: ff d0                         callq   *%rax
// ea: 49 8b 04 24                   movq    (%r12), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f5: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// fa: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// ff: 48 8b 2c 24                   movq    (%rsp), %rbp
// 103: 78 16                         js      0x11b <_JIT_ENTRY+0x11b>
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10f: ff d0                         callq   *%rax
// 111: 49 ff 0c 24                   decq    (%r12)
// 115: 0f 84 14 01 00 00             je      0x22f <_JIT_ENTRY+0x22f>
// 11b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 120: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 124: 48 85 ed                      testq   %rbp, %rbp
// 127: 0f 84 23 01 00 00             je      0x250 <_JIT_ENTRY+0x250>
// 12d: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 131: 48 89 28                      movq    %rbp, (%rax)
// 134: 49 8b 47 10                   movq    0x10(%r15), %rax
// 138: 48 8b 00                      movq    (%rax), %rax
// 13b: 84 c0                         testb   %al, %al
// 13d: 0f 84 a4 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_HandlePending
// 14d: 4c 89 ff                      movq    %r15, %rdi
// 150: ff d0                         callq   *%rax
// 152: 85 c0                         testl   %eax, %eax
// 154: 0f 84 8d 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 15a: 4c 89 e0                      movq    %r12, %rax
// 15d: e9 ee 00 00 00                jmp     0x250 <_JIT_ENTRY+0x250>
// 162: 41 83 ff 02                   cmpl    $0x2, %r15d
// 166: bb 01 00 00 00                movl    $0x1, %ebx
// 16b: 41 0f 43 df                   cmovael %r15d, %ebx
// 16f: 45 31 ed                      xorl    %r13d, %r13d
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 49 ff c5                      incq    %r13
// 183: 4c 39 eb                      cmpq    %r13, %rbx
// 186: 0f 84 37 ff ff ff             je      0xc3 <_JIT_ENTRY+0xc3>
// 18c: 4e 8b 7c ed 00                movq    (%rbp,%r13,8), %r15
// 191: 49 8b 07                      movq    (%r15), %rax
// 194: 48 85 c0                      testq   %rax, %rax
// 197: 7e 07                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 199: 85 c0                         testl   %eax, %eax
// 19b: 78 e3                         js      0x180 <_JIT_ENTRY+0x180>
// 19d: eb 26                         jmp     0x1c5 <_JIT_ENTRY+0x1c5>
// 19f: 90                            nop
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 fa                      movq    %r15, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 07                      movq    (%r15), %rax
// 1c1: 85 c0                         testl   %eax, %eax
// 1c3: 78 bb                         js      0x180 <_JIT_ENTRY+0x180>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 ff 0f                      decq    (%r15)
// 1d4: 75 aa                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d6: 4c 89 ff                      movq    %r15, %rdi
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_Dealloc
// 1e3: ff d0                         callq   *%rax
// 1e5: eb 99                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _JIT_OPARG
// 1f1: f7 d0                         notl    %eax
// 1f3: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f8: 48 98                         cltq
// 1fa: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1ff: 48 8b 40 e8                   movq    -0x18(%rax), %rax
// 203: a8 01                         testb   $0x1, %al
// 205: 75 5b                         jne     0x262 <_JIT_ENTRY+0x262>
// 207: 48 85 c0                      testq   %rax, %rax
// 20a: 74 56                         je      0x262 <_JIT_ENTRY+0x262>
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _JIT_CONTINUE
// 216: 48 89 df                      movq    %rbx, %rdi
// 219: 4c 89 e6                      movq    %r12, %rsi
// 21c: 4c 89 fa                      movq    %r15, %rdx
// 21f: 48 83 c4 28                   addq    $0x28, %rsp
// 223: 5b                            popq    %rbx
// 224: 41 5c                         popq    %r12
// 226: 41 5d                         popq    %r13
// 228: 41 5e                         popq    %r14
// 22a: 41 5f                         popq    %r15
// 22c: 5d                            popq    %rbp
// 22d: ff e0                         jmpq    *%rax
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _Py_Dealloc
// 239: 4c 89 e7                      movq    %r12, %rdi
// 23c: ff d0                         callq   *%rax
// 23e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 243: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 247: 48 85 ed                      testq   %rbp, %rbp
// 24a: 0f 85 dd fe ff ff             jne     0x12d <_JIT_ENTRY+0x12d>
// 250: 48 29 d8                      subq    %rbx, %rax
// 253: 48 83 c0 b8                   addq    $-0x48, %rax
// 257: 48 c1 e8 03                   shrq    $0x3, %rax
// 25b: 89 43 40                      movl    %eax, 0x40(%rbx)
// 25e: 31 c0                         xorl    %eax, %eax
// 260: eb 2b                         jmp     0x28d <_JIT_ENTRY+0x28d>
// 262: 4d 89 e6                      movq    %r12, %r14
// 265: 49 29 de                      subq    %rbx, %r14
// 268: 49 83 c6 b8                   addq    $-0x48, %r14
// 26c: 49 c1 ee 03                   shrq    $0x3, %r14
// 270: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 274: 48 8b 03                      movq    (%rbx), %rax
// 277: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000279:  R_X86_64_64  _JIT_TARGET
// 281: 89 c9                         movl    %ecx, %ecx
// 283: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 287: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 28d: 48 83 c4 28                   addq    $0x28, %rsp
// 291: 5b                            popq    %rbx
// 292: 41 5c                         popq    %r12
// 294: 41 5d                         popq    %r13
// 296: 41 5e                         popq    %r14
// 298: 41 5f                         popq    %r15
// 29a: 5d                            popq    %rbp
// 29b: c3                            retq
// 29c: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CHECK_ATTR_WITH_HINT_code_body[669] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x45, 0x8d, 0x78, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xfb, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xea, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x14, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x23, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8d, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0xee, 0x00, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdf, 0x45, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xeb, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x7c, 0xed, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x40, 0xe8, 0xa8, 0x01, 0x75, 0x5b, 0x48, 0x85, 0xc0, 0x74, 0x56, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x85, 0xdd, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_CHECK_ATTR_WITH_HINT_code_holes[15] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CHECK_ATTR_WITH_HINT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CHECK_ATTR_WITH_HINT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 45 8d 78 01                   leal    0x1(%r8), %r15d
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 45 0f 44 f8                   cmovel  %r8d, %r15d
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 d1 01 00 00             je      0x23b <_JIT_ENTRY+0x23b>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 c0 01 00 00             je      0x23b <_JIT_ENTRY+0x23b>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 8f: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 0f 94 c3                      sete    %bl
// 99: 44 89 fa                      movl    %r15d, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 84 c3                         testb   %al, %bl
// bd: 0f 84 9f 00 00 00             je      0x162 <_JIT_ENTRY+0x162>
// c3: 49 8b 04 24                   movq    (%r12), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f 22                         jg      0xee <_JIT_ENTRY+0xee>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d8:  R_X86_64_64  _Py_NegativeRefcount
// e0: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e5: 4c 89 e2                      movq    %r12, %rdx
// e8: ff d0                         callq   *%rax
// ea: 49 8b 04 24                   movq    (%r12), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f5: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// fa: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// ff: 48 8b 2c 24                   movq    (%rsp), %rbp
// 103: 78 16                         js      0x11b <_JIT_ENTRY+0x11b>
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10f: ff d0                         callq   *%rax
// 111: 49 ff 0c 24                   decq    (%r12)
// 115: 0f 84 57 01 00 00             je      0x272 <_JIT_ENTRY+0x272>
// 11b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 120: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 124: 48 85 ed                      testq   %rbp, %rbp
// 127: 0f 84 66 01 00 00             je      0x293 <_JIT_ENTRY+0x293>
// 12d: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 131: 48 89 28                      movq    %rbp, (%rax)
// 134: 49 8b 47 10                   movq    0x10(%r15), %rax
// 138: 48 8b 00                      movq    (%rax), %rax
// 13b: 84 c0                         testb   %al, %al
// 13d: 0f 84 a6 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_HandlePending
// 14d: 4c 89 ff                      movq    %r15, %rdi
// 150: ff d0                         callq   *%rax
// 152: 85 c0                         testl   %eax, %eax
// 154: 0f 84 8f 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 15a: 4c 89 e0                      movq    %r12, %rax
// 15d: e9 31 01 00 00                jmp     0x293 <_JIT_ENTRY+0x293>
// 162: 41 83 ff 02                   cmpl    $0x2, %r15d
// 166: bb 01 00 00 00                movl    $0x1, %ebx
// 16b: 41 0f 43 df                   cmovael %r15d, %ebx
// 16f: 45 31 ff                      xorl    %r15d, %r15d
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 49 ff c7                      incq    %r15
// 183: 4c 39 fb                      cmpq    %r15, %rbx
// 186: 0f 84 37 ff ff ff             je      0xc3 <_JIT_ENTRY+0xc3>
// 18c: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 191: 49 8b 45 00                   movq    (%r13), %rax
// 195: 48 85 c0                      testq   %rax, %rax
// 198: 7e 06                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 78 e2                         js      0x180 <_JIT_ENTRY+0x180>
// 19e: eb 26                         jmp     0x1c6 <_JIT_ENTRY+0x1c6>
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 ea                      movq    %r13, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 45 00                   movq    (%r13), %rax
// 1c2: 85 c0                         testl   %eax, %eax
// 1c4: 78 ba                         js      0x180 <_JIT_ENTRY+0x180>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d0: ff d0                         callq   *%rax
// 1d2: 49 ff 4d 00                   decq    (%r13)
// 1d6: 75 a8                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d8: 4c 89 ef                      movq    %r13, %rdi
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_Dealloc
// 1e5: ff d0                         callq   *%rax
// 1e7: eb 97                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_OPARG
// 1f3: f7 d0                         notl    %eax
// 1f5: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1fa: 48 98                         cltq
// 1fc: 48 01 c0                      addq    %rax, %rax
// 1ff: 49 83 3c c6 00                cmpq    $0x0, (%r14,%rax,8)
// 204: 75 32                         jne     0x238 <_JIT_ENTRY+0x238>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _JIT_OPARG
// 210: 0f b7 c0                      movzwl  %ax, %eax
// 213: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 218: 29 c1                         subl    %eax, %ecx
// 21a: 48 63 c9                      movslq  %ecx, %rcx
// 21d: f7 d0                         notl    %eax
// 21f: 48 98                         cltq
// 221: 48 01 c8                      addq    %rcx, %rax
// 224: 49 8b 04 c6                   movq    (%r14,%rax,8), %rax
// 228: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000022a:  R_X86_64_64  PyMethod_Type
// 232: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 236: 74 6d                         je      0x2a5 <_JIT_ENTRY+0x2a5>
// 238: 4d 89 e6                      movq    %r12, %r14
// 23b: 49 29 de                      subq    %rbx, %r14
// 23e: 49 83 c6 b8                   addq    $-0x48, %r14
// 242: 49 c1 ee 03                   shrq    $0x3, %r14
// 246: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24a: 48 8b 03                      movq    (%rbx), %rax
// 24d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024f:  R_X86_64_64  _JIT_TARGET
// 257: 89 c9                         movl    %ecx, %ecx
// 259: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 25d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 263: 48 83 c4 28                   addq    $0x28, %rsp
// 267: 5b                            popq    %rbx
// 268: 41 5c                         popq    %r12
// 26a: 41 5d                         popq    %r13
// 26c: 41 5e                         popq    %r14
// 26e: 41 5f                         popq    %r15
// 270: 5d                            popq    %rbp
// 271: c3                            retq
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_Dealloc
// 27c: 4c 89 e7                      movq    %r12, %rdi
// 27f: ff d0                         callq   *%rax
// 281: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 286: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 28a: 48 85 ed                      testq   %rbp, %rbp
// 28d: 0f 85 9a fe ff ff             jne     0x12d <_JIT_ENTRY+0x12d>
// 293: 48 29 d8                      subq    %rbx, %rax
// 296: 48 83 c0 b8                   addq    $-0x48, %rax
// 29a: 48 c1 e8 03                   shrq    $0x3, %rax
// 29e: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2a1: 31 c0                         xorl    %eax, %eax
// 2a3: eb be                         jmp     0x263 <_JIT_ENTRY+0x263>
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _JIT_CONTINUE
// 2af: 48 89 df                      movq    %rbx, %rdi
// 2b2: 4c 89 e6                      movq    %r12, %rsi
// 2b5: 4c 89 fa                      movq    %r15, %rdx
// 2b8: 48 83 c4 28                   addq    $0x28, %rsp
// 2bc: 5b                            popq    %rbx
// 2bd: 41 5c                         popq    %r12
// 2bf: 41 5d                         popq    %r13
// 2c1: 41 5e                         popq    %r14
// 2c3: 41 5f                         popq    %r15
// 2c5: 5d                            popq    %rbp
// 2c6: ff e0                         jmpq    *%rax
// 2c8: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_body[713] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x45, 0x8d, 0x78, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xd1, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xc0, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x57, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x66, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8f, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x31, 0x01, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdf, 0x45, 0x31, 0xff, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc0, 0x49, 0x83, 0x3c, 0xc6, 0x00, 0x75, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8b, 0x04, 0xc6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x6d, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x85, 0x9a, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xbe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethod_Type, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CHECK_EG_MATCH
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CHECK_EG_MATCH.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 69 01                   leal    0x1(%r9), %ebp
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 e9                   cmovel  %r9d, %ebp
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 02 01 00 00             je      0x169 <_JIT_ENTRY+0x169>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 f1 00 00 00             je      0x169 <_JIT_ENTRY+0x169>
// 78: 4c 89 0c 24                   movq    %r9, (%rsp)
// 7c: 4c 89 54 24 20                movq    %r10, 0x20(%rsp)
// 81: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 86: 48 89 7c 24 30                movq    %rdi, 0x30(%rsp)
// 8b: 4d 8d 2c ce                   leaq    (%r14,%rcx,8), %r13
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 89 ea                         movl    %ebp, %edx
// 97: 4c 89 e7                      movq    %r12, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: 41 ff d0                      callq   *%r8
// a2: 48 89 44 24 28                movq    %rax, 0x28(%rsp)
// a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a9:  R_X86_64_64  _JIT_OPARG
// b1: 66 85 c0                      testw   %ax, %ax
// b4: 0f 94 c0                      sete    %al
// b7: 84 c3                         testb   %al, %bl
// b9: 0f 84 d7 00 00 00             je      0x196 <_JIT_ENTRY+0x196>
// bf: 49 8b 04 24                   movq    (%r12), %rax
// c3: 48 85 c0                      testq   %rax, %rax
// c6: 7f 22                         jg      0xea <_JIT_ENTRY+0xea>
// c8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ca:  R_X86_64_64  .rodata.str1.1
// d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d4:  R_X86_64_64  _Py_NegativeRefcount
// dc: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e1: 4c 89 e2                      movq    %r12, %rdx
// e4: ff d0                         callq   *%rax
// e6: 49 8b 04 24                   movq    (%r12), %rax
// ea: 85 c0                         testl   %eax, %eax
// ec: 48 8b 5c 24 30                movq    0x30(%rsp), %rbx
// f1: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// f6: 78 21                         js      0x119 <_JIT_ENTRY+0x119>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 102: ff d0                         callq   *%rax
// 104: 49 ff 0c 24                   decq    (%r12)
// 108: 75 0f                         jne     0x119 <_JIT_ENTRY+0x119>
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: 4c 89 e7                      movq    %r12, %rdi
// 117: ff d0                         callq   *%rax
// 119: 48 8b 04 24                   movq    (%rsp), %rax
// 11d: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 121: 48 8b 54 24 28                movq    0x28(%rsp), %rdx
// 126: 48 85 d2                      testq   %rdx, %rdx
// 129: 0f 84 1c 03 00 00             je      0x44b <_JIT_ENTRY+0x44b>
// 12f: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 134: 4d 8d 2c ce                   leaq    (%r14,%rcx,8), %r13
// 138: 48 89 10                      movq    %rdx, (%rax)
// 13b: 49 8b 47 10                   movq    0x10(%r15), %rax
// 13f: 48 8b 00                      movq    (%rax), %rax
// 142: 84 c0                         testb   %al, %al
// 144: 0f 84 cf 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_HandlePending
// 154: 4c 89 ff                      movq    %r15, %rdi
// 157: ff d0                         callq   *%rax
// 159: 85 c0                         testl   %eax, %eax
// 15b: 0f 84 b8 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 161: 4c 89 e8                      movq    %r13, %rax
// 164: e9 e2 02 00 00                jmp     0x44b <_JIT_ENTRY+0x44b>
// 169: 49 29 fe                      subq    %rdi, %r14
// 16c: 49 83 c6 b8                   addq    $-0x48, %r14
// 170: 49 c1 ee 03                   shrq    $0x3, %r14
// 174: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 178: 48 8b 07                      movq    (%rdi), %rax
// 17b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017d:  R_X86_64_64  _JIT_TARGET
// 185: 89 c9                         movl    %ecx, %ecx
// 187: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 18b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 191: e9 c5 02 00 00                jmp     0x45b <_JIT_ENTRY+0x45b>
// 196: 83 fd 02                      cmpl    $0x2, %ebp
// 199: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 19f: 44 0f 43 fd                   cmovael %ebp, %r15d
// 1a3: 31 db                         xorl    %ebx, %ebx
// 1a5: eb 15                         jmp     0x1bc <_JIT_ENTRY+0x1bc>
// 1a7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1b0: 48 ff c3                      incq    %rbx
// 1b3: 49 39 df                      cmpq    %rbx, %r15
// 1b6: 0f 84 03 ff ff ff             je      0xbf <_JIT_ENTRY+0xbf>
// 1bc: 49 8b 6c dd 00                movq    (%r13,%rbx,8), %rbp
// 1c1: 48 8b 45 00                   movq    (%rbp), %rax
// 1c5: 48 85 c0                      testq   %rax, %rax
// 1c8: 7e 06                         jle     0x1d0 <_JIT_ENTRY+0x1d0>
// 1ca: 85 c0                         testl   %eax, %eax
// 1cc: 78 e2                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1ce: eb 26                         jmp     0x1f6 <_JIT_ENTRY+0x1f6>
// 1d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1
// 1da: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1df: 48 89 ea                      movq    %rbp, %rdx
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_NegativeRefcount
// 1ec: ff d0                         callq   *%rax
// 1ee: 48 8b 45 00                   movq    (%rbp), %rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 78 ba                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 200: ff d0                         callq   *%rax
// 202: 48 ff 4d 00                   decq    (%rbp)
// 206: 75 a8                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 208: 48 89 ef                      movq    %rbp, %rdi
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_Dealloc
// 215: ff d0                         callq   *%rax
// 217: eb 97                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_OPARG
// 223: f7 d0                         notl    %eax
// 225: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 22a: 4c 89 ff                      movq    %r15, %rdi
// 22d: 4c 63 f8                      movslq  %eax, %r15
// 230: 4b 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %rbp
// 235: 4f 8b 64 fe f8                movq    -0x8(%r14,%r15,8), %r12
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 244: 4c 89 e6                      movq    %r12, %rsi
// 247: ff d0                         callq   *%rax
// 249: 85 c0                         testl   %eax, %eax
// 24b: 0f 88 52 01 00 00             js      0x3a3 <_JIT_ENTRY+0x3a3>
// 251: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 25a: 48 c7 44 24 18 00 00 00 00    movq    $0x0, 0x18(%rsp)
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 26d: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 272: 48 8d 4c 24 18                leaq    0x18(%rsp), %rcx
// 277: 48 89 ef                      movq    %rbp, %rdi
// 27a: 4c 89 e6                      movq    %r12, %rsi
// 27d: ff d0                         callq   *%rax
// 27f: 89 04 24                      movl    %eax, (%rsp)
// 282: 48 8b 45 00                   movq    (%rbp), %rax
// 286: 48 85 c0                      testq   %rax, %rax
// 289: 7f 22                         jg      0x2ad <_JIT_ENTRY+0x2ad>
// 28b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028d:  R_X86_64_64  .rodata.str1.1
// 295: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000297:  R_X86_64_64  _Py_NegativeRefcount
// 29f: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 2a4: 48 89 ea                      movq    %rbp, %rdx
// 2a7: ff d0                         callq   *%rax
// 2a9: 48 8b 45 00                   movq    (%rbp), %rax
// 2ad: 85 c0                         testl   %eax, %eax
// 2af: 78 21                         js      0x2d2 <_JIT_ENTRY+0x2d2>
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2bb: ff d0                         callq   *%rax
// 2bd: 48 ff 4d 00                   decq    (%rbp)
// 2c1: 75 0f                         jne     0x2d2 <_JIT_ENTRY+0x2d2>
// 2c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c5:  R_X86_64_64  _Py_Dealloc
// 2cd: 48 89 ef                      movq    %rbp, %rdi
// 2d0: ff d0                         callq   *%rax
// 2d2: 49 8b 04 24                   movq    (%r12), %rax
// 2d6: 48 85 c0                      testq   %rax, %rax
// 2d9: 7f 22                         jg      0x2fd <_JIT_ENTRY+0x2fd>
// 2db: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002dd:  R_X86_64_64  .rodata.str1.1
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _Py_NegativeRefcount
// 2ef: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 2f4: 4c 89 e2                      movq    %r12, %rdx
// 2f7: ff d0                         callq   *%rax
// 2f9: 49 8b 04 24                   movq    (%r12), %rax
// 2fd: 85 c0                         testl   %eax, %eax
// 2ff: 78 21                         js      0x322 <_JIT_ENTRY+0x322>
// 301: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000303:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 30b: ff d0                         callq   *%rax
// 30d: 49 ff 0c 24                   decq    (%r12)
// 311: 75 0f                         jne     0x322 <_JIT_ENTRY+0x322>
// 313: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000315:  R_X86_64_64  _Py_Dealloc
// 31d: 4c 89 e7                      movq    %r12, %rdi
// 320: ff d0                         callq   *%rax
// 322: 83 3c 24 00                   cmpl    $0x0, (%rsp)
// 326: 0f 88 17 01 00 00             js      0x443 <_JIT_ENTRY+0x443>
// 32c: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 331: 48 85 ff                      testq   %rdi, %rdi
// 334: 0f 84 09 01 00 00             je      0x443 <_JIT_ENTRY+0x443>
// 33a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033c:  R_X86_64_64  _Py_NoneStruct
// 344: 48 39 c7                      cmpq    %rax, %rdi
// 347: 74 11                         je      0x35a <_JIT_ENTRY+0x35a>
// 349: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034b:  R_X86_64_64  PyErr_SetHandledException
// 353: ff d0                         callq   *%rax
// 355: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 35a: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 35f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000361:  R_X86_64_64  _JIT_OPARG
// 369: f7 d2                         notl    %edx
// 36b: 81 ca 00 00 ff ff             orl     $0xffff0000, %edx       # imm = 0xFFFF0000
// 371: 48 63 d2                      movslq  %edx, %rdx
// 374: 49 89 4c d6 f0                movq    %rcx, -0x10(%r14,%rdx,8)
// 379: 49 89 44 d6 f8                movq    %rax, -0x8(%r14,%rdx,8)
// 37e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000380:  R_X86_64_64  _JIT_CONTINUE
// 388: 48 89 df                      movq    %rbx, %rdi
// 38b: 4c 89 ee                      movq    %r13, %rsi
// 38e: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 393: 48 83 c4 38                   addq    $0x38, %rsp
// 397: 5b                            popq    %rbx
// 398: 41 5c                         popq    %r12
// 39a: 41 5d                         popq    %r13
// 39c: 41 5e                         popq    %r14
// 39e: 41 5f                         popq    %r15
// 3a0: 5d                            popq    %rbp
// 3a1: ff e0                         jmpq    *%rax
// 3a3: 48 8b 45 00                   movq    (%rbp), %rax
// 3a7: 48 85 c0                      testq   %rax, %rax
// 3aa: 7f 22                         jg      0x3ce <_JIT_ENTRY+0x3ce>
// 3ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003ae:  R_X86_64_64  .rodata.str1.1
// 3b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b8:  R_X86_64_64  _Py_NegativeRefcount
// 3c0: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// 3c5: 48 89 ea                      movq    %rbp, %rdx
// 3c8: ff d0                         callq   *%rax
// 3ca: 48 8b 45 00                   movq    (%rbp), %rax
// 3ce: 85 c0                         testl   %eax, %eax
// 3d0: 78 21                         js      0x3f3 <_JIT_ENTRY+0x3f3>
// 3d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3dc: ff d0                         callq   *%rax
// 3de: 48 ff 4d 00                   decq    (%rbp)
// 3e2: 75 0f                         jne     0x3f3 <_JIT_ENTRY+0x3f3>
// 3e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e6:  R_X86_64_64  _Py_Dealloc
// 3ee: 48 89 ef                      movq    %rbp, %rdi
// 3f1: ff d0                         callq   *%rax
// 3f3: 49 8b 04 24                   movq    (%r12), %rax
// 3f7: 48 85 c0                      testq   %rax, %rax
// 3fa: 7f 22                         jg      0x41e <_JIT_ENTRY+0x41e>
// 3fc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003fe:  R_X86_64_64  .rodata.str1.1
// 406: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000408:  R_X86_64_64  _Py_NegativeRefcount
// 410: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 415: 4c 89 e2                      movq    %r12, %rdx
// 418: ff d0                         callq   *%rax
// 41a: 49 8b 04 24                   movq    (%r12), %rax
// 41e: 85 c0                         testl   %eax, %eax
// 420: 78 21                         js      0x443 <_JIT_ENTRY+0x443>
// 422: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000424:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 42c: ff d0                         callq   *%rax
// 42e: 49 ff 0c 24                   decq    (%r12)
// 432: 75 0f                         jne     0x443 <_JIT_ENTRY+0x443>
// 434: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000436:  R_X86_64_64  _Py_Dealloc
// 43e: 4c 89 e7                      movq    %r12, %rdi
// 441: ff d0                         callq   *%rax
// 443: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 447: 48 83 c0 f0                   addq    $-0x10, %rax
// 44b: 48 29 d8                      subq    %rbx, %rax
// 44e: 48 83 c0 b8                   addq    $-0x48, %rax
// 452: 48 c1 e8 03                   shrq    $0x3, %rax
// 456: 89 43 40                      movl    %eax, 0x40(%rbx)
// 459: 31 c0                         xorl    %eax, %eax
// 45b: 48 83 c4 38                   addq    $0x38, %rsp
// 45f: 5b                            popq    %rbx
// 460: 41 5c                         popq    %r12
// 462: 41 5d                         popq    %r13
// 464: 41 5e                         popq    %r14
// 466: 41 5f                         popq    %r15
// 468: 5d                            popq    %rbp
// 469: c3                            retq
// 46a: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CHECK_EG_MATCH_code_body[1131] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x02, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xf1, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x0c, 0x24, 0x4c, 0x89, 0x54, 0x24, 0x20, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x30, 0x4d, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x28, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x1c, 0x03, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x4d, 0x8d, 0x2c, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xcf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe8, 0xe9, 0xe2, 0x02, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xc5, 0x02, 0x00, 0x00, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x03, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x6c, 0xdd, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x4c, 0x63, 0xf8, 0x4b, 0x8b, 0x6c, 0xfe, 0xf0, 0x4f, 0x8b, 0x64, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x52, 0x01, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x18, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0x3c, 0x24, 0x00, 0x0f, 0x88, 0x17, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd2, 0x81, 0xca, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x4c, 0xd6, 0xf0, 0x49, 0x89, 0x44, 0xd6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x83, 0xc0, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_CHECK_EG_MATCH_code_holes[36] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x303, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x315, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x34b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x361, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x380, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3fe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x408, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x424, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x436, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CHECK_EG_MATCH_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CHECK_EG_MATCH_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CHECK_EXC_MATCH
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CHECK_EXC_MATCH.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f4 00 00 00             je      0x15b <_JIT_ENTRY+0x15b>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e3 00 00 00             je      0x15b <_JIT_ENTRY+0x15b>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 82: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 87: 48 89 3c 24                   movq    %rdi, (%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 c8 00 00 00             je      0x188 <_JIT_ENTRY+0x188>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// f2: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f7: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// fc: 78 16                         js      0x114 <_JIT_ENTRY+0x114>
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 108: ff d0                         callq   *%rax
// 10a: 49 ff 0c 24                   decq    (%r12)
// 10e: 0f 84 d8 01 00 00             je      0x2ec <_JIT_ENTRY+0x2ec>
// 114: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 118: 4d 85 f6                      testq   %r14, %r14
// 11b: 0f 84 36 02 00 00             je      0x357 <_JIT_ENTRY+0x357>
// 121: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 126: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 12a: 4c 89 33                      movq    %r14, (%rbx)
// 12d: 49 8b 45 10                   movq    0x10(%r13), %rax
// 131: 48 8b 00                      movq    (%rax), %rax
// 134: 84 c0                         testb   %al, %al
// 136: 0f 84 cd 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_HandlePending
// 146: 4c 89 ef                      movq    %r13, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 85 c0                         testl   %eax, %eax
// 14d: 0f 84 b6 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 153: 4c 89 e3                      movq    %r12, %rbx
// 156: e9 fc 01 00 00                jmp     0x357 <_JIT_ENTRY+0x357>
// 15b: 49 29 ff                      subq    %rdi, %r15
// 15e: 49 83 c7 b8                   addq    $-0x48, %r15
// 162: 49 c1 ef 03                   shrq    $0x3, %r15
// 166: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 16a: 48 8b 07                      movq    (%rdi), %rax
// 16d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000016f:  R_X86_64_64  _JIT_TARGET
// 177: 89 c9                         movl    %ecx, %ecx
// 179: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 17d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 183: e9 e3 01 00 00                jmp     0x36b <_JIT_ENTRY+0x36b>
// 188: 41 83 fd 02                   cmpl    $0x2, %r13d
// 18c: 41 be 01 00 00 00             movl    $0x1, %r14d
// 192: 45 0f 43 f5                   cmovael %r13d, %r14d
// 196: 31 db                         xorl    %ebx, %ebx
// 198: eb 12                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19a: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 de                      cmpq    %rbx, %r14
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 98                         cltq
// 21c: 49 8d 1c c7                   leaq    (%r15,%rax,8), %rbx
// 220: 48 83 c3 f8                   addq    $-0x8, %rbx
// 224: 4d 8b 74 c7 f0                movq    -0x10(%r15,%rax,8), %r14
// 229: 4d 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %r15
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _PyEval_CheckExceptTypeValid
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 4c 89 fe                      movq    %r15, %rsi
// 23e: ff d0                         callq   *%rax
// 240: 85 c0                         testl   %eax, %eax
// 242: 0f 88 c2 00 00 00             js      0x30a <_JIT_ENTRY+0x30a>
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  PyErr_GivenExceptionMatches
// 252: 4c 89 f7                      movq    %r14, %rdi
// 255: 4c 89 fe                      movq    %r15, %rsi
// 258: ff d0                         callq   *%rax
// 25a: 89 c5                         movl    %eax, %ebp
// 25c: 49 8b 07                      movq    (%r15), %rax
// 25f: 48 85 c0                      testq   %rax, %rax
// 262: 7f 21                         jg      0x285 <_JIT_ENTRY+0x285>
// 264: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000266:  R_X86_64_64  .rodata.str1.1
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_NegativeRefcount
// 278: be da 07 00 00                movl    $0x7da, %esi            # imm = 0x7DA
// 27d: 4c 89 fa                      movq    %r15, %rdx
// 280: ff d0                         callq   *%rax
// 282: 49 8b 07                      movq    (%r15), %rax
// 285: 85 c0                         testl   %eax, %eax
// 287: 78 20                         js      0x2a9 <_JIT_ENTRY+0x2a9>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 293: ff d0                         callq   *%rax
// 295: 49 ff 0f                      decq    (%r15)
// 298: 75 0f                         jne     0x2a9 <_JIT_ENTRY+0x2a9>
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _Py_Dealloc
// 2a4: 4c 89 ff                      movq    %r15, %rdi
// 2a7: ff d0                         callq   *%rax
// 2a9: 85 ed                         testl   %ebp, %ebp
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_FalseStruct
// 2b5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002b7:  R_X86_64_64  _Py_TrueStruct
// 2bf: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 2c3: 48 89 0b                      movq    %rcx, (%rbx)
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _JIT_CONTINUE
// 2d0: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2d4: 4c 89 e6                      movq    %r12, %rsi
// 2d7: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2dc: 48 83 c4 28                   addq    $0x28, %rsp
// 2e0: 5b                            popq    %rbx
// 2e1: 41 5c                         popq    %r12
// 2e3: 41 5d                         popq    %r13
// 2e5: 41 5e                         popq    %r14
// 2e7: 41 5f                         popq    %r15
// 2e9: 5d                            popq    %rbp
// 2ea: ff e0                         jmpq    *%rax
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  _Py_Dealloc
// 2f6: 4c 89 e7                      movq    %r12, %rdi
// 2f9: ff d0                         callq   *%rax
// 2fb: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 2ff: 4d 85 f6                      testq   %r14, %r14
// 302: 0f 85 19 fe ff ff             jne     0x121 <_JIT_ENTRY+0x121>
// 308: eb 4d                         jmp     0x357 <_JIT_ENTRY+0x357>
// 30a: 49 8b 07                      movq    (%r15), %rax
// 30d: 48 85 c0                      testq   %rax, %rax
// 310: 7f 21                         jg      0x333 <_JIT_ENTRY+0x333>
// 312: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000314:  R_X86_64_64  .rodata.str1.1
// 31c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031e:  R_X86_64_64  _Py_NegativeRefcount
// 326: be d6 07 00 00                movl    $0x7d6, %esi            # imm = 0x7D6
// 32b: 4c 89 fa                      movq    %r15, %rdx
// 32e: ff d0                         callq   *%rax
// 330: 49 8b 07                      movq    (%r15), %rax
// 333: 85 c0                         testl   %eax, %eax
// 335: 78 20                         js      0x357 <_JIT_ENTRY+0x357>
// 337: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000339:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 341: ff d0                         callq   *%rax
// 343: 49 ff 0f                      decq    (%r15)
// 346: 75 0f                         jne     0x357 <_JIT_ENTRY+0x357>
// 348: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034a:  R_X86_64_64  _Py_Dealloc
// 352: 4c 89 ff                      movq    %r15, %rdi
// 355: ff d0                         callq   *%rax
// 357: 48 8b 04 24                   movq    (%rsp), %rax
// 35b: 48 29 c3                      subq    %rax, %rbx
// 35e: 48 83 c3 b8                   addq    $-0x48, %rbx
// 362: 48 c1 eb 03                   shrq    $0x3, %rbx
// 366: 89 58 40                      movl    %ebx, 0x40(%rax)
// 369: 31 c0                         xorl    %eax, %eax
// 36b: 48 83 c4 28                   addq    $0x28, %rsp
// 36f: 5b                            popq    %rbx
// 370: 41 5c                         popq    %r12
// 372: 41 5d                         popq    %r13
// 374: 41 5e                         popq    %r14
// 376: 41 5f                         popq    %r15
// 378: 5d                            popq    %rbp
// 379: c3                            retq
// 37a: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CHECK_EXC_MATCH_code_body[891] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf4, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe3, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xd8, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x1c, 0xdf, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x36, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xc7, 0x4c, 0x89, 0x33, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xcd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe3, 0xe9, 0xfc, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xe3, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x12, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8d, 0x1c, 0xc7, 0x48, 0x83, 0xc3, 0xf8, 0x4d, 0x8b, 0x74, 0xc7, 0xf0, 0x4d, 0x8b, 0x7c, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xc2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xda, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x0b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x1c, 0xdf, 0x4d, 0x85, 0xf6, 0x0f, 0x85, 0x19, 0xfe, 0xff, 0xff, 0xeb, 0x4d, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x58, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_CHECK_EXC_MATCH_code_holes[27] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x16f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptTypeValid, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_GivenExceptionMatches, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x314, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x31e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x339, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x34a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CHECK_EXC_MATCH_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CHECK_EXC_MATCH_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CHECK_FUNCTION_EXACT_ARGS
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CHECK_FUNCTION_EXACT_ARGS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 ff                      movq    %rdi, %r15
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 0a 02 00 00             je      0x274 <_JIT_ENTRY+0x274>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 f9 01 00 00             je      0x274 <_JIT_ENTRY+0x274>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// 8f: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 41 0f 94 c7                   sete    %r15b
// 9a: 89 da                         movl    %ebx, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 9f 00 00 00             je      0x163 <_JIT_ENTRY+0x163>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// f6: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// fb: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 100: 48 8b 2c 24                   movq    (%rsp), %rbp
// 104: 78 16                         js      0x11c <_JIT_ENTRY+0x11c>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 0c 24                   decq    (%r12)
// 116: 0f 84 8f 01 00 00             je      0x2ab <_JIT_ENTRY+0x2ab>
// 11c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 121: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 125: 48 85 ed                      testq   %rbp, %rbp
// 128: 0f 84 9e 01 00 00             je      0x2cc <_JIT_ENTRY+0x2cc>
// 12e: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 132: 48 89 28                      movq    %rbp, (%rax)
// 135: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 139: 48 8b 00                      movq    (%rax), %rax
// 13c: 84 c0                         testb   %al, %al
// 13e: 0f 84 a5 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_HandlePending
// 14e: 48 89 df                      movq    %rbx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 84 8e 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 15b: 4c 89 e0                      movq    %r12, %rax
// 15e: e9 69 01 00 00                jmp     0x2cc <_JIT_ENTRY+0x2cc>
// 163: 83 fb 02                      cmpl    $0x2, %ebx
// 166: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 16c: 44 0f 43 fb                   cmovael %ebx, %r15d
// 170: 31 db                         xorl    %ebx, %ebx
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 48 ff c3                      incq    %rbx
// 183: 49 39 df                      cmpq    %rbx, %r15
// 186: 0f 84 38 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 18c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 191: 49 8b 45 00                   movq    (%r13), %rax
// 195: 48 85 c0                      testq   %rax, %rax
// 198: 7e 06                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 78 e2                         js      0x180 <_JIT_ENTRY+0x180>
// 19e: eb 26                         jmp     0x1c6 <_JIT_ENTRY+0x1c6>
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 ea                      movq    %r13, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 45 00                   movq    (%r13), %rax
// 1c2: 85 c0                         testl   %eax, %eax
// 1c4: 78 ba                         js      0x180 <_JIT_ENTRY+0x180>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d0: ff d0                         callq   *%rax
// 1d2: 49 ff 4d 00                   decq    (%r13)
// 1d6: 75 a8                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d8: 4c 89 ef                      movq    %r13, %rdi
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_Dealloc
// 1e5: ff d0                         callq   *%rax
// 1e7: eb 97                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_OPARG
// 1f3: 0f b7 c0                      movzwl  %ax, %eax
// 1f6: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1fb: 29 c1                         subl    %eax, %ecx
// 1fd: f7 d0                         notl    %eax
// 1ff: 48 98                         cltq
// 201: 48 63 c9                      movslq  %ecx, %rcx
// 204: 48 01 c1                      addq    %rax, %rcx
// 207: 49 8b 0c ce                   movq    (%r14,%rcx,8), %rcx
// 20b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000020d:  R_X86_64_64  PyFunction_Type
// 215: 48 39 51 08                   cmpq    %rdx, 0x8(%rcx)
// 219: 75 56                         jne     0x271 <_JIT_ENTRY+0x271>
// 21b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000021d:  R_X86_64_64  _JIT_OPERAND
// 225: 39 91 88 00 00 00             cmpl    %edx, 0x88(%rcx)
// 22b: 75 44                         jne     0x271 <_JIT_ENTRY+0x271>
// 22d: 48 01 c0                      addq    %rax, %rax
// 230: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// 234: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000236:  R_X86_64_64  _JIT_OPARG
// 23e: 0f b7 d2                      movzwl  %dx, %edx
// 241: 49 83 3c c6 01                cmpq    $0x1, (%r14,%rax,8)
// 246: 83 da ff                      sbbl    $-0x1, %edx
// 249: 39 51 34                      cmpl    %edx, 0x34(%rcx)
// 24c: 75 23                         jne     0x271 <_JIT_ENTRY+0x271>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _JIT_CONTINUE
// 258: 4c 89 ff                      movq    %r15, %rdi
// 25b: 4c 89 e6                      movq    %r12, %rsi
// 25e: 48 89 da                      movq    %rbx, %rdx
// 261: 48 83 c4 28                   addq    $0x28, %rsp
// 265: 5b                            popq    %rbx
// 266: 41 5c                         popq    %r12
// 268: 41 5d                         popq    %r13
// 26a: 41 5e                         popq    %r14
// 26c: 41 5f                         popq    %r15
// 26e: 5d                            popq    %rbp
// 26f: ff e0                         jmpq    *%rax
// 271: 4d 89 e6                      movq    %r12, %r14
// 274: 4d 29 fe                      subq    %r15, %r14
// 277: 49 83 c6 b8                   addq    $-0x48, %r14
// 27b: 49 c1 ee 03                   shrq    $0x3, %r14
// 27f: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 283: 49 8b 07                      movq    (%r15), %rax
// 286: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000288:  R_X86_64_64  _JIT_TARGET
// 290: 89 c9                         movl    %ecx, %ecx
// 292: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 296: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 29c: 48 83 c4 28                   addq    $0x28, %rsp
// 2a0: 5b                            popq    %rbx
// 2a1: 41 5c                         popq    %r12
// 2a3: 41 5d                         popq    %r13
// 2a5: 41 5e                         popq    %r14
// 2a7: 41 5f                         popq    %r15
// 2a9: 5d                            popq    %rbp
// 2aa: c3                            retq
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_Dealloc
// 2b5: 4c 89 e7                      movq    %r12, %rdi
// 2b8: ff d0                         callq   *%rax
// 2ba: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2bf: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 2c3: 48 85 ed                      testq   %rbp, %rbp
// 2c6: 0f 85 62 fe ff ff             jne     0x12e <_JIT_ENTRY+0x12e>
// 2cc: 4c 29 f8                      subq    %r15, %rax
// 2cf: 48 83 c0 b8                   addq    $-0x48, %rax
// 2d3: 48 c1 e8 03                   shrq    $0x3, %rax
// 2d7: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 2db: 31 c0                         xorl    %eax, %eax
// 2dd: eb bd                         jmp     0x29c <_JIT_ENTRY+0x29c>
// 2df: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CHECK_FUNCTION_EXACT_ARGS_code_body[736] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x0a, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xf9, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x8f, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x9e, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8e, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x69, 0x01, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfb, 0x31, 0xdb, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xc1, 0x49, 0x8b, 0x0c, 0xce, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x51, 0x08, 0x75, 0x56, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x91, 0x88, 0x00, 0x00, 0x00, 0x75, 0x44, 0x48, 0x01, 0xc0, 0x48, 0x8b, 0x49, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x49, 0x83, 0x3c, 0xc6, 0x01, 0x83, 0xda, 0xff, 0x39, 0x51, 0x34, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x85, 0x62, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0xeb, 0xbd};
static const Hole _CALL_BUILTIN_CLASSplus_CHECK_FUNCTION_EXACT_ARGS_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_Type, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CHECK_FUNCTION_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CHECK_FUNCTION_EXACT_ARGS_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CHECK_MANAGED_OBJECT_HAS_VALUES
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CHECK_MANAGED_OBJECT_HAS_VALUES.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 fd                      movq    %rdi, %r13
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 e7 01 00 00             je      0x251 <_JIT_ENTRY+0x251>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 d6 01 00 00             je      0x251 <_JIT_ENTRY+0x251>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 8f: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 41 0f 94 c6                   sete    %r14b
// 9a: 89 da                         movl    %ebx, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c6                      testb   %al, %r14b
// be: 0f 84 b7 00 00 00             je      0x17b <_JIT_ENTRY+0x17b>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// f6: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// fb: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 100: 78 21                         js      0x123 <_JIT_ENTRY+0x123>
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10c: ff d0                         callq   *%rax
// 10e: 49 ff 0c 24                   decq    (%r12)
// 112: 75 0f                         jne     0x123 <_JIT_ENTRY+0x123>
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_Dealloc
// 11e: 4c 89 e7                      movq    %r12, %rdi
// 121: ff d0                         callq   *%rax
// 123: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 128: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 12c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 130: 48 85 c9                      testq   %rcx, %rcx
// 133: 74 30                         je      0x165 <_JIT_ENTRY+0x165>
// 135: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 139: 48 89 08                      movq    %rcx, (%rax)
// 13c: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 140: 48 8b 00                      movq    (%rax), %rax
// 143: 84 c0                         testb   %al, %al
// 145: 0f 84 ae 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_HandlePending
// 155: 48 89 df                      movq    %rbx, %rdi
// 158: ff d0                         callq   *%rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 84 97 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 162: 4c 89 f0                      movq    %r14, %rax
// 165: 4c 29 e8                      subq    %r13, %rax
// 168: 48 83 c0 b8                   addq    $-0x48, %rax
// 16c: 48 c1 e8 03                   shrq    $0x3, %rax
// 170: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 174: 31 c0                         xorl    %eax, %eax
// 176: e9 ff 00 00 00                jmp     0x27a <_JIT_ENTRY+0x27a>
// 17b: 83 fb 02                      cmpl    $0x2, %ebx
// 17e: 41 be 01 00 00 00             movl    $0x1, %r14d
// 184: 44 0f 43 f3                   cmovael %ebx, %r14d
// 188: 31 db                         xorl    %ebx, %ebx
// 18a: eb 10                         jmp     0x19c <_JIT_ENTRY+0x19c>
// 18c: 0f 1f 40 00                   nopl    (%rax)
// 190: 48 ff c3                      incq    %rbx
// 193: 49 39 de                      cmpq    %rbx, %r14
// 196: 0f 84 28 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 19c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1a1: 49 8b 45 00                   movq    (%r13), %rax
// 1a5: 48 85 c0                      testq   %rax, %rax
// 1a8: 7e 06                         jle     0x1b0 <_JIT_ENTRY+0x1b0>
// 1aa: 85 c0                         testl   %eax, %eax
// 1ac: 78 e2                         js      0x190 <_JIT_ENTRY+0x190>
// 1ae: eb 26                         jmp     0x1d6 <_JIT_ENTRY+0x1d6>
// 1b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1
// 1ba: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1bf: 4c 89 ea                      movq    %r13, %rdx
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _Py_NegativeRefcount
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 8b 45 00                   movq    (%r13), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 ba                         js      0x190 <_JIT_ENTRY+0x190>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 ff 4d 00                   decq    (%r13)
// 1e6: 75 a8                         jne     0x190 <_JIT_ENTRY+0x190>
// 1e8: 4c 89 ef                      movq    %r13, %rdi
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: ff d0                         callq   *%rax
// 1f7: eb 97                         jmp     0x190 <_JIT_ENTRY+0x190>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _JIT_OPARG
// 203: f7 d0                         notl    %eax
// 205: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 20a: 48 98                         cltq
// 20c: 49 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %rdi
// 211: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// 215: 75 14                         jne     0x22b <_JIT_ENTRY+0x22b>
// 217: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 225: ff d0                         callq   *%rax
// 227: 84 c0                         testb   %al, %al
// 229: 74 23                         je      0x24e <_JIT_ENTRY+0x24e>
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _JIT_CONTINUE
// 235: 4c 89 ef                      movq    %r13, %rdi
// 238: 4c 89 f6                      movq    %r14, %rsi
// 23b: 48 89 da                      movq    %rbx, %rdx
// 23e: 48 83 c4 28                   addq    $0x28, %rsp
// 242: 5b                            popq    %rbx
// 243: 41 5c                         popq    %r12
// 245: 41 5d                         popq    %r13
// 247: 41 5e                         popq    %r14
// 249: 41 5f                         popq    %r15
// 24b: 5d                            popq    %rbp
// 24c: ff e0                         jmpq    *%rax
// 24e: 4d 89 f7                      movq    %r14, %r15
// 251: 4d 29 ef                      subq    %r13, %r15
// 254: 49 83 c7 b8                   addq    $-0x48, %r15
// 258: 49 c1 ef 03                   shrq    $0x3, %r15
// 25c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 260: 49 8b 45 00                   movq    (%r13), %rax
// 264: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000266:  R_X86_64_64  _JIT_TARGET
// 26e: 89 c9                         movl    %ecx, %ecx
// 270: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 274: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 27a: 48 83 c4 28                   addq    $0x28, %rsp
// 27e: 5b                            popq    %rbx
// 27f: 41 5c                         popq    %r12
// 281: 41 5d                         popq    %r13
// 283: 41 5e                         popq    %r14
// 285: 41 5f                         popq    %r15
// 287: 5d                            popq    %rbp
// 288: c3                            retq
// 289: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_body[650] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd7, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xe7, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xd6, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x30, 0x4f, 0x8d, 0x34, 0xf7, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xe9, 0xff, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc7, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x14, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x84, 0xc0, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xf7, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CHECK_PEP_523
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CHECK_PEP_523.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 ff                      movq    %rdi, %r15
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 9b 01 00 00             je      0x205 <_JIT_ENTRY+0x205>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 8a 01 00 00             je      0x205 <_JIT_ENTRY+0x205>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// 8f: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 41 0f 94 c7                   sete    %r15b
// 9a: 89 da                         movl    %ebx, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 b7 00 00 00             je      0x17b <_JIT_ENTRY+0x17b>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// f6: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// fb: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 100: 78 21                         js      0x123 <_JIT_ENTRY+0x123>
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10c: ff d0                         callq   *%rax
// 10e: 49 ff 0c 24                   decq    (%r12)
// 112: 75 0f                         jne     0x123 <_JIT_ENTRY+0x123>
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_Dealloc
// 11e: 4c 89 e7                      movq    %r12, %rdi
// 121: ff d0                         callq   *%rax
// 123: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 128: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 12c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 130: 48 85 c9                      testq   %rcx, %rcx
// 133: 74 30                         je      0x165 <_JIT_ENTRY+0x165>
// 135: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 139: 48 89 08                      movq    %rcx, (%rax)
// 13c: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 140: 48 8b 08                      movq    (%rax), %rcx
// 143: 84 c9                         testb   %cl, %cl
// 145: 0f 84 b0 00 00 00             je      0x1fb <_JIT_ENTRY+0x1fb>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_HandlePending
// 155: 48 89 df                      movq    %rbx, %rdi
// 158: ff d0                         callq   *%rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 84 95 00 00 00             je      0x1f7 <_JIT_ENTRY+0x1f7>
// 162: 4c 89 f0                      movq    %r14, %rax
// 165: 4c 29 f8                      subq    %r15, %rax
// 168: 48 83 c0 b8                   addq    $-0x48, %rax
// 16c: 48 c1 e8 03                   shrq    $0x3, %rax
// 170: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 174: 31 c0                         xorl    %eax, %eax
// 176: e9 b2 00 00 00                jmp     0x22d <_JIT_ENTRY+0x22d>
// 17b: 83 fb 02                      cmpl    $0x2, %ebx
// 17e: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 184: 44 0f 43 eb                   cmovael %ebx, %r13d
// 188: 31 db                         xorl    %ebx, %ebx
// 18a: eb 10                         jmp     0x19c <_JIT_ENTRY+0x19c>
// 18c: 0f 1f 40 00                   nopl    (%rax)
// 190: 48 ff c3                      incq    %rbx
// 193: 49 39 dd                      cmpq    %rbx, %r13
// 196: 0f 84 28 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 19c: 4c 8b 7c dd 00                movq    (%rbp,%rbx,8), %r15
// 1a1: 49 8b 07                      movq    (%r15), %rax
// 1a4: 48 85 c0                      testq   %rax, %rax
// 1a7: 7e 07                         jle     0x1b0 <_JIT_ENTRY+0x1b0>
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 78 e3                         js      0x190 <_JIT_ENTRY+0x190>
// 1ad: eb 26                         jmp     0x1d5 <_JIT_ENTRY+0x1d5>
// 1af: 90                            nop
// 1b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1
// 1ba: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1bf: 4c 89 fa                      movq    %r15, %rdx
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _Py_NegativeRefcount
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 8b 07                      movq    (%r15), %rax
// 1d1: 85 c0                         testl   %eax, %eax
// 1d3: 78 bb                         js      0x190 <_JIT_ENTRY+0x190>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1df: ff d0                         callq   *%rax
// 1e1: 49 ff 0f                      decq    (%r15)
// 1e4: 75 aa                         jne     0x190 <_JIT_ENTRY+0x190>
// 1e6: 4c 89 ff                      movq    %r15, %rdi
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _Py_Dealloc
// 1f3: ff d0                         callq   *%rax
// 1f5: eb 99                         jmp     0x190 <_JIT_ENTRY+0x190>
// 1f7: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 1fb: 48 83 b8 20 08 00 00 00       cmpq    $0x0, 0x820(%rax)
// 203: 74 37                         je      0x23c <_JIT_ENTRY+0x23c>
// 205: 4d 29 fe                      subq    %r15, %r14
// 208: 49 83 c6 b8                   addq    $-0x48, %r14
// 20c: 49 c1 ee 03                   shrq    $0x3, %r14
// 210: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 214: 49 8b 07                      movq    (%r15), %rax
// 217: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000219:  R_X86_64_64  _JIT_TARGET
// 221: 89 c9                         movl    %ecx, %ecx
// 223: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 227: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 22d: 48 83 c4 28                   addq    $0x28, %rsp
// 231: 5b                            popq    %rbx
// 232: 41 5c                         popq    %r12
// 234: 41 5d                         popq    %r13
// 236: 41 5e                         popq    %r14
// 238: 41 5f                         popq    %r15
// 23a: 5d                            popq    %rbp
// 23b: c3                            retq
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _JIT_CONTINUE
// 246: 4c 89 ff                      movq    %r15, %rdi
// 249: 4c 89 f6                      movq    %r14, %rsi
// 24c: 48 89 da                      movq    %rbx, %rdx
// 24f: 48 83 c4 28                   addq    $0x28, %rsp
// 253: 5b                            popq    %rbx
// 254: 41 5c                         popq    %r12
// 256: 41 5d                         popq    %r13
// 258: 41 5e                         popq    %r14
// 25a: 41 5f                         popq    %r15
// 25c: 5d                            popq    %rbp
// 25d: ff e0                         jmpq    *%rax
// 25f: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CHECK_PEP_523_code_body[608] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x9b, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x8a, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x30, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x08, 0x84, 0xc9, 0x0f, 0x84, 0xb0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x95, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0xe9, 0xb2, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xeb, 0x31, 0xdb, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x7c, 0xdd, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x83, 0xb8, 0x20, 0x08, 0x00, 0x00, 0x00, 0x74, 0x37, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_CHECK_PEP_523_code_holes[14] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CHECK_PEP_523_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CHECK_PEP_523_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CHECK_STACK_SPACE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CHECK_STACK_SPACE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 ff                      movq    %rdi, %r15
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 d0 01 00 00             je      0x23a <_JIT_ENTRY+0x23a>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 bf 01 00 00             je      0x23a <_JIT_ENTRY+0x23a>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// 8f: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 41 0f 94 c7                   sete    %r15b
// 9a: 89 da                         movl    %ebx, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 9f 00 00 00             je      0x163 <_JIT_ENTRY+0x163>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// f6: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// fb: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 100: 48 8b 2c 24                   movq    (%rsp), %rbp
// 104: 78 16                         js      0x11c <_JIT_ENTRY+0x11c>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 0c 24                   decq    (%r12)
// 116: 0f 84 55 01 00 00             je      0x271 <_JIT_ENTRY+0x271>
// 11c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 121: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 125: 48 85 ed                      testq   %rbp, %rbp
// 128: 0f 84 64 01 00 00             je      0x292 <_JIT_ENTRY+0x292>
// 12e: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 132: 48 89 28                      movq    %rbp, (%rax)
// 135: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 139: 48 8b 00                      movq    (%rax), %rax
// 13c: 84 c0                         testb   %al, %al
// 13e: 0f 84 a3 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_HandlePending
// 14e: 48 89 df                      movq    %rbx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 84 8c 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 15b: 4c 89 e0                      movq    %r12, %rax
// 15e: e9 2f 01 00 00                jmp     0x292 <_JIT_ENTRY+0x292>
// 163: 83 fb 02                      cmpl    $0x2, %ebx
// 166: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 16c: 44 0f 43 eb                   cmovael %ebx, %r13d
// 170: 31 db                         xorl    %ebx, %ebx
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 48 ff c3                      incq    %rbx
// 183: 49 39 dd                      cmpq    %rbx, %r13
// 186: 0f 84 38 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 18c: 4c 8b 7c dd 00                movq    (%rbp,%rbx,8), %r15
// 191: 49 8b 07                      movq    (%r15), %rax
// 194: 48 85 c0                      testq   %rax, %rax
// 197: 7e 07                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 199: 85 c0                         testl   %eax, %eax
// 19b: 78 e3                         js      0x180 <_JIT_ENTRY+0x180>
// 19d: eb 26                         jmp     0x1c5 <_JIT_ENTRY+0x1c5>
// 19f: 90                            nop
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 fa                      movq    %r15, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 07                      movq    (%r15), %rax
// 1c1: 85 c0                         testl   %eax, %eax
// 1c3: 78 bb                         js      0x180 <_JIT_ENTRY+0x180>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 ff 0f                      decq    (%r15)
// 1d4: 75 aa                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d6: 4c 89 ff                      movq    %r15, %rdi
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_Dealloc
// 1e3: ff d0                         callq   *%rax
// 1e5: eb 99                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e7: 48 8b 83 00 01 00 00          movq    0x100(%rbx), %rax
// 1ee: 48 85 c0                      testq   %rax, %rax
// 1f1: 74 44                         je      0x237 <_JIT_ENTRY+0x237>
// 1f3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f5:  R_X86_64_64  _JIT_OPARG
// 1fd: 0f b7 c9                      movzwl  %cx, %ecx
// 200: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 205: 29 ca                         subl    %ecx, %edx
// 207: 48 63 d2                      movslq  %edx, %rdx
// 20a: f7 d1                         notl    %ecx
// 20c: 48 63 c9                      movslq  %ecx, %rcx
// 20f: 48 01 d1                      addq    %rdx, %rcx
// 212: 49 8b 0c ce                   movq    (%r14,%rcx,8), %rcx
// 216: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// 21a: 48 63 49 4c                   movslq  0x4c(%rcx), %rcx
// 21e: 48 8b 93 08 01 00 00          movq    0x108(%rbx), %rdx
// 225: 48 29 c2                      subq    %rax, %rdx
// 228: 48 c1 fa 03                   sarq    $0x3, %rdx
// 22c: 48 39 ca                      cmpq    %rcx, %rdx
// 22f: 7e 06                         jle     0x237 <_JIT_ENTRY+0x237>
// 231: 83 7b 24 02                   cmpl    $0x2, 0x24(%rbx)
// 235: 7d 6e                         jge     0x2a5 <_JIT_ENTRY+0x2a5>
// 237: 4d 89 e6                      movq    %r12, %r14
// 23a: 4d 29 fe                      subq    %r15, %r14
// 23d: 49 83 c6 b8                   addq    $-0x48, %r14
// 241: 49 c1 ee 03                   shrq    $0x3, %r14
// 245: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 249: 49 8b 07                      movq    (%r15), %rax
// 24c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024e:  R_X86_64_64  _JIT_TARGET
// 256: 89 c9                         movl    %ecx, %ecx
// 258: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 25c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 262: 48 83 c4 28                   addq    $0x28, %rsp
// 266: 5b                            popq    %rbx
// 267: 41 5c                         popq    %r12
// 269: 41 5d                         popq    %r13
// 26b: 41 5e                         popq    %r14
// 26d: 41 5f                         popq    %r15
// 26f: 5d                            popq    %rbp
// 270: c3                            retq
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _Py_Dealloc
// 27b: 4c 89 e7                      movq    %r12, %rdi
// 27e: ff d0                         callq   *%rax
// 280: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 285: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 289: 48 85 ed                      testq   %rbp, %rbp
// 28c: 0f 85 9c fe ff ff             jne     0x12e <_JIT_ENTRY+0x12e>
// 292: 4c 29 f8                      subq    %r15, %rax
// 295: 48 83 c0 b8                   addq    $-0x48, %rax
// 299: 48 c1 e8 03                   shrq    $0x3, %rax
// 29d: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 2a1: 31 c0                         xorl    %eax, %eax
// 2a3: eb bd                         jmp     0x262 <_JIT_ENTRY+0x262>
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _JIT_CONTINUE
// 2af: 4c 89 ff                      movq    %r15, %rdi
// 2b2: 4c 89 e6                      movq    %r12, %rsi
// 2b5: 48 89 da                      movq    %rbx, %rdx
// 2b8: 48 83 c4 28                   addq    $0x28, %rsp
// 2bc: 5b                            popq    %rbx
// 2bd: 41 5c                         popq    %r12
// 2bf: 41 5d                         popq    %r13
// 2c1: 41 5e                         popq    %r14
// 2c3: 41 5f                         popq    %r15
// 2c5: 5d                            popq    %rbp
// 2c6: ff e0                         jmpq    *%rax
// 2c8: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CHECK_STACK_SPACE_code_body[713] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xd0, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xbf, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x55, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x64, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x2f, 0x01, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xeb, 0x31, 0xdb, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x7c, 0xdd, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0x8b, 0x83, 0x00, 0x01, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x44, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xd1, 0x49, 0x8b, 0x0c, 0xce, 0x48, 0x8b, 0x49, 0x30, 0x48, 0x63, 0x49, 0x4c, 0x48, 0x8b, 0x93, 0x08, 0x01, 0x00, 0x00, 0x48, 0x29, 0xc2, 0x48, 0xc1, 0xfa, 0x03, 0x48, 0x39, 0xca, 0x7e, 0x06, 0x83, 0x7b, 0x24, 0x02, 0x7d, 0x6e, 0x4d, 0x89, 0xe6, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x85, 0x9c, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0xeb, 0xbd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_CHECK_STACK_SPACE_code_holes[15] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CHECK_STACK_SPACE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CHECK_STACK_SPACE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CHECK_VALIDITY
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CHECK_VALIDITY.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 ff                      movq    %rdi, %r15
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 c0 01 00 00             je      0x22a <_JIT_ENTRY+0x22a>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 af 01 00 00             je      0x22a <_JIT_ENTRY+0x22a>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// 8f: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 41 0f 94 c7                   sete    %r15b
// 9a: 89 da                         movl    %ebx, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 b7 00 00 00             je      0x17b <_JIT_ENTRY+0x17b>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// f6: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// fb: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 100: 78 21                         js      0x123 <_JIT_ENTRY+0x123>
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10c: ff d0                         callq   *%rax
// 10e: 49 ff 0c 24                   decq    (%r12)
// 112: 75 0f                         jne     0x123 <_JIT_ENTRY+0x123>
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_Dealloc
// 11e: 4c 89 e7                      movq    %r12, %rdi
// 121: ff d0                         callq   *%rax
// 123: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 128: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 12c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 130: 48 85 c9                      testq   %rcx, %rcx
// 133: 74 30                         je      0x165 <_JIT_ENTRY+0x165>
// 135: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 139: 48 89 08                      movq    %rcx, (%rax)
// 13c: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 140: 48 8b 00                      movq    (%rax), %rax
// 143: 84 c0                         testb   %al, %al
// 145: 0f 84 ac 00 00 00             je      0x1f7 <_JIT_ENTRY+0x1f7>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_HandlePending
// 155: 48 89 df                      movq    %rbx, %rdi
// 158: ff d0                         callq   *%rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 84 95 00 00 00             je      0x1f7 <_JIT_ENTRY+0x1f7>
// 162: 4c 89 f0                      movq    %r14, %rax
// 165: 4c 29 f8                      subq    %r15, %rax
// 168: 48 83 c0 b8                   addq    $-0x48, %rax
// 16c: 48 c1 e8 03                   shrq    $0x3, %rax
// 170: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 174: 31 c0                         xorl    %eax, %eax
// 176: e9 d7 00 00 00                jmp     0x252 <_JIT_ENTRY+0x252>
// 17b: 83 fb 02                      cmpl    $0x2, %ebx
// 17e: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 184: 44 0f 43 eb                   cmovael %ebx, %r13d
// 188: 31 db                         xorl    %ebx, %ebx
// 18a: eb 10                         jmp     0x19c <_JIT_ENTRY+0x19c>
// 18c: 0f 1f 40 00                   nopl    (%rax)
// 190: 48 ff c3                      incq    %rbx
// 193: 49 39 dd                      cmpq    %rbx, %r13
// 196: 0f 84 28 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 19c: 4c 8b 7c dd 00                movq    (%rbp,%rbx,8), %r15
// 1a1: 49 8b 07                      movq    (%r15), %rax
// 1a4: 48 85 c0                      testq   %rax, %rax
// 1a7: 7e 07                         jle     0x1b0 <_JIT_ENTRY+0x1b0>
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 78 e3                         js      0x190 <_JIT_ENTRY+0x190>
// 1ad: eb 26                         jmp     0x1d5 <_JIT_ENTRY+0x1d5>
// 1af: 90                            nop
// 1b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1
// 1ba: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1bf: 4c 89 fa                      movq    %r15, %rdx
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _Py_NegativeRefcount
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 8b 07                      movq    (%r15), %rax
// 1d1: 85 c0                         testl   %eax, %eax
// 1d3: 78 bb                         js      0x190 <_JIT_ENTRY+0x190>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1df: ff d0                         callq   *%rax
// 1e1: 49 ff 0f                      decq    (%r15)
// 1e4: 75 aa                         jne     0x190 <_JIT_ENTRY+0x190>
// 1e6: 4c 89 ff                      movq    %r15, %rdi
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _Py_Dealloc
// 1f3: ff d0                         callq   *%rax
// 1f5: eb 99                         jmp     0x190 <_JIT_ENTRY+0x190>
// 1f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f9:  R_X86_64_64  _JIT_EXECUTOR
// 201: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 205: 74 23                         je      0x22a <_JIT_ENTRY+0x22a>
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  _JIT_CONTINUE
// 211: 4c 89 ff                      movq    %r15, %rdi
// 214: 4c 89 f6                      movq    %r14, %rsi
// 217: 48 89 da                      movq    %rbx, %rdx
// 21a: 48 83 c4 28                   addq    $0x28, %rsp
// 21e: 5b                            popq    %rbx
// 21f: 41 5c                         popq    %r12
// 221: 41 5d                         popq    %r13
// 223: 41 5e                         popq    %r14
// 225: 41 5f                         popq    %r15
// 227: 5d                            popq    %rbp
// 228: ff e0                         jmpq    *%rax
// 22a: 4d 29 fe                      subq    %r15, %r14
// 22d: 49 83 c6 b8                   addq    $-0x48, %r14
// 231: 49 c1 ee 03                   shrq    $0x3, %r14
// 235: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 239: 49 8b 07                      movq    (%r15), %rax
// 23c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023e:  R_X86_64_64  _JIT_TARGET
// 246: 89 c9                         movl    %ecx, %ecx
// 248: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 24c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 252: 48 83 c4 28                   addq    $0x28, %rsp
// 256: 5b                            popq    %rbx
// 257: 41 5c                         popq    %r12
// 259: 41 5d                         popq    %r13
// 25b: 41 5e                         popq    %r14
// 25d: 41 5f                         popq    %r15
// 25f: 5d                            popq    %rbp
// 260: c3                            retq
// 261: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CHECK_VALIDITY_code_body[610] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xc0, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xaf, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x30, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x95, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0xe9, 0xd7, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xeb, 0x31, 0xdb, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x7c, 0xdd, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_CHECK_VALIDITY_code_holes[15] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CHECK_VALIDITY_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CHECK_VALIDITY_data_holes[1];

// _CALL_BUILTIN_CLASSplus_COMPARE_OP
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_COMPARE_OP.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 ed 00 00 00             je      0x154 <_JIT_ENTRY+0x154>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 dc 00 00 00             je      0x154 <_JIT_ENTRY+0x154>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 82: 48 89 14 24                   movq    %rdx, (%rsp)
// 86: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 c1 00 00 00             je      0x181 <_JIT_ENTRY+0x181>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f2: 78 16                         js      0x10a <_JIT_ENTRY+0x10a>
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fe: ff d0                         callq   *%rax
// 100: 49 ff 0c 24                   decq    (%r12)
// 104: 0f 84 9c 02 00 00             je      0x3a6 <_JIT_ENTRY+0x3a6>
// 10a: 4d 8d 3c de                   leaq    (%r14,%rbx,8), %r15
// 10e: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 113: 48 85 c0                      testq   %rax, %rax
// 116: 0f 84 ab 02 00 00             je      0x3c7 <_JIT_ENTRY+0x3c7>
// 11c: 49 89 07                      movq    %rax, (%r15)
// 11f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 123: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 127: 48 8b 00                      movq    (%rax), %rax
// 12a: 84 c0                         testb   %al, %al
// 12c: 0f 84 d7 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _Py_HandlePending
// 13c: ff d0                         callq   *%rax
// 13e: 85 c0                         testl   %eax, %eax
// 140: 0f 84 c3 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 146: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 14b: 4d 8d 3c c6                   leaq    (%r14,%rax,8), %r15
// 14f: e9 73 02 00 00                jmp     0x3c7 <_JIT_ENTRY+0x3c7>
// 154: 49 29 fe                      subq    %rdi, %r14
// 157: 49 83 c6 b8                   addq    $-0x48, %r14
// 15b: 49 c1 ee 03                   shrq    $0x3, %r14
// 15f: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 163: 48 8b 07                      movq    (%rdi), %rax
// 166: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000168:  R_X86_64_64  _JIT_TARGET
// 170: 89 c9                         movl    %ecx, %ecx
// 172: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 176: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 17c: e9 5c 02 00 00                jmp     0x3dd <_JIT_ENTRY+0x3dd>
// 181: 41 83 fd 02                   cmpl    $0x2, %r13d
// 185: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 18b: 45 0f 43 fd                   cmovael %r13d, %r15d
// 18f: 31 db                         xorl    %ebx, %ebx
// 191: eb 19                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 193: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 df                      cmpq    %rbx, %r15
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: 0f b7 d0                      movzwl  %ax, %edx
// 216: 89 d0                         movl    %edx, %eax
// 218: f7 d0                         notl    %eax
// 21a: 48 63 d8                      movslq  %eax, %rbx
// 21d: 4d 8b 7c de f0                movq    -0x10(%r14,%rbx,8), %r15
// 222: 4d 8b 6c de f8                movq    -0x8(%r14,%rbx,8), %r13
// 227: c1 ea 05                      shrl    $0x5, %edx
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  PyObject_RichCompare
// 234: 4c 89 ff                      movq    %r15, %rdi
// 237: 4c 89 ee                      movq    %r13, %rsi
// 23a: ff d0                         callq   *%rax
// 23c: 49 89 c4                      movq    %rax, %r12
// 23f: 49 8b 07                      movq    (%r15), %rax
// 242: 48 85 c0                      testq   %rax, %rax
// 245: 7f 21                         jg      0x268 <_JIT_ENTRY+0x268>
// 247: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000249:  R_X86_64_64  .rodata.str1.1
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _Py_NegativeRefcount
// 25b: be 38 07 00 00                movl    $0x738, %esi            # imm = 0x738
// 260: 4c 89 fa                      movq    %r15, %rdx
// 263: ff d0                         callq   *%rax
// 265: 49 8b 07                      movq    (%r15), %rax
// 268: 85 c0                         testl   %eax, %eax
// 26a: 78 20                         js      0x28c <_JIT_ENTRY+0x28c>
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 276: ff d0                         callq   *%rax
// 278: 49 ff 0f                      decq    (%r15)
// 27b: 75 0f                         jne     0x28c <_JIT_ENTRY+0x28c>
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _Py_Dealloc
// 287: 4c 89 ff                      movq    %r15, %rdi
// 28a: ff d0                         callq   *%rax
// 28c: 49 8b 45 00                   movq    (%r13), %rax
// 290: 48 85 c0                      testq   %rax, %rax
// 293: 7f 22                         jg      0x2b7 <_JIT_ENTRY+0x2b7>
// 295: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000297:  R_X86_64_64  .rodata.str1.1
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  _Py_NegativeRefcount
// 2a9: be 39 07 00 00                movl    $0x739, %esi            # imm = 0x739
// 2ae: 4c 89 ea                      movq    %r13, %rdx
// 2b1: ff d0                         callq   *%rax
// 2b3: 49 8b 45 00                   movq    (%r13), %rax
// 2b7: 85 c0                         testl   %eax, %eax
// 2b9: 78 21                         js      0x2dc <_JIT_ENTRY+0x2dc>
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c5: ff d0                         callq   *%rax
// 2c7: 49 ff 4d 00                   decq    (%r13)
// 2cb: 75 0f                         jne     0x2dc <_JIT_ENTRY+0x2dc>
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _Py_Dealloc
// 2d7: 4c 89 ef                      movq    %r13, %rdi
// 2da: ff d0                         callq   *%rax
// 2dc: 4d 8d 3c de                   leaq    (%r14,%rbx,8), %r15
// 2e0: 49 83 c7 f0                   addq    $-0x10, %r15
// 2e4: 4d 85 e4                      testq   %r12, %r12
// 2e7: 0f 84 da 00 00 00             je      0x3c7 <_JIT_ENTRY+0x3c7>
// 2ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ef:  R_X86_64_64  _JIT_OPARG
// 2f7: a8 10                         testb   $0x10, %al
// 2f9: 74 7d                         je      0x378 <_JIT_ENTRY+0x378>
// 2fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fd:  R_X86_64_64  PyObject_IsTrue
// 305: 4c 89 e7                      movq    %r12, %rdi
// 308: ff d0                         callq   *%rax
// 30a: 89 c5                         movl    %eax, %ebp
// 30c: 49 8b 04 24                   movq    (%r12), %rax
// 310: 48 85 c0                      testq   %rax, %rax
// 313: 7f 22                         jg      0x337 <_JIT_ENTRY+0x337>
// 315: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000317:  R_X86_64_64  .rodata.str1.1
// 31f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000321:  R_X86_64_64  _Py_NegativeRefcount
// 329: be 3d 07 00 00                movl    $0x73d, %esi            # imm = 0x73D
// 32e: 4c 89 e2                      movq    %r12, %rdx
// 331: ff d0                         callq   *%rax
// 333: 49 8b 04 24                   movq    (%r12), %rax
// 337: 85 c0                         testl   %eax, %eax
// 339: 78 21                         js      0x35c <_JIT_ENTRY+0x35c>
// 33b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 345: ff d0                         callq   *%rax
// 347: 49 ff 0c 24                   decq    (%r12)
// 34b: 75 0f                         jne     0x35c <_JIT_ENTRY+0x35c>
// 34d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034f:  R_X86_64_64  _Py_Dealloc
// 357: 4c 89 e7                      movq    %r12, %rdi
// 35a: ff d0                         callq   *%rax
// 35c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035e:  R_X86_64_64  _Py_FalseStruct
// 366: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000368:  R_X86_64_64  _Py_TrueStruct
// 370: 85 ed                         testl   %ebp, %ebp
// 372: 4c 0f 44 e0                   cmoveq  %rax, %r12
// 376: 78 4f                         js      0x3c7 <_JIT_ENTRY+0x3c7>
// 378: 49 8d 34 de                   leaq    (%r14,%rbx,8), %rsi
// 37c: 48 83 c6 f8                   addq    $-0x8, %rsi
// 380: 4d 89 27                      movq    %r12, (%r15)
// 383: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000385:  R_X86_64_64  _JIT_CONTINUE
// 38d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 392: 48 8b 14 24                   movq    (%rsp), %rdx
// 396: 48 83 c4 28                   addq    $0x28, %rsp
// 39a: 5b                            popq    %rbx
// 39b: 41 5c                         popq    %r12
// 39d: 41 5d                         popq    %r13
// 39f: 41 5e                         popq    %r14
// 3a1: 41 5f                         popq    %r15
// 3a3: 5d                            popq    %rbp
// 3a4: ff e0                         jmpq    *%rax
// 3a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a8:  R_X86_64_64  _Py_Dealloc
// 3b0: 4c 89 e7                      movq    %r12, %rdi
// 3b3: ff d0                         callq   *%rax
// 3b5: 4d 8d 3c de                   leaq    (%r14,%rbx,8), %r15
// 3b9: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 3be: 48 85 c0                      testq   %rax, %rax
// 3c1: 0f 85 55 fd ff ff             jne     0x11c <_JIT_ENTRY+0x11c>
// 3c7: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 3cc: 49 29 c7                      subq    %rax, %r15
// 3cf: 49 83 c7 b8                   addq    $-0x48, %r15
// 3d3: 49 c1 ef 03                   shrq    $0x3, %r15
// 3d7: 44 89 78 40                   movl    %r15d, 0x40(%rax)
// 3db: 31 c0                         xorl    %eax, %eax
// 3dd: 48 83 c4 28                   addq    $0x28, %rsp
// 3e1: 5b                            popq    %rbx
// 3e2: 41 5c                         popq    %r12
// 3e4: 41 5d                         popq    %r13
// 3e6: 41 5e                         popq    %r14
// 3e8: 41 5f                         popq    %r15
// 3ea: 5d                            popq    %rbp
// 3eb: c3                            retq
// 3ec: 
static const unsigned char _CALL_BUILTIN_CLASSplus_COMPARE_OP_code_body[1005] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xdc, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xc1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x9c, 0x02, 0x00, 0x00, 0x4d, 0x8d, 0x3c, 0xde, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xab, 0x02, 0x00, 0x00, 0x49, 0x89, 0x07, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8d, 0x3c, 0xc6, 0xe9, 0x73, 0x02, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x5c, 0x02, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x89, 0xd0, 0xf7, 0xd0, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x7c, 0xde, 0xf0, 0x4d, 0x8b, 0x6c, 0xde, 0xf8, 0xc1, 0xea, 0x05, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x3c, 0xde, 0x49, 0x83, 0xc7, 0xf0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xda, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x10, 0x74, 0x7d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3d, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe0, 0x78, 0x4f, 0x49, 0x8d, 0x34, 0xde, 0x48, 0x83, 0xc6, 0xf8, 0x4d, 0x89, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x3c, 0xde, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x55, 0xfd, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x78, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_COMPARE_OP_code_holes[32] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_RichCompare, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x317, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x321, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x33d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x34f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x35e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x368, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x385, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_COMPARE_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_COMPARE_OP_data_holes[1];

// _CALL_BUILTIN_CLASSplus_COMPARE_OP_FLOAT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_COMPARE_OP_FLOAT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fd                      movq    %rdi, %rbp
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 0d 01 00 00             je      0x177 <_JIT_ENTRY+0x177>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 fc 00 00 00             je      0x177 <_JIT_ENTRY+0x177>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 85: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 8a: 48 89 6c 24 20                movq    %rbp, 0x20(%rsp)
// 8f: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 41 0f 94 c6                   sete    %r14b
// 9a: 89 da                         movl    %ebx, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c6                      testb   %al, %r14b
// be: 0f 84 ed 00 00 00             je      0x1b1 <_JIT_ENTRY+0x1b1>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// f6: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// fb: 78 21                         js      0x11e <_JIT_ENTRY+0x11e>
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 107: ff d0                         callq   *%rax
// 109: 49 ff 0c 24                   decq    (%r12)
// 10d: 75 0f                         jne     0x11e <_JIT_ENTRY+0x11e>
// 10f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000111:  R_X86_64_64  _Py_Dealloc
// 119: 4c 89 e7                      movq    %r12, %rdi
// 11c: ff d0                         callq   *%rax
// 11e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 123: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 127: 48 8b 14 24                   movq    (%rsp), %rdx
// 12b: 48 85 d2                      testq   %rdx, %rdx
// 12e: 74 35                         je      0x165 <_JIT_ENTRY+0x165>
// 130: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 135: 49 8d 1c cf                   leaq    (%r15,%rcx,8), %rbx
// 139: 48 89 10                      movq    %rdx, (%rax)
// 13c: 49 8b 46 10                   movq    0x10(%r14), %rax
// 140: 48 8b 00                      movq    (%rax), %rax
// 143: 84 c0                         testb   %al, %al
// 145: 0f 84 ee 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_HandlePending
// 155: 4c 89 f7                      movq    %r14, %rdi
// 158: ff d0                         callq   *%rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 84 d7 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 162: 48 89 d8                      movq    %rbx, %rax
// 165: 48 29 e8                      subq    %rbp, %rax
// 168: 48 83 c0 b8                   addq    $-0x48, %rax
// 16c: 48 c1 e8 03                   shrq    $0x3, %rax
// 170: 89 45 40                      movl    %eax, 0x40(%rbp)
// 173: 31 c0                         xorl    %eax, %eax
// 175: eb 2b                         jmp     0x1a2 <_JIT_ENTRY+0x1a2>
// 177: 4c 89 fb                      movq    %r15, %rbx
// 17a: 48 29 eb                      subq    %rbp, %rbx
// 17d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 181: 48 c1 eb 03                   shrq    $0x3, %rbx
// 185: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 188: 48 8b 45 00                   movq    (%rbp), %rax
// 18c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018e:  R_X86_64_64  _JIT_TARGET
// 196: 89 c9                         movl    %ecx, %ecx
// 198: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 19c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1a2: 48 83 c4 28                   addq    $0x28, %rsp
// 1a6: 5b                            popq    %rbx
// 1a7: 41 5c                         popq    %r12
// 1a9: 41 5d                         popq    %r13
// 1ab: 41 5e                         popq    %r14
// 1ad: 41 5f                         popq    %r15
// 1af: 5d                            popq    %rbp
// 1b0: c3                            retq
// 1b1: 83 fb 02                      cmpl    $0x2, %ebx
// 1b4: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1ba: 44 0f 43 f3                   cmovael %ebx, %r14d
// 1be: 31 db                         xorl    %ebx, %ebx
// 1c0: eb 1a                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 1d0: 48 ff c3                      incq    %rbx
// 1d3: 49 39 de                      cmpq    %rbx, %r14
// 1d6: 0f 84 e8 fe ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 1dc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 4c 63 e8                      movslq  %eax, %r13
// 24d: 4f 8b 64 ef f0                movq    -0x10(%r15,%r13,8), %r12
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  PyFloat_Type
// 25c: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 261: 0f 85 13 ff ff ff             jne     0x17a <_JIT_ENTRY+0x17a>
// 267: 4f 8b 74 ef f8                movq    -0x8(%r15,%r13,8), %r14
// 26c: 49 39 46 08                   cmpq    %rax, 0x8(%r14)
// 270: 0f 85 04 ff ff ff             jne     0x17a <_JIT_ENTRY+0x17a>
// 276: f2 41 0f 10 44 24 10          movsd   0x10(%r12), %xmm0       # xmm0 = mem[0],zero
// 27d: f2 0f 11 44 24 08             movsd   %xmm0, 0x8(%rsp)
// 283: f2 41 0f 10 46 10             movsd   0x10(%r14), %xmm0       # xmm0 = mem[0],zero
// 289: f2 0f 11 04 24                movsd   %xmm0, (%rsp)
// 28e: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 294: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000296:  R_X86_64_64  PyInterpreterState_Get
// 29e: 75 1e                         jne     0x2be <_JIT_ENTRY+0x2be>
// 2a0: ff d3                         callq   *%rbx
// 2a2: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2a9: 49 ff 0c 24                   decq    (%r12)
// 2ad: 75 0f                         jne     0x2be <_JIT_ENTRY+0x2be>
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _PyFloat_ExactDealloc
// 2b9: 4c 89 e7                      movq    %r12, %rdi
// 2bc: ff d0                         callq   *%rax
// 2be: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 2c2: 49 83 c4 f8                   addq    $-0x8, %r12
// 2c6: 41 f6 46 03 80                testb   $-0x80, 0x3(%r14)
// 2cb: 75 1d                         jne     0x2ea <_JIT_ENTRY+0x2ea>
// 2cd: ff d3                         callq   *%rbx
// 2cf: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2d6: 49 ff 0e                      decq    (%r14)
// 2d9: 75 0f                         jne     0x2ea <_JIT_ENTRY+0x2ea>
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _PyFloat_ExactDealloc
// 2e5: 4c 89 f7                      movq    %r14, %rdi
// 2e8: ff d0                         callq   *%rax
// 2ea: 31 c0                         xorl    %eax, %eax
// 2ec: f2 0f 10 44 24 08             movsd   0x8(%rsp), %xmm0        # xmm0 = mem[0],zero
// 2f2: f2 0f 10 0c 24                movsd   (%rsp), %xmm1           # xmm1 = mem[0],zero
// 2f7: 66 0f 2e c1                   ucomisd %xmm1, %xmm0
// 2fb: 0f 93 c0                      setae   %al
// 2fe: 01 c0                         addl    %eax, %eax
// 300: 31 c9                         xorl    %ecx, %ecx
// 302: 66 0f 2e c8                   ucomisd %xmm0, %xmm1
// 306: 0f 93 c1                      setae   %cl
// 309: 09 c1                         orl     %eax, %ecx
// 30b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030d:  R_X86_64_64  _JIT_OPARG
// 315: 0f b7 c0                      movzwl  %ax, %eax
// 318: 0f a3 c8                      btl     %ecx, %eax
// 31b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000031d:  R_X86_64_64  _Py_FalseStruct
// 325: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000327:  R_X86_64_64  _Py_TrueStruct
// 32f: 48 0f 43 d1                   cmovaeq %rcx, %rdx
// 333: f7 d0                         notl    %eax
// 335: 48 98                         cltq
// 337: 49 89 54 c7 f0                movq    %rdx, -0x10(%r15,%rax,8)
// 33c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033e:  R_X86_64_64  _JIT_CONTINUE
// 346: 48 89 ef                      movq    %rbp, %rdi
// 349: 4c 89 e6                      movq    %r12, %rsi
// 34c: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 351: 48 83 c4 28                   addq    $0x28, %rsp
// 355: 5b                            popq    %rbx
// 356: 41 5c                         popq    %r12
// 358: 41 5d                         popq    %r13
// 35a: 41 5e                         popq    %r14
// 35c: 41 5f                         popq    %r15
// 35e: 5d                            popq    %rbp
// 35f: ff e0                         jmpq    *%rax
// 361: 
static const unsigned char _CALL_BUILTIN_CLASSplus_COMPARE_OP_FLOAT_code_body[866] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd7, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x0d, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xfc, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x6c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x49, 0x8d, 0x1c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xee, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x4c, 0x89, 0xfb, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x1a, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0xe8, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe8, 0x4f, 0x8b, 0x64, 0xef, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x13, 0xff, 0xff, 0xff, 0x4f, 0x8b, 0x74, 0xef, 0xf8, 0x49, 0x39, 0x46, 0x08, 0x0f, 0x85, 0x04, 0xff, 0xff, 0xff, 0xf2, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x08, 0xf2, 0x41, 0x0f, 0x10, 0x46, 0x10, 0xf2, 0x0f, 0x11, 0x04, 0x24, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1e, 0xff, 0xd3, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4f, 0x8d, 0x24, 0xef, 0x49, 0x83, 0xc4, 0xf8, 0x41, 0xf6, 0x46, 0x03, 0x80, 0x75, 0x1d, 0xff, 0xd3, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x31, 0xc0, 0xf2, 0x0f, 0x10, 0x44, 0x24, 0x08, 0xf2, 0x0f, 0x10, 0x0c, 0x24, 0x66, 0x0f, 0x2e, 0xc1, 0x0f, 0x93, 0xc0, 0x01, 0xc0, 0x31, 0xc9, 0x66, 0x0f, 0x2e, 0xc8, 0x0f, 0x93, 0xc1, 0x09, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x0f, 0xa3, 0xc8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xd1, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x89, 0x54, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_COMPARE_OP_FLOAT_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x111, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x31d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x327, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_COMPARE_OP_FLOAT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_COMPARE_OP_FLOAT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_COMPARE_OP_INT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_COMPARE_OP_INT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000010:  R_X86_64_64  _JIT_OPARG
// 18: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1c: 44 89 c8                      movl    %r9d, %eax
// 1f: f7 d0                         notl    %eax
// 21: 4c 63 d8                      movslq  %eax, %r11
// 24: 4a 8b 04 de                   movq    (%rsi,%r11,8), %rax
// 28: 41 ba fe ff ff ff             movl    $0xfffffffe, %r10d      # imm = 0xFFFFFFFE
// 2e: 45 29 ca                      subl    %r9d, %r10d
// 31: 45 8d 79 01                   leal    0x1(%r9), %r15d
// 35: 0f b7 c9                      movzwl  %cx, %ecx
// 38: 49 89 c8                      movq    %rcx, %r8
// 3b: 49 f7 d8                      negq    %r8
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 45 0f 44 f9                   cmovel  %r9d, %r15d
// 45: 49 63 da                      movslq  %r10d, %rbx
// 48: 48 f7 d1                      notq    %rcx
// 4b: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 4f: 4c 8b 24 de                   movq    (%rsi,%rbx,8), %r12
// 53: 4d 8b 44 24 08                movq    0x8(%r12), %r8
// 58: 41 f6 80 ab 00 00 00 80       testb   $-0x80, 0xab(%r8)
// 60: 0f 84 14 01 00 00             je      0x17a <_JIT_ENTRY+0x17a>
// 66: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6e: 4d 85 c0                      testq   %r8, %r8
// 71: 0f 84 03 01 00 00             je      0x17a <_JIT_ENTRY+0x17a>
// 77: 4c 89 5c 24 20                movq    %r11, 0x20(%rsp)
// 7c: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 81: 48 89 3c 24                   movq    %rdi, (%rsp)
// 85: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 8a: 48 8d 2c ce                   leaq    (%rsi,%rcx,8), %rbp
// 8e: 48 85 c0                      testq   %rax, %rax
// 91: 41 0f 94 c6                   sete    %r14b
// 95: 44 89 fa                      movl    %r15d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 41 84 c6                      testb   %al, %r14b
// bb: 0f 84 f2 00 00 00             je      0x1b3 <_JIT_ENTRY+0x1b3>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 48 8b 3c 24                   movq    (%rsp), %rdi
// cc: 7f 26                         jg      0xf4 <_JIT_ENTRY+0xf4>
// ce: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d0:  R_X86_64_64  .rodata.str1.1
// d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000da:  R_X86_64_64  _Py_NegativeRefcount
// e2: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e7: 4c 89 e2                      movq    %r12, %rdx
// ea: ff d0                         callq   *%rax
// ec: 48 8b 3c 24                   movq    (%rsp), %rdi
// f0: 49 8b 04 24                   movq    (%r12), %rax
// f4: 85 c0                         testl   %eax, %eax
// f6: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// fb: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 100: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 105: 78 1a                         js      0x121 <_JIT_ENTRY+0x121>
// 107: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000109:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 111: ff d0                         callq   *%rax
// 113: 48 8b 3c 24                   movq    (%rsp), %rdi
// 117: 49 ff 0c 24                   decq    (%r12)
// 11b: 0f 84 96 02 00 00             je      0x3b7 <_JIT_ENTRY+0x3b7>
// 121: 48 8d 04 dd 00 00 00 00       leaq    (,%rbx,8), %rax
// 129: 4c 01 e8                      addq    %r13, %rax
// 12c: 4d 85 ff                      testq   %r15, %r15
// 12f: 0f 84 a9 02 00 00             je      0x3de <_JIT_ENTRY+0x3de>
// 135: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 13a: 48 8d 1c cd 00 00 00 00       leaq    (,%rcx,8), %rbx
// 142: 4c 01 eb                      addq    %r13, %rbx
// 145: 4c 89 38                      movq    %r15, (%rax)
// 148: 49 8b 46 10                   movq    0x10(%r14), %rax
// 14c: 48 8b 00                      movq    (%rax), %rax
// 14f: 84 c0                         testb   %al, %al
// 151: 0f 84 e2 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 157: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000159:  R_X86_64_64  _Py_HandlePending
// 161: 4c 89 f7                      movq    %r14, %rdi
// 164: ff d0                         callq   *%rax
// 166: 48 8b 3c 24                   movq    (%rsp), %rdi
// 16a: 85 c0                         testl   %eax, %eax
// 16c: 0f 84 c7 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 172: 48 89 d8                      movq    %rbx, %rax
// 175: e9 64 02 00 00                jmp     0x3de <_JIT_ENTRY+0x3de>
// 17a: 48 89 f3                      movq    %rsi, %rbx
// 17d: 48 29 fb                      subq    %rdi, %rbx
// 180: 48 83 c3 b8                   addq    $-0x48, %rbx
// 184: 48 c1 eb 03                   shrq    $0x3, %rbx
// 188: 89 5f 40                      movl    %ebx, 0x40(%rdi)
// 18b: 48 8b 07                      movq    (%rdi), %rax
// 18e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000190:  R_X86_64_64  _JIT_TARGET
// 198: 89 c9                         movl    %ecx, %ecx
// 19a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 19e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1a4: 48 83 c4 28                   addq    $0x28, %rsp
// 1a8: 5b                            popq    %rbx
// 1a9: 41 5c                         popq    %r12
// 1ab: 41 5d                         popq    %r13
// 1ad: 41 5e                         popq    %r14
// 1af: 41 5f                         popq    %r15
// 1b1: 5d                            popq    %rbp
// 1b2: c3                            retq
// 1b3: 41 83 ff 02                   cmpl    $0x2, %r15d
// 1b7: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1bd: 45 0f 43 f7                   cmovael %r15d, %r14d
// 1c1: 45 31 ff                      xorl    %r15d, %r15d
// 1c4: eb 16                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c6: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 1d0: 49 ff c7                      incq    %r15
// 1d3: 4d 39 fe                      cmpq    %r15, %r14
// 1d6: 0f 84 e5 fe ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 1dc: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 4c 63 f8                      movslq  %eax, %r15
// 24d: 4f 8b 74 fd f0                movq    -0x10(%r13,%r15,8), %r14
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  PyLong_Type
// 25c: 49 39 46 08                   cmpq    %rax, 0x8(%r14)
// 260: 0f 85 17 ff ff ff             jne     0x17d <_JIT_ENTRY+0x17d>
// 266: 4f 8b 6c fd f8                movq    -0x8(%r13,%r15,8), %r13
// 26b: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 26f: 0f 85 08 ff ff ff             jne     0x17d <_JIT_ENTRY+0x17d>
// 275: 4d 8b 66 10                   movq    0x10(%r14), %r12
// 279: 49 83 fc 0f                   cmpq    $0xf, %r12
// 27d: 0f 87 fa fe ff ff             ja      0x17d <_JIT_ENTRY+0x17d>
// 283: 49 8b 6d 10                   movq    0x10(%r13), %rbp
// 287: 48 83 fd 0f                   cmpq    $0xf, %rbp
// 28b: 0f 87 ec fe ff ff             ja      0x17d <_JIT_ENTRY+0x17d>
// 291: 41 8b 5e 18                   movl    0x18(%r14), %ebx
// 295: 41 8b 45 18                   movl    0x18(%r13), %eax
// 299: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 29e: 41 f6 46 03 80                testb   $-0x80, 0x3(%r14)
// 2a3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002a5:  R_X86_64_64  PyInterpreterState_Get
// 2ad: 75 43                         jne     0x2f2 <_JIT_ENTRY+0x2f2>
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  PyInterpreterState_Get
// 2b9: ff d0                         callq   *%rax
// 2bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002bd:  R_X86_64_64  PyInterpreterState_Get
// 2c5: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2c9: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2d0: 49 ff 0e                      decq    (%r14)
// 2d3: 75 1d                         jne     0x2f2 <_JIT_ENTRY+0x2f2>
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  PyObject_Free
// 2df: 4c 89 f7                      movq    %r14, %rdi
// 2e2: ff d0                         callq   *%rax
// 2e4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002e6:  R_X86_64_64  PyInterpreterState_Get
// 2ee: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2f2: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2f7: 4e 8d 34 f8                   leaq    (%rax,%r15,8), %r14
// 2fb: 49 83 c6 f8                   addq    $-0x8, %r14
// 2ff: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 304: 75 26                         jne     0x32c <_JIT_ENTRY+0x32c>
// 306: ff d1                         callq   *%rcx
// 308: 48 8b 3c 24                   movq    (%rsp), %rdi
// 30c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 313: 49 ff 4d 00                   decq    (%r13)
// 317: 75 13                         jne     0x32c <_JIT_ENTRY+0x32c>
// 319: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031b:  R_X86_64_64  PyObject_Free
// 323: 4c 89 ef                      movq    %r13, %rdi
// 326: ff d0                         callq   *%rax
// 328: 48 8b 3c 24                   movq    (%rsp), %rdi
// 32c: 41 83 e4 03                   andl    $0x3, %r12d
// 330: b8 01 00 00 00                movl    $0x1, %eax
// 335: b9 01 00 00 00                movl    $0x1, %ecx
// 33a: 4c 29 e1                      subq    %r12, %rcx
// 33d: 48 0f af cb                   imulq   %rbx, %rcx
// 341: 83 e5 03                      andl    $0x3, %ebp
// 344: 48 29 e8                      subq    %rbp, %rax
// 347: 48 0f af 44 24 08             imulq   0x8(%rsp), %rax
// 34d: 31 d2                         xorl    %edx, %edx
// 34f: 31 f6                         xorl    %esi, %esi
// 351: 48 39 c1                      cmpq    %rax, %rcx
// 354: 0f 9d c2                      setge   %dl
// 357: 40 0f 9e c6                   setle   %sil
// 35b: 01 d2                         addl    %edx, %edx
// 35d: 09 d6                         orl     %edx, %esi
// 35f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000361:  R_X86_64_64  _JIT_OPARG
// 369: 0f b7 c0                      movzwl  %ax, %eax
// 36c: 0f a3 f0                      btl     %esi, %eax
// 36f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000371:  R_X86_64_64  _Py_FalseStruct
// 379: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000037b:  R_X86_64_64  _Py_TrueStruct
// 383: 48 0f 43 d1                   cmovaeq %rcx, %rdx
// 387: f7 d0                         notl    %eax
// 389: 48 98                         cltq
// 38b: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 390: 48 89 54 c1 f0                movq    %rdx, -0x10(%rcx,%rax,8)
// 395: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000397:  R_X86_64_64  _JIT_CONTINUE
// 39f: 4c 89 f6                      movq    %r14, %rsi
// 3a2: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 3a7: 48 83 c4 28                   addq    $0x28, %rsp
// 3ab: 5b                            popq    %rbx
// 3ac: 41 5c                         popq    %r12
// 3ae: 41 5d                         popq    %r13
// 3b0: 41 5e                         popq    %r14
// 3b2: 41 5f                         popq    %r15
// 3b4: 5d                            popq    %rbp
// 3b5: ff e0                         jmpq    *%rax
// 3b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b9:  R_X86_64_64  _Py_Dealloc
// 3c1: 4c 89 e7                      movq    %r12, %rdi
// 3c4: ff d0                         callq   *%rax
// 3c6: 48 8b 3c 24                   movq    (%rsp), %rdi
// 3ca: 48 8d 04 dd 00 00 00 00       leaq    (,%rbx,8), %rax
// 3d2: 4c 01 e8                      addq    %r13, %rax
// 3d5: 4d 85 ff                      testq   %r15, %r15
// 3d8: 0f 85 57 fd ff ff             jne     0x135 <_JIT_ENTRY+0x135>
// 3de: 48 29 f8                      subq    %rdi, %rax
// 3e1: 48 83 c0 b8                   addq    $-0x48, %rax
// 3e5: 48 c1 e8 03                   shrq    $0x3, %rax
// 3e9: 89 47 40                      movl    %eax, 0x40(%rdi)
// 3ec: 31 c0                         xorl    %eax, %eax
// 3ee: e9 b1 fd ff ff                jmp     0x1a4 <_JIT_ENTRY+0x1a4>
// 3f3: 
static const unsigned char _CALL_BUILTIN_CLASSplus_COMPARE_OP_INT_code_body[1012] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd8, 0x4a, 0x8b, 0x04, 0xde, 0x41, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x45, 0x29, 0xca, 0x45, 0x8d, 0x79, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf9, 0x49, 0x63, 0xda, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4c, 0x8b, 0x24, 0xde, 0x4d, 0x8b, 0x44, 0x24, 0x08, 0x41, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x14, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x03, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x5c, 0x24, 0x20, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x3c, 0x24, 0x48, 0x89, 0x74, 0x24, 0x10, 0x48, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xf2, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x3c, 0x24, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x1a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x96, 0x02, 0x00, 0x00, 0x48, 0x8d, 0x04, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xe8, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0xa9, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x48, 0x8d, 0x1c, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xeb, 0x4c, 0x89, 0x38, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xe2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x85, 0xc0, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0xe9, 0x64, 0x02, 0x00, 0x00, 0x48, 0x89, 0xf3, 0x48, 0x29, 0xfb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xff, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf7, 0x45, 0x31, 0xff, 0xeb, 0x16, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4d, 0x39, 0xfe, 0x0f, 0x84, 0xe5, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4f, 0x8b, 0x74, 0xfd, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x46, 0x08, 0x0f, 0x85, 0x17, 0xff, 0xff, 0xff, 0x4f, 0x8b, 0x6c, 0xfd, 0xf8, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x08, 0xff, 0xff, 0xff, 0x4d, 0x8b, 0x66, 0x10, 0x49, 0x83, 0xfc, 0x0f, 0x0f, 0x87, 0xfa, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x6d, 0x10, 0x48, 0x83, 0xfd, 0x0f, 0x0f, 0x87, 0xec, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x5e, 0x18, 0x41, 0x8b, 0x45, 0x18, 0x48, 0x89, 0x44, 0x24, 0x08, 0x41, 0xf6, 0x46, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x43, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0e, 0x75, 0x1d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4e, 0x8d, 0x34, 0xf8, 0x49, 0x83, 0xc6, 0xf8, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x26, 0xff, 0xd1, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x41, 0x83, 0xe4, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xe1, 0x48, 0x0f, 0xaf, 0xcb, 0x83, 0xe5, 0x03, 0x48, 0x29, 0xe8, 0x48, 0x0f, 0xaf, 0x44, 0x24, 0x08, 0x31, 0xd2, 0x31, 0xf6, 0x48, 0x39, 0xc1, 0x0f, 0x9d, 0xc2, 0x40, 0x0f, 0x9e, 0xc6, 0x01, 0xd2, 0x09, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x0f, 0xa3, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xd1, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0xc1, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8d, 0x04, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xe8, 0x4d, 0x85, 0xff, 0x0f, 0x85, 0x57, 0xfd, 0xff, 0xff, 0x48, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x47, 0x40, 0x31, 0xc0, 0xe9, 0xb1, 0xfd, 0xff, 0xff};
static const Hole _CALL_BUILTIN_CLASSplus_COMPARE_OP_INT_code_holes[25] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x361, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x371, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x37b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x397, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_COMPARE_OP_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_COMPARE_OP_INT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_COMPARE_OP_STR
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_COMPARE_OP_STR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fd                      movq    %rdi, %rbp
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 0d 01 00 00             je      0x177 <_JIT_ENTRY+0x177>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 fc 00 00 00             je      0x177 <_JIT_ENTRY+0x177>
// 7b: 4c 89 54 24 20                movq    %r10, 0x20(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 14 24                   movq    %rdx, (%rsp)
// 89: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 8e: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 41 0f 94 c6                   sete    %r14b
// 99: 89 da                         movl    %ebx, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c6                      testb   %al, %r14b
// be: 0f 84 ed 00 00 00             je      0x1b1 <_JIT_ENTRY+0x1b1>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// f6: 4c 8b 34 24                   movq    (%rsp), %r14
// fa: 78 21                         js      0x11d <_JIT_ENTRY+0x11d>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 106: ff d0                         callq   *%rax
// 108: 49 ff 0c 24                   decq    (%r12)
// 10c: 75 0f                         jne     0x11d <_JIT_ENTRY+0x11d>
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_Dealloc
// 118: 4c 89 e7                      movq    %r12, %rdi
// 11b: ff d0                         callq   *%rax
// 11d: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 122: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 126: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 12b: 48 85 d2                      testq   %rdx, %rdx
// 12e: 74 35                         je      0x165 <_JIT_ENTRY+0x165>
// 130: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 135: 49 8d 1c cf                   leaq    (%r15,%rcx,8), %rbx
// 139: 48 89 10                      movq    %rdx, (%rax)
// 13c: 49 8b 46 10                   movq    0x10(%r14), %rax
// 140: 48 8b 00                      movq    (%rax), %rax
// 143: 84 c0                         testb   %al, %al
// 145: 0f 84 ee 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_HandlePending
// 155: 4c 89 f7                      movq    %r14, %rdi
// 158: ff d0                         callq   *%rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 84 d7 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 162: 48 89 d8                      movq    %rbx, %rax
// 165: 48 29 e8                      subq    %rbp, %rax
// 168: 48 83 c0 b8                   addq    $-0x48, %rax
// 16c: 48 c1 e8 03                   shrq    $0x3, %rax
// 170: 89 45 40                      movl    %eax, 0x40(%rbp)
// 173: 31 c0                         xorl    %eax, %eax
// 175: eb 2b                         jmp     0x1a2 <_JIT_ENTRY+0x1a2>
// 177: 4c 89 fb                      movq    %r15, %rbx
// 17a: 48 29 eb                      subq    %rbp, %rbx
// 17d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 181: 48 c1 eb 03                   shrq    $0x3, %rbx
// 185: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 188: 48 8b 45 00                   movq    (%rbp), %rax
// 18c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018e:  R_X86_64_64  _JIT_TARGET
// 196: 89 c9                         movl    %ecx, %ecx
// 198: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 19c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1a2: 48 83 c4 28                   addq    $0x28, %rsp
// 1a6: 5b                            popq    %rbx
// 1a7: 41 5c                         popq    %r12
// 1a9: 41 5d                         popq    %r13
// 1ab: 41 5e                         popq    %r14
// 1ad: 41 5f                         popq    %r15
// 1af: 5d                            popq    %rbp
// 1b0: c3                            retq
// 1b1: 83 fb 02                      cmpl    $0x2, %ebx
// 1b4: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1ba: 44 0f 43 f3                   cmovael %ebx, %r14d
// 1be: 31 db                         xorl    %ebx, %ebx
// 1c0: eb 1a                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 1d0: 48 ff c3                      incq    %rbx
// 1d3: 49 39 de                      cmpq    %rbx, %r14
// 1d6: 0f 84 e8 fe ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 1dc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 4c 63 e8                      movslq  %eax, %r13
// 24d: 4f 8b 74 ef f0                movq    -0x10(%r15,%r13,8), %r14
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  PyUnicode_Type
// 25c: 49 39 46 08                   cmpq    %rax, 0x8(%r14)
// 260: 0f 85 14 ff ff ff             jne     0x17a <_JIT_ENTRY+0x17a>
// 266: 4f 8b 64 ef f8                movq    -0x8(%r15,%r13,8), %r12
// 26b: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 270: 0f 85 04 ff ff ff             jne     0x17a <_JIT_ENTRY+0x17a>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _PyUnicode_Equal
// 280: 4c 89 f7                      movq    %r14, %rdi
// 283: 4c 89 e6                      movq    %r12, %rsi
// 286: ff d0                         callq   *%rax
// 288: 89 c5                         movl    %eax, %ebp
// 28a: 41 f6 46 03 80                testb   $-0x80, 0x3(%r14)
// 28f: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000291:  R_X86_64_64  PyInterpreterState_Get
// 299: 75 1d                         jne     0x2b8 <_JIT_ENTRY+0x2b8>
// 29b: ff d3                         callq   *%rbx
// 29d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2a4: 49 ff 0e                      decq    (%r14)
// 2a7: 75 0f                         jne     0x2b8 <_JIT_ENTRY+0x2b8>
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _PyUnicode_ExactDealloc
// 2b3: 4c 89 f7                      movq    %r14, %rdi
// 2b6: ff d0                         callq   *%rax
// 2b8: 4f 8d 34 ef                   leaq    (%r15,%r13,8), %r14
// 2bc: 49 83 c6 f8                   addq    $-0x8, %r14
// 2c0: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 2c6: 75 1e                         jne     0x2e6 <_JIT_ENTRY+0x2e6>
// 2c8: ff d3                         callq   *%rbx
// 2ca: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2d1: 49 ff 0c 24                   decq    (%r12)
// 2d5: 75 0f                         jne     0x2e6 <_JIT_ENTRY+0x2e6>
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  _PyUnicode_ExactDealloc
// 2e1: 4c 89 e7                      movq    %r12, %rdi
// 2e4: ff d0                         callq   *%rax
// 2e6: 83 c5 07                      addl    $0x7, %ebp
// 2e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002eb:  R_X86_64_64  _JIT_OPARG
// 2f3: 0f b7 c0                      movzwl  %ax, %eax
// 2f6: 85 c5                         testl   %eax, %ebp
// 2f8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002fa:  R_X86_64_64  _Py_FalseStruct
// 302: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000304:  R_X86_64_64  _Py_TrueStruct
// 30c: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 310: f7 d0                         notl    %eax
// 312: 48 98                         cltq
// 314: 49 89 54 c7 f0                movq    %rdx, -0x10(%r15,%rax,8)
// 319: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031b:  R_X86_64_64  _JIT_CONTINUE
// 323: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 328: 4c 89 f6                      movq    %r14, %rsi
// 32b: 48 8b 14 24                   movq    (%rsp), %rdx
// 32f: 48 83 c4 28                   addq    $0x28, %rsp
// 333: 5b                            popq    %rbx
// 334: 41 5c                         popq    %r12
// 336: 41 5d                         popq    %r13
// 338: 41 5e                         popq    %r14
// 33a: 41 5f                         popq    %r15
// 33c: 5d                            popq    %rbp
// 33d: ff e0                         jmpq    *%rax
// 33f: 
static const unsigned char _CALL_BUILTIN_CLASSplus_COMPARE_OP_STR_code_body[832] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd7, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x0d, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xfc, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x20, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x49, 0x8d, 0x1c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xee, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x4c, 0x89, 0xfb, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x1a, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0xe8, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe8, 0x4f, 0x8b, 0x74, 0xef, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x46, 0x08, 0x0f, 0x85, 0x14, 0xff, 0xff, 0xff, 0x4f, 0x8b, 0x64, 0xef, 0xf8, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x04, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x41, 0xf6, 0x46, 0x03, 0x80, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1d, 0xff, 0xd3, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x4f, 0x8d, 0x34, 0xef, 0x49, 0x83, 0xc6, 0xf8, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd3, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0xc5, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x85, 0xc5, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x89, 0x54, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_COMPARE_OP_STR_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_Equal, 0x0},
    {0x291, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x304, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_COMPARE_OP_STR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_COMPARE_OP_STR_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CONTAINS_OP
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CONTAINS_OP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 00 01 00 00             je      0x167 <_JIT_ENTRY+0x167>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 ef 00 00 00             je      0x167 <_JIT_ENTRY+0x167>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 82: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 87: 48 89 3c 24                   movq    %rdi, (%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 d4 00 00 00             je      0x194 <_JIT_ENTRY+0x194>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 1c 24                   movq    (%rsp), %rbx
// f1: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// f6: 78 21                         js      0x119 <_JIT_ENTRY+0x119>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 102: ff d0                         callq   *%rax
// 104: 49 ff 0c 24                   decq    (%r12)
// 108: 75 0f                         jne     0x119 <_JIT_ENTRY+0x119>
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: 4c 89 e7                      movq    %r12, %rdi
// 117: ff d0                         callq   *%rax
// 119: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 11e: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 122: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 127: 48 85 c9                      testq   %rcx, %rcx
// 12a: 0f 84 1d 02 00 00             je      0x34d <_JIT_ENTRY+0x34d>
// 130: 48 89 08                      movq    %rcx, (%rax)
// 133: 49 8b 46 10                   movq    0x10(%r14), %rax
// 137: 48 8b 00                      movq    (%rax), %rax
// 13a: 84 c0                         testb   %al, %al
// 13c: 0f 84 d7 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  _Py_HandlePending
// 14c: 4c 89 f7                      movq    %r14, %rdi
// 14f: ff d0                         callq   *%rax
// 151: 85 c0                         testl   %eax, %eax
// 153: 0f 84 c0 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 159: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 15e: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 162: e9 e6 01 00 00                jmp     0x34d <_JIT_ENTRY+0x34d>
// 167: 49 29 ff                      subq    %rdi, %r15
// 16a: 49 83 c7 b8                   addq    $-0x48, %r15
// 16e: 49 c1 ef 03                   shrq    $0x3, %r15
// 172: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 176: 48 8b 07                      movq    (%rdi), %rax
// 179: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017b:  R_X86_64_64  _JIT_TARGET
// 183: 89 c9                         movl    %ecx, %ecx
// 185: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 189: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 18f: e9 c9 01 00 00                jmp     0x35d <_JIT_ENTRY+0x35d>
// 194: 41 83 fd 02                   cmpl    $0x2, %r13d
// 198: 41 be 01 00 00 00             movl    $0x1, %r14d
// 19e: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1a2: 31 db                         xorl    %ebx, %ebx
// 1a4: eb 16                         jmp     0x1bc <_JIT_ENTRY+0x1bc>
// 1a6: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 1b0: 48 ff c3                      incq    %rbx
// 1b3: 49 39 de                      cmpq    %rbx, %r14
// 1b6: 0f 84 04 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1bc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1c1: 49 8b 45 00                   movq    (%r13), %rax
// 1c5: 48 85 c0                      testq   %rax, %rax
// 1c8: 7e 06                         jle     0x1d0 <_JIT_ENTRY+0x1d0>
// 1ca: 85 c0                         testl   %eax, %eax
// 1cc: 78 e2                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1ce: eb 26                         jmp     0x1f6 <_JIT_ENTRY+0x1f6>
// 1d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1
// 1da: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1df: 4c 89 ea                      movq    %r13, %rdx
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_NegativeRefcount
// 1ec: ff d0                         callq   *%rax
// 1ee: 49 8b 45 00                   movq    (%r13), %rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 78 ba                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 200: ff d0                         callq   *%rax
// 202: 49 ff 4d 00                   decq    (%r13)
// 206: 75 a8                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 208: 4c 89 ef                      movq    %r13, %rdi
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_Dealloc
// 215: ff d0                         callq   *%rax
// 217: eb 97                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_OPARG
// 223: f7 d0                         notl    %eax
// 225: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 22a: 48 63 d8                      movslq  %eax, %rbx
// 22d: 4d 8b 74 df f0                movq    -0x10(%r15,%rbx,8), %r14
// 232: 4d 8b 64 df f8                movq    -0x8(%r15,%rbx,8), %r12
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  PySequence_Contains
// 241: 4c 89 e7                      movq    %r12, %rdi
// 244: 4c 89 f6                      movq    %r14, %rsi
// 247: ff d0                         callq   *%rax
// 249: 89 c5                         movl    %eax, %ebp
// 24b: 49 8b 06                      movq    (%r14), %rax
// 24e: 48 85 c0                      testq   %rax, %rax
// 251: 7f 21                         jg      0x274 <_JIT_ENTRY+0x274>
// 253: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000255:  R_X86_64_64  .rodata.str1.1
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _Py_NegativeRefcount
// 267: be a8 07 00 00                movl    $0x7a8, %esi            # imm = 0x7A8
// 26c: 4c 89 f2                      movq    %r14, %rdx
// 26f: ff d0                         callq   *%rax
// 271: 49 8b 06                      movq    (%r14), %rax
// 274: 85 c0                         testl   %eax, %eax
// 276: 78 20                         js      0x298 <_JIT_ENTRY+0x298>
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 282: ff d0                         callq   *%rax
// 284: 49 ff 0e                      decq    (%r14)
// 287: 75 0f                         jne     0x298 <_JIT_ENTRY+0x298>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _Py_Dealloc
// 293: 4c 89 f7                      movq    %r14, %rdi
// 296: ff d0                         callq   *%rax
// 298: 49 8b 04 24                   movq    (%r12), %rax
// 29c: 48 85 c0                      testq   %rax, %rax
// 29f: 7f 22                         jg      0x2c3 <_JIT_ENTRY+0x2c3>
// 2a1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a3:  R_X86_64_64  .rodata.str1.1
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_NegativeRefcount
// 2b5: be a9 07 00 00                movl    $0x7a9, %esi            # imm = 0x7A9
// 2ba: 4c 89 e2                      movq    %r12, %rdx
// 2bd: ff d0                         callq   *%rax
// 2bf: 49 8b 04 24                   movq    (%r12), %rax
// 2c3: 85 c0                         testl   %eax, %eax
// 2c5: 78 21                         js      0x2e8 <_JIT_ENTRY+0x2e8>
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d1: ff d0                         callq   *%rax
// 2d3: 49 ff 0c 24                   decq    (%r12)
// 2d7: 75 0f                         jne     0x2e8 <_JIT_ENTRY+0x2e8>
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  _Py_Dealloc
// 2e3: 4c 89 e7                      movq    %r12, %rdi
// 2e6: ff d0                         callq   *%rax
// 2e8: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 2ec: 48 83 c0 f0                   addq    $-0x10, %rax
// 2f0: 85 ed                         testl   %ebp, %ebp
// 2f2: 78 55                         js      0x349 <_JIT_ENTRY+0x349>
// 2f4: 49 8d 34 df                   leaq    (%r15,%rbx,8), %rsi
// 2f8: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2fc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002fe:  R_X86_64_64  _JIT_OPARG
// 306: 0f b7 c9                      movzwl  %cx, %ecx
// 309: 39 cd                         cmpl    %ecx, %ebp
// 30b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000030d:  R_X86_64_64  _Py_FalseStruct
// 315: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000317:  R_X86_64_64  _Py_TrueStruct
// 31f: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 323: 48 89 10                      movq    %rdx, (%rax)
// 326: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000328:  R_X86_64_64  _JIT_CONTINUE
// 330: 48 8b 3c 24                   movq    (%rsp), %rdi
// 334: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 339: 48 83 c4 28                   addq    $0x28, %rsp
// 33d: 5b                            popq    %rbx
// 33e: 41 5c                         popq    %r12
// 340: 41 5d                         popq    %r13
// 342: 41 5e                         popq    %r14
// 344: 41 5f                         popq    %r15
// 346: 5d                            popq    %rbp
// 347: ff e0                         jmpq    *%rax
// 349: 48 8b 1c 24                   movq    (%rsp), %rbx
// 34d: 48 29 d8                      subq    %rbx, %rax
// 350: 48 83 c0 b8                   addq    $-0x48, %rax
// 354: 48 c1 e8 03                   shrq    $0x3, %rax
// 358: 89 43 40                      movl    %eax, 0x40(%rbx)
// 35b: 31 c0                         xorl    %eax, %eax
// 35d: 48 83 c4 28                   addq    $0x28, %rsp
// 361: 5b                            popq    %rbx
// 362: 41 5c                         popq    %r12
// 364: 41 5d                         popq    %r13
// 366: 41 5e                         popq    %r14
// 368: 41 5f                         popq    %r15
// 36a: 5d                            popq    %rbp
// 36b: c3                            retq
// 36c: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CONTAINS_OP_code_body[877] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x00, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xef, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xd4, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x1d, 0x02, 0x00, 0x00, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xc0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0xe9, 0xe6, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xc9, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x16, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x04, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x74, 0xdf, 0xf0, 0x4d, 0x8b, 0x64, 0xdf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa8, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x83, 0xc0, 0xf0, 0x85, 0xed, 0x78, 0x55, 0x49, 0x8d, 0x34, 0xdf, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0xcd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x48, 0x89, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x1c, 0x24, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_CONTAINS_OP_code_holes[27] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Contains, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2fe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x317, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CONTAINS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CONTAINS_OP_data_holes[1];

// _CALL_BUILTIN_CLASSplus_CONVERT_VALUE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_CONVERT_VALUE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f8 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e7 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 78: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 7d: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 82: 48 89 14 24                   movq    %rdx, (%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 cc 00 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// f2: 48 8b 1c 24                   movq    (%rsp), %rbx
// f6: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// fb: 78 16                         js      0x113 <_JIT_ENTRY+0x113>
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 107: ff d0                         callq   *%rax
// 109: 49 ff 0c 24                   decq    (%r12)
// 10d: 0f 84 a9 01 00 00             je      0x2bc <_JIT_ENTRY+0x2bc>
// 113: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 118: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 11c: 4d 85 f6                      testq   %r14, %r14
// 11f: 0f 84 b8 01 00 00             je      0x2dd <_JIT_ENTRY+0x2dd>
// 125: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 12a: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 12e: 4c 89 30                      movq    %r14, (%rax)
// 131: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 0f 84 c9 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_HandlePending
// 14a: 48 89 df                      movq    %rbx, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 0f 84 b2 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 157: 4c 89 e0                      movq    %r12, %rax
// 15a: e9 7e 01 00 00                jmp     0x2dd <_JIT_ENTRY+0x2dd>
// 15f: 49 29 ff                      subq    %rdi, %r15
// 162: 49 83 c7 b8                   addq    $-0x48, %r15
// 166: 49 c1 ef 03                   shrq    $0x3, %r15
// 16a: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 16e: 48 8b 07                      movq    (%rdi), %rax
// 171: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000173:  R_X86_64_64  _JIT_TARGET
// 17b: 89 c9                         movl    %ecx, %ecx
// 17d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 181: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 187: e9 61 01 00 00                jmp     0x2ed <_JIT_ENTRY+0x2ed>
// 18c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 190: 41 be 01 00 00 00             movl    $0x1, %r14d
// 196: 45 0f 43 f5                   cmovael %r13d, %r14d
// 19a: 31 db                         xorl    %ebx, %ebx
// 19c: eb 0e                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19e: 66 90                         nop
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 de                      cmpq    %rbx, %r14
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: 0f b7 c8                      movzwl  %ax, %ecx
// 216: f7 d0                         notl    %eax
// 218: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21d: 48 63 d8                      movslq  %eax, %rbx
// 220: 4d 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %r13
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  .rodata
// 22f: 4c 89 ef                      movq    %r13, %rdi
// 232: ff 14 c8                      callq   *(%rax,%rcx,8)
// 235: 49 89 c6                      movq    %rax, %r14
// 238: 49 8b 45 00                   movq    (%r13), %rax
// 23c: 48 85 c0                      testq   %rax, %rax
// 23f: 7f 22                         jg      0x263 <_JIT_ENTRY+0x263>
// 241: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000243:  R_X86_64_64  .rodata.str1.1
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_NegativeRefcount
// 255: be 98 0c 00 00                movl    $0xc98, %esi            # imm = 0xC98
// 25a: 4c 89 ea                      movq    %r13, %rdx
// 25d: ff d0                         callq   *%rax
// 25f: 49 8b 45 00                   movq    (%r13), %rax
// 263: 85 c0                         testl   %eax, %eax
// 265: 78 21                         js      0x288 <_JIT_ENTRY+0x288>
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 271: ff d0                         callq   *%rax
// 273: 49 ff 4d 00                   decq    (%r13)
// 277: 75 0f                         jne     0x288 <_JIT_ENTRY+0x288>
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_Dealloc
// 283: 4c 89 ef                      movq    %r13, %rdi
// 286: ff d0                         callq   *%rax
// 288: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 28c: 48 83 c0 f8                   addq    $-0x8, %rax
// 290: 4d 85 f6                      testq   %r14, %r14
// 293: 74 48                         je      0x2dd <_JIT_ENTRY+0x2dd>
// 295: 4c 89 30                      movq    %r14, (%rax)
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _JIT_CONTINUE
// 2a2: 48 89 ef                      movq    %rbp, %rdi
// 2a5: 4c 89 e6                      movq    %r12, %rsi
// 2a8: 48 8b 14 24                   movq    (%rsp), %rdx
// 2ac: 48 83 c4 28                   addq    $0x28, %rsp
// 2b0: 5b                            popq    %rbx
// 2b1: 41 5c                         popq    %r12
// 2b3: 41 5d                         popq    %r13
// 2b5: 41 5e                         popq    %r14
// 2b7: 41 5f                         popq    %r15
// 2b9: 5d                            popq    %rbp
// 2ba: ff e0                         jmpq    *%rax
// 2bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002be:  R_X86_64_64  _Py_Dealloc
// 2c6: 4c 89 e7                      movq    %r12, %rdi
// 2c9: ff d0                         callq   *%rax
// 2cb: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 2d0: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 2d4: 4d 85 f6                      testq   %r14, %r14
// 2d7: 0f 85 48 fe ff ff             jne     0x125 <_JIT_ENTRY+0x125>
// 2dd: 48 29 e8                      subq    %rbp, %rax
// 2e0: 48 83 c0 b8                   addq    $-0x48, %rax
// 2e4: 48 c1 e8 03                   shrq    $0x3, %rax
// 2e8: 89 45 40                      movl    %eax, 0x40(%rbp)
// 2eb: 31 c0                         xorl    %eax, %eax
// 2ed: 48 83 c4 28                   addq    $0x28, %rsp
// 2f1: 5b                            popq    %rbx
// 2f2: 41 5c                         popq    %r12
// 2f4: 41 5d                         popq    %r13
// 2f6: 41 5e                         popq    %r14
// 2f8: 41 5f                         popq    %r15
// 2fa: 5d                            popq    %rbp
// 2fb: c3                            retq
// 2fc: 
static const unsigned char _CALL_BUILTIN_CLASSplus_CONVERT_VALUE_code_body[765] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xa9, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0xb8, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x30, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x7e, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x61, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xdf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0x14, 0xc8, 0x49, 0x89, 0xc6, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x83, 0xc0, 0xf8, 0x4d, 0x85, 0xf6, 0x74, 0x48, 0x4c, 0x89, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xf6, 0x0f, 0x85, 0x48, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_CONVERT_VALUE_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x243, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
// 59: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_CONVERT_VALUE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_CONVERT_VALUE_data_holes[4] = {
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Repr, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_ASCII, 0x0},
};

// _CALL_BUILTIN_CLASSplus_COPY
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_COPY.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 14 24                   movq    %r10, (%rsp)
// 79: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 7e: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 83: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 ea                      movl    %r13d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c8 00 00 00             jle     0x189 <_JIT_ENTRY+0x189>
// c1: 85 c0                         testl   %eax, %eax
// c3: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// c8: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// cd: 0f 89 e6 00 00 00             jns     0x1b9 <_JIT_ENTRY+0x1b9>
// d3: e9 02 01 00 00                jmp     0x1da <_JIT_ENTRY+0x1da>
// d8: 49 29 fe                      subq    %rdi, %r14
// db: 49 83 c6 b8                   addq    $-0x48, %r14
// df: 49 c1 ee 03                   shrq    $0x3, %r14
// e3: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 22 01 00 00                jmp     0x227 <_JIT_ENTRY+0x227>
// 105: 41 83 fd 02                   cmpl    $0x2, %r13d
// 109: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 10f: 45 0f 43 fd                   cmovael %r13d, %r15d
// 113: 31 db                         xorl    %ebx, %ebx
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 48 ff c3                      incq    %rbx
// 123: 49 39 df                      cmpq    %rbx, %r15
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 12d: 49 8b 45 00                   movq    (%r13), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 0a                         jle     0x140 <_JIT_ENTRY+0x140>
// 136: 85 c0                         testl   %eax, %eax
// 138: 78 e6                         js      0x120 <_JIT_ENTRY+0x120>
// 13a: eb 2a                         jmp     0x166 <_JIT_ENTRY+0x166>
// 13c: 0f 1f 40 00                   nopl    (%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 ea                      movq    %r13, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 78 ba                         js      0x120 <_JIT_ENTRY+0x120>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 4d 00                   decq    (%r13)
// 176: 75 a8                         jne     0x120 <_JIT_ENTRY+0x120>
// 178: 4c 89 ef                      movq    %r13, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: eb 97                         jmp     0x120 <_JIT_ENTRY+0x120>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 1b2: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b7: 78 21                         js      0x1da <_JIT_ENTRY+0x1da>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c3: ff d0                         callq   *%rax
// 1c5: 49 ff 0c 24                   decq    (%r12)
// 1c9: 75 0f                         jne     0x1da <_JIT_ENTRY+0x1da>
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _Py_Dealloc
// 1d5: 4c 89 e7                      movq    %r12, %rdi
// 1d8: ff d0                         callq   *%rax
// 1da: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 1de: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1e3: 48 85 c9                      testq   %rcx, %rcx
// 1e6: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 1eb: 74 29                         je      0x216 <_JIT_ENTRY+0x216>
// 1ed: 48 89 08                      movq    %rcx, (%rax)
// 1f0: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1f4: 48 8b 00                      movq    (%rax), %rax
// 1f7: 84 c0                         testb   %al, %al
// 1f9: 74 3b                         je      0x236 <_JIT_ENTRY+0x236>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_HandlePending
// 205: 4c 89 ef                      movq    %r13, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 85 c0                         testl   %eax, %eax
// 20c: 74 28                         je      0x236 <_JIT_ENTRY+0x236>
// 20e: 48 8b 04 24                   movq    (%rsp), %rax
// 212: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 216: 4c 29 f8                      subq    %r15, %rax
// 219: 48 83 c0 b8                   addq    $-0x48, %rax
// 21d: 48 c1 e8 03                   shrq    $0x3, %rax
// 221: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 225: 31 c0                         xorl    %eax, %eax
// 227: 48 83 c4 28                   addq    $0x28, %rsp
// 22b: 5b                            popq    %rbx
// 22c: 41 5c                         popq    %r12
// 22e: 41 5d                         popq    %r13
// 230: 41 5e                         popq    %r14
// 232: 41 5f                         popq    %r15
// 234: 5d                            popq    %rbp
// 235: c3                            retq
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _JIT_OPARG
// 240: 0f b7 c8                      movzwl  %ax, %ecx
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 48 98                         cltq
// 24c: 48 29 c8                      subq    %rcx, %rax
// 24f: 49 8b 1c c6                   movq    (%r14,%rax,8), %rbx
// 253: 8b 03                         movl    (%rbx), %eax
// 255: ff c0                         incl    %eax
// 257: 74 0e                         je      0x267 <_JIT_ENTRY+0x267>
// 259: 89 03                         movl    %eax, (%rbx)
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 265: ff d0                         callq   *%rax
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _JIT_OPARG
// 271: f7 d0                         notl    %eax
// 273: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 278: 48 98                         cltq
// 27a: 49 89 1c c6                   movq    %rbx, (%r14,%rax,8)
// 27e: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 282: 48 83 c6 08                   addq    $0x8, %rsi
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _JIT_CONTINUE
// 290: 4c 89 ff                      movq    %r15, %rdi
// 293: 4c 89 ea                      movq    %r13, %rdx
// 296: 48 83 c4 28                   addq    $0x28, %rsp
// 29a: 5b                            popq    %rbx
// 29b: 41 5c                         popq    %r12
// 29d: 41 5d                         popq    %r13
// 29f: 41 5e                         popq    %r14
// 2a1: 41 5f                         popq    %r15
// 2a3: 5d                            popq    %rbp
// 2a4: ff e0                         jmpq    *%rax
// 2a6: 
static const unsigned char _CALL_BUILTIN_CLASSplus_COPY_code_body[679] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc8, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x89, 0xe6, 0x00, 0x00, 0x00, 0xe9, 0x02, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x22, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x74, 0x8c, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x85, 0xc0, 0x78, 0xe6, 0xeb, 0x2a, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x74, 0x29, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x28, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xc8, 0x49, 0x8b, 0x1c, 0xc6, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x1c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_COPY_code_holes[17] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_COPY_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_COPY_data_holes[1];

// _CALL_BUILTIN_CLASSplus_COPY_FREE_VARS
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_COPY_FREE_VARS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 0c 24                   movq    %r9, (%rsp)
// 74: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 79: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 7e: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 83: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 ea                      movl    %r13d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c8 00 00 00             jle     0x189 <_JIT_ENTRY+0x189>
// c1: 85 c0                         testl   %eax, %eax
// c3: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// c8: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// cd: 0f 89 e6 00 00 00             jns     0x1b9 <_JIT_ENTRY+0x1b9>
// d3: e9 02 01 00 00                jmp     0x1da <_JIT_ENTRY+0x1da>
// d8: 49 29 ff                      subq    %rdi, %r15
// db: 49 83 c7 b8                   addq    $-0x48, %r15
// df: 49 c1 ef 03                   shrq    $0x3, %r15
// e3: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 24 01 00 00                jmp     0x229 <_JIT_ENTRY+0x229>
// 105: 41 83 fd 02                   cmpl    $0x2, %r13d
// 109: 41 be 01 00 00 00             movl    $0x1, %r14d
// 10f: 45 0f 43 f5                   cmovael %r13d, %r14d
// 113: 31 db                         xorl    %ebx, %ebx
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 48 ff c3                      incq    %rbx
// 123: 49 39 de                      cmpq    %rbx, %r14
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 12d: 49 8b 45 00                   movq    (%r13), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 0a                         jle     0x140 <_JIT_ENTRY+0x140>
// 136: 85 c0                         testl   %eax, %eax
// 138: 78 e6                         js      0x120 <_JIT_ENTRY+0x120>
// 13a: eb 2a                         jmp     0x166 <_JIT_ENTRY+0x166>
// 13c: 0f 1f 40 00                   nopl    (%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 ea                      movq    %r13, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 78 ba                         js      0x120 <_JIT_ENTRY+0x120>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 4d 00                   decq    (%r13)
// 176: 75 a8                         jne     0x120 <_JIT_ENTRY+0x120>
// 178: 4c 89 ef                      movq    %r13, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: eb 97                         jmp     0x120 <_JIT_ENTRY+0x120>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 1b2: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b7: 78 21                         js      0x1da <_JIT_ENTRY+0x1da>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c3: ff d0                         callq   *%rax
// 1c5: 49 ff 0c 24                   decq    (%r12)
// 1c9: 75 0f                         jne     0x1da <_JIT_ENTRY+0x1da>
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _Py_Dealloc
// 1d5: 4c 89 e7                      movq    %r12, %rdi
// 1d8: ff d0                         callq   *%rax
// 1da: 48 8b 04 24                   movq    (%rsp), %rax
// 1de: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 1e2: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 1e7: 48 85 d2                      testq   %rdx, %rdx
// 1ea: 74 2d                         je      0x219 <_JIT_ENTRY+0x219>
// 1ec: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 1f1: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 1f5: 48 89 10                      movq    %rdx, (%rax)
// 1f8: 49 8b 46 10                   movq    0x10(%r14), %rax
// 1fc: 48 8b 00                      movq    (%rax), %rax
// 1ff: 84 c0                         testb   %al, %al
// 201: 74 35                         je      0x238 <_JIT_ENTRY+0x238>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _Py_HandlePending
// 20d: 4c 89 f7                      movq    %r14, %rdi
// 210: ff d0                         callq   *%rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 74 22                         je      0x238 <_JIT_ENTRY+0x238>
// 216: 4c 89 f8                      movq    %r15, %rax
// 219: 48 29 d8                      subq    %rbx, %rax
// 21c: 48 83 c0 b8                   addq    $-0x48, %rax
// 220: 48 c1 e8 03                   shrq    $0x3, %rax
// 224: 89 43 40                      movl    %eax, 0x40(%rbx)
// 227: 31 c0                         xorl    %eax, %eax
// 229: 48 83 c4 28                   addq    $0x28, %rsp
// 22d: 5b                            popq    %rbx
// 22e: 41 5c                         popq    %r12
// 230: 41 5d                         popq    %r13
// 232: 41 5e                         popq    %r14
// 234: 41 5f                         popq    %r15
// 236: 5d                            popq    %rbp
// 237: c3                            retq
// 238: 4c 89 3c 24                   movq    %r15, (%rsp)
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _JIT_OPARG
// 246: 66 85 c0                      testw   %ax, %ax
// 249: 74 74                         je      0x2bf <_JIT_ENTRY+0x2bf>
// 24b: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 250: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 254: 48 8b 58 48                   movq    0x48(%rax), %rbx
// 258: 48 8b 02                      movq    (%rdx), %rax
// 25b: 8b 40 48                      movl    0x48(%rax), %eax
// 25e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000260:  R_X86_64_64  _JIT_OPARG
// 268: 0f b7 c9                      movzwl  %cx, %ecx
// 26b: 29 c8                         subl    %ecx, %eax
// 26d: 83 f9 02                      cmpl    $0x2, %ecx
// 270: 41 be 01 00 00 00             movl    $0x1, %r14d
// 276: 44 0f 43 f1                   cmovael %ecx, %r14d
// 27a: 48 98                         cltq
// 27c: 4c 8d 24 c2                   leaq    (%rdx,%rax,8), %r12
// 280: 49 83 c4 48                   addq    $0x48, %r12
// 284: 45 31 ed                      xorl    %r13d, %r13d
// 287: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000289:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 291: eb 19                         jmp     0x2ac <_JIT_ENTRY+0x2ac>
// 293: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 2a0: 4f 89 3c ec                   movq    %r15, (%r12,%r13,8)
// 2a4: 49 ff c5                      incq    %r13
// 2a7: 4d 39 ee                      cmpq    %r13, %r14
// 2aa: 74 13                         je      0x2bf <_JIT_ENTRY+0x2bf>
// 2ac: 4e 8b 7c eb 18                movq    0x18(%rbx,%r13,8), %r15
// 2b1: 41 8b 07                      movl    (%r15), %eax
// 2b4: ff c0                         incl    %eax
// 2b6: 74 e8                         je      0x2a0 <_JIT_ENTRY+0x2a0>
// 2b8: 41 89 07                      movl    %eax, (%r15)
// 2bb: ff d5                         callq   *%rbp
// 2bd: eb e1                         jmp     0x2a0 <_JIT_ENTRY+0x2a0>
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _JIT_CONTINUE
// 2c9: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2ce: 48 8b 34 24                   movq    (%rsp), %rsi
// 2d2: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2d7: 48 83 c4 28                   addq    $0x28, %rsp
// 2db: 5b                            popq    %rbx
// 2dc: 41 5c                         popq    %r12
// 2de: 41 5d                         popq    %r13
// 2e0: 41 5e                         popq    %r14
// 2e2: 41 5f                         popq    %r15
// 2e4: 5d                            popq    %rbp
// 2e5: ff e0                         jmpq    *%rax
// 2e7: 
static const unsigned char _CALL_BUILTIN_CLASSplus_COPY_FREE_VARS_code_body[744] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x0c, 0x24, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc8, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x0f, 0x89, 0xe6, 0x00, 0x00, 0x00, 0xe9, 0x02, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x24, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x74, 0x8c, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x85, 0xc0, 0x78, 0xe6, 0xeb, 0x2a, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x2d, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x4d, 0x8d, 0x3c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x22, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x3c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x74, 0x74, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x58, 0x48, 0x48, 0x8b, 0x02, 0x8b, 0x40, 0x48, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x83, 0xf9, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf1, 0x48, 0x98, 0x4c, 0x8d, 0x24, 0xc2, 0x49, 0x83, 0xc4, 0x48, 0x45, 0x31, 0xed, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x89, 0x3c, 0xec, 0x49, 0xff, 0xc5, 0x4d, 0x39, 0xee, 0x74, 0x13, 0x4e, 0x8b, 0x7c, 0xeb, 0x18, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0xe8, 0x41, 0x89, 0x07, 0xff, 0xd5, 0xeb, 0xe1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_COPY_FREE_VARS_code_holes[17] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_COPY_FREE_VARS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_COPY_FREE_VARS_data_holes[1];

// _CALL_BUILTIN_CLASSplus_DELETE_ATTR
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_DELETE_ATTR.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f8 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e7 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 82: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 87: 48 89 3c 24                   movq    %rdi, (%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 cc 00 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 4c 8b 2c 24                   movq    (%rsp), %r13
// f1: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// f6: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// fb: 78 16                         js      0x113 <_JIT_ENTRY+0x113>
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 107: ff d0                         callq   *%rax
// 109: 49 ff 0c 24                   decq    (%r12)
// 10d: 0f 84 9a 01 00 00             je      0x2ad <_JIT_ENTRY+0x2ad>
// 113: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 118: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 11c: 4d 85 f6                      testq   %r14, %r14
// 11f: 0f 84 a9 01 00 00             je      0x2ce <_JIT_ENTRY+0x2ce>
// 125: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 12a: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 12e: 4c 89 30                      movq    %r14, (%rax)
// 131: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 0f 84 c9 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_HandlePending
// 14a: 48 89 df                      movq    %rbx, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 0f 84 b2 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 157: 4c 89 e0                      movq    %r12, %rax
// 15a: e9 6f 01 00 00                jmp     0x2ce <_JIT_ENTRY+0x2ce>
// 15f: 49 29 ff                      subq    %rdi, %r15
// 162: 49 83 c7 b8                   addq    $-0x48, %r15
// 166: 49 c1 ef 03                   shrq    $0x3, %r15
// 16a: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 16e: 48 8b 07                      movq    (%rdi), %rax
// 171: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000173:  R_X86_64_64  _JIT_TARGET
// 17b: 89 c9                         movl    %ecx, %ecx
// 17d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 181: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 187: e9 53 01 00 00                jmp     0x2df <_JIT_ENTRY+0x2df>
// 18c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 190: 41 be 01 00 00 00             movl    $0x1, %r14d
// 196: 45 0f 43 f5                   cmovael %r13d, %r14d
// 19a: 31 db                         xorl    %ebx, %ebx
// 19c: eb 0e                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19e: 66 90                         nop
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 de                      cmpq    %rbx, %r14
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: 0f b7 c8                      movzwl  %ax, %ecx
// 216: f7 d0                         notl    %eax
// 218: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21d: 48 63 d8                      movslq  %eax, %rbx
// 220: 4d 8b 74 df f8                movq    -0x8(%r15,%rbx,8), %r14
// 225: 49 8b 45 00                   movq    (%r13), %rax
// 229: 48 8b 40 20                   movq    0x20(%rax), %rax
// 22d: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  PyObject_DelAttr
// 23c: 4c 89 f7                      movq    %r14, %rdi
// 23f: ff d0                         callq   *%rax
// 241: 89 c5                         movl    %eax, %ebp
// 243: 49 8b 06                      movq    (%r14), %rax
// 246: 48 85 c0                      testq   %rax, %rax
// 249: 7f 21                         jg      0x26c <_JIT_ENTRY+0x26c>
// 24b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024d:  R_X86_64_64  .rodata.str1.1
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _Py_NegativeRefcount
// 25f: be d2 03 00 00                movl    $0x3d2, %esi            # imm = 0x3D2
// 264: 4c 89 f2                      movq    %r14, %rdx
// 267: ff d0                         callq   *%rax
// 269: 49 8b 06                      movq    (%r14), %rax
// 26c: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 270: 48 83 c3 f8                   addq    $-0x8, %rbx
// 274: 85 c0                         testl   %eax, %eax
// 276: 78 20                         js      0x298 <_JIT_ENTRY+0x298>
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 282: ff d0                         callq   *%rax
// 284: 49 ff 0e                      decq    (%r14)
// 287: 75 0f                         jne     0x298 <_JIT_ENTRY+0x298>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _Py_Dealloc
// 293: 4c 89 f7                      movq    %r14, %rdi
// 296: ff d0                         callq   *%rax
// 298: 85 ed                         testl   %ebp, %ebp
// 29a: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 29e: 74 4e                         je      0x2ee <_JIT_ENTRY+0x2ee>
// 2a0: 49 83 c4 f8                   addq    $-0x8, %r12
// 2a4: 4c 89 e0                      movq    %r12, %rax
// 2a7: 4c 8b 2c 24                   movq    (%rsp), %r13
// 2ab: eb 21                         jmp     0x2ce <_JIT_ENTRY+0x2ce>
// 2ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002af:  R_X86_64_64  _Py_Dealloc
// 2b7: 4c 89 e7                      movq    %r12, %rdi
// 2ba: ff d0                         callq   *%rax
// 2bc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 2c1: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 2c5: 4d 85 f6                      testq   %r14, %r14
// 2c8: 0f 85 57 fe ff ff             jne     0x125 <_JIT_ENTRY+0x125>
// 2ce: 4c 29 e8                      subq    %r13, %rax
// 2d1: 48 83 c0 b8                   addq    $-0x48, %rax
// 2d5: 48 c1 e8 03                   shrq    $0x3, %rax
// 2d9: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 2dd: 31 c0                         xorl    %eax, %eax
// 2df: 48 83 c4 28                   addq    $0x28, %rsp
// 2e3: 5b                            popq    %rbx
// 2e4: 41 5c                         popq    %r12
// 2e6: 41 5d                         popq    %r13
// 2e8: 41 5e                         popq    %r14
// 2ea: 41 5f                         popq    %r15
// 2ec: 5d                            popq    %rbp
// 2ed: c3                            retq
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _JIT_CONTINUE
// 2f8: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2fc: 4c 89 e6                      movq    %r12, %rsi
// 2ff: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 304: 48 83 c4 28                   addq    $0x28, %rsp
// 308: 5b                            popq    %rbx
// 309: 41 5c                         popq    %r12
// 30b: 41 5d                         popq    %r13
// 30d: 41 5e                         popq    %r14
// 30f: 41 5f                         popq    %r15
// 311: 5d                            popq    %rbp
// 312: ff e0                         jmpq    *%rax
// 314: 
static const unsigned char _CALL_BUILTIN_CLASSplus_DELETE_ATTR_code_body[789] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x2c, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x9a, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0xa9, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x30, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x6f, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x53, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x74, 0xdf, 0xf8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd2, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x49, 0x8d, 0x1c, 0xdf, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe3, 0x74, 0x4e, 0x49, 0x83, 0xc4, 0xf8, 0x4c, 0x89, 0xe0, 0x4c, 0x8b, 0x2c, 0x24, 0xeb, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xf6, 0x0f, 0x85, 0x57, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_DELETE_ATTR_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelAttr, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_DELETE_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_DELETE_ATTR_data_holes[1];

// _CALL_BUILTIN_CLASSplus_DELETE_DEREF
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_DELETE_DEREF.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 84 01 00 00             je      0x1eb <_JIT_ENTRY+0x1eb>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 73 01 00 00             je      0x1eb <_JIT_ENTRY+0x1eb>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 41 0f 94 c6                   sete    %r14b
// 96: 89 da                         movl    %ebx, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 41 84 c6                      testb   %al, %r14b
// bb: 0f 84 57 01 00 00             je      0x218 <_JIT_ENTRY+0x218>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e3: 4c 89 e2                      movq    %r12, %rdx
// e6: ff d0                         callq   *%rax
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 85 c0                         testl   %eax, %eax
// ee: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f3: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// f8: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 0c 24                   decq    (%r12)
// 10f: 0f 84 84 01 00 00             je      0x299 <_JIT_ENTRY+0x299>
// 115: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 119: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 11e: 48 85 d2                      testq   %rdx, %rdx
// 121: 0f 84 93 01 00 00             je      0x2ba <_JIT_ENTRY+0x2ba>
// 127: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12b: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 12f: 48 89 10                      movq    %rdx, (%rax)
// 132: 49 8b 45 10                   movq    0x10(%r13), %rax
// 136: 48 8b 00                      movq    (%rax), %rax
// 139: 84 c0                         testb   %al, %al
// 13b: 74 17                         je      0x154 <_JIT_ENTRY+0x154>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_HandlePending
// 147: 4c 89 ef                      movq    %r13, %rdi
// 14a: ff d0                         callq   *%rax
// 14c: 85 c0                         testl   %eax, %eax
// 14e: 0f 85 8a 01 00 00             jne     0x2de <_JIT_ENTRY+0x2de>
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _JIT_OPARG
// 15e: 0f b7 c0                      movzwl  %ax, %eax
// 161: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 166: 4c 8b 70 10                   movq    0x10(%rax), %r14
// 16a: 4d 85 f6                      testq   %r14, %r14
// 16d: 0f 84 4c 01 00 00             je      0x2bf <_JIT_ENTRY+0x2bf>
// 173: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 17b: 49 8b 06                      movq    (%r14), %rax
// 17e: 48 85 c0                      testq   %rax, %rax
// 181: 7f 21                         jg      0x1a4 <_JIT_ENTRY+0x1a4>
// 183: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000185:  R_X86_64_64  .rodata.str1.1
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_NegativeRefcount
// 197: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 19c: 4c 89 f2                      movq    %r14, %rdx
// 19f: ff d0                         callq   *%rax
// 1a1: 49 8b 06                      movq    (%r14), %rax
// 1a4: 85 c0                         testl   %eax, %eax
// 1a6: 78 20                         js      0x1c8 <_JIT_ENTRY+0x1c8>
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b2: ff d0                         callq   *%rax
// 1b4: 49 ff 0e                      decq    (%r14)
// 1b7: 75 0f                         jne     0x1c8 <_JIT_ENTRY+0x1c8>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_Dealloc
// 1c3: 4c 89 f7                      movq    %r14, %rdi
// 1c6: ff d0                         callq   *%rax
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _JIT_CONTINUE
// 1d2: 48 89 df                      movq    %rbx, %rdi
// 1d5: 4c 89 fe                      movq    %r15, %rsi
// 1d8: 4c 89 ea                      movq    %r13, %rdx
// 1db: 48 83 c4 28                   addq    $0x28, %rsp
// 1df: 5b                            popq    %rbx
// 1e0: 41 5c                         popq    %r12
// 1e2: 41 5d                         popq    %r13
// 1e4: 41 5e                         popq    %r14
// 1e6: 41 5f                         popq    %r15
// 1e8: 5d                            popq    %rbp
// 1e9: ff e0                         jmpq    *%rax
// 1eb: 49 29 ff                      subq    %rdi, %r15
// 1ee: 49 83 c7 b8                   addq    $-0x48, %r15
// 1f2: 49 c1 ef 03                   shrq    $0x3, %r15
// 1f6: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 1fa: 48 8b 07                      movq    (%rdi), %rax
// 1fd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ff:  R_X86_64_64  _JIT_TARGET
// 207: 89 c9                         movl    %ecx, %ecx
// 209: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 20d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 213: e9 d7 00 00 00                jmp     0x2ef <_JIT_ENTRY+0x2ef>
// 218: 83 fb 02                      cmpl    $0x2, %ebx
// 21b: 41 be 01 00 00 00             movl    $0x1, %r14d
// 221: 44 0f 43 f3                   cmovael %ebx, %r14d
// 225: 31 db                         xorl    %ebx, %ebx
// 227: eb 13                         jmp     0x23c <_JIT_ENTRY+0x23c>
// 229: 0f 1f 80 00 00 00 00          nopl    (%rax)
// 230: 48 ff c3                      incq    %rbx
// 233: 49 39 de                      cmpq    %rbx, %r14
// 236: 0f 84 85 fe ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 23c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 241: 49 8b 45 00                   movq    (%r13), %rax
// 245: 48 85 c0                      testq   %rax, %rax
// 248: 7e 06                         jle     0x250 <_JIT_ENTRY+0x250>
// 24a: 85 c0                         testl   %eax, %eax
// 24c: 78 e2                         js      0x230 <_JIT_ENTRY+0x230>
// 24e: eb 26                         jmp     0x276 <_JIT_ENTRY+0x276>
// 250: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000252:  R_X86_64_64  .rodata.str1.1
// 25a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 25f: 4c 89 ea                      movq    %r13, %rdx
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_NegativeRefcount
// 26c: ff d0                         callq   *%rax
// 26e: 49 8b 45 00                   movq    (%r13), %rax
// 272: 85 c0                         testl   %eax, %eax
// 274: 78 ba                         js      0x230 <_JIT_ENTRY+0x230>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 280: ff d0                         callq   *%rax
// 282: 49 ff 4d 00                   decq    (%r13)
// 286: 75 a8                         jne     0x230 <_JIT_ENTRY+0x230>
// 288: 4c 89 ef                      movq    %r13, %rdi
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_Dealloc
// 295: ff d0                         callq   *%rax
// 297: eb 97                         jmp     0x230 <_JIT_ENTRY+0x230>
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _Py_Dealloc
// 2a3: 4c 89 e7                      movq    %r12, %rdi
// 2a6: ff d0                         callq   *%rax
// 2a8: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 2ac: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2b1: 48 85 d2                      testq   %rdx, %rdx
// 2b4: 0f 85 6d fe ff ff             jne     0x127 <_JIT_ENTRY+0x127>
// 2ba: 49 89 c7                      movq    %rax, %r15
// 2bd: eb 1f                         jmp     0x2de <_JIT_ENTRY+0x2de>
// 2bf: 48 8b 33                      movq    (%rbx), %rsi
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _JIT_OPARG
// 2cc: 0f b7 d0                      movzwl  %ax, %edx
// 2cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d1:  R_X86_64_64  _PyEval_FormatExcUnbound
// 2d9: 4c 89 ef                      movq    %r13, %rdi
// 2dc: ff d0                         callq   *%rax
// 2de: 49 29 df                      subq    %rbx, %r15
// 2e1: 49 83 c7 b8                   addq    $-0x48, %r15
// 2e5: 49 c1 ef 03                   shrq    $0x3, %r15
// 2e9: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2ed: 31 c0                         xorl    %eax, %eax
// 2ef: 48 83 c4 28                   addq    $0x28, %rsp
// 2f3: 5b                            popq    %rbx
// 2f4: 41 5c                         popq    %r12
// 2f6: 41 5d                         popq    %r13
// 2f8: 41 5e                         popq    %r14
// 2fa: 41 5f                         popq    %r15
// 2fc: 5d                            popq    %rbp
// 2fd: c3                            retq
// 2fe: 
static const unsigned char _CALL_BUILTIN_CLASSplus_DELETE_DEREF_code_body[767] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x84, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x73, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0x57, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x84, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x93, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x8a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x4c, 0x8b, 0x70, 0x10, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x4c, 0x01, 0x00, 0x00, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xd7, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x13, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x85, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x85, 0x6d, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xc7, 0xeb, 0x1f, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_DELETE_DEREF_code_holes[21] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_DELETE_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_DELETE_DEREF_data_holes[1];

// _CALL_BUILTIN_CLASSplus_DELETE_FAST
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_DELETE_FAST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 8e 01 00 00             je      0x1f5 <_JIT_ENTRY+0x1f5>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 7d 01 00 00             je      0x1f5 <_JIT_ENTRY+0x1f5>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 41 0f 94 c6                   sete    %r14b
// 96: 89 da                         movl    %ebx, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 41 84 c6                      testb   %al, %r14b
// bb: 0f 84 61 01 00 00             je      0x222 <_JIT_ENTRY+0x222>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e3: 4c 89 e2                      movq    %r12, %rdx
// e6: ff d0                         callq   *%rax
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 85 c0                         testl   %eax, %eax
// ee: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f3: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// f8: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 0c 24                   decq    (%r12)
// 10f: 0f 84 94 01 00 00             je      0x2a9 <_JIT_ENTRY+0x2a9>
// 115: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 119: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 11e: 48 85 d2                      testq   %rdx, %rdx
// 121: 0f 84 a3 01 00 00             je      0x2ca <_JIT_ENTRY+0x2ca>
// 127: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12b: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 12f: 48 89 10                      movq    %rdx, (%rax)
// 132: 49 8b 45 10                   movq    0x10(%r13), %rax
// 136: 48 8b 00                      movq    (%rax), %rax
// 139: 84 c0                         testb   %al, %al
// 13b: 74 17                         je      0x154 <_JIT_ENTRY+0x154>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_HandlePending
// 147: 4c 89 ef                      movq    %r13, %rdi
// 14a: ff d0                         callq   *%rax
// 14c: 85 c0                         testl   %eax, %eax
// 14e: 0f 85 c8 01 00 00             jne     0x31c <_JIT_ENTRY+0x31c>
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _JIT_OPARG
// 15e: 0f b7 c0                      movzwl  %ax, %eax
// 161: 4c 8b 74 c3 48                movq    0x48(%rbx,%rax,8), %r14
// 166: 4d 85 f6                      testq   %r14, %r14
// 169: 0f 84 60 01 00 00             je      0x2cf <_JIT_ENTRY+0x2cf>
// 16f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000171:  R_X86_64_64  _JIT_OPARG
// 179: 0f b7 c0                      movzwl  %ax, %eax
// 17c: 48 c7 44 c3 48 00 00 00 00    movq    $0x0, 0x48(%rbx,%rax,8)
// 185: 49 8b 06                      movq    (%r14), %rax
// 188: 48 85 c0                      testq   %rax, %rax
// 18b: 7f 21                         jg      0x1ae <_JIT_ENTRY+0x1ae>
// 18d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018f:  R_X86_64_64  .rodata.str1.1+0x83
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _Py_NegativeRefcount
// 1a1: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 1a6: 4c 89 f2                      movq    %r14, %rdx
// 1a9: ff d0                         callq   *%rax
// 1ab: 49 8b 06                      movq    (%r14), %rax
// 1ae: 85 c0                         testl   %eax, %eax
// 1b0: 78 20                         js      0x1d2 <_JIT_ENTRY+0x1d2>
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1bc: ff d0                         callq   *%rax
// 1be: 49 ff 0e                      decq    (%r14)
// 1c1: 75 0f                         jne     0x1d2 <_JIT_ENTRY+0x1d2>
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_Dealloc
// 1cd: 4c 89 f7                      movq    %r14, %rdi
// 1d0: ff d0                         callq   *%rax
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _JIT_CONTINUE
// 1dc: 48 89 df                      movq    %rbx, %rdi
// 1df: 4c 89 fe                      movq    %r15, %rsi
// 1e2: 4c 89 ea                      movq    %r13, %rdx
// 1e5: 48 83 c4 28                   addq    $0x28, %rsp
// 1e9: 5b                            popq    %rbx
// 1ea: 41 5c                         popq    %r12
// 1ec: 41 5d                         popq    %r13
// 1ee: 41 5e                         popq    %r14
// 1f0: 41 5f                         popq    %r15
// 1f2: 5d                            popq    %rbp
// 1f3: ff e0                         jmpq    *%rax
// 1f5: 49 29 ff                      subq    %rdi, %r15
// 1f8: 49 83 c7 b8                   addq    $-0x48, %r15
// 1fc: 49 c1 ef 03                   shrq    $0x3, %r15
// 200: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 204: 48 8b 07                      movq    (%rdi), %rax
// 207: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000209:  R_X86_64_64  _JIT_TARGET
// 211: 89 c9                         movl    %ecx, %ecx
// 213: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 217: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 21d: e9 0b 01 00 00                jmp     0x32d <_JIT_ENTRY+0x32d>
// 222: 83 fb 02                      cmpl    $0x2, %ebx
// 225: 41 be 01 00 00 00             movl    $0x1, %r14d
// 22b: 44 0f 43 f3                   cmovael %ebx, %r14d
// 22f: 31 db                         xorl    %ebx, %ebx
// 231: eb 19                         jmp     0x24c <_JIT_ENTRY+0x24c>
// 233: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 240: 48 ff c3                      incq    %rbx
// 243: 49 39 de                      cmpq    %rbx, %r14
// 246: 0f 84 75 fe ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 24c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 251: 49 8b 45 00                   movq    (%r13), %rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 7e 06                         jle     0x260 <_JIT_ENTRY+0x260>
// 25a: 85 c0                         testl   %eax, %eax
// 25c: 78 e2                         js      0x240 <_JIT_ENTRY+0x240>
// 25e: eb 26                         jmp     0x286 <_JIT_ENTRY+0x286>
// 260: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000262:  R_X86_64_64  .rodata.str1.1
// 26a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 26f: 4c 89 ea                      movq    %r13, %rdx
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_NegativeRefcount
// 27c: ff d0                         callq   *%rax
// 27e: 49 8b 45 00                   movq    (%r13), %rax
// 282: 85 c0                         testl   %eax, %eax
// 284: 78 ba                         js      0x240 <_JIT_ENTRY+0x240>
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 290: ff d0                         callq   *%rax
// 292: 49 ff 4d 00                   decq    (%r13)
// 296: 75 a8                         jne     0x240 <_JIT_ENTRY+0x240>
// 298: 4c 89 ef                      movq    %r13, %rdi
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_Dealloc
// 2a5: ff d0                         callq   *%rax
// 2a7: eb 97                         jmp     0x240 <_JIT_ENTRY+0x240>
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _Py_Dealloc
// 2b3: 4c 89 e7                      movq    %r12, %rdi
// 2b6: ff d0                         callq   *%rax
// 2b8: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 2bc: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2c1: 48 85 d2                      testq   %rdx, %rdx
// 2c4: 0f 85 5d fe ff ff             jne     0x127 <_JIT_ENTRY+0x127>
// 2ca: 49 89 c7                      movq    %rax, %r15
// 2cd: eb 4d                         jmp     0x31c <_JIT_ENTRY+0x31c>
// 2cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d1:  R_X86_64_64  PyExc_UnboundLocalError
// 2d9: 4c 8b 30                      movq    (%rax), %r14
// 2dc: 48 8b 03                      movq    (%rbx), %rax
// 2df: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 2e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e5:  R_X86_64_64  _JIT_OPARG
// 2ed: 0f b7 f0                      movzwl  %ax, %esi
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  PyTuple_GetItem
// 2fa: ff d0                         callq   *%rax
// 2fc: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002fe:  R_X86_64_64  .rodata.str1.1+0x39
// 306: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000308:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 310: 4c 89 ef                      movq    %r13, %rdi
// 313: 4c 89 f6                      movq    %r14, %rsi
// 316: 48 89 c1                      movq    %rax, %rcx
// 319: 41 ff d0                      callq   *%r8
// 31c: 49 29 df                      subq    %rbx, %r15
// 31f: 49 83 c7 b8                   addq    $-0x48, %r15
// 323: 49 c1 ef 03                   shrq    $0x3, %r15
// 327: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 32b: 31 c0                         xorl    %eax, %eax
// 32d: 48 83 c4 28                   addq    $0x28, %rsp
// 331: 5b                            popq    %rbx
// 332: 41 5c                         popq    %r12
// 334: 41 5d                         popq    %r13
// 336: 41 5e                         popq    %r14
// 338: 41 5f                         popq    %r15
// 33a: 5d                            popq    %rbp
// 33b: c3                            retq
// 33c: 
static const unsigned char _CALL_BUILTIN_CLASSplus_DELETE_FAST_code_body[829] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x8e, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x7d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0x61, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x94, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xa3, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xc8, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8b, 0x74, 0xc3, 0x48, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x60, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc7, 0x44, 0xc3, 0x48, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x0b, 0x01, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x75, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x85, 0x5d, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xc7, 0xeb, 0x4d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x30, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_DELETE_FAST_code_holes[25] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x83},
    {0x199, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x2e5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x2fe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x308, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot access local variable '%s' where it is not associated with a value\x00/home/jglass/Documents/cpython/Include/object.h\x00"
// b3: 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_DELETE_FAST_data_body[185] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_DELETE_FAST_data_holes[1];

// _CALL_BUILTIN_CLASSplus_DELETE_GLOBAL
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_DELETE_GLOBAL.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 72 01 00 00             je      0x1d9 <_JIT_ENTRY+0x1d9>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 61 01 00 00             je      0x1d9 <_JIT_ENTRY+0x1d9>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 46 01 00 00             je      0x206 <_JIT_ENTRY+0x206>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f2: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// f7: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// fc: 78 16                         js      0x114 <_JIT_ENTRY+0x114>
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 108: ff d0                         callq   *%rax
// 10a: 49 ff 0c 24                   decq    (%r12)
// 10e: 0f 84 75 01 00 00             je      0x289 <_JIT_ENTRY+0x289>
// 114: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 119: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 11d: 4d 85 f6                      testq   %r14, %r14
// 120: 0f 84 84 01 00 00             je      0x2aa <_JIT_ENTRY+0x2aa>
// 126: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12a: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 12e: 4c 89 30                      movq    %r14, (%rax)
// 131: 49 8b 45 10                   movq    0x10(%r13), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 74 17                         je      0x153 <_JIT_ENTRY+0x153>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_HandlePending
// 146: 4c 89 ef                      movq    %r13, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 85 c0                         testl   %eax, %eax
// 14d: 0f 85 5a 01 00 00             jne     0x2ad <_JIT_ENTRY+0x2ad>
// 153: 48 8b 03                      movq    (%rbx), %rax
// 156: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 15a: 48 8b 40 20                   movq    0x20(%rax), %rax
// 15e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000160:  R_X86_64_64  _JIT_OPARG
// 168: 0f b7 c9                      movzwl  %cx, %ecx
// 16b: 4c 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %r14
// 170: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000172:  R_X86_64_64  PyDict_DelItem
// 17a: 4c 89 f6                      movq    %r14, %rsi
// 17d: ff d0                         callq   *%rax
// 17f: 85 c0                         testl   %eax, %eax
// 181: 0f 84 46 01 00 00             je      0x2cd <_JIT_ENTRY+0x2cd>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  PyExc_KeyError
// 191: 48 8b 30                      movq    (%rax), %rsi
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _PyErr_ExceptionMatches
// 19e: 4c 89 ef                      movq    %r13, %rdi
// 1a1: ff d0                         callq   *%rax
// 1a3: 85 c0                         testl   %eax, %eax
// 1a5: 0f 84 02 01 00 00             je      0x2ad <_JIT_ENTRY+0x2ad>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  PyExc_NameError
// 1b5: 48 8b 30                      movq    (%rax), %rsi
// 1b8: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001ba:  R_X86_64_64  .rodata.str1.1+0x39
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 1cc: 4c 89 ef                      movq    %r13, %rdi
// 1cf: 4c 89 f1                      movq    %r14, %rcx
// 1d2: ff d0                         callq   *%rax
// 1d4: e9 d4 00 00 00                jmp     0x2ad <_JIT_ENTRY+0x2ad>
// 1d9: 49 29 ff                      subq    %rdi, %r15
// 1dc: 49 83 c7 b8                   addq    $-0x48, %r15
// 1e0: 49 c1 ef 03                   shrq    $0x3, %r15
// 1e4: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 1e8: 48 8b 07                      movq    (%rdi), %rax
// 1eb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ed:  R_X86_64_64  _JIT_TARGET
// 1f5: 89 c9                         movl    %ecx, %ecx
// 1f7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1fb: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 201: e9 b8 00 00 00                jmp     0x2be <_JIT_ENTRY+0x2be>
// 206: 41 83 fd 02                   cmpl    $0x2, %r13d
// 20a: bb 01 00 00 00                movl    $0x1, %ebx
// 20f: 41 0f 43 dd                   cmovael %r13d, %ebx
// 213: 45 31 f6                      xorl    %r14d, %r14d
// 216: eb 14                         jmp     0x22c <_JIT_ENTRY+0x22c>
// 218: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 220: 49 ff c6                      incq    %r14
// 223: 4c 39 f3                      cmpq    %r14, %rbx
// 226: 0f 84 94 fe ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 22c: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 231: 49 8b 45 00                   movq    (%r13), %rax
// 235: 48 85 c0                      testq   %rax, %rax
// 238: 7e 06                         jle     0x240 <_JIT_ENTRY+0x240>
// 23a: 85 c0                         testl   %eax, %eax
// 23c: 78 e2                         js      0x220 <_JIT_ENTRY+0x220>
// 23e: eb 26                         jmp     0x266 <_JIT_ENTRY+0x266>
// 240: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000242:  R_X86_64_64  .rodata.str1.1
// 24a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 24f: 4c 89 ea                      movq    %r13, %rdx
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_NegativeRefcount
// 25c: ff d0                         callq   *%rax
// 25e: 49 8b 45 00                   movq    (%r13), %rax
// 262: 85 c0                         testl   %eax, %eax
// 264: 78 ba                         js      0x220 <_JIT_ENTRY+0x220>
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 270: ff d0                         callq   *%rax
// 272: 49 ff 4d 00                   decq    (%r13)
// 276: 75 a8                         jne     0x220 <_JIT_ENTRY+0x220>
// 278: 4c 89 ef                      movq    %r13, %rdi
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_Dealloc
// 285: ff d0                         callq   *%rax
// 287: eb 97                         jmp     0x220 <_JIT_ENTRY+0x220>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _Py_Dealloc
// 293: 4c 89 e7                      movq    %r12, %rdi
// 296: ff d0                         callq   *%rax
// 298: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 29d: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 2a1: 4d 85 f6                      testq   %r14, %r14
// 2a4: 0f 85 7c fe ff ff             jne     0x126 <_JIT_ENTRY+0x126>
// 2aa: 49 89 c7                      movq    %rax, %r15
// 2ad: 49 29 df                      subq    %rbx, %r15
// 2b0: 49 83 c7 b8                   addq    $-0x48, %r15
// 2b4: 49 c1 ef 03                   shrq    $0x3, %r15
// 2b8: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2bc: 31 c0                         xorl    %eax, %eax
// 2be: 48 83 c4 28                   addq    $0x28, %rsp
// 2c2: 5b                            popq    %rbx
// 2c3: 41 5c                         popq    %r12
// 2c5: 41 5d                         popq    %r13
// 2c7: 41 5e                         popq    %r14
// 2c9: 41 5f                         popq    %r15
// 2cb: 5d                            popq    %rbp
// 2cc: c3                            retq
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _JIT_CONTINUE
// 2d7: 48 89 df                      movq    %rbx, %rdi
// 2da: 4c 89 fe                      movq    %r15, %rsi
// 2dd: 4c 89 ea                      movq    %r13, %rdx
// 2e0: 48 83 c4 28                   addq    $0x28, %rsp
// 2e4: 5b                            popq    %rbx
// 2e5: 41 5c                         popq    %r12
// 2e7: 41 5d                         popq    %r13
// 2e9: 41 5e                         popq    %r14
// 2eb: 41 5f                         popq    %r15
// 2ed: 5d                            popq    %rbp
// 2ee: ff e0                         jmpq    *%rax
// 2f0: 
static const unsigned char _CALL_BUILTIN_CLASSplus_DELETE_GLOBAL_code_body[753] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x72, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x61, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x46, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x75, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x84, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xcf, 0x4c, 0x89, 0x30, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x5a, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x46, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x02, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf1, 0xff, 0xd0, 0xe9, 0xd4, 0x00, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xb8, 0x00, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xf6, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf3, 0x0f, 0x84, 0x94, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xf6, 0x0f, 0x85, 0x7c, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_DELETE_GLOBAL_code_holes[21] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_DelItem, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_KeyError, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_DELETE_GLOBAL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_DELETE_GLOBAL_data_holes[1];

// _CALL_BUILTIN_CLASSplus_DELETE_NAME
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_DELETE_NAME.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 71 01                   leal    0x1(%r9), %r14d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 f1                   cmovel  %r9d, %r14d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 57 01 00 00             je      0x1be <_JIT_ENTRY+0x1be>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 46 01 00 00             je      0x1be <_JIT_ENTRY+0x1be>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 f2                      movl    %r14d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 2b 01 00 00             je      0x1eb <_JIT_ENTRY+0x1eb>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f2: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// f7: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// fc: 78 16                         js      0x114 <_JIT_ENTRY+0x114>
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 108: ff d0                         callq   *%rax
// 10a: 49 ff 0c 24                   decq    (%r12)
// 10e: 0f 84 55 01 00 00             je      0x269 <_JIT_ENTRY+0x269>
// 114: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 119: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 11d: 4d 85 f6                      testq   %r14, %r14
// 120: 0f 84 64 01 00 00             je      0x28a <_JIT_ENTRY+0x28a>
// 126: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12a: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 12e: 4c 89 30                      movq    %r14, (%rax)
// 131: 49 8b 45 10                   movq    0x10(%r13), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 74 17                         je      0x153 <_JIT_ENTRY+0x153>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_HandlePending
// 146: 4c 89 ef                      movq    %r13, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 85 c0                         testl   %eax, %eax
// 14d: 0f 85 68 01 00 00             jne     0x2bb <_JIT_ENTRY+0x2bb>
// 153: 48 8b 03                      movq    (%rbx), %rax
// 156: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 15a: 48 8b 40 20                   movq    0x20(%rax), %rax
// 15e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000160:  R_X86_64_64  _JIT_OPARG
// 168: 0f b7 c9                      movzwl  %cx, %ecx
// 16b: 4c 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %r14
// 170: 48 85 ff                      testq   %rdi, %rdi
// 173: 0f 84 16 01 00 00             je      0x28f <_JIT_ENTRY+0x28f>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  PyObject_DelItem
// 183: 4c 89 f6                      movq    %r14, %rsi
// 186: ff d0                         callq   *%rax
// 188: 85 c0                         testl   %eax, %eax
// 18a: 0f 84 4b 01 00 00             je      0x2db <_JIT_ENTRY+0x2db>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  PyExc_NameError
// 19a: 48 8b 30                      movq    (%rax), %rsi
// 19d: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000019f:  R_X86_64_64  .rodata.str1.1+0x54
// 1a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a9:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 1b1: 4c 89 ef                      movq    %r13, %rdi
// 1b4: 4c 89 f1                      movq    %r14, %rcx
// 1b7: ff d0                         callq   *%rax
// 1b9: e9 fd 00 00 00                jmp     0x2bb <_JIT_ENTRY+0x2bb>
// 1be: 49 29 ff                      subq    %rdi, %r15
// 1c1: 49 83 c7 b8                   addq    $-0x48, %r15
// 1c5: 49 c1 ef 03                   shrq    $0x3, %r15
// 1c9: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 1cd: 48 8b 07                      movq    (%rdi), %rax
// 1d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d2:  R_X86_64_64  _JIT_TARGET
// 1da: 89 c9                         movl    %ecx, %ecx
// 1dc: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1e0: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1e6: e9 e1 00 00 00                jmp     0x2cc <_JIT_ENTRY+0x2cc>
// 1eb: 41 83 fe 02                   cmpl    $0x2, %r14d
// 1ef: bb 01 00 00 00                movl    $0x1, %ebx
// 1f4: 41 0f 43 de                   cmovael %r14d, %ebx
// 1f8: 45 31 f6                      xorl    %r14d, %r14d
// 1fb: eb 0f                         jmp     0x20c <_JIT_ENTRY+0x20c>
// 1fd: 0f 1f 00                      nopl    (%rax)
// 200: 49 ff c6                      incq    %r14
// 203: 4c 39 f3                      cmpq    %r14, %rbx
// 206: 0f 84 b4 fe ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 20c: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 211: 49 8b 45 00                   movq    (%r13), %rax
// 215: 48 85 c0                      testq   %rax, %rax
// 218: 7e 06                         jle     0x220 <_JIT_ENTRY+0x220>
// 21a: 85 c0                         testl   %eax, %eax
// 21c: 78 e2                         js      0x200 <_JIT_ENTRY+0x200>
// 21e: eb 26                         jmp     0x246 <_JIT_ENTRY+0x246>
// 220: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000222:  R_X86_64_64  .rodata.str1.1
// 22a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 22f: 4c 89 ea                      movq    %r13, %rdx
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_NegativeRefcount
// 23c: ff d0                         callq   *%rax
// 23e: 49 8b 45 00                   movq    (%r13), %rax
// 242: 85 c0                         testl   %eax, %eax
// 244: 78 ba                         js      0x200 <_JIT_ENTRY+0x200>
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 250: ff d0                         callq   *%rax
// 252: 49 ff 4d 00                   decq    (%r13)
// 256: 75 a8                         jne     0x200 <_JIT_ENTRY+0x200>
// 258: 4c 89 ef                      movq    %r13, %rdi
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_Dealloc
// 265: ff d0                         callq   *%rax
// 267: eb 97                         jmp     0x200 <_JIT_ENTRY+0x200>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_Dealloc
// 273: 4c 89 e7                      movq    %r12, %rdi
// 276: ff d0                         callq   *%rax
// 278: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 27d: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 281: 4d 85 f6                      testq   %r14, %r14
// 284: 0f 85 9c fe ff ff             jne     0x126 <_JIT_ENTRY+0x126>
// 28a: 49 89 c7                      movq    %rax, %r15
// 28d: eb 2c                         jmp     0x2bb <_JIT_ENTRY+0x2bb>
// 28f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000291:  R_X86_64_64  PyExc_SystemError
// 299: 48 8b 30                      movq    (%rax), %rsi
// 29c: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000029e:  R_X86_64_64  .rodata.str1.1+0x39
// 2a6: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002a8:  R_X86_64_64  _PyErr_Format
// 2b0: 4c 89 ef                      movq    %r13, %rdi
// 2b3: 4c 89 f1                      movq    %r14, %rcx
// 2b6: 31 c0                         xorl    %eax, %eax
// 2b8: 41 ff d0                      callq   *%r8
// 2bb: 49 29 df                      subq    %rbx, %r15
// 2be: 49 83 c7 b8                   addq    $-0x48, %r15
// 2c2: 49 c1 ef 03                   shrq    $0x3, %r15
// 2c6: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2ca: 31 c0                         xorl    %eax, %eax
// 2cc: 48 83 c4 28                   addq    $0x28, %rsp
// 2d0: 5b                            popq    %rbx
// 2d1: 41 5c                         popq    %r12
// 2d3: 41 5d                         popq    %r13
// 2d5: 41 5e                         popq    %r14
// 2d7: 41 5f                         popq    %r15
// 2d9: 5d                            popq    %rbp
// 2da: c3                            retq
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _JIT_CONTINUE
// 2e5: 48 89 df                      movq    %rbx, %rdi
// 2e8: 4c 89 fe                      movq    %r15, %rsi
// 2eb: 4c 89 ea                      movq    %r13, %rdx
// 2ee: 48 83 c4 28                   addq    $0x28, %rsp
// 2f2: 5b                            popq    %rbx
// 2f3: 41 5c                         popq    %r12
// 2f5: 41 5d                         popq    %r13
// 2f7: 41 5e                         popq    %r14
// 2f9: 41 5f                         popq    %r15
// 2fb: 5d                            popq    %rbp
// 2fc: ff e0                         jmpq    *%rax
// 2fe: 
static const unsigned char _CALL_BUILTIN_CLASSplus_DELETE_NAME_code_body[767] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x71, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf1, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x57, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x46, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xf2, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x2b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x55, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x64, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xcf, 0x4c, 0x89, 0x30, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x68, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x16, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x4b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf1, 0xff, 0xd0, 0xe9, 0xfd, 0x00, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xe1, 0x00, 0x00, 0x00, 0x41, 0x83, 0xfe, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xde, 0x45, 0x31, 0xf6, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf3, 0x0f, 0x84, 0xb4, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xf6, 0x0f, 0x85, 0x9c, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xc7, 0xeb, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf1, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_DELETE_NAME_code_holes[22] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x54},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x291, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals when deleting %R\x00name '%.200s' is not defined\x00"
// 71: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_DELETE_NAME_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_DELETE_NAME_data_holes[1];

// _CALL_BUILTIN_CLASSplus_DELETE_SUBSCR
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_DELETE_SUBSCR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f8 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e7 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 82: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 87: 48 89 3c 24                   movq    %rdi, (%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 cc 00 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 1c 24                   movq    (%rsp), %rbx
// f1: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// f6: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// fb: 78 16                         js      0x113 <_JIT_ENTRY+0x113>
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 107: ff d0                         callq   *%rax
// 109: 49 ff 0c 24                   decq    (%r12)
// 10d: 0f 84 e2 01 00 00             je      0x2f5 <_JIT_ENTRY+0x2f5>
// 113: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 118: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 11c: 4d 85 ed                      testq   %r13, %r13
// 11f: 0f 84 f1 01 00 00             je      0x316 <_JIT_ENTRY+0x316>
// 125: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 12a: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 12e: 4c 89 28                      movq    %r13, (%rax)
// 131: 49 8b 46 10                   movq    0x10(%r14), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 0f 84 c9 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_HandlePending
// 14a: 4c 89 f7                      movq    %r14, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 0f 84 b2 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 157: 4c 89 e0                      movq    %r12, %rax
// 15a: e9 b7 01 00 00                jmp     0x316 <_JIT_ENTRY+0x316>
// 15f: 49 29 ff                      subq    %rdi, %r15
// 162: 49 83 c7 b8                   addq    $-0x48, %r15
// 166: 49 c1 ef 03                   shrq    $0x3, %r15
// 16a: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 16e: 48 8b 07                      movq    (%rdi), %rax
// 171: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000173:  R_X86_64_64  _JIT_TARGET
// 17b: 89 c9                         movl    %ecx, %ecx
// 17d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 181: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 187: e9 9a 01 00 00                jmp     0x326 <_JIT_ENTRY+0x326>
// 18c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 190: 41 be 01 00 00 00             movl    $0x1, %r14d
// 196: 45 0f 43 f5                   cmovael %r13d, %r14d
// 19a: 31 db                         xorl    %ebx, %ebx
// 19c: eb 0e                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19e: 66 90                         nop
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 de                      cmpq    %rbx, %r14
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 63 d8                      movslq  %eax, %rbx
// 21d: 4d 8b 74 df f0                movq    -0x10(%r15,%rbx,8), %r14
// 222: 4d 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %r13
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  PyObject_DelItem
// 231: 4c 89 f7                      movq    %r14, %rdi
// 234: 4c 89 ee                      movq    %r13, %rsi
// 237: ff d0                         callq   *%rax
// 239: 89 c5                         movl    %eax, %ebp
// 23b: 49 8b 06                      movq    (%r14), %rax
// 23e: 48 85 c0                      testq   %rax, %rax
// 241: 7f 21                         jg      0x264 <_JIT_ENTRY+0x264>
// 243: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000245:  R_X86_64_64  .rodata.str1.1
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_NegativeRefcount
// 257: be 70 02 00 00                movl    $0x270, %esi            # imm = 0x270
// 25c: 4c 89 f2                      movq    %r14, %rdx
// 25f: ff d0                         callq   *%rax
// 261: 49 8b 06                      movq    (%r14), %rax
// 264: 85 c0                         testl   %eax, %eax
// 266: 78 20                         js      0x288 <_JIT_ENTRY+0x288>
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 272: ff d0                         callq   *%rax
// 274: 49 ff 0e                      decq    (%r14)
// 277: 75 0f                         jne     0x288 <_JIT_ENTRY+0x288>
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_Dealloc
// 283: 4c 89 f7                      movq    %r14, %rdi
// 286: ff d0                         callq   *%rax
// 288: 49 8b 45 00                   movq    (%r13), %rax
// 28c: 48 85 c0                      testq   %rax, %rax
// 28f: 7f 22                         jg      0x2b3 <_JIT_ENTRY+0x2b3>
// 291: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000293:  R_X86_64_64  .rodata.str1.1
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_NegativeRefcount
// 2a5: be 71 02 00 00                movl    $0x271, %esi            # imm = 0x271
// 2aa: 4c 89 ea                      movq    %r13, %rdx
// 2ad: ff d0                         callq   *%rax
// 2af: 49 8b 45 00                   movq    (%r13), %rax
// 2b3: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 2b7: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2bb: 85 c0                         testl   %eax, %eax
// 2bd: 78 21                         js      0x2e0 <_JIT_ENTRY+0x2e0>
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c9: ff d0                         callq   *%rax
// 2cb: 49 ff 4d 00                   decq    (%r13)
// 2cf: 75 0f                         jne     0x2e0 <_JIT_ENTRY+0x2e0>
// 2d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d3:  R_X86_64_64  _Py_Dealloc
// 2db: 4c 89 ef                      movq    %r13, %rdi
// 2de: ff d0                         callq   *%rax
// 2e0: 85 ed                         testl   %ebp, %ebp
// 2e2: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 2e6: 74 4d                         je      0x335 <_JIT_ENTRY+0x335>
// 2e8: 49 83 c4 f0                   addq    $-0x10, %r12
// 2ec: 4c 89 e0                      movq    %r12, %rax
// 2ef: 48 8b 1c 24                   movq    (%rsp), %rbx
// 2f3: eb 21                         jmp     0x316 <_JIT_ENTRY+0x316>
// 2f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f7:  R_X86_64_64  _Py_Dealloc
// 2ff: 4c 89 e7                      movq    %r12, %rdi
// 302: ff d0                         callq   *%rax
// 304: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 309: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 30d: 4d 85 ed                      testq   %r13, %r13
// 310: 0f 85 0f fe ff ff             jne     0x125 <_JIT_ENTRY+0x125>
// 316: 48 29 d8                      subq    %rbx, %rax
// 319: 48 83 c0 b8                   addq    $-0x48, %rax
// 31d: 48 c1 e8 03                   shrq    $0x3, %rax
// 321: 89 43 40                      movl    %eax, 0x40(%rbx)
// 324: 31 c0                         xorl    %eax, %eax
// 326: 48 83 c4 28                   addq    $0x28, %rsp
// 32a: 5b                            popq    %rbx
// 32b: 41 5c                         popq    %r12
// 32d: 41 5d                         popq    %r13
// 32f: 41 5e                         popq    %r14
// 331: 41 5f                         popq    %r15
// 333: 5d                            popq    %rbp
// 334: c3                            retq
// 335: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000337:  R_X86_64_64  _JIT_CONTINUE
// 33f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 343: 4c 89 e6                      movq    %r12, %rsi
// 346: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 34b: 48 83 c4 28                   addq    $0x28, %rsp
// 34f: 5b                            popq    %rbx
// 350: 41 5c                         popq    %r12
// 352: 41 5d                         popq    %r13
// 354: 41 5e                         popq    %r14
// 356: 41 5f                         popq    %r15
// 358: 5d                            popq    %rbp
// 359: ff e0                         jmpq    *%rax
// 35b: 
static const unsigned char _CALL_BUILTIN_CLASSplus_DELETE_SUBSCR_code_body[860] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xe2, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xf1, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0xb7, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x9a, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x74, 0xdf, 0xf0, 0x4d, 0x8b, 0x6c, 0xdf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x70, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8d, 0x1c, 0xdf, 0x48, 0x83, 0xc3, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe3, 0x74, 0x4d, 0x49, 0x83, 0xc4, 0xf0, 0x4c, 0x89, 0xe0, 0x48, 0x8b, 0x1c, 0x24, 0xeb, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x85, 0x0f, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_DELETE_SUBSCR_code_holes[24] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x337, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_DELETE_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_DELETE_SUBSCR_data_holes[1];

// _CALL_BUILTIN_CLASSplus_DICT_MERGE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_DICT_MERGE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 01 01 00 00             je      0x168 <_JIT_ENTRY+0x168>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 f0 00 00 00             je      0x168 <_JIT_ENTRY+0x168>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 d5 00 00 00             je      0x195 <_JIT_ENTRY+0x195>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f2: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// f7: 78 21                         js      0x11a <_JIT_ENTRY+0x11a>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 0c 24                   decq    (%r12)
// 109: 75 0f                         jne     0x11a <_JIT_ENTRY+0x11a>
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_Dealloc
// 115: 4c 89 e7                      movq    %r12, %rdi
// 118: ff d0                         callq   *%rax
// 11a: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 11f: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 123: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 128: 48 85 c0                      testq   %rax, %rax
// 12b: 0f 84 0f 02 00 00             je      0x340 <_JIT_ENTRY+0x340>
// 131: 49 89 04 24                   movq    %rax, (%r12)
// 135: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 139: 48 8b 00                      movq    (%rax), %rax
// 13c: 84 c0                         testb   %al, %al
// 13e: 0f 84 d5 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_HandlePending
// 14e: 48 89 ef                      movq    %rbp, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 84 be 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 15b: 48 8b 04 24                   movq    (%rsp), %rax
// 15f: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 163: e9 d8 01 00 00                jmp     0x340 <_JIT_ENTRY+0x340>
// 168: 49 29 ff                      subq    %rdi, %r15
// 16b: 49 83 c7 b8                   addq    $-0x48, %r15
// 16f: 49 c1 ef 03                   shrq    $0x3, %r15
// 173: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 177: 48 8b 07                      movq    (%rdi), %rax
// 17a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017c:  R_X86_64_64  _JIT_TARGET
// 184: 89 c9                         movl    %ecx, %ecx
// 186: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 18a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 190: e9 bc 01 00 00                jmp     0x351 <_JIT_ENTRY+0x351>
// 195: 41 83 fd 02                   cmpl    $0x2, %r13d
// 199: 41 be 01 00 00 00             movl    $0x1, %r14d
// 19f: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1a3: 31 db                         xorl    %ebx, %ebx
// 1a5: eb 15                         jmp     0x1bc <_JIT_ENTRY+0x1bc>
// 1a7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1b0: 48 ff c3                      incq    %rbx
// 1b3: 49 39 de                      cmpq    %rbx, %r14
// 1b6: 0f 84 04 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1bc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1c1: 49 8b 45 00                   movq    (%r13), %rax
// 1c5: 48 85 c0                      testq   %rax, %rax
// 1c8: 7e 06                         jle     0x1d0 <_JIT_ENTRY+0x1d0>
// 1ca: 85 c0                         testl   %eax, %eax
// 1cc: 78 e2                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1ce: eb 26                         jmp     0x1f6 <_JIT_ENTRY+0x1f6>
// 1d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1
// 1da: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1df: 4c 89 ea                      movq    %r13, %rdx
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_NegativeRefcount
// 1ec: ff d0                         callq   *%rax
// 1ee: 49 8b 45 00                   movq    (%r13), %rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 78 ba                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 200: ff d0                         callq   *%rax
// 202: 49 ff 4d 00                   decq    (%r13)
// 206: 75 a8                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 208: 4c 89 ef                      movq    %r13, %rdi
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_Dealloc
// 215: ff d0                         callq   *%rax
// 217: eb 97                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_OPARG
// 223: 0f b7 c0                      movzwl  %ax, %eax
// 226: b9 fc ff ff ff                movl    $0xfffffffc, %ecx       # imm = 0xFFFFFFFC
// 22b: 29 c1                         subl    %eax, %ecx
// 22d: f7 d0                         notl    %eax
// 22f: 48 98                         cltq
// 231: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 235: 49 83 c4 f8                   addq    $-0x8, %r12
// 239: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 23e: 48 8d 14 00                   leaq    (%rax,%rax), %rdx
// 242: 49 8b 3c d7                   movq    (%r15,%rdx,8), %rdi
// 246: 48 63 c9                      movslq  %ecx, %rcx
// 249: 48 01 c1                      addq    %rax, %rcx
// 24c: 4d 8b 34 cf                   movq    (%r15,%rcx,8), %r14
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _PyDict_MergeEx
// 25a: 4c 89 ee                      movq    %r13, %rsi
// 25d: ba 02 00 00 00                movl    $0x2, %edx
// 262: ff d0                         callq   *%rax
// 264: 85 c0                         testl   %eax, %eax
// 266: 78 73                         js      0x2db <_JIT_ENTRY+0x2db>
// 268: 49 8b 45 00                   movq    (%r13), %rax
// 26c: 48 85 c0                      testq   %rax, %rax
// 26f: 7f 22                         jg      0x293 <_JIT_ENTRY+0x293>
// 271: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000273:  R_X86_64_64  .rodata.str1.1
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_NegativeRefcount
// 285: be d6 05 00 00                movl    $0x5d6, %esi            # imm = 0x5D6
// 28a: 4c 89 ea                      movq    %r13, %rdx
// 28d: ff d0                         callq   *%rax
// 28f: 49 8b 45 00                   movq    (%r13), %rax
// 293: 85 c0                         testl   %eax, %eax
// 295: 78 21                         js      0x2b8 <_JIT_ENTRY+0x2b8>
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a1: ff d0                         callq   *%rax
// 2a3: 49 ff 4d 00                   decq    (%r13)
// 2a7: 75 0f                         jne     0x2b8 <_JIT_ENTRY+0x2b8>
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _Py_Dealloc
// 2b3: 4c 89 ef                      movq    %r13, %rdi
// 2b6: ff d0                         callq   *%rax
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _JIT_CONTINUE
// 2c2: 48 89 df                      movq    %rbx, %rdi
// 2c5: 4c 89 e6                      movq    %r12, %rsi
// 2c8: 48 89 ea                      movq    %rbp, %rdx
// 2cb: 48 83 c4 28                   addq    $0x28, %rsp
// 2cf: 5b                            popq    %rbx
// 2d0: 41 5c                         popq    %r12
// 2d2: 41 5d                         popq    %r13
// 2d4: 41 5e                         popq    %r14
// 2d6: 41 5f                         popq    %r15
// 2d8: 5d                            popq    %rbp
// 2d9: ff e0                         jmpq    *%rax
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _PyEval_FormatKwargsError
// 2e5: 48 89 ef                      movq    %rbp, %rdi
// 2e8: 4c 89 f6                      movq    %r14, %rsi
// 2eb: 4c 89 ea                      movq    %r13, %rdx
// 2ee: ff d0                         callq   *%rax
// 2f0: 49 8b 45 00                   movq    (%r13), %rax
// 2f4: 48 85 c0                      testq   %rax, %rax
// 2f7: 7f 22                         jg      0x31b <_JIT_ENTRY+0x31b>
// 2f9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002fb:  R_X86_64_64  .rodata.str1.1
// 303: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000305:  R_X86_64_64  _Py_NegativeRefcount
// 30d: be d3 05 00 00                movl    $0x5d3, %esi            # imm = 0x5D3
// 312: 4c 89 ea                      movq    %r13, %rdx
// 315: ff d0                         callq   *%rax
// 317: 49 8b 45 00                   movq    (%r13), %rax
// 31b: 85 c0                         testl   %eax, %eax
// 31d: 78 21                         js      0x340 <_JIT_ENTRY+0x340>
// 31f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000321:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 329: ff d0                         callq   *%rax
// 32b: 49 ff 4d 00                   decq    (%r13)
// 32f: 75 0f                         jne     0x340 <_JIT_ENTRY+0x340>
// 331: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000333:  R_X86_64_64  _Py_Dealloc
// 33b: 4c 89 ef                      movq    %r13, %rdi
// 33e: ff d0                         callq   *%rax
// 340: 49 29 dc                      subq    %rbx, %r12
// 343: 49 83 c4 b8                   addq    $-0x48, %r12
// 347: 49 c1 ec 03                   shrq    $0x3, %r12
// 34b: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 34f: 31 c0                         xorl    %eax, %eax
// 351: 48 83 c4 28                   addq    $0x28, %rsp
// 355: 5b                            popq    %rbx
// 356: 41 5c                         popq    %r12
// 358: 41 5d                         popq    %r13
// 35a: 41 5e                         popq    %r14
// 35c: 41 5f                         popq    %r15
// 35e: 5d                            popq    %rbp
// 35f: c3                            retq
// 360: 
static const unsigned char _CALL_BUILTIN_CLASSplus_DICT_MERGE_code_body[865] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x01, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xf0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xd5, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xc7, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x0f, 0x02, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xbe, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x24, 0xc7, 0xe9, 0xd8, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xbc, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x04, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfc, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0x8d, 0x14, 0x00, 0x49, 0x8b, 0x3c, 0xd7, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xc1, 0x4d, 0x8b, 0x34, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xba, 0x02, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x73, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd3, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_DICT_MERGE_code_holes[25] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_MergeEx, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatKwargsError, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x305, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x321, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x333, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_DICT_MERGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_DICT_MERGE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_DICT_UPDATE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_DICT_UPDATE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 01 01 00 00             je      0x168 <_JIT_ENTRY+0x168>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 f0 00 00 00             je      0x168 <_JIT_ENTRY+0x168>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 d5 00 00 00             je      0x195 <_JIT_ENTRY+0x195>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f2: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// f7: 78 21                         js      0x11a <_JIT_ENTRY+0x11a>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 0c 24                   decq    (%r12)
// 109: 75 0f                         jne     0x11a <_JIT_ENTRY+0x11a>
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_Dealloc
// 115: 4c 89 e7                      movq    %r12, %rdi
// 118: ff d0                         callq   *%rax
// 11a: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 11f: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 123: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 128: 48 85 c0                      testq   %rax, %rax
// 12b: 0f 84 36 02 00 00             je      0x367 <_JIT_ENTRY+0x367>
// 131: 49 89 04 24                   movq    %rax, (%r12)
// 135: 49 8b 46 10                   movq    0x10(%r14), %rax
// 139: 48 8b 00                      movq    (%rax), %rax
// 13c: 84 c0                         testb   %al, %al
// 13e: 0f 84 d5 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_HandlePending
// 14e: 4c 89 f7                      movq    %r14, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 84 be 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 15b: 48 8b 04 24                   movq    (%rsp), %rax
// 15f: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 163: e9 ff 01 00 00                jmp     0x367 <_JIT_ENTRY+0x367>
// 168: 49 29 ff                      subq    %rdi, %r15
// 16b: 49 83 c7 b8                   addq    $-0x48, %r15
// 16f: 49 c1 ef 03                   shrq    $0x3, %r15
// 173: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 177: 48 8b 07                      movq    (%rdi), %rax
// 17a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017c:  R_X86_64_64  _JIT_TARGET
// 184: 89 c9                         movl    %ecx, %ecx
// 186: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 18a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 190: e9 e3 01 00 00                jmp     0x378 <_JIT_ENTRY+0x378>
// 195: 41 83 fd 02                   cmpl    $0x2, %r13d
// 199: 41 be 01 00 00 00             movl    $0x1, %r14d
// 19f: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1a3: 31 db                         xorl    %ebx, %ebx
// 1a5: eb 15                         jmp     0x1bc <_JIT_ENTRY+0x1bc>
// 1a7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1b0: 48 ff c3                      incq    %rbx
// 1b3: 49 39 de                      cmpq    %rbx, %r14
// 1b6: 0f 84 04 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1bc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1c1: 49 8b 45 00                   movq    (%r13), %rax
// 1c5: 48 85 c0                      testq   %rax, %rax
// 1c8: 7e 06                         jle     0x1d0 <_JIT_ENTRY+0x1d0>
// 1ca: 85 c0                         testl   %eax, %eax
// 1cc: 78 e2                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1ce: eb 26                         jmp     0x1f6 <_JIT_ENTRY+0x1f6>
// 1d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1
// 1da: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1df: 4c 89 ea                      movq    %r13, %rdx
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_NegativeRefcount
// 1ec: ff d0                         callq   *%rax
// 1ee: 49 8b 45 00                   movq    (%r13), %rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 78 ba                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 200: ff d0                         callq   *%rax
// 202: 49 ff 4d 00                   decq    (%r13)
// 206: 75 a8                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 208: 4c 89 ef                      movq    %r13, %rdi
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_Dealloc
// 215: ff d0                         callq   *%rax
// 217: eb 97                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_OPARG
// 223: f7 d0                         notl    %eax
// 225: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 22a: 48 98                         cltq
// 22c: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 230: 49 83 c4 f8                   addq    $-0x8, %r12
// 234: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 239: 48 01 c0                      addq    %rax, %rax
// 23c: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  PyDict_Update
// 24a: 4c 89 ee                      movq    %r13, %rsi
// 24d: ff d0                         callq   *%rax
// 24f: 85 c0                         testl   %eax, %eax
// 251: 78 73                         js      0x2c6 <_JIT_ENTRY+0x2c6>
// 253: 49 8b 45 00                   movq    (%r13), %rax
// 257: 48 85 c0                      testq   %rax, %rax
// 25a: 7f 22                         jg      0x27e <_JIT_ENTRY+0x27e>
// 25c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025e:  R_X86_64_64  .rodata.str1.1
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _Py_NegativeRefcount
// 270: be c4 05 00 00                movl    $0x5c4, %esi            # imm = 0x5C4
// 275: 4c 89 ea                      movq    %r13, %rdx
// 278: ff d0                         callq   *%rax
// 27a: 49 8b 45 00                   movq    (%r13), %rax
// 27e: 85 c0                         testl   %eax, %eax
// 280: 78 21                         js      0x2a3 <_JIT_ENTRY+0x2a3>
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28c: ff d0                         callq   *%rax
// 28e: 49 ff 4d 00                   decq    (%r13)
// 292: 75 0f                         jne     0x2a3 <_JIT_ENTRY+0x2a3>
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _Py_Dealloc
// 29e: 4c 89 ef                      movq    %r13, %rdi
// 2a1: ff d0                         callq   *%rax
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _JIT_CONTINUE
// 2ad: 48 89 df                      movq    %rbx, %rdi
// 2b0: 4c 89 e6                      movq    %r12, %rsi
// 2b3: 4c 89 f2                      movq    %r14, %rdx
// 2b6: 48 83 c4 28                   addq    $0x28, %rsp
// 2ba: 5b                            popq    %rbx
// 2bb: 41 5c                         popq    %r12
// 2bd: 41 5d                         popq    %r13
// 2bf: 41 5e                         popq    %r14
// 2c1: 41 5f                         popq    %r15
// 2c3: 5d                            popq    %rbp
// 2c4: ff e0                         jmpq    *%rax
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  PyExc_AttributeError
// 2d0: 48 8b 30                      movq    (%rax), %rsi
// 2d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d5:  R_X86_64_64  _PyErr_ExceptionMatches
// 2dd: 4c 89 f7                      movq    %r14, %rdi
// 2e0: ff d0                         callq   *%rax
// 2e2: 85 c0                         testl   %eax, %eax
// 2e4: 74 31                         je      0x317 <_JIT_ENTRY+0x317>
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  PyExc_TypeError
// 2f0: 48 8b 30                      movq    (%rax), %rsi
// 2f3: 49 8b 45 08                   movq    0x8(%r13), %rax
// 2f7: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2fb: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002fd:  R_X86_64_64  .rodata.str1.1+0x39
// 305: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000307:  R_X86_64_64  _PyErr_Format
// 30f: 4c 89 f7                      movq    %r14, %rdi
// 312: 31 c0                         xorl    %eax, %eax
// 314: 41 ff d0                      callq   *%r8
// 317: 49 8b 45 00                   movq    (%r13), %rax
// 31b: 48 85 c0                      testq   %rax, %rax
// 31e: 7f 22                         jg      0x342 <_JIT_ENTRY+0x342>
// 320: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000322:  R_X86_64_64  .rodata.str1.1
// 32a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032c:  R_X86_64_64  _Py_NegativeRefcount
// 334: be c1 05 00 00                movl    $0x5c1, %esi            # imm = 0x5C1
// 339: 4c 89 ea                      movq    %r13, %rdx
// 33c: ff d0                         callq   *%rax
// 33e: 49 8b 45 00                   movq    (%r13), %rax
// 342: 85 c0                         testl   %eax, %eax
// 344: 78 21                         js      0x367 <_JIT_ENTRY+0x367>
// 346: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000348:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 350: ff d0                         callq   *%rax
// 352: 49 ff 4d 00                   decq    (%r13)
// 356: 75 0f                         jne     0x367 <_JIT_ENTRY+0x367>
// 358: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035a:  R_X86_64_64  _Py_Dealloc
// 362: 4c 89 ef                      movq    %r13, %rdi
// 365: ff d0                         callq   *%rax
// 367: 49 29 dc                      subq    %rbx, %r12
// 36a: 49 83 c4 b8                   addq    $-0x48, %r12
// 36e: 49 c1 ec 03                   shrq    $0x3, %r12
// 372: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 376: 31 c0                         xorl    %eax, %eax
// 378: 48 83 c4 28                   addq    $0x28, %rsp
// 37c: 5b                            popq    %rbx
// 37d: 41 5c                         popq    %r12
// 37f: 41 5d                         popq    %r13
// 381: 41 5e                         popq    %r14
// 383: 41 5f                         popq    %r15
// 385: 5d                            popq    %rbp
// 386: c3                            retq
// 387: 
static const unsigned char _CALL_BUILTIN_CLASSplus_DICT_UPDATE_code_body[904] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x01, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xf0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xd5, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xc7, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x36, 0x02, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xbe, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x24, 0xc7, 0xe9, 0xff, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xe3, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x04, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0x01, 0xc0, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x73, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x31, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_DICT_UPDATE_code_holes[29] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Update, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AttributeError, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x307, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x32c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x348, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x35a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object is not a mapping\x00"
// 5a: 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_DICT_UPDATE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_DICT_UPDATE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_END_SEND
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_END_SEND.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f5 00 00 00             je      0x15c <_JIT_ENTRY+0x15c>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e4 00 00 00             je      0x15c <_JIT_ENTRY+0x15c>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 c9 00 00 00             je      0x189 <_JIT_ENTRY+0x189>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// f2: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// f7: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// fc: 78 16                         js      0x114 <_JIT_ENTRY+0x114>
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 108: ff d0                         callq   *%rax
// 10a: 49 ff 0c 24                   decq    (%r12)
// 10e: 0f 84 a3 01 00 00             je      0x2b7 <_JIT_ENTRY+0x2b7>
// 114: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 118: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 11d: 48 85 c9                      testq   %rcx, %rcx
// 120: 0f 84 b2 01 00 00             je      0x2d8 <_JIT_ENTRY+0x2d8>
// 126: 48 89 08                      movq    %rcx, (%rax)
// 129: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 12d: 48 8b 00                      movq    (%rax), %rax
// 130: 84 c0                         testb   %al, %al
// 132: 0f 84 d1 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_HandlePending
// 142: 48 89 ef                      movq    %rbp, %rdi
// 145: ff d0                         callq   *%rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 0f 84 ba 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 14f: 48 8b 04 24                   movq    (%rsp), %rax
// 153: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 157: e9 7c 01 00 00                jmp     0x2d8 <_JIT_ENTRY+0x2d8>
// 15c: 49 29 fe                      subq    %rdi, %r14
// 15f: 49 83 c6 b8                   addq    $-0x48, %r14
// 163: 49 c1 ee 03                   shrq    $0x3, %r14
// 167: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 16b: 48 8b 07                      movq    (%rdi), %rax
// 16e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000170:  R_X86_64_64  _JIT_TARGET
// 178: 89 c9                         movl    %ecx, %ecx
// 17a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 17e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 184: e9 60 01 00 00                jmp     0x2e9 <_JIT_ENTRY+0x2e9>
// 189: 41 83 fd 02                   cmpl    $0x2, %r13d
// 18d: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 193: 45 0f 43 fd                   cmovael %r13d, %r15d
// 197: 31 db                         xorl    %ebx, %ebx
// 199: eb 11                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 df                      cmpq    %rbx, %r15
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 4c 63 e0                      movslq  %eax, %r12
// 21d: 4f 8b 7c e6 f0                movq    -0x10(%r14,%r12,8), %r15
// 222: 4b 8b 5c e6 f8                movq    -0x8(%r14,%r12,8), %rbx
// 227: 49 8b 07                      movq    (%r15), %rax
// 22a: 48 85 c0                      testq   %rax, %rax
// 22d: 7f 21                         jg      0x250 <_JIT_ENTRY+0x250>
// 22f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000231:  R_X86_64_64  .rodata.str1.1
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _Py_NegativeRefcount
// 243: be 66 00 00 00                movl    $0x66, %esi
// 248: 4c 89 fa                      movq    %r15, %rdx
// 24b: ff d0                         callq   *%rax
// 24d: 49 8b 07                      movq    (%r15), %rax
// 250: 4f 8d 24 e6                   leaq    (%r14,%r12,8), %r12
// 254: 49 83 c4 f8                   addq    $-0x8, %r12
// 258: 85 c0                         testl   %eax, %eax
// 25a: 78 20                         js      0x27c <_JIT_ENTRY+0x27c>
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 266: ff d0                         callq   *%rax
// 268: 49 ff 0f                      decq    (%r15)
// 26b: 75 0f                         jne     0x27c <_JIT_ENTRY+0x27c>
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _Py_Dealloc
// 277: 4c 89 ff                      movq    %r15, %rdi
// 27a: ff d0                         callq   *%rax
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _JIT_OPARG
// 286: f7 d0                         notl    %eax
// 288: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 28d: 48 98                         cltq
// 28f: 49 89 5c c6 f0                movq    %rbx, -0x10(%r14,%rax,8)
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _JIT_CONTINUE
// 29e: 4c 89 ef                      movq    %r13, %rdi
// 2a1: 4c 89 e6                      movq    %r12, %rsi
// 2a4: 48 89 ea                      movq    %rbp, %rdx
// 2a7: 48 83 c4 28                   addq    $0x28, %rsp
// 2ab: 5b                            popq    %rbx
// 2ac: 41 5c                         popq    %r12
// 2ae: 41 5d                         popq    %r13
// 2b0: 41 5e                         popq    %r14
// 2b2: 41 5f                         popq    %r15
// 2b4: 5d                            popq    %rbp
// 2b5: ff e0                         jmpq    *%rax
// 2b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b9:  R_X86_64_64  _Py_Dealloc
// 2c1: 4c 89 e7                      movq    %r12, %rdi
// 2c4: ff d0                         callq   *%rax
// 2c6: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 2ca: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 2cf: 48 85 c9                      testq   %rcx, %rcx
// 2d2: 0f 85 4e fe ff ff             jne     0x126 <_JIT_ENTRY+0x126>
// 2d8: 4c 29 e8                      subq    %r13, %rax
// 2db: 48 83 c0 b8                   addq    $-0x48, %rax
// 2df: 48 c1 e8 03                   shrq    $0x3, %rax
// 2e3: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 2e7: 31 c0                         xorl    %eax, %eax
// 2e9: 48 83 c4 28                   addq    $0x28, %rsp
// 2ed: 5b                            popq    %rbx
// 2ee: 41 5c                         popq    %r12
// 2f0: 41 5d                         popq    %r13
// 2f2: 41 5e                         popq    %r14
// 2f4: 41 5f                         popq    %r15
// 2f6: 5d                            popq    %rbp
// 2f7: c3                            retq
// 2f8: 
static const unsigned char _CALL_BUILTIN_CLASSplus_END_SEND_code_body[761] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf5, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe4, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xa3, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb2, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xba, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0x7c, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x60, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe0, 0x4f, 0x8b, 0x7c, 0xe6, 0xf0, 0x4b, 0x8b, 0x5c, 0xe6, 0xf8, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x4f, 0x8d, 0x24, 0xe6, 0x49, 0x83, 0xc4, 0xf8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x5c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x85, 0x4e, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_END_SEND_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_END_SEND_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_END_SEND_data_holes[1];

// _CALL_BUILTIN_CLASSplus_EXIT_INIT_CHECK
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_EXIT_INIT_CHECK.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 14 24                   movq    %r10, (%rsp)
// 79: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 7e: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 83: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 ea                      movl    %r13d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c8 00 00 00             jle     0x189 <_JIT_ENTRY+0x189>
// c1: 85 c0                         testl   %eax, %eax
// c3: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// c8: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// cd: 0f 89 e6 00 00 00             jns     0x1b9 <_JIT_ENTRY+0x1b9>
// d3: e9 02 01 00 00                jmp     0x1da <_JIT_ENTRY+0x1da>
// d8: 49 29 fe                      subq    %rdi, %r14
// db: 49 83 c6 b8                   addq    $-0x48, %r14
// df: 49 c1 ee 03                   shrq    $0x3, %r14
// e3: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 80 01 00 00                jmp     0x285 <_JIT_ENTRY+0x285>
// 105: 41 83 fd 02                   cmpl    $0x2, %r13d
// 109: bb 01 00 00 00                movl    $0x1, %ebx
// 10e: 41 0f 43 dd                   cmovael %r13d, %ebx
// 112: 45 31 ff                      xorl    %r15d, %r15d
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 49 ff c7                      incq    %r15
// 123: 4c 39 fb                      cmpq    %r15, %rbx
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 12d: 49 8b 45 00                   movq    (%r13), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 0a                         jle     0x140 <_JIT_ENTRY+0x140>
// 136: 85 c0                         testl   %eax, %eax
// 138: 78 e6                         js      0x120 <_JIT_ENTRY+0x120>
// 13a: eb 2a                         jmp     0x166 <_JIT_ENTRY+0x166>
// 13c: 0f 1f 40 00                   nopl    (%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 ea                      movq    %r13, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 78 ba                         js      0x120 <_JIT_ENTRY+0x120>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 4d 00                   decq    (%r13)
// 176: 75 a8                         jne     0x120 <_JIT_ENTRY+0x120>
// 178: 4c 89 ef                      movq    %r13, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: eb 97                         jmp     0x120 <_JIT_ENTRY+0x120>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 1b2: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 1b7: 78 21                         js      0x1da <_JIT_ENTRY+0x1da>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c3: ff d0                         callq   *%rax
// 1c5: 49 ff 0c 24                   decq    (%r12)
// 1c9: 75 0f                         jne     0x1da <_JIT_ENTRY+0x1da>
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _Py_Dealloc
// 1d5: 4c 89 e7                      movq    %r12, %rdi
// 1d8: ff d0                         callq   *%rax
// 1da: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1df: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1e3: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1e8: 48 85 d2                      testq   %rdx, %rdx
// 1eb: 0f 84 80 00 00 00             je      0x271 <_JIT_ENTRY+0x271>
// 1f1: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1f5: 4d 8d 3c ce                   leaq    (%r14,%rcx,8), %r15
// 1f9: 48 89 10                      movq    %rdx, (%rax)
// 1fc: 49 8b 45 10                   movq    0x10(%r13), %rax
// 200: 48 8b 00                      movq    (%rax), %rax
// 203: 84 c0                         testb   %al, %al
// 205: 74 13                         je      0x21a <_JIT_ENTRY+0x21a>
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  _Py_HandlePending
// 211: 4c 89 ef                      movq    %r13, %rdi
// 214: ff d0                         callq   *%rax
// 216: 85 c0                         testl   %eax, %eax
// 218: 75 5a                         jne     0x274 <_JIT_ENTRY+0x274>
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _JIT_OPARG
// 224: f7 d0                         notl    %eax
// 226: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 22b: 48 63 c8                      movslq  %eax, %rcx
// 22e: 49 8b 44 ce f8                movq    -0x8(%r14,%rcx,8), %rax
// 233: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000235:  R_X86_64_64  _Py_NoneStruct
// 23d: 48 39 d0                      cmpq    %rdx, %rax
// 240: 74 52                         je      0x294 <_JIT_ENTRY+0x294>
// 242: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000244:  R_X86_64_64  PyExc_TypeError
// 24c: 48 8b 39                      movq    (%rcx), %rdi
// 24f: 48 8b 40 08                   movq    0x8(%rax), %rax
// 253: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 257: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000259:  R_X86_64_64  .rodata.str1.1+0x39
// 261: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000263:  R_X86_64_64  PyErr_Format
// 26b: 31 c0                         xorl    %eax, %eax
// 26d: ff d1                         callq   *%rcx
// 26f: eb 03                         jmp     0x274 <_JIT_ENTRY+0x274>
// 271: 49 89 c7                      movq    %rax, %r15
// 274: 49 29 df                      subq    %rbx, %r15
// 277: 49 83 c7 b8                   addq    $-0x48, %r15
// 27b: 49 c1 ef 03                   shrq    $0x3, %r15
// 27f: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 283: 31 c0                         xorl    %eax, %eax
// 285: 48 83 c4 28                   addq    $0x28, %rsp
// 289: 5b                            popq    %rbx
// 28a: 41 5c                         popq    %r12
// 28c: 41 5d                         popq    %r13
// 28e: 41 5e                         popq    %r14
// 290: 41 5f                         popq    %r15
// 292: 5d                            popq    %rbp
// 293: c3                            retq
// 294: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 298: 48 83 c6 f8                   addq    $-0x8, %rsi
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _JIT_CONTINUE
// 2a6: 48 89 df                      movq    %rbx, %rdi
// 2a9: 4c 89 ea                      movq    %r13, %rdx
// 2ac: 48 83 c4 28                   addq    $0x28, %rsp
// 2b0: 5b                            popq    %rbx
// 2b1: 41 5c                         popq    %r12
// 2b3: 41 5d                         popq    %r13
// 2b5: 41 5e                         popq    %r14
// 2b7: 41 5f                         popq    %r15
// 2b9: 5d                            popq    %rbp
// 2ba: ff e0                         jmpq    *%rax
// 2bc: 
static const unsigned char _CALL_BUILTIN_CLASSplus_EXIT_INIT_CHECK_code_body[701] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc8, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x0f, 0x89, 0xe6, 0x00, 0x00, 0x00, 0xe9, 0x02, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x80, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xff, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x74, 0x8c, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x85, 0xc0, 0x78, 0xe6, 0xeb, 0x2a, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x5a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc8, 0x49, 0x8b, 0x44, 0xce, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd0, 0x74, 0x52, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x39, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0xeb, 0x03, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_EXIT_INIT_CHECK_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_Format, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__init__() should return None, not '%.200s'\x00"
// 65: 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_EXIT_INIT_CHECK_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x5f, 0x28, 0x29, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x4e, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_EXIT_INIT_CHECK_data_holes[1];

// _CALL_BUILTIN_CLASSplus_EXIT_TRACE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_EXIT_TRACE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 ff                      movq    %rdi, %r15
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 f8 00 00 00             je      0x162 <_JIT_ENTRY+0x162>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 e7 00 00 00             je      0x162 <_JIT_ENTRY+0x162>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// 8f: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 41 0f 94 c7                   sete    %r15b
// 9a: 89 da                         movl    %ebx, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 d5 00 00 00             je      0x199 <_JIT_ENTRY+0x199>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// f6: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// fb: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 100: 78 21                         js      0x123 <_JIT_ENTRY+0x123>
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10c: ff d0                         callq   *%rax
// 10e: 49 ff 0c 24                   decq    (%r12)
// 112: 75 0f                         jne     0x123 <_JIT_ENTRY+0x123>
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_Dealloc
// 11e: 4c 89 e7                      movq    %r12, %rdi
// 121: ff d0                         callq   *%rax
// 123: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 128: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 12c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 130: 48 85 c9                      testq   %rcx, %rcx
// 133: 0f 84 de 00 00 00             je      0x217 <_JIT_ENTRY+0x217>
// 139: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 13d: 48 89 08                      movq    %rcx, (%rax)
// 140: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 144: 48 8b 00                      movq    (%rax), %rax
// 147: 84 c0                         testb   %al, %al
// 149: 74 17                         je      0x162 <_JIT_ENTRY+0x162>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_HandlePending
// 155: 48 89 df                      movq    %rbx, %rdi
// 158: ff d0                         callq   *%rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 85 b8 00 00 00             jne     0x21a <_JIT_ENTRY+0x21a>
// 162: 4d 29 fe                      subq    %r15, %r14
// 165: 49 83 c6 b8                   addq    $-0x48, %r14
// 169: 49 c1 ee 03                   shrq    $0x3, %r14
// 16d: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 171: 49 8b 07                      movq    (%r15), %rax
// 174: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000176:  R_X86_64_64  _JIT_TARGET
// 17e: 89 c9                         movl    %ecx, %ecx
// 180: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 184: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 18a: 48 83 c4 28                   addq    $0x28, %rsp
// 18e: 5b                            popq    %rbx
// 18f: 41 5c                         popq    %r12
// 191: 41 5d                         popq    %r13
// 193: 41 5e                         popq    %r14
// 195: 41 5f                         popq    %r15
// 197: 5d                            popq    %rbp
// 198: c3                            retq
// 199: 83 fb 02                      cmpl    $0x2, %ebx
// 19c: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 1a2: 44 0f 43 eb                   cmovael %ebx, %r13d
// 1a6: 31 db                         xorl    %ebx, %ebx
// 1a8: eb 12                         jmp     0x1bc <_JIT_ENTRY+0x1bc>
// 1aa: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// 1b0: 48 ff c3                      incq    %rbx
// 1b3: 49 39 dd                      cmpq    %rbx, %r13
// 1b6: 0f 84 08 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 1bc: 4c 8b 7c dd 00                movq    (%rbp,%rbx,8), %r15
// 1c1: 49 8b 07                      movq    (%r15), %rax
// 1c4: 48 85 c0                      testq   %rax, %rax
// 1c7: 7e 07                         jle     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c9: 85 c0                         testl   %eax, %eax
// 1cb: 78 e3                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1cd: eb 26                         jmp     0x1f5 <_JIT_ENTRY+0x1f5>
// 1cf: 90                            nop
// 1d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1
// 1da: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1df: 4c 89 fa                      movq    %r15, %rdx
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_NegativeRefcount
// 1ec: ff d0                         callq   *%rax
// 1ee: 49 8b 07                      movq    (%r15), %rax
// 1f1: 85 c0                         testl   %eax, %eax
// 1f3: 78 bb                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ff: ff d0                         callq   *%rax
// 201: 49 ff 0f                      decq    (%r15)
// 204: 75 aa                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 206: 4c 89 ff                      movq    %r15, %rdi
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _Py_Dealloc
// 213: ff d0                         callq   *%rax
// 215: eb 99                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 217: 49 89 c6                      movq    %rax, %r14
// 21a: 4d 29 fe                      subq    %r15, %r14
// 21d: 49 83 c6 b8                   addq    $-0x48, %r14
// 221: 49 c1 ee 03                   shrq    $0x3, %r14
// 225: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 229: 31 c0                         xorl    %eax, %eax
// 22b: e9 5a ff ff ff                jmp     0x18a <_JIT_ENTRY+0x18a>
// 230: 
static const unsigned char _CALL_BUILTIN_CLASSplus_EXIT_TRACE_code_body[561] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xd5, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xde, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xb8, 0x00, 0x00, 0x00, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x83, 0xfb, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xeb, 0x31, 0xdb, 0xeb, 0x12, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x08, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x7c, 0xdd, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x49, 0x89, 0xc6, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x31, 0xc0, 0xe9, 0x5a, 0xff, 0xff, 0xff};
static const Hole _CALL_BUILTIN_CLASSplus_EXIT_TRACE_code_holes[13] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_EXIT_TRACE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_EXIT_TRACE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_FORMAT_SIMPLE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_FORMAT_SIMPLE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f9 00 00 00             je      0x160 <_JIT_ENTRY+0x160>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e8 00 00 00             je      0x160 <_JIT_ENTRY+0x160>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 41 0f 94 c6                   sete    %r14b
// 96: 89 da                         movl    %ebx, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 41 84 c6                      testb   %al, %r14b
// bb: 0f 84 cc 00 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e3: 4c 89 e2                      movq    %r12, %rdx
// e6: ff d0                         callq   *%rax
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 85 c0                         testl   %eax, %eax
// ee: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// f3: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// f8: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// fd: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 102: 78 16                         js      0x11a <_JIT_ENTRY+0x11a>
// 104: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000106:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10e: ff d0                         callq   *%rax
// 110: 49 ff 0c 24                   decq    (%r12)
// 114: 0f 84 ae 01 00 00             je      0x2c8 <_JIT_ENTRY+0x2c8>
// 11a: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 11e: 4d 85 f6                      testq   %r14, %r14
// 121: 0f 84 bd 01 00 00             je      0x2e4 <_JIT_ENTRY+0x2e4>
// 127: 48 8b 04 24                   movq    (%rsp), %rax
// 12b: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 12f: 4c 89 33                      movq    %r14, (%rbx)
// 132: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 136: 48 8b 00                      movq    (%rax), %rax
// 139: 84 c0                         testb   %al, %al
// 13b: 0f 84 c8 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_HandlePending
// 14b: 48 89 ef                      movq    %rbp, %rdi
// 14e: ff d0                         callq   *%rax
// 150: 85 c0                         testl   %eax, %eax
// 152: 0f 84 b1 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 158: 4c 89 e3                      movq    %r12, %rbx
// 15b: e9 84 01 00 00                jmp     0x2e4 <_JIT_ENTRY+0x2e4>
// 160: 49 29 ff                      subq    %rdi, %r15
// 163: 49 83 c7 b8                   addq    $-0x48, %r15
// 167: 49 c1 ef 03                   shrq    $0x3, %r15
// 16b: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 16f: 48 8b 07                      movq    (%rdi), %rax
// 172: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000174:  R_X86_64_64  _JIT_TARGET
// 17c: 89 c9                         movl    %ecx, %ecx
// 17e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 182: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 188: e9 68 01 00 00                jmp     0x2f5 <_JIT_ENTRY+0x2f5>
// 18d: 83 fb 02                      cmpl    $0x2, %ebx
// 190: 41 be 01 00 00 00             movl    $0x1, %r14d
// 196: 44 0f 43 f3                   cmovael %ebx, %r14d
// 19a: 31 db                         xorl    %ebx, %ebx
// 19c: eb 0e                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19e: 66 90                         nop
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 de                      cmpq    %rbx, %r14
// 1a6: 0f 84 15 ff ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 98                         cltq
// 21c: 49 8d 1c c7                   leaq    (%r15,%rax,8), %rbx
// 220: 48 83 c3 f8                   addq    $-0x8, %rbx
// 224: 4d 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %r15
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  PyUnicode_Type
// 233: 49 39 47 08                   cmpq    %rax, 0x8(%r15)
// 237: 74 69                         je      0x2a2 <_JIT_ENTRY+0x2a2>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  PyObject_Format
// 243: 4c 89 ff                      movq    %r15, %rdi
// 246: 31 f6                         xorl    %esi, %esi
// 248: ff d0                         callq   *%rax
// 24a: 49 89 c6                      movq    %rax, %r14
// 24d: 49 8b 07                      movq    (%r15), %rax
// 250: 48 85 c0                      testq   %rax, %rax
// 253: 7f 21                         jg      0x276 <_JIT_ENTRY+0x276>
// 255: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000257:  R_X86_64_64  .rodata.str1.1
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _Py_NegativeRefcount
// 269: be a6 0c 00 00                movl    $0xca6, %esi            # imm = 0xCA6
// 26e: 4c 89 fa                      movq    %r15, %rdx
// 271: ff d0                         callq   *%rax
// 273: 49 8b 07                      movq    (%r15), %rax
// 276: 85 c0                         testl   %eax, %eax
// 278: 78 20                         js      0x29a <_JIT_ENTRY+0x29a>
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 284: ff d0                         callq   *%rax
// 286: 49 ff 0f                      decq    (%r15)
// 289: 75 0f                         jne     0x29a <_JIT_ENTRY+0x29a>
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_Dealloc
// 295: 4c 89 ff                      movq    %r15, %rdi
// 298: ff d0                         callq   *%rax
// 29a: 4d 89 f7                      movq    %r14, %r15
// 29d: 4d 85 f6                      testq   %r14, %r14
// 2a0: 74 42                         je      0x2e4 <_JIT_ENTRY+0x2e4>
// 2a2: 4c 89 3b                      movq    %r15, (%rbx)
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _JIT_CONTINUE
// 2af: 4c 89 ef                      movq    %r13, %rdi
// 2b2: 4c 89 e6                      movq    %r12, %rsi
// 2b5: 48 89 ea                      movq    %rbp, %rdx
// 2b8: 48 83 c4 28                   addq    $0x28, %rsp
// 2bc: 5b                            popq    %rbx
// 2bd: 41 5c                         popq    %r12
// 2bf: 41 5d                         popq    %r13
// 2c1: 41 5e                         popq    %r14
// 2c3: 41 5f                         popq    %r15
// 2c5: 5d                            popq    %rbp
// 2c6: ff e0                         jmpq    *%rax
// 2c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ca:  R_X86_64_64  _Py_Dealloc
// 2d2: 4c 89 e7                      movq    %r12, %rdi
// 2d5: ff d0                         callq   *%rax
// 2d7: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 2db: 4d 85 f6                      testq   %r14, %r14
// 2de: 0f 85 43 fe ff ff             jne     0x127 <_JIT_ENTRY+0x127>
// 2e4: 4c 29 eb                      subq    %r13, %rbx
// 2e7: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2eb: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2ef: 41 89 5d 40                   movl    %ebx, 0x40(%r13)
// 2f3: 31 c0                         xorl    %eax, %eax
// 2f5: 48 83 c4 28                   addq    $0x28, %rsp
// 2f9: 5b                            popq    %rbx
// 2fa: 41 5c                         popq    %r12
// 2fc: 41 5d                         popq    %r13
// 2fe: 41 5e                         popq    %r14
// 300: 41 5f                         popq    %r15
// 302: 5d                            popq    %rbp
// 303: c3                            retq
// 304: 
static const unsigned char _CALL_BUILTIN_CLASSplus_FORMAT_SIMPLE_code_body[773] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xae, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x1c, 0xdf, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0xbd, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x24, 0xc7, 0x4c, 0x89, 0x33, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe3, 0xe9, 0x84, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x68, 0x01, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x15, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8d, 0x1c, 0xc7, 0x48, 0x83, 0xc3, 0xf8, 0x4d, 0x8b, 0x7c, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x47, 0x08, 0x74, 0x69, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xf6, 0xff, 0xd0, 0x49, 0x89, 0xc6, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa6, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x89, 0xf7, 0x4d, 0x85, 0xf6, 0x74, 0x42, 0x4c, 0x89, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x1c, 0xdf, 0x4d, 0x85, 0xf6, 0x0f, 0x85, 0x43, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_FORMAT_SIMPLE_code_holes[21] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_FORMAT_SIMPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_FORMAT_SIMPLE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_FORMAT_WITH_SPEC
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_FORMAT_WITH_SPEC.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f5 00 00 00             je      0x15c <_JIT_ENTRY+0x15c>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e4 00 00 00             je      0x15c <_JIT_ENTRY+0x15c>
// 78: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 7d: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 82: 48 89 14 24                   movq    %rdx, (%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 c9 00 00 00             je      0x189 <_JIT_ENTRY+0x189>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// f2: 48 8b 1c 24                   movq    (%rsp), %rbx
// f6: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// fb: 78 16                         js      0x113 <_JIT_ENTRY+0x113>
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 107: ff d0                         callq   *%rax
// 109: 49 ff 0c 24                   decq    (%r12)
// 10d: 0f 84 ff 01 00 00             je      0x312 <_JIT_ENTRY+0x312>
// 113: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 118: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 11c: 4d 85 ff                      testq   %r15, %r15
// 11f: 0f 84 0e 02 00 00             je      0x333 <_JIT_ENTRY+0x333>
// 125: 4c 89 38                      movq    %r15, (%rax)
// 128: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 12c: 48 8b 00                      movq    (%rax), %rax
// 12f: 84 c0                         testb   %al, %al
// 131: 0f 84 d2 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_HandlePending
// 141: 48 89 df                      movq    %rbx, %rdi
// 144: ff d0                         callq   *%rax
// 146: 85 c0                         testl   %eax, %eax
// 148: 0f 84 bb 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 14e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 153: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 157: e9 d7 01 00 00                jmp     0x333 <_JIT_ENTRY+0x333>
// 15c: 49 29 fe                      subq    %rdi, %r14
// 15f: 49 83 c6 b8                   addq    $-0x48, %r14
// 163: 49 c1 ee 03                   shrq    $0x3, %r14
// 167: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 16b: 48 8b 07                      movq    (%rdi), %rax
// 16e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000170:  R_X86_64_64  _JIT_TARGET
// 178: 89 c9                         movl    %ecx, %ecx
// 17a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 17e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 184: e9 ba 01 00 00                jmp     0x343 <_JIT_ENTRY+0x343>
// 189: 41 83 fd 02                   cmpl    $0x2, %r13d
// 18d: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 193: 45 0f 43 fd                   cmovael %r13d, %r15d
// 197: 31 db                         xorl    %ebx, %ebx
// 199: eb 11                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 df                      cmpq    %rbx, %r15
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 63 d8                      movslq  %eax, %rbx
// 21d: 4d 8b 7c de f0                movq    -0x10(%r14,%rbx,8), %r15
// 222: 4d 8b 6c de f8                movq    -0x8(%r14,%rbx,8), %r13
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  PyObject_Format
// 231: 4c 89 ff                      movq    %r15, %rdi
// 234: 4c 89 ee                      movq    %r13, %rsi
// 237: ff d0                         callq   *%rax
// 239: 49 89 c4                      movq    %rax, %r12
// 23c: 49 8b 07                      movq    (%r15), %rax
// 23f: 48 85 c0                      testq   %rax, %rax
// 242: 7f 21                         jg      0x265 <_JIT_ENTRY+0x265>
// 244: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000246:  R_X86_64_64  .rodata.str1.1
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_NegativeRefcount
// 258: be b7 0c 00 00                movl    $0xcb7, %esi            # imm = 0xCB7
// 25d: 4c 89 fa                      movq    %r15, %rdx
// 260: ff d0                         callq   *%rax
// 262: 49 8b 07                      movq    (%r15), %rax
// 265: 85 c0                         testl   %eax, %eax
// 267: 78 20                         js      0x289 <_JIT_ENTRY+0x289>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 273: ff d0                         callq   *%rax
// 275: 49 ff 0f                      decq    (%r15)
// 278: 75 0f                         jne     0x289 <_JIT_ENTRY+0x289>
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  _Py_Dealloc
// 284: 4c 89 ff                      movq    %r15, %rdi
// 287: ff d0                         callq   *%rax
// 289: 49 8b 45 00                   movq    (%r13), %rax
// 28d: 48 85 c0                      testq   %rax, %rax
// 290: 7f 22                         jg      0x2b4 <_JIT_ENTRY+0x2b4>
// 292: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000294:  R_X86_64_64  .rodata.str1.1
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _Py_NegativeRefcount
// 2a6: be b8 0c 00 00                movl    $0xcb8, %esi            # imm = 0xCB8
// 2ab: 4c 89 ea                      movq    %r13, %rdx
// 2ae: ff d0                         callq   *%rax
// 2b0: 49 8b 45 00                   movq    (%r13), %rax
// 2b4: 85 c0                         testl   %eax, %eax
// 2b6: 78 21                         js      0x2d9 <_JIT_ENTRY+0x2d9>
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c2: ff d0                         callq   *%rax
// 2c4: 49 ff 4d 00                   decq    (%r13)
// 2c8: 75 0f                         jne     0x2d9 <_JIT_ENTRY+0x2d9>
// 2ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cc:  R_X86_64_64  _Py_Dealloc
// 2d4: 4c 89 ef                      movq    %r13, %rdi
// 2d7: ff d0                         callq   *%rax
// 2d9: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 2dd: 48 83 c0 f0                   addq    $-0x10, %rax
// 2e1: 4d 85 e4                      testq   %r12, %r12
// 2e4: 74 4d                         je      0x333 <_JIT_ENTRY+0x333>
// 2e6: 49 8d 34 de                   leaq    (%r14,%rbx,8), %rsi
// 2ea: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2ee: 4c 89 20                      movq    %r12, (%rax)
// 2f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f3:  R_X86_64_64  _JIT_CONTINUE
// 2fb: 48 89 ef                      movq    %rbp, %rdi
// 2fe: 48 8b 14 24                   movq    (%rsp), %rdx
// 302: 48 83 c4 28                   addq    $0x28, %rsp
// 306: 5b                            popq    %rbx
// 307: 41 5c                         popq    %r12
// 309: 41 5d                         popq    %r13
// 30b: 41 5e                         popq    %r14
// 30d: 41 5f                         popq    %r15
// 30f: 5d                            popq    %rbp
// 310: ff e0                         jmpq    *%rax
// 312: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000314:  R_X86_64_64  _Py_Dealloc
// 31c: 4c 89 e7                      movq    %r12, %rdi
// 31f: ff d0                         callq   *%rax
// 321: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 326: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 32a: 4d 85 ff                      testq   %r15, %r15
// 32d: 0f 85 f2 fd ff ff             jne     0x125 <_JIT_ENTRY+0x125>
// 333: 48 29 e8                      subq    %rbp, %rax
// 336: 48 83 c0 b8                   addq    $-0x48, %rax
// 33a: 48 c1 e8 03                   shrq    $0x3, %rax
// 33e: 89 45 40                      movl    %eax, 0x40(%rbp)
// 341: 31 c0                         xorl    %eax, %eax
// 343: 48 83 c4 28                   addq    $0x28, %rsp
// 347: 5b                            popq    %rbx
// 348: 41 5c                         popq    %r12
// 34a: 41 5d                         popq    %r13
// 34c: 41 5e                         popq    %r14
// 34e: 41 5f                         popq    %r15
// 350: 5d                            popq    %rbp
// 351: c3                            retq
// 352: 
static const unsigned char _CALL_BUILTIN_CLASSplus_FORMAT_WITH_SPEC_code_body[851] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf5, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe4, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xff, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x0e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xbb, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0xd7, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xba, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x7c, 0xde, 0xf0, 0x4d, 0x8b, 0x6c, 0xde, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb8, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x83, 0xc0, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x4d, 0x49, 0x8d, 0x34, 0xde, 0x48, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xff, 0x0f, 0x85, 0xf2, 0xfd, 0xff, 0xff, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_FORMAT_WITH_SPEC_code_holes[24] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x314, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_FORMAT_WITH_SPEC_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_FORMAT_WITH_SPEC_data_holes[1];

// _CALL_BUILTIN_CLASSplus_FOR_ITER_TIER_TWO
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_FOR_ITER_TIER_TWO.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 ff                      movq    %rdi, %r15
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 bd 02 00 00             je      0x327 <_JIT_ENTRY+0x327>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 ac 02 00 00             je      0x327 <_JIT_ENTRY+0x327>
// 7b: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 80: 4c 89 4c 24 08                movq    %r9, 0x8(%rsp)
// 85: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 8a: 4c 89 3c 24                   movq    %r15, (%rsp)
// 8e: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 41 0f 94 c7                   sete    %r15b
// 99: 89 da                         movl    %ebx, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 01 01 00 00             je      0x1c5 <_JIT_ENTRY+0x1c5>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// f6: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// fb: 78 16                         js      0x113 <_JIT_ENTRY+0x113>
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 107: ff d0                         callq   *%rax
// 109: 49 ff 0c 24                   decq    (%r12)
// 10d: 0f 84 36 01 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 113: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 118: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 11c: 4d 85 ff                      testq   %r15, %r15
// 11f: 0f 84 45 01 00 00             je      0x26a <_JIT_ENTRY+0x26a>
// 125: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 12a: 49 8d 1c ce                   leaq    (%r14,%rcx,8), %rbx
// 12e: 4c 89 38                      movq    %r15, (%rax)
// 131: 49 8b 45 10                   movq    0x10(%r13), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 74 17                         je      0x153 <_JIT_ENTRY+0x153>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_HandlePending
// 146: 4c 89 ef                      movq    %r13, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 85 c0                         testl   %eax, %eax
// 14d: 0f 85 1a 01 00 00             jne     0x26d <_JIT_ENTRY+0x26d>
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _JIT_OPARG
// 15d: f7 d0                         notl    %eax
// 15f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 164: 4c 63 f8                      movslq  %eax, %r15
// 167: 4f 8b 64 fe f8                movq    -0x8(%r14,%r15,8), %r12
// 16c: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 171: 4c 89 e7                      movq    %r12, %rdi
// 174: ff 90 e0 00 00 00             callq   *0xe0(%rax)
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 0f 84 03 01 00 00             je      0x286 <_JIT_ENTRY+0x286>
// 183: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000185:  R_X86_64_64  _JIT_OPARG
// 18d: f7 d1                         notl    %ecx
// 18f: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 195: 48 63 c9                      movslq  %ecx, %rcx
// 198: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 19c: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 1a0: 48 83 c6 08                   addq    $0x8, %rsi
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _JIT_CONTINUE
// 1ae: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1b2: 4c 89 ea                      movq    %r13, %rdx
// 1b5: 48 83 c4 28                   addq    $0x28, %rsp
// 1b9: 5b                            popq    %rbx
// 1ba: 41 5c                         popq    %r12
// 1bc: 41 5d                         popq    %r13
// 1be: 41 5e                         popq    %r14
// 1c0: 41 5f                         popq    %r15
// 1c2: 5d                            popq    %rbp
// 1c3: ff e0                         jmpq    *%rax
// 1c5: 83 fb 02                      cmpl    $0x2, %ebx
// 1c8: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1ce: 44 0f 43 fb                   cmovael %ebx, %r15d
// 1d2: 31 db                         xorl    %ebx, %ebx
// 1d4: eb 16                         jmp     0x1ec <_JIT_ENTRY+0x1ec>
// 1d6: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 1e0: 48 ff c3                      incq    %rbx
// 1e3: 49 39 df                      cmpq    %rbx, %r15
// 1e6: 0f 84 d8 fe ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 1ec: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1f1: 49 8b 45 00                   movq    (%r13), %rax
// 1f5: 48 85 c0                      testq   %rax, %rax
// 1f8: 7e 06                         jle     0x200 <_JIT_ENTRY+0x200>
// 1fa: 85 c0                         testl   %eax, %eax
// 1fc: 78 e2                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1fe: eb 26                         jmp     0x226 <_JIT_ENTRY+0x226>
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 ba                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 a8                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 97                         jmp     0x1e0 <_JIT_ENTRY+0x1e0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_Dealloc
// 253: 4c 89 e7                      movq    %r12, %rdi
// 256: ff d0                         callq   *%rax
// 258: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 25d: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 261: 4d 85 ff                      testq   %r15, %r15
// 264: 0f 85 bb fe ff ff             jne     0x125 <_JIT_ENTRY+0x125>
// 26a: 48 89 c3                      movq    %rax, %rbx
// 26d: 48 8b 04 24                   movq    (%rsp), %rax
// 271: 48 29 c3                      subq    %rax, %rbx
// 274: 48 83 c3 b8                   addq    $-0x48, %rbx
// 278: 48 c1 eb 03                   shrq    $0x3, %rbx
// 27c: 89 58 40                      movl    %ebx, 0x40(%rax)
// 27f: 31 c0                         xorl    %eax, %eax
// 281: e9 c9 00 00 00                jmp     0x34f <_JIT_ENTRY+0x34f>
// 286: 49 8b 45 68                   movq    0x68(%r13), %rax
// 28a: 48 85 c0                      testq   %rax, %rax
// 28d: 74 36                         je      0x2c5 <_JIT_ENTRY+0x2c5>
// 28f: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 294: 74 2f                         je      0x2c5 <_JIT_ENTRY+0x2c5>
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  PyExc_StopIteration
// 2a0: 48 8b 30                      movq    (%rax), %rsi
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _PyErr_ExceptionMatches
// 2ad: 4c 89 ef                      movq    %r13, %rdi
// 2b0: ff d0                         callq   *%rax
// 2b2: 85 c0                         testl   %eax, %eax
// 2b4: 74 b7                         je      0x26d <_JIT_ENTRY+0x26d>
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _PyErr_Clear
// 2c0: 4c 89 ef                      movq    %r13, %rdi
// 2c3: ff d0                         callq   *%rax
// 2c5: 49 8b 04 24                   movq    (%r12), %rax
// 2c9: 48 85 c0                      testq   %rax, %rax
// 2cc: 7f 22                         jg      0x2f0 <_JIT_ENTRY+0x2f0>
// 2ce: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d0:  R_X86_64_64  .rodata.str1.1
// 2d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002da:  R_X86_64_64  _Py_NegativeRefcount
// 2e2: be 80 08 00 00                movl    $0x880, %esi            # imm = 0x880
// 2e7: 4c 89 e2                      movq    %r12, %rdx
// 2ea: ff d0                         callq   *%rax
// 2ec: 49 8b 04 24                   movq    (%r12), %rax
// 2f0: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 2f4: 49 83 c6 f8                   addq    $-0x8, %r14
// 2f8: 85 c0                         testl   %eax, %eax
// 2fa: 78 27                         js      0x323 <_JIT_ENTRY+0x323>
// 2fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 306: ff d0                         callq   *%rax
// 308: 49 ff 0c 24                   decq    (%r12)
// 30c: 4c 8b 3c 24                   movq    (%rsp), %r15
// 310: 75 15                         jne     0x327 <_JIT_ENTRY+0x327>
// 312: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000314:  R_X86_64_64  _Py_Dealloc
// 31c: 4c 89 e7                      movq    %r12, %rdi
// 31f: ff d0                         callq   *%rax
// 321: eb 04                         jmp     0x327 <_JIT_ENTRY+0x327>
// 323: 4c 8b 3c 24                   movq    (%rsp), %r15
// 327: 4d 29 fe                      subq    %r15, %r14
// 32a: 49 83 c6 b8                   addq    $-0x48, %r14
// 32e: 49 c1 ee 03                   shrq    $0x3, %r14
// 332: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 336: 49 8b 07                      movq    (%r15), %rax
// 339: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000033b:  R_X86_64_64  _JIT_TARGET
// 343: 89 c9                         movl    %ecx, %ecx
// 345: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 349: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 34f: 48 83 c4 28                   addq    $0x28, %rsp
// 353: 5b                            popq    %rbx
// 354: 41 5c                         popq    %r12
// 356: 41 5d                         popq    %r13
// 358: 41 5e                         popq    %r14
// 35a: 41 5f                         popq    %r15
// 35c: 5d                            popq    %rbp
// 35d: c3                            retq
// 35e: 
static const unsigned char _CALL_BUILTIN_CLASSplus_FOR_ITER_TIER_TWO_code_body[863] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xbd, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4c, 0x89, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x01, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x36, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x45, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x8d, 0x1c, 0xce, 0x4c, 0x89, 0x38, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x1a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4f, 0x8b, 0x64, 0xfe, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0xff, 0x90, 0xe0, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x03, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x83, 0xfb, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfb, 0x31, 0xdb, 0xeb, 0x16, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0xd8, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xff, 0x0f, 0x85, 0xbb, 0xfe, 0xff, 0xff, 0x48, 0x89, 0xc3, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x58, 0x40, 0x31, 0xc0, 0xe9, 0xc9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x36, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0xb7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x4c, 0x8b, 0x3c, 0x24, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x04, 0x4c, 0x8b, 0x3c, 0x24, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_FOR_ITER_TIER_TWO_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_StopIteration, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x314, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_FOR_ITER_TIER_TWO_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_FOR_ITER_TIER_TWO_data_holes[1];

// _CALL_BUILTIN_CLASSplus_GET_AITER
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_GET_AITER.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f8 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e7 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 cc 00 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f2: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// f7: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// fc: 78 16                         js      0x114 <_JIT_ENTRY+0x114>
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 108: ff d0                         callq   *%rax
// 10a: 49 ff 0c 24                   decq    (%r12)
// 10e: 0f 84 5a 02 00 00             je      0x36e <_JIT_ENTRY+0x36e>
// 114: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 119: 4d 8d 34 c7                   leaq    (%r15,%rax,8), %r14
// 11d: 4d 85 ed                      testq   %r13, %r13
// 120: 0f 84 e0 02 00 00             je      0x406 <_JIT_ENTRY+0x406>
// 126: 48 8b 04 24                   movq    (%rsp), %rax
// 12a: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 12e: 4d 89 2e                      movq    %r13, (%r14)
// 131: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 0f 84 c9 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_HandlePending
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 0f 84 b2 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 157: 4d 89 e6                      movq    %r12, %r14
// 15a: e9 a7 02 00 00                jmp     0x406 <_JIT_ENTRY+0x406>
// 15f: 49 29 ff                      subq    %rdi, %r15
// 162: 49 83 c7 b8                   addq    $-0x48, %r15
// 166: 49 c1 ef 03                   shrq    $0x3, %r15
// 16a: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 16e: 48 8b 07                      movq    (%rdi), %rax
// 171: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000173:  R_X86_64_64  _JIT_TARGET
// 17b: 89 c9                         movl    %ecx, %ecx
// 17d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 181: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 187: e9 8b 02 00 00                jmp     0x417 <_JIT_ENTRY+0x417>
// 18c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 190: 41 be 01 00 00 00             movl    $0x1, %r14d
// 196: 45 0f 43 f5                   cmovael %r13d, %r14d
// 19a: 31 db                         xorl    %ebx, %ebx
// 19c: eb 0e                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19e: 66 90                         nop
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 de                      cmpq    %rbx, %r14
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 98                         cltq
// 21c: 4d 8d 34 c7                   leaq    (%r15,%rax,8), %r14
// 220: 49 83 c6 f8                   addq    $-0x8, %r14
// 224: 4d 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %r15
// 229: 49 8b 47 08                   movq    0x8(%r15), %rax
// 22d: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 231: 48 85 c9                      testq   %rcx, %rcx
// 234: 0f 84 ad 00 00 00             je      0x2e7 <_JIT_ENTRY+0x2e7>
// 23a: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 23e: 48 85 c9                      testq   %rcx, %rcx
// 241: 0f 84 a0 00 00 00             je      0x2e7 <_JIT_ENTRY+0x2e7>
// 247: 4c 89 ff                      movq    %r15, %rdi
// 24a: ff d1                         callq   *%rcx
// 24c: 49 89 c5                      movq    %rax, %r13
// 24f: 49 8b 07                      movq    (%r15), %rax
// 252: 48 85 c0                      testq   %rax, %rax
// 255: 7f 21                         jg      0x278 <_JIT_ENTRY+0x278>
// 257: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000259:  R_X86_64_64  .rodata.str1.1
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_NegativeRefcount
// 26b: be c5 02 00 00                movl    $0x2c5, %esi            # imm = 0x2C5
// 270: 4c 89 fa                      movq    %r15, %rdx
// 273: ff d0                         callq   *%rax
// 275: 49 8b 07                      movq    (%r15), %rax
// 278: 85 c0                         testl   %eax, %eax
// 27a: 78 20                         js      0x29c <_JIT_ENTRY+0x29c>
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 286: ff d0                         callq   *%rax
// 288: 49 ff 0f                      decq    (%r15)
// 28b: 75 0f                         jne     0x29c <_JIT_ENTRY+0x29c>
// 28d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028f:  R_X86_64_64  _Py_Dealloc
// 297: 4c 89 ff                      movq    %r15, %rdi
// 29a: ff d0                         callq   *%rax
// 29c: 4d 85 ed                      testq   %r13, %r13
// 29f: 0f 84 61 01 00 00             je      0x406 <_JIT_ENTRY+0x406>
// 2a5: 49 8b 45 08                   movq    0x8(%r13), %rax
// 2a9: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 2ad: 48 85 c9                      testq   %rcx, %rcx
// 2b0: 0f 84 db 00 00 00             je      0x391 <_JIT_ENTRY+0x391>
// 2b6: 48 83 79 10 00                cmpq    $0x0, 0x10(%rcx)
// 2bb: 0f 84 d0 00 00 00             je      0x391 <_JIT_ENTRY+0x391>
// 2c1: 4d 89 2e                      movq    %r13, (%r14)
// 2c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c6:  R_X86_64_64  _JIT_CONTINUE
// 2ce: 48 89 df                      movq    %rbx, %rdi
// 2d1: 4c 89 e6                      movq    %r12, %rsi
// 2d4: 48 89 ea                      movq    %rbp, %rdx
// 2d7: 48 83 c4 28                   addq    $0x28, %rsp
// 2db: 5b                            popq    %rbx
// 2dc: 41 5c                         popq    %r12
// 2de: 41 5d                         popq    %r13
// 2e0: 41 5e                         popq    %r14
// 2e2: 41 5f                         popq    %r15
// 2e4: 5d                            popq    %rbp
// 2e5: ff e0                         jmpq    *%rax
// 2e7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002e9:  R_X86_64_64  PyExc_TypeError
// 2f1: 48 8b 31                      movq    (%rcx), %rsi
// 2f4: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2f8: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002fa:  R_X86_64_64  .rodata.str1.1+0x39
// 302: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000304:  R_X86_64_64  _PyErr_Format
// 30c: 48 89 ef                      movq    %rbp, %rdi
// 30f: 31 c0                         xorl    %eax, %eax
// 311: 41 ff d0                      callq   *%r8
// 314: 49 8b 07                      movq    (%r15), %rax
// 317: 48 85 c0                      testq   %rax, %rax
// 31a: 7f 21                         jg      0x33d <_JIT_ENTRY+0x33d>
// 31c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000031e:  R_X86_64_64  .rodata.str1.1
// 326: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000328:  R_X86_64_64  _Py_NegativeRefcount
// 330: be c1 02 00 00                movl    $0x2c1, %esi            # imm = 0x2C1
// 335: 4c 89 fa                      movq    %r15, %rdx
// 338: ff d0                         callq   *%rax
// 33a: 49 8b 07                      movq    (%r15), %rax
// 33d: 85 c0                         testl   %eax, %eax
// 33f: 0f 88 c1 00 00 00             js      0x406 <_JIT_ENTRY+0x406>
// 345: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000347:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 34f: ff d0                         callq   *%rax
// 351: 49 ff 0f                      decq    (%r15)
// 354: 0f 85 ac 00 00 00             jne     0x406 <_JIT_ENTRY+0x406>
// 35a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035c:  R_X86_64_64  _Py_Dealloc
// 364: 4c 89 ff                      movq    %r15, %rdi
// 367: ff d0                         callq   *%rax
// 369: e9 98 00 00 00                jmp     0x406 <_JIT_ENTRY+0x406>
// 36e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000370:  R_X86_64_64  _Py_Dealloc
// 378: 4c 89 e7                      movq    %r12, %rdi
// 37b: ff d0                         callq   *%rax
// 37d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 382: 4d 8d 34 c7                   leaq    (%r15,%rax,8), %r14
// 386: 4d 85 ed                      testq   %r13, %r13
// 389: 0f 85 97 fd ff ff             jne     0x126 <_JIT_ENTRY+0x126>
// 38f: eb 75                         jmp     0x406 <_JIT_ENTRY+0x406>
// 391: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000393:  R_X86_64_64  PyExc_TypeError
// 39b: 48 8b 31                      movq    (%rcx), %rsi
// 39e: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 3a2: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000003a4:  R_X86_64_64  .rodata.str1.1+0x7a
// 3ac: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000003ae:  R_X86_64_64  _PyErr_Format
// 3b6: 48 89 ef                      movq    %rbp, %rdi
// 3b9: 31 c0                         xorl    %eax, %eax
// 3bb: 41 ff d0                      callq   *%r8
// 3be: 49 8b 45 00                   movq    (%r13), %rax
// 3c2: 48 85 c0                      testq   %rax, %rax
// 3c5: 7f 22                         jg      0x3e9 <_JIT_ENTRY+0x3e9>
// 3c7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003c9:  R_X86_64_64  .rodata.str1.1
// 3d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d3:  R_X86_64_64  _Py_NegativeRefcount
// 3db: be cd 02 00 00                movl    $0x2cd, %esi            # imm = 0x2CD
// 3e0: 4c 89 ea                      movq    %r13, %rdx
// 3e3: ff d0                         callq   *%rax
// 3e5: 49 8b 45 00                   movq    (%r13), %rax
// 3e9: 85 c0                         testl   %eax, %eax
// 3eb: 78 19                         js      0x406 <_JIT_ENTRY+0x406>
// 3ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ef:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3f7: ff d0                         callq   *%rax
// 3f9: 49 ff 4d 00                   decq    (%r13)
// 3fd: 4d 89 ef                      movq    %r13, %r15
// 400: 0f 84 54 ff ff ff             je      0x35a <_JIT_ENTRY+0x35a>
// 406: 49 29 de                      subq    %rbx, %r14
// 409: 49 83 c6 b8                   addq    $-0x48, %r14
// 40d: 49 c1 ee 03                   shrq    $0x3, %r14
// 411: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 415: 31 c0                         xorl    %eax, %eax
// 417: 48 83 c4 28                   addq    $0x28, %rsp
// 41b: 5b                            popq    %rbx
// 41c: 41 5c                         popq    %r12
// 41e: 41 5d                         popq    %r13
// 420: 41 5e                         popq    %r14
// 422: 41 5f                         popq    %r15
// 424: 5d                            popq    %rbp
// 425: c3                            retq
// 426: 
static const unsigned char _CALL_BUILTIN_CLASSplus_GET_AITER_code_body[1063] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x5a, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8d, 0x34, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xe0, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x24, 0xc7, 0x4d, 0x89, 0x2e, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe6, 0xe9, 0xa7, 0x02, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x8b, 0x02, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x34, 0xc7, 0x49, 0x83, 0xc6, 0xf8, 0x4d, 0x8b, 0x7c, 0xc7, 0xf8, 0x49, 0x8b, 0x47, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xad, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xa0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd1, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x61, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xdb, 0x00, 0x00, 0x00, 0x48, 0x83, 0x79, 0x10, 0x00, 0x0f, 0x84, 0xd0, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0xc1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0xac, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x98, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8d, 0x34, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x85, 0x97, 0xfd, 0xff, 0xff, 0xeb, 0x75, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcd, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x4d, 0x89, 0xef, 0x0f, 0x84, 0x54, 0xff, 0xff, 0xff, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_GET_AITER_code_holes[32] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x304, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x31e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x347, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x35c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x370, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x393, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x3a4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7a},
    {0x3ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x3c9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an object with __aiter__ method, got %.100s\x00'async for' received an object from __aiter__ that does not implement __anext__: %.100s\x00"
// d2: 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_GET_AITER_data_body[217] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_GET_AITER_data_holes[1];

// _CALL_BUILTIN_CLASSplus_GET_ANEXT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_GET_ANEXT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 b7 01 00 00             je      0x21e <_JIT_ENTRY+0x21e>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 a6 01 00 00             je      0x21e <_JIT_ENTRY+0x21e>
// 78: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 7d: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 82: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 87: 48 89 3c 24                   movq    %rdi, (%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 8b 01 00 00             je      0x24b <_JIT_ENTRY+0x24b>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// f2: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 0c 24                   decq    (%r12)
// 109: 0f 84 ba 01 00 00             je      0x2c9 <_JIT_ENTRY+0x2c9>
// 10f: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 113: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 118: 48 85 d2                      testq   %rdx, %rdx
// 11b: 0f 84 c9 01 00 00             je      0x2ea <_JIT_ENTRY+0x2ea>
// 121: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 126: 49 8d 1c cf                   leaq    (%r15,%rcx,8), %rbx
// 12a: 48 89 10                      movq    %rdx, (%rax)
// 12d: 49 8b 46 10                   movq    0x10(%r14), %rax
// 131: 48 8b 00                      movq    (%rax), %rax
// 134: 84 c0                         testb   %al, %al
// 136: 74 17                         je      0x14f <_JIT_ENTRY+0x14f>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_HandlePending
// 142: 4c 89 f7                      movq    %r14, %rdi
// 145: ff d0                         callq   *%rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 0f 85 6a 02 00 00             jne     0x3b9 <_JIT_ENTRY+0x3b9>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _JIT_OPARG
// 159: f7 d0                         notl    %eax
// 15b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 160: 48 98                         cltq
// 162: 49 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %rdi
// 167: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 16b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000016d:  R_X86_64_64  PyAsyncGen_Type
// 175: 48 39 c8                      cmpq    %rcx, %rax
// 178: 0f 84 a6 01 00 00             je      0x324 <_JIT_ENTRY+0x324>
// 17e: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 182: 48 85 c9                      testq   %rcx, %rcx
// 185: 0f 84 67 01 00 00             je      0x2f2 <_JIT_ENTRY+0x2f2>
// 18b: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 18f: 48 85 c9                      testq   %rcx, %rcx
// 192: 0f 84 5a 01 00 00             je      0x2f2 <_JIT_ENTRY+0x2f2>
// 198: ff d1                         callq   *%rcx
// 19a: 48 85 c0                      testq   %rax, %rax
// 19d: 0f 84 16 02 00 00             je      0x3b9 <_JIT_ENTRY+0x3b9>
// 1a3: 49 89 c4                      movq    %rax, %r12
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 1b0: 4c 89 e7                      movq    %r12, %rdi
// 1b3: ff d0                         callq   *%rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 0f 84 b9 01 00 00             je      0x377 <_JIT_ENTRY+0x377>
// 1be: 49 89 c5                      movq    %rax, %r13
// 1c1: 49 8b 04 24                   movq    (%r12), %rax
// 1c5: 48 85 c0                      testq   %rax, %rax
// 1c8: 7f 22                         jg      0x1ec <_JIT_ENTRY+0x1ec>
// 1ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001cc:  R_X86_64_64  .rodata.str1.1
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _Py_NegativeRefcount
// 1de: be fb 02 00 00                movl    $0x2fb, %esi            # imm = 0x2FB
// 1e3: 4c 89 e2                      movq    %r12, %rdx
// 1e6: ff d0                         callq   *%rax
// 1e8: 49 8b 04 24                   movq    (%r12), %rax
// 1ec: 85 c0                         testl   %eax, %eax
// 1ee: 0f 88 43 01 00 00             js      0x337 <_JIT_ENTRY+0x337>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fe: ff d0                         callq   *%rax
// 200: 49 ff 0c 24                   decq    (%r12)
// 204: 0f 85 2d 01 00 00             jne     0x337 <_JIT_ENTRY+0x337>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _Py_Dealloc
// 214: 4c 89 e7                      movq    %r12, %rdi
// 217: ff d0                         callq   *%rax
// 219: e9 19 01 00 00                jmp     0x337 <_JIT_ENTRY+0x337>
// 21e: 49 29 ff                      subq    %rdi, %r15
// 221: 49 83 c7 b8                   addq    $-0x48, %r15
// 225: 49 c1 ef 03                   shrq    $0x3, %r15
// 229: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 22d: 48 8b 07                      movq    (%rdi), %rax
// 230: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000232:  R_X86_64_64  _JIT_TARGET
// 23a: 89 c9                         movl    %ecx, %ecx
// 23c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 240: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 246: e9 82 01 00 00                jmp     0x3cd <_JIT_ENTRY+0x3cd>
// 24b: 41 83 fd 02                   cmpl    $0x2, %r13d
// 24f: 41 be 01 00 00 00             movl    $0x1, %r14d
// 255: 45 0f 43 f5                   cmovael %r13d, %r14d
// 259: 31 db                         xorl    %ebx, %ebx
// 25b: eb 0f                         jmp     0x26c <_JIT_ENTRY+0x26c>
// 25d: 0f 1f 00                      nopl    (%rax)
// 260: 48 ff c3                      incq    %rbx
// 263: 49 39 de                      cmpq    %rbx, %r14
// 266: 0f 84 54 fe ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 26c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 271: 49 8b 45 00                   movq    (%r13), %rax
// 275: 48 85 c0                      testq   %rax, %rax
// 278: 7e 06                         jle     0x280 <_JIT_ENTRY+0x280>
// 27a: 85 c0                         testl   %eax, %eax
// 27c: 78 e2                         js      0x260 <_JIT_ENTRY+0x260>
// 27e: eb 26                         jmp     0x2a6 <_JIT_ENTRY+0x2a6>
// 280: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000282:  R_X86_64_64  .rodata.str1.1
// 28a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 28f: 4c 89 ea                      movq    %r13, %rdx
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _Py_NegativeRefcount
// 29c: ff d0                         callq   *%rax
// 29e: 49 8b 45 00                   movq    (%r13), %rax
// 2a2: 85 c0                         testl   %eax, %eax
// 2a4: 78 ba                         js      0x260 <_JIT_ENTRY+0x260>
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b0: ff d0                         callq   *%rax
// 2b2: 49 ff 4d 00                   decq    (%r13)
// 2b6: 75 a8                         jne     0x260 <_JIT_ENTRY+0x260>
// 2b8: 4c 89 ef                      movq    %r13, %rdi
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _Py_Dealloc
// 2c5: ff d0                         callq   *%rax
// 2c7: eb 97                         jmp     0x260 <_JIT_ENTRY+0x260>
// 2c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cb:  R_X86_64_64  _Py_Dealloc
// 2d3: 4c 89 e7                      movq    %r12, %rdi
// 2d6: ff d0                         callq   *%rax
// 2d8: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 2dc: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2e1: 48 85 d2                      testq   %rdx, %rdx
// 2e4: 0f 85 37 fe ff ff             jne     0x121 <_JIT_ENTRY+0x121>
// 2ea: 48 89 c3                      movq    %rax, %rbx
// 2ed: e9 c7 00 00 00                jmp     0x3b9 <_JIT_ENTRY+0x3b9>
// 2f2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002f4:  R_X86_64_64  PyExc_TypeError
// 2fc: 48 8b 31                      movq    (%rcx), %rsi
// 2ff: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 303: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000305:  R_X86_64_64  .rodata.str1.1+0x39
// 30d: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000030f:  R_X86_64_64  _PyErr_Format
// 317: 4c 89 f7                      movq    %r14, %rdi
// 31a: 31 c0                         xorl    %eax, %eax
// 31c: 41 ff d0                      callq   *%r8
// 31f: e9 95 00 00 00                jmp     0x3b9 <_JIT_ENTRY+0x3b9>
// 324: 48 8b 41 50                   movq    0x50(%rcx), %rax
// 328: ff 50 10                      callq   *0x10(%rax)
// 32b: 49 89 c5                      movq    %rax, %r13
// 32e: 48 85 c0                      testq   %rax, %rax
// 331: 0f 84 82 00 00 00             je      0x3b9 <_JIT_ENTRY+0x3b9>
// 337: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000339:  R_X86_64_64  _JIT_OPARG
// 341: f7 d0                         notl    %eax
// 343: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 348: 48 98                         cltq
// 34a: 4d 89 2c c7                   movq    %r13, (%r15,%rax,8)
// 34e: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 352: 48 83 c6 08                   addq    $0x8, %rsi
// 356: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000358:  R_X86_64_64  _JIT_CONTINUE
// 360: 48 8b 3c 24                   movq    (%rsp), %rdi
// 364: 4c 89 f2                      movq    %r14, %rdx
// 367: 48 83 c4 28                   addq    $0x28, %rsp
// 36b: 5b                            popq    %rbx
// 36c: 41 5c                         popq    %r12
// 36e: 41 5d                         popq    %r13
// 370: 41 5e                         popq    %r14
// 372: 41 5f                         popq    %r15
// 374: 5d                            popq    %rbp
// 375: ff e0                         jmpq    *%rax
// 377: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000379:  R_X86_64_64  PyExc_TypeError
// 381: 48 8b 38                      movq    (%rax), %rdi
// 384: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 389: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 38d: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000038f:  R_X86_64_64  .rodata.str1.1+0x7c
// 397: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000399:  R_X86_64_64  _PyErr_FormatFromCause
// 3a1: 31 c0                         xorl    %eax, %eax
// 3a3: ff d1                         callq   *%rcx
// 3a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a7:  R_X86_64_64  .text+0x3e0
// 3af: bf f8 02 00 00                movl    $0x2f8, %edi            # imm = 0x2F8
// 3b4: 4c 89 e6                      movq    %r12, %rsi
// 3b7: ff d0                         callq   *%rax
// 3b9: 48 8b 04 24                   movq    (%rsp), %rax
// 3bd: 48 29 c3                      subq    %rax, %rbx
// 3c0: 48 83 c3 b8                   addq    $-0x48, %rbx
// 3c4: 48 c1 eb 03                   shrq    $0x3, %rbx
// 3c8: 89 58 40                      movl    %ebx, 0x40(%rax)
// 3cb: 31 c0                         xorl    %eax, %eax
// 3cd: 48 83 c4 28                   addq    $0x28, %rsp
// 3d1: 5b                            popq    %rbx
// 3d2: 41 5c                         popq    %r12
// 3d4: 41 5d                         popq    %r13
// 3d6: 41 5e                         popq    %r14
// 3d8: 41 5f                         popq    %r15
// 3da: 5d                            popq    %rbp
// 3db: c3                            retq
// 3dc: 0f 1f 40 00                   nopl    (%rax)
// 
// 00000000000003e0 <Py_DECREF>:
// 3e0: 53                            pushq   %rbx
// 3e1: 48 89 f3                      movq    %rsi, %rbx
// 3e4: 48 8b 06                      movq    (%rsi), %rax
// 3e7: 48 85 c0                      testq   %rax, %rax
// 3ea: 7e 06                         jle     0x3f2 <Py_DECREF+0x12>
// 3ec: 85 c0                         testl   %eax, %eax
// 3ee: 79 24                         jns     0x414 <Py_DECREF+0x34>
// 3f0: eb 33                         jmp     0x425 <Py_DECREF+0x45>
// 3f2: 89 fe                         movl    %edi, %esi
// 3f4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003f6:  R_X86_64_64  .rodata.str1.1
// 3fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000400:  R_X86_64_64  _Py_NegativeRefcount
// 408: 48 89 da                      movq    %rbx, %rdx
// 40b: ff d0                         callq   *%rax
// 40d: 48 8b 03                      movq    (%rbx), %rax
// 410: 85 c0                         testl   %eax, %eax
// 412: 78 11                         js      0x425 <Py_DECREF+0x45>
// 414: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000416:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 41e: ff d0                         callq   *%rax
// 420: 48 ff 0b                      decq    (%rbx)
// 423: 74 02                         je      0x427 <Py_DECREF+0x47>
// 425: 5b                            popq    %rbx
// 426: c3                            retq
// 427: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000429:  R_X86_64_64  _Py_Dealloc
// 431: 48 89 df                      movq    %rbx, %rdi
// 434: 5b                            popq    %rbx
// 435: ff e0                         jmpq    *%rax
// 437: 
static const unsigned char _CALL_BUILTIN_CLASSplus_GET_ANEXT_code_body[1080] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xb7, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xa6, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x54, 0x24, 0x20, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x8b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xba, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xc9, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x8d, 0x1c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x6a, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc7, 0xf8, 0x48, 0x8b, 0x47, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0xa6, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x67, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x16, 0x02, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xb9, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfb, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x43, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x2d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x19, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x82, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x54, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x85, 0x37, 0xfe, 0xff, 0xff, 0x48, 0x89, 0xc3, 0xe9, 0xc7, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0x95, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x41, 0x50, 0xff, 0x50, 0x10, 0x49, 0x89, 0xc5, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x82, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x2c, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x38, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xf8, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x58, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x0f, 0x1f, 0x40, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_GET_ANEXT_code_holes[33] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyAsyncGen_Type, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x305, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x30f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x339, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x358, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x379, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x38f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7c},
    {0x399, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_FormatFromCause, 0x0},
    {0x3a7, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x3e0},
    {0x3f6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x400, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x416, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x429, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an iterator with __anext__ method, got %.100s\x00'async for' received an invalid object from __anext__: %.100s\x00"
// ba: 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_GET_ANEXT_data_body[193] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_GET_ANEXT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_GET_AWAITABLE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_GET_AWAITABLE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 69 01                   leal    0x1(%r9), %ebp
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 e9                   cmovel  %r9d, %ebp
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 ef 00 00 00             je      0x156 <_JIT_ENTRY+0x156>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 de 00 00 00             je      0x156 <_JIT_ENTRY+0x156>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 82: 48 89 14 24                   movq    %rdx, (%rsp)
// 86: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 8b: 4d 8d 2c cf                   leaq    (%r15,%rcx,8), %r13
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 89 ea                         movl    %ebp, %edx
// 97: 4c 89 e7                      movq    %r12, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: 41 ff d0                      callq   *%r8
// a2: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a9:  R_X86_64_64  _JIT_OPARG
// b1: 66 85 c0                      testw   %ax, %ax
// b4: 0f 94 c0                      sete    %al
// b7: 84 c3                         testb   %al, %bl
// b9: 0f 84 c4 00 00 00             je      0x183 <_JIT_ENTRY+0x183>
// bf: 49 8b 04 24                   movq    (%r12), %rax
// c3: 48 85 c0                      testq   %rax, %rax
// c6: 7f 22                         jg      0xea <_JIT_ENTRY+0xea>
// c8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ca:  R_X86_64_64  .rodata.str1.1
// d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d4:  R_X86_64_64  _Py_NegativeRefcount
// dc: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e1: 4c 89 e2                      movq    %r12, %rdx
// e4: ff d0                         callq   *%rax
// e6: 49 8b 04 24                   movq    (%r12), %rax
// ea: 85 c0                         testl   %eax, %eax
// ec: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f1: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// f6: 78 16                         js      0x10e <_JIT_ENTRY+0x10e>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 102: ff d0                         callq   *%rax
// 104: 49 ff 0c 24                   decq    (%r12)
// 108: 0f 84 3d 01 00 00             je      0x24b <_JIT_ENTRY+0x24b>
// 10e: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 112: 4d 85 f6                      testq   %r14, %r14
// 115: 0f 84 e8 02 00 00             je      0x403 <_JIT_ENTRY+0x403>
// 11b: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 120: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 124: 4c 89 33                      movq    %r14, (%rbx)
// 127: 48 8b 3c 24                   movq    (%rsp), %rdi
// 12b: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 12f: 48 8b 00                      movq    (%rax), %rax
// 132: 84 c0                         testb   %al, %al
// 134: 0f 84 cf 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  _Py_HandlePending
// 144: ff d0                         callq   *%rax
// 146: 85 c0                         testl   %eax, %eax
// 148: 0f 84 bb 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 14e: 4c 89 eb                      movq    %r13, %rbx
// 151: e9 ad 02 00 00                jmp     0x403 <_JIT_ENTRY+0x403>
// 156: 49 29 ff                      subq    %rdi, %r15
// 159: 49 83 c7 b8                   addq    $-0x48, %r15
// 15d: 49 c1 ef 03                   shrq    $0x3, %r15
// 161: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 165: 48 8b 07                      movq    (%rdi), %rax
// 168: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000016a:  R_X86_64_64  _JIT_TARGET
// 172: 89 c9                         movl    %ecx, %ecx
// 174: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 178: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 17e: e9 95 02 00 00                jmp     0x418 <_JIT_ENTRY+0x418>
// 183: 83 fd 02                      cmpl    $0x2, %ebp
// 186: 41 be 01 00 00 00             movl    $0x1, %r14d
// 18c: 44 0f 43 f5                   cmovael %ebp, %r14d
// 190: 31 db                         xorl    %ebx, %ebx
// 192: eb 18                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 194: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 de                      cmpq    %rbx, %r14
// 1a6: 0f 84 13 ff ff ff             je      0xbf <_JIT_ENTRY+0xbf>
// 1ac: 49 8b 6c dd 00                movq    (%r13,%rbx,8), %rbp
// 1b1: 48 8b 45 00                   movq    (%rbp), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 48 89 ea                      movq    %rbp, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 48 8b 45 00                   movq    (%rbp), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 48 ff 4d 00                   decq    (%rbp)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 48 89 ef                      movq    %rbp, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 63 d8                      movslq  %eax, %rbx
// 21d: 49 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %rbp
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 22c: 48 89 ef                      movq    %rbp, %rdi
// 22f: ff d0                         callq   *%rax
// 231: 49 89 c4                      movq    %rax, %r12
// 234: 48 85 c0                      testq   %rax, %rax
// 237: 74 33                         je      0x26c <_JIT_ENTRY+0x26c>
// 239: 48 8b 45 00                   movq    (%rbp), %rax
// 23d: 48 85 c0                      testq   %rax, %rax
// 240: 7e 54                         jle     0x296 <_JIT_ENTRY+0x296>
// 242: 85 c0                         testl   %eax, %eax
// 244: 79 76                         jns     0x2bc <_JIT_ENTRY+0x2bc>
// 246: e9 92 00 00 00                jmp     0x2dd <_JIT_ENTRY+0x2dd>
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_Dealloc
// 255: 4c 89 e7                      movq    %r12, %rdi
// 258: ff d0                         callq   *%rax
// 25a: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 25e: 4d 85 f6                      testq   %r14, %r14
// 261: 0f 85 b4 fe ff ff             jne     0x11b <_JIT_ENTRY+0x11b>
// 267: e9 97 01 00 00                jmp     0x403 <_JIT_ENTRY+0x403>
// 26c: 48 8b 75 08                   movq    0x8(%rbp), %rsi
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _JIT_OPARG
// 27a: 0f b7 d0                      movzwl  %ax, %edx
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _PyEval_FormatAwaitableError
// 287: 48 8b 3c 24                   movq    (%rsp), %rdi
// 28b: ff d0                         callq   *%rax
// 28d: 48 8b 45 00                   movq    (%rbp), %rax
// 291: 48 85 c0                      testq   %rax, %rax
// 294: 7f ac                         jg      0x242 <_JIT_ENTRY+0x242>
// 296: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000298:  R_X86_64_64  .rodata.str1.1
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _Py_NegativeRefcount
// 2aa: be 0c 03 00 00                movl    $0x30c, %esi            # imm = 0x30C
// 2af: 48 89 ea                      movq    %rbp, %rdx
// 2b2: ff d0                         callq   *%rax
// 2b4: 48 8b 45 00                   movq    (%rbp), %rax
// 2b8: 85 c0                         testl   %eax, %eax
// 2ba: 78 21                         js      0x2dd <_JIT_ENTRY+0x2dd>
// 2bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002be:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c6: ff d0                         callq   *%rax
// 2c8: 48 ff 4d 00                   decq    (%rbp)
// 2cc: 75 0f                         jne     0x2dd <_JIT_ENTRY+0x2dd>
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _Py_Dealloc
// 2d8: 48 89 ef                      movq    %rbp, %rdi
// 2db: ff d0                         callq   *%rax
// 2dd: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 2e1: 48 83 c3 f8                   addq    $-0x8, %rbx
// 2e5: 4d 85 e4                      testq   %r12, %r12
// 2e8: 0f 84 15 01 00 00             je      0x403 <_JIT_ENTRY+0x403>
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  PyCoro_Type
// 2f8: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2fd: 74 29                         je      0x328 <_JIT_ENTRY+0x328>
// 2ff: 4c 89 23                      movq    %r12, (%rbx)
// 302: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000304:  R_X86_64_64  _JIT_CONTINUE
// 30c: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 311: 4c 89 ee                      movq    %r13, %rsi
// 314: 48 8b 14 24                   movq    (%rsp), %rdx
// 318: 48 83 c4 28                   addq    $0x28, %rsp
// 31c: 5b                            popq    %rbx
// 31d: 41 5c                         popq    %r12
// 31f: 41 5d                         popq    %r13
// 321: 41 5e                         popq    %r14
// 323: 41 5f                         popq    %r15
// 325: 5d                            popq    %rbp
// 326: ff e0                         jmpq    *%rax
// 328: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032a:  R_X86_64_64  _PyGen_yf
// 332: 4c 89 e7                      movq    %r12, %rdi
// 335: ff d0                         callq   *%rax
// 337: 48 85 c0                      testq   %rax, %rax
// 33a: 74 c3                         je      0x2ff <_JIT_ENTRY+0x2ff>
// 33c: 49 89 c6                      movq    %rax, %r14
// 33f: 48 8b 00                      movq    (%rax), %rax
// 342: 48 85 c0                      testq   %rax, %rax
// 345: 7f 21                         jg      0x368 <_JIT_ENTRY+0x368>
// 347: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000349:  R_X86_64_64  .rodata.str1.1
// 351: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000353:  R_X86_64_64  _Py_NegativeRefcount
// 35b: be 13 03 00 00                movl    $0x313, %esi            # imm = 0x313
// 360: 4c 89 f2                      movq    %r14, %rdx
// 363: ff d0                         callq   *%rax
// 365: 49 8b 06                      movq    (%r14), %rax
// 368: 85 c0                         testl   %eax, %eax
// 36a: 78 20                         js      0x38c <_JIT_ENTRY+0x38c>
// 36c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 376: ff d0                         callq   *%rax
// 378: 49 ff 0e                      decq    (%r14)
// 37b: 75 0f                         jne     0x38c <_JIT_ENTRY+0x38c>
// 37d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037f:  R_X86_64_64  _Py_Dealloc
// 387: 4c 89 f7                      movq    %r14, %rdi
// 38a: ff d0                         callq   *%rax
// 38c: 49 8b 04 24                   movq    (%r12), %rax
// 390: 48 85 c0                      testq   %rax, %rax
// 393: 7f 22                         jg      0x3b7 <_JIT_ENTRY+0x3b7>
// 395: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000397:  R_X86_64_64  .rodata.str1.1
// 39f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a1:  R_X86_64_64  _Py_NegativeRefcount
// 3a9: be 14 03 00 00                movl    $0x314, %esi            # imm = 0x314
// 3ae: 4c 89 e2                      movq    %r12, %rdx
// 3b1: ff d0                         callq   *%rax
// 3b3: 49 8b 04 24                   movq    (%r12), %rax
// 3b7: 85 c0                         testl   %eax, %eax
// 3b9: 78 21                         js      0x3dc <_JIT_ENTRY+0x3dc>
// 3bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3c5: ff d0                         callq   *%rax
// 3c7: 49 ff 0c 24                   decq    (%r12)
// 3cb: 75 0f                         jne     0x3dc <_JIT_ENTRY+0x3dc>
// 3cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003cf:  R_X86_64_64  _Py_Dealloc
// 3d7: 4c 89 e7                      movq    %r12, %rdi
// 3da: ff d0                         callq   *%rax
// 3dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003de:  R_X86_64_64  PyExc_RuntimeError
// 3e6: 48 8b 30                      movq    (%rax), %rsi
// 3e9: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000003eb:  R_X86_64_64  .rodata.str1.1+0x39
// 3f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f5:  R_X86_64_64  _PyErr_SetString
// 3fd: 48 8b 3c 24                   movq    (%rsp), %rdi
// 401: ff d0                         callq   *%rax
// 403: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 408: 48 29 c3                      subq    %rax, %rbx
// 40b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 40f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 413: 89 58 40                      movl    %ebx, 0x40(%rax)
// 416: 31 c0                         xorl    %eax, %eax
// 418: 48 83 c4 28                   addq    $0x28, %rsp
// 41c: 5b                            popq    %rbx
// 41d: 41 5c                         popq    %r12
// 41f: 41 5d                         popq    %r13
// 421: 41 5e                         popq    %r14
// 423: 41 5f                         popq    %r15
// 425: 5d                            popq    %rbp
// 426: c3                            retq
// 427: 
static const unsigned char _CALL_BUILTIN_CLASSplus_GET_AWAITABLE_code_body[1064] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xef, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xde, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x4d, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xc4, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x3d, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x1c, 0xdf, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0xe8, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8d, 0x2c, 0xc7, 0x4c, 0x89, 0x33, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xcf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xbb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xeb, 0xe9, 0xad, 0x02, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x95, 0x02, 0x00, 0x00, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x13, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x6c, 0xdd, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x49, 0x8b, 0x6c, 0xdf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x85, 0xc0, 0x74, 0x33, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x54, 0x85, 0xc0, 0x79, 0x76, 0xe9, 0x92, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x1c, 0xdf, 0x4d, 0x85, 0xf6, 0x0f, 0x85, 0xb4, 0xfe, 0xff, 0xff, 0xe9, 0x97, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x75, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xac, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x03, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x1c, 0xdf, 0x48, 0x83, 0xc3, 0xf8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x15, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x29, 0x4c, 0x89, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0xc3, 0x49, 0x89, 0xc6, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x13, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x58, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_GET_AWAITABLE_code_holes[35] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatAwaitableError, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x304, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x32a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyGen_yf, 0x0},
    {0x349, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x353, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x36e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x37f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x397, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3de, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_RuntimeError, 0x0},
    {0x3eb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x3f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00coroutine is being awaited already\x00'
// 5c: 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_GET_AWAITABLE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x77, 0x61, 0x69, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_GET_AWAITABLE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_GET_ITER
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_GET_ITER.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f8 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e7 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 78: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 7d: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 82: 48 89 14 24                   movq    %rdx, (%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 cc 00 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// f2: 48 8b 1c 24                   movq    (%rsp), %rbx
// f6: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// fb: 78 16                         js      0x113 <_JIT_ENTRY+0x113>
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 107: ff d0                         callq   *%rax
// 109: 49 ff 0c 24                   decq    (%r12)
// 10d: 0f 84 a5 01 00 00             je      0x2b8 <_JIT_ENTRY+0x2b8>
// 113: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 118: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 11c: 4d 85 f6                      testq   %r14, %r14
// 11f: 0f 84 b4 01 00 00             je      0x2d9 <_JIT_ENTRY+0x2d9>
// 125: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 12a: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 12e: 4c 89 30                      movq    %r14, (%rax)
// 131: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 0f 84 c9 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_HandlePending
// 14a: 48 89 df                      movq    %rbx, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 0f 84 b2 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 157: 4c 89 e0                      movq    %r12, %rax
// 15a: e9 7a 01 00 00                jmp     0x2d9 <_JIT_ENTRY+0x2d9>
// 15f: 49 29 ff                      subq    %rdi, %r15
// 162: 49 83 c7 b8                   addq    $-0x48, %r15
// 166: 49 c1 ef 03                   shrq    $0x3, %r15
// 16a: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 16e: 48 8b 07                      movq    (%rdi), %rax
// 171: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000173:  R_X86_64_64  _JIT_TARGET
// 17b: 89 c9                         movl    %ecx, %ecx
// 17d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 181: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 187: e9 5d 01 00 00                jmp     0x2e9 <_JIT_ENTRY+0x2e9>
// 18c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 190: 41 be 01 00 00 00             movl    $0x1, %r14d
// 196: 45 0f 43 f5                   cmovael %r13d, %r14d
// 19a: 31 db                         xorl    %ebx, %ebx
// 19c: eb 0e                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19e: 66 90                         nop
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 de                      cmpq    %rbx, %r14
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 63 d8                      movslq  %eax, %rbx
// 21d: 4d 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %r13
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  PyObject_GetIter
// 22c: 4c 89 ef                      movq    %r13, %rdi
// 22f: ff d0                         callq   *%rax
// 231: 49 89 c6                      movq    %rax, %r14
// 234: 49 8b 45 00                   movq    (%r13), %rax
// 238: 48 85 c0                      testq   %rax, %rax
// 23b: 7f 22                         jg      0x25f <_JIT_ENTRY+0x25f>
// 23d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023f:  R_X86_64_64  .rodata.str1.1
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _Py_NegativeRefcount
// 251: be 4a 08 00 00                movl    $0x84a, %esi            # imm = 0x84A
// 256: 4c 89 ea                      movq    %r13, %rdx
// 259: ff d0                         callq   *%rax
// 25b: 49 8b 45 00                   movq    (%r13), %rax
// 25f: 85 c0                         testl   %eax, %eax
// 261: 78 21                         js      0x284 <_JIT_ENTRY+0x284>
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26d: ff d0                         callq   *%rax
// 26f: 49 ff 4d 00                   decq    (%r13)
// 273: 75 0f                         jne     0x284 <_JIT_ENTRY+0x284>
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  _Py_Dealloc
// 27f: 4c 89 ef                      movq    %r13, %rdi
// 282: ff d0                         callq   *%rax
// 284: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 288: 48 83 c0 f8                   addq    $-0x8, %rax
// 28c: 4d 85 f6                      testq   %r14, %r14
// 28f: 74 48                         je      0x2d9 <_JIT_ENTRY+0x2d9>
// 291: 4c 89 30                      movq    %r14, (%rax)
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _JIT_CONTINUE
// 29e: 48 89 ef                      movq    %rbp, %rdi
// 2a1: 4c 89 e6                      movq    %r12, %rsi
// 2a4: 48 8b 14 24                   movq    (%rsp), %rdx
// 2a8: 48 83 c4 28                   addq    $0x28, %rsp
// 2ac: 5b                            popq    %rbx
// 2ad: 41 5c                         popq    %r12
// 2af: 41 5d                         popq    %r13
// 2b1: 41 5e                         popq    %r14
// 2b3: 41 5f                         popq    %r15
// 2b5: 5d                            popq    %rbp
// 2b6: ff e0                         jmpq    *%rax
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _Py_Dealloc
// 2c2: 4c 89 e7                      movq    %r12, %rdi
// 2c5: ff d0                         callq   *%rax
// 2c7: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 2cc: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 2d0: 4d 85 f6                      testq   %r14, %r14
// 2d3: 0f 85 4c fe ff ff             jne     0x125 <_JIT_ENTRY+0x125>
// 2d9: 48 29 e8                      subq    %rbp, %rax
// 2dc: 48 83 c0 b8                   addq    $-0x48, %rax
// 2e0: 48 c1 e8 03                   shrq    $0x3, %rax
// 2e4: 89 45 40                      movl    %eax, 0x40(%rbp)
// 2e7: 31 c0                         xorl    %eax, %eax
// 2e9: 48 83 c4 28                   addq    $0x28, %rsp
// 2ed: 5b                            popq    %rbx
// 2ee: 41 5c                         popq    %r12
// 2f0: 41 5d                         popq    %r13
// 2f2: 41 5e                         popq    %r14
// 2f4: 41 5f                         popq    %r15
// 2f6: 5d                            popq    %rbp
// 2f7: c3                            retq
// 2f8: 
static const unsigned char _CALL_BUILTIN_CLASSplus_GET_ITER_code_body[761] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xa5, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0xb4, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x30, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x7a, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x5d, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xdf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc6, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x83, 0xc0, 0xf8, 0x4d, 0x85, 0xf6, 0x74, 0x48, 0x4c, 0x89, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xf6, 0x0f, 0x85, 0x4c, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_GET_ITER_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_GET_ITER_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_GET_ITER_data_holes[1];

// _CALL_BUILTIN_CLASSplus_GET_LEN
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_GET_LEN.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 76                         je      0xd9 <_JIT_ENTRY+0xd9>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 69                         je      0xd9 <_JIT_ENTRY+0xd9>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 14 24                   movq    %r10, (%rsp)
// 79: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 7e: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 83: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 41 0f 94 c7                   sete    %r15b
// 8e: 89 da                         movl    %ebx, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 41 84 c7                      testb   %al, %r15b
// b3: 74 51                         je      0x106 <_JIT_ENTRY+0x106>
// b5: 49 8b 04 24                   movq    (%r12), %rax
// b9: 48 85 c0                      testq   %rax, %rax
// bc: 0f 8e c7 00 00 00             jle     0x189 <_JIT_ENTRY+0x189>
// c2: 85 c0                         testl   %eax, %eax
// c4: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// c9: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// ce: 0f 89 e5 00 00 00             jns     0x1b9 <_JIT_ENTRY+0x1b9>
// d4: e9 01 01 00 00                jmp     0x1da <_JIT_ENTRY+0x1da>
// d9: 49 29 fe                      subq    %rdi, %r14
// dc: 49 83 c6 b8                   addq    $-0x48, %r14
// e0: 49 c1 ee 03                   shrq    $0x3, %r14
// e4: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// e8: 48 8b 07                      movq    (%rdi), %rax
// eb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ed:  R_X86_64_64  _JIT_TARGET
// f5: 89 c9                         movl    %ecx, %ecx
// f7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fb: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 101: e9 aa 01 00 00                jmp     0x2b0 <_JIT_ENTRY+0x2b0>
// 106: 83 fb 02                      cmpl    $0x2, %ebx
// 109: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 10f: 44 0f 43 fb                   cmovael %ebx, %r15d
// 113: 31 db                         xorl    %ebx, %ebx
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 48 ff c3                      incq    %rbx
// 123: 49 39 df                      cmpq    %rbx, %r15
// 126: 74 8d                         je      0xb5 <_JIT_ENTRY+0xb5>
// 128: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 12d: 49 8b 45 00                   movq    (%r13), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 0a                         jle     0x140 <_JIT_ENTRY+0x140>
// 136: 85 c0                         testl   %eax, %eax
// 138: 78 e6                         js      0x120 <_JIT_ENTRY+0x120>
// 13a: eb 2a                         jmp     0x166 <_JIT_ENTRY+0x166>
// 13c: 0f 1f 40 00                   nopl    (%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 ea                      movq    %r13, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 78 ba                         js      0x120 <_JIT_ENTRY+0x120>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 4d 00                   decq    (%r13)
// 176: 75 a8                         jne     0x120 <_JIT_ENTRY+0x120>
// 178: 4c 89 ef                      movq    %r13, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: eb 97                         jmp     0x120 <_JIT_ENTRY+0x120>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 1b2: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 1b7: 78 21                         js      0x1da <_JIT_ENTRY+0x1da>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c3: ff d0                         callq   *%rax
// 1c5: 49 ff 0c 24                   decq    (%r12)
// 1c9: 75 0f                         jne     0x1da <_JIT_ENTRY+0x1da>
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _Py_Dealloc
// 1d5: 4c 89 e7                      movq    %r12, %rdi
// 1d8: ff d0                         callq   *%rax
// 1da: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1df: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1e3: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1e8: 48 85 d2                      testq   %rdx, %rdx
// 1eb: 0f 84 ab 00 00 00             je      0x29c <_JIT_ENTRY+0x29c>
// 1f1: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1f5: 49 8d 1c ce                   leaq    (%r14,%rcx,8), %rbx
// 1f9: 48 89 10                      movq    %rdx, (%rax)
// 1fc: 49 8b 45 10                   movq    0x10(%r13), %rax
// 200: 48 8b 00                      movq    (%rax), %rax
// 203: 84 c0                         testb   %al, %al
// 205: 74 17                         je      0x21e <_JIT_ENTRY+0x21e>
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  _Py_HandlePending
// 211: 4c 89 ef                      movq    %r13, %rdi
// 214: ff d0                         callq   *%rax
// 216: 85 c0                         testl   %eax, %eax
// 218: 0f 85 81 00 00 00             jne     0x29f <_JIT_ENTRY+0x29f>
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _JIT_OPARG
// 228: f7 d0                         notl    %eax
// 22a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 22f: 48 98                         cltq
// 231: 49 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %rdi
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  PyObject_Size
// 240: ff d0                         callq   *%rax
// 242: 48 85 c0                      testq   %rax, %rax
// 245: 78 58                         js      0x29f <_JIT_ENTRY+0x29f>
// 247: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000249:  R_X86_64_64  PyLong_FromSsize_t
// 251: 48 89 c7                      movq    %rax, %rdi
// 254: ff d1                         callq   *%rcx
// 256: 48 85 c0                      testq   %rax, %rax
// 259: 74 44                         je      0x29f <_JIT_ENTRY+0x29f>
// 25b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025d:  R_X86_64_64  _JIT_OPARG
// 265: f7 d1                         notl    %ecx
// 267: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 26d: 48 63 c9                      movslq  %ecx, %rcx
// 270: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 274: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 278: 48 83 c6 08                   addq    $0x8, %rsi
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _JIT_CONTINUE
// 286: 4c 89 ff                      movq    %r15, %rdi
// 289: 4c 89 ea                      movq    %r13, %rdx
// 28c: 48 83 c4 28                   addq    $0x28, %rsp
// 290: 5b                            popq    %rbx
// 291: 41 5c                         popq    %r12
// 293: 41 5d                         popq    %r13
// 295: 41 5e                         popq    %r14
// 297: 41 5f                         popq    %r15
// 299: 5d                            popq    %rbp
// 29a: ff e0                         jmpq    *%rax
// 29c: 48 89 c3                      movq    %rax, %rbx
// 29f: 4c 29 fb                      subq    %r15, %rbx
// 2a2: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2a6: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2aa: 41 89 5f 40                   movl    %ebx, 0x40(%r15)
// 2ae: 31 c0                         xorl    %eax, %eax
// 2b0: 48 83 c4 28                   addq    $0x28, %rsp
// 2b4: 5b                            popq    %rbx
// 2b5: 41 5c                         popq    %r12
// 2b7: 41 5d                         popq    %r13
// 2b9: 41 5e                         popq    %r14
// 2bb: 41 5f                         popq    %r15
// 2bd: 5d                            popq    %rbp
// 2be: c3                            retq
// 2bf: 
static const unsigned char _CALL_BUILTIN_CLASSplus_GET_LEN_code_body[704] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x76, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x69, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc7, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x0f, 0x89, 0xe5, 0x00, 0x00, 0x00, 0xe9, 0x01, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x01, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfb, 0x31, 0xdb, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x74, 0x8d, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x85, 0xc0, 0x78, 0xe6, 0xeb, 0x2a, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xab, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x1c, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x81, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x78, 0x58, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x74, 0x44, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x89, 0xc3, 0x4c, 0x29, 0xfb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5f, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_GET_LEN_code_holes[18] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_GET_LEN_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_GET_LEN_data_holes[1];

// _CALL_BUILTIN_CLASSplus_GET_YIELD_FROM_ITER
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_GET_YIELD_FROM_ITER.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 a1 01 00 00             je      0x208 <_JIT_ENTRY+0x208>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 90 01 00 00             je      0x208 <_JIT_ENTRY+0x208>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 75 01 00 00             je      0x235 <_JIT_ENTRY+0x235>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f2: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// f7: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// fc: 78 16                         js      0x114 <_JIT_ENTRY+0x114>
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 108: ff d0                         callq   *%rax
// 10a: 49 ff 0c 24                   decq    (%r12)
// 10e: 0f 84 a5 01 00 00             je      0x2b9 <_JIT_ENTRY+0x2b9>
// 114: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 119: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 11d: 4d 85 f6                      testq   %r14, %r14
// 120: 0f 84 b4 01 00 00             je      0x2da <_JIT_ENTRY+0x2da>
// 126: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12a: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 12e: 4c 89 30                      movq    %r14, (%rax)
// 131: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 74 17                         je      0x153 <_JIT_ENTRY+0x153>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_HandlePending
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 85 c0                         testl   %eax, %eax
// 14d: 0f 85 8a 01 00 00             jne     0x2dd <_JIT_ENTRY+0x2dd>
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _JIT_OPARG
// 15d: f7 d0                         notl    %eax
// 15f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 164: 48 98                         cltq
// 166: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 16b: 49 8b 45 08                   movq    0x8(%r13), %rax
// 16f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000171:  R_X86_64_64  PyCoro_Type
// 179: 48 39 c8                      cmpq    %rcx, %rax
// 17c: 0f 84 7b 01 00 00             je      0x2fd <_JIT_ENTRY+0x2fd>
// 182: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000184:  R_X86_64_64  PyGen_Type
// 18c: 48 39 c8                      cmpq    %rcx, %rax
// 18f: 0f 84 76 01 00 00             je      0x30b <_JIT_ENTRY+0x30b>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  PyObject_GetIter
// 19f: 4c 89 ef                      movq    %r13, %rdi
// 1a2: ff d0                         callq   *%rax
// 1a4: 48 85 c0                      testq   %rax, %rax
// 1a7: 0f 84 30 01 00 00             je      0x2dd <_JIT_ENTRY+0x2dd>
// 1ad: 49 89 c6                      movq    %rax, %r14
// 1b0: 49 8b 45 00                   movq    (%r13), %rax
// 1b4: 48 85 c0                      testq   %rax, %rax
// 1b7: 7f 22                         jg      0x1db <_JIT_ENTRY+0x1db>
// 1b9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bb:  R_X86_64_64  .rodata.str1.1
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_NegativeRefcount
// 1cd: be 6a 08 00 00                movl    $0x86a, %esi            # imm = 0x86A
// 1d2: 4c 89 ea                      movq    %r13, %rdx
// 1d5: ff d0                         callq   *%rax
// 1d7: 49 8b 45 00                   movq    (%r13), %rax
// 1db: 85 c0                         testl   %eax, %eax
// 1dd: 78 21                         js      0x200 <_JIT_ENTRY+0x200>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e9: ff d0                         callq   *%rax
// 1eb: 49 ff 4d 00                   decq    (%r13)
// 1ef: 75 0f                         jne     0x200 <_JIT_ENTRY+0x200>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_Dealloc
// 1fb: 4c 89 ef                      movq    %r13, %rdi
// 1fe: ff d0                         callq   *%rax
// 200: 4d 89 f5                      movq    %r14, %r13
// 203: e9 03 01 00 00                jmp     0x30b <_JIT_ENTRY+0x30b>
// 208: 49 29 ff                      subq    %rdi, %r15
// 20b: 49 83 c7 b8                   addq    $-0x48, %r15
// 20f: 49 c1 ef 03                   shrq    $0x3, %r15
// 213: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 217: 48 8b 07                      movq    (%rdi), %rax
// 21a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021c:  R_X86_64_64  _JIT_TARGET
// 224: 89 c9                         movl    %ecx, %ecx
// 226: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 22a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 230: e9 b9 00 00 00                jmp     0x2ee <_JIT_ENTRY+0x2ee>
// 235: 41 83 fd 02                   cmpl    $0x2, %r13d
// 239: 41 be 01 00 00 00             movl    $0x1, %r14d
// 23f: 45 0f 43 f5                   cmovael %r13d, %r14d
// 243: 31 db                         xorl    %ebx, %ebx
// 245: eb 15                         jmp     0x25c <_JIT_ENTRY+0x25c>
// 247: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 250: 48 ff c3                      incq    %rbx
// 253: 49 39 de                      cmpq    %rbx, %r14
// 256: 0f 84 64 fe ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 25c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 261: 49 8b 45 00                   movq    (%r13), %rax
// 265: 48 85 c0                      testq   %rax, %rax
// 268: 7e 06                         jle     0x270 <_JIT_ENTRY+0x270>
// 26a: 85 c0                         testl   %eax, %eax
// 26c: 78 e2                         js      0x250 <_JIT_ENTRY+0x250>
// 26e: eb 26                         jmp     0x296 <_JIT_ENTRY+0x296>
// 270: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000272:  R_X86_64_64  .rodata.str1.1
// 27a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 27f: 4c 89 ea                      movq    %r13, %rdx
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_NegativeRefcount
// 28c: ff d0                         callq   *%rax
// 28e: 49 8b 45 00                   movq    (%r13), %rax
// 292: 85 c0                         testl   %eax, %eax
// 294: 78 ba                         js      0x250 <_JIT_ENTRY+0x250>
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a0: ff d0                         callq   *%rax
// 2a2: 49 ff 4d 00                   decq    (%r13)
// 2a6: 75 a8                         jne     0x250 <_JIT_ENTRY+0x250>
// 2a8: 4c 89 ef                      movq    %r13, %rdi
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_Dealloc
// 2b5: ff d0                         callq   *%rax
// 2b7: eb 97                         jmp     0x250 <_JIT_ENTRY+0x250>
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_Dealloc
// 2c3: 4c 89 e7                      movq    %r12, %rdi
// 2c6: ff d0                         callq   *%rax
// 2c8: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2cd: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 2d1: 4d 85 f6                      testq   %r14, %r14
// 2d4: 0f 85 4c fe ff ff             jne     0x126 <_JIT_ENTRY+0x126>
// 2da: 49 89 c4                      movq    %rax, %r12
// 2dd: 49 29 dc                      subq    %rbx, %r12
// 2e0: 49 83 c4 b8                   addq    $-0x48, %r12
// 2e4: 49 c1 ec 03                   shrq    $0x3, %r12
// 2e8: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2ec: 31 c0                         xorl    %eax, %eax
// 2ee: 48 83 c4 28                   addq    $0x28, %rsp
// 2f2: 5b                            popq    %rbx
// 2f3: 41 5c                         popq    %r12
// 2f5: 41 5d                         popq    %r13
// 2f7: 41 5e                         popq    %r14
// 2f9: 41 5f                         popq    %r15
// 2fb: 5d                            popq    %rbp
// 2fc: c3                            retq
// 2fd: 48 8b 03                      movq    (%rbx), %rax
// 300: 0f b7 40 30                   movzwl  0x30(%rax), %eax
// 304: a9 80 01 00 00                testl   $0x180, %eax            # imm = 0x180
// 309: 74 3b                         je      0x346 <_JIT_ENTRY+0x346>
// 30b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030d:  R_X86_64_64  _JIT_OPARG
// 315: f7 d0                         notl    %eax
// 317: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 31c: 48 98                         cltq
// 31e: 4d 89 6c c7 f8                movq    %r13, -0x8(%r15,%rax,8)
// 323: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000325:  R_X86_64_64  _JIT_CONTINUE
// 32d: 48 89 df                      movq    %rbx, %rdi
// 330: 4c 89 e6                      movq    %r12, %rsi
// 333: 48 89 ea                      movq    %rbp, %rdx
// 336: 48 83 c4 28                   addq    $0x28, %rsp
// 33a: 5b                            popq    %rbx
// 33b: 41 5c                         popq    %r12
// 33d: 41 5d                         popq    %r13
// 33f: 41 5e                         popq    %r14
// 341: 41 5f                         popq    %r15
// 343: 5d                            popq    %rbp
// 344: ff e0                         jmpq    *%rax
// 346: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000348:  R_X86_64_64  PyExc_TypeError
// 350: 48 8b 30                      movq    (%rax), %rsi
// 353: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000355:  R_X86_64_64  .rodata.str1.1+0x39
// 35d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035f:  R_X86_64_64  _PyErr_SetString
// 367: 48 89 ef                      movq    %rbp, %rdi
// 36a: ff d0                         callq   *%rax
// 36c: e9 6c ff ff ff                jmp     0x2dd <_JIT_ENTRY+0x2dd>
// 371: 
static const unsigned char _CALL_BUILTIN_CLASSplus_GET_YIELD_FROM_ITER_code_body[882] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xa1, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x90, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x75, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xa5, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0xb4, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x30, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x8a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x49, 0x8b, 0x45, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0x7b, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0x76, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x30, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x6a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0xe9, 0x03, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xb9, 0x00, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x64, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xf6, 0x0f, 0x85, 0x4c, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xc4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x8b, 0x03, 0x0f, 0xb7, 0x40, 0x30, 0xa9, 0x80, 0x01, 0x00, 0x00, 0x74, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x6c, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0xe9, 0x6c, 0xff, 0xff, 0xff};
static const Hole _CALL_BUILTIN_CLASSplus_GET_YIELD_FROM_ITER_code_holes[26] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyGen_Type, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x325, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x348, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x355, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x35f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot 'yield from' a coroutine object in a non-coroutine generator\x00"
// 7d: 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_GET_YIELD_FROM_ITER_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x27, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_GET_YIELD_FROM_ITER_data_holes[1];

// _CALL_BUILTIN_CLASSplus_GUARD_BOTH_FLOAT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_GUARD_BOTH_FLOAT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 45 8d 78 01                   leal    0x1(%r8), %r15d
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 45 0f 44 f8                   cmovel  %r8d, %r15d
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 ec 01 00 00             je      0x256 <_JIT_ENTRY+0x256>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 db 01 00 00             je      0x256 <_JIT_ENTRY+0x256>
// 7b: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 80: 4c 89 0c 24                   movq    %r9, (%rsp)
// 84: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 89: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 8e: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 0f 94 c3                      sete    %bl
// 98: 44 89 fa                      movl    %r15d, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 84 c3                         testb   %al, %bl
// bd: 74 24                         je      0xe3 <_JIT_ENTRY+0xe3>
// bf: 49 8b 04 24                   movq    (%r12), %rax
// c3: 48 85 c0                      testq   %rax, %rax
// c6: 0f 8e 9d 00 00 00             jle     0x169 <_JIT_ENTRY+0x169>
// cc: 85 c0                         testl   %eax, %eax
// ce: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// d3: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// d8: 0f 89 bb 00 00 00             jns     0x199 <_JIT_ENTRY+0x199>
// de: e9 d7 00 00 00                jmp     0x1ba <_JIT_ENTRY+0x1ba>
// e3: 41 83 ff 02                   cmpl    $0x2, %r15d
// e7: bb 01 00 00 00                movl    $0x1, %ebx
// ec: 41 0f 43 df                   cmovael %r15d, %ebx
// f0: 45 31 ff                      xorl    %r15d, %r15d
// f3: eb 13                         jmp     0x108 <_JIT_ENTRY+0x108>
// f5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 100: 49 ff c7                      incq    %r15
// 103: 4c 39 fb                      cmpq    %r15, %rbx
// 106: 74 b7                         je      0xbf <_JIT_ENTRY+0xbf>
// 108: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 10d: 49 8b 45 00                   movq    (%r13), %rax
// 111: 48 85 c0                      testq   %rax, %rax
// 114: 7e 0a                         jle     0x120 <_JIT_ENTRY+0x120>
// 116: 85 c0                         testl   %eax, %eax
// 118: 78 e6                         js      0x100 <_JIT_ENTRY+0x100>
// 11a: eb 2a                         jmp     0x146 <_JIT_ENTRY+0x146>
// 11c: 0f 1f 40 00                   nopl    (%rax)
// 120: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000122:  R_X86_64_64  .rodata.str1.1
// 12a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 12f: 4c 89 ea                      movq    %r13, %rdx
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _Py_NegativeRefcount
// 13c: ff d0                         callq   *%rax
// 13e: 49 8b 45 00                   movq    (%r13), %rax
// 142: 85 c0                         testl   %eax, %eax
// 144: 78 ba                         js      0x100 <_JIT_ENTRY+0x100>
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 150: ff d0                         callq   *%rax
// 152: 49 ff 4d 00                   decq    (%r13)
// 156: 75 a8                         jne     0x100 <_JIT_ENTRY+0x100>
// 158: 4c 89 ef                      movq    %r13, %rdi
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_Dealloc
// 165: ff d0                         callq   *%rax
// 167: eb 97                         jmp     0x100 <_JIT_ENTRY+0x100>
// 169: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000016b:  R_X86_64_64  .rodata.str1.1
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_NegativeRefcount
// 17d: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 182: 4c 89 e2                      movq    %r12, %rdx
// 185: ff d0                         callq   *%rax
// 187: 49 8b 04 24                   movq    (%r12), %rax
// 18b: 85 c0                         testl   %eax, %eax
// 18d: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 192: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 197: 78 21                         js      0x1ba <_JIT_ENTRY+0x1ba>
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 ff 0c 24                   decq    (%r12)
// 1a9: 75 0f                         jne     0x1ba <_JIT_ENTRY+0x1ba>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_Dealloc
// 1b5: 4c 89 e7                      movq    %r12, %rdi
// 1b8: ff d0                         callq   *%rax
// 1ba: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1bf: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1c3: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1c8: 48 85 d2                      testq   %rdx, %rdx
// 1cb: 74 2c                         je      0x1f9 <_JIT_ENTRY+0x1f9>
// 1cd: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1d1: 4d 8d 3c ce                   leaq    (%r14,%rcx,8), %r15
// 1d5: 48 89 10                      movq    %rdx, (%rax)
// 1d8: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1dc: 48 8b 00                      movq    (%rax), %rax
// 1df: 84 c0                         testb   %al, %al
// 1e1: 74 28                         je      0x20b <_JIT_ENTRY+0x20b>
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _Py_HandlePending
// 1ed: 4c 89 ef                      movq    %r13, %rdi
// 1f0: ff d0                         callq   *%rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 74 15                         je      0x20b <_JIT_ENTRY+0x20b>
// 1f6: 4c 89 f8                      movq    %r15, %rax
// 1f9: 48 29 d8                      subq    %rbx, %rax
// 1fc: 48 83 c0 b8                   addq    $-0x48, %rax
// 200: 48 c1 e8 03                   shrq    $0x3, %rax
// 204: 89 43 40                      movl    %eax, 0x40(%rbx)
// 207: 31 c0                         xorl    %eax, %eax
// 209: eb 73                         jmp     0x27e <_JIT_ENTRY+0x27e>
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _JIT_OPARG
// 215: f7 d0                         notl    %eax
// 217: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21c: 48 98                         cltq
// 21e: 49 8b 4c c6 f0                movq    -0x10(%r14,%rax,8), %rcx
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  PyFloat_Type
// 22d: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 231: 75 20                         jne     0x253 <_JIT_ENTRY+0x253>
// 233: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000235:  R_X86_64_64  _JIT_OPARG
// 23d: f7 d1                         notl    %ecx
// 23f: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 245: 48 63 c9                      movslq  %ecx, %rcx
// 248: 49 8b 4c ce f8                movq    -0x8(%r14,%rcx,8), %rcx
// 24d: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 251: 74 3a                         je      0x28d <_JIT_ENTRY+0x28d>
// 253: 4d 89 fe                      movq    %r15, %r14
// 256: 49 29 de                      subq    %rbx, %r14
// 259: 49 83 c6 b8                   addq    $-0x48, %r14
// 25d: 49 c1 ee 03                   shrq    $0x3, %r14
// 261: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 265: 48 8b 03                      movq    (%rbx), %rax
// 268: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000026a:  R_X86_64_64  _JIT_TARGET
// 272: 89 c9                         movl    %ecx, %ecx
// 274: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 278: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 27e: 48 83 c4 28                   addq    $0x28, %rsp
// 282: 5b                            popq    %rbx
// 283: 41 5c                         popq    %r12
// 285: 41 5d                         popq    %r13
// 287: 41 5e                         popq    %r14
// 289: 41 5f                         popq    %r15
// 28b: 5d                            popq    %rbp
// 28c: c3                            retq
// 28d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028f:  R_X86_64_64  _JIT_CONTINUE
// 297: 48 89 df                      movq    %rbx, %rdi
// 29a: 4c 89 fe                      movq    %r15, %rsi
// 29d: 4c 89 ea                      movq    %r13, %rdx
// 2a0: 48 83 c4 28                   addq    $0x28, %rsp
// 2a4: 5b                            popq    %rbx
// 2a5: 41 5c                         popq    %r12
// 2a7: 41 5d                         popq    %r13
// 2a9: 41 5e                         popq    %r14
// 2ab: 41 5f                         popq    %r15
// 2ad: 5d                            popq    %rbp
// 2ae: ff e0                         jmpq    *%rax
// 2b0: 
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_BOTH_FLOAT_code_body[689] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x45, 0x8d, 0x78, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xec, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xdb, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x9d, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x0f, 0x89, 0xbb, 0x00, 0x00, 0x00, 0xe9, 0xd7, 0x00, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdf, 0x45, 0x31, 0xff, 0xeb, 0x13, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x74, 0xb7, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x85, 0xc0, 0x78, 0xe6, 0xeb, 0x2a, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x2c, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x15, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0x73, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x8b, 0x4c, 0xce, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x3a, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_BOTH_FLOAT_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_BOTH_FLOAT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_BOTH_FLOAT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_GUARD_BOTH_INT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_GUARD_BOTH_INT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 45 8d 78 01                   leal    0x1(%r8), %r15d
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 45 0f 44 f8                   cmovel  %r8d, %r15d
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 ec 01 00 00             je      0x256 <_JIT_ENTRY+0x256>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 db 01 00 00             je      0x256 <_JIT_ENTRY+0x256>
// 7b: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 80: 4c 89 0c 24                   movq    %r9, (%rsp)
// 84: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 89: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 8e: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 0f 94 c3                      sete    %bl
// 98: 44 89 fa                      movl    %r15d, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 84 c3                         testb   %al, %bl
// bd: 74 24                         je      0xe3 <_JIT_ENTRY+0xe3>
// bf: 49 8b 04 24                   movq    (%r12), %rax
// c3: 48 85 c0                      testq   %rax, %rax
// c6: 0f 8e 9d 00 00 00             jle     0x169 <_JIT_ENTRY+0x169>
// cc: 85 c0                         testl   %eax, %eax
// ce: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// d3: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// d8: 0f 89 bb 00 00 00             jns     0x199 <_JIT_ENTRY+0x199>
// de: e9 d7 00 00 00                jmp     0x1ba <_JIT_ENTRY+0x1ba>
// e3: 41 83 ff 02                   cmpl    $0x2, %r15d
// e7: bb 01 00 00 00                movl    $0x1, %ebx
// ec: 41 0f 43 df                   cmovael %r15d, %ebx
// f0: 45 31 ff                      xorl    %r15d, %r15d
// f3: eb 13                         jmp     0x108 <_JIT_ENTRY+0x108>
// f5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 100: 49 ff c7                      incq    %r15
// 103: 4c 39 fb                      cmpq    %r15, %rbx
// 106: 74 b7                         je      0xbf <_JIT_ENTRY+0xbf>
// 108: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 10d: 49 8b 45 00                   movq    (%r13), %rax
// 111: 48 85 c0                      testq   %rax, %rax
// 114: 7e 0a                         jle     0x120 <_JIT_ENTRY+0x120>
// 116: 85 c0                         testl   %eax, %eax
// 118: 78 e6                         js      0x100 <_JIT_ENTRY+0x100>
// 11a: eb 2a                         jmp     0x146 <_JIT_ENTRY+0x146>
// 11c: 0f 1f 40 00                   nopl    (%rax)
// 120: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000122:  R_X86_64_64  .rodata.str1.1
// 12a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 12f: 4c 89 ea                      movq    %r13, %rdx
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _Py_NegativeRefcount
// 13c: ff d0                         callq   *%rax
// 13e: 49 8b 45 00                   movq    (%r13), %rax
// 142: 85 c0                         testl   %eax, %eax
// 144: 78 ba                         js      0x100 <_JIT_ENTRY+0x100>
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 150: ff d0                         callq   *%rax
// 152: 49 ff 4d 00                   decq    (%r13)
// 156: 75 a8                         jne     0x100 <_JIT_ENTRY+0x100>
// 158: 4c 89 ef                      movq    %r13, %rdi
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_Dealloc
// 165: ff d0                         callq   *%rax
// 167: eb 97                         jmp     0x100 <_JIT_ENTRY+0x100>
// 169: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000016b:  R_X86_64_64  .rodata.str1.1
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_NegativeRefcount
// 17d: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 182: 4c 89 e2                      movq    %r12, %rdx
// 185: ff d0                         callq   *%rax
// 187: 49 8b 04 24                   movq    (%r12), %rax
// 18b: 85 c0                         testl   %eax, %eax
// 18d: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 192: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 197: 78 21                         js      0x1ba <_JIT_ENTRY+0x1ba>
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 ff 0c 24                   decq    (%r12)
// 1a9: 75 0f                         jne     0x1ba <_JIT_ENTRY+0x1ba>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_Dealloc
// 1b5: 4c 89 e7                      movq    %r12, %rdi
// 1b8: ff d0                         callq   *%rax
// 1ba: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1bf: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1c3: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1c8: 48 85 d2                      testq   %rdx, %rdx
// 1cb: 74 2c                         je      0x1f9 <_JIT_ENTRY+0x1f9>
// 1cd: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1d1: 4d 8d 3c ce                   leaq    (%r14,%rcx,8), %r15
// 1d5: 48 89 10                      movq    %rdx, (%rax)
// 1d8: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1dc: 48 8b 00                      movq    (%rax), %rax
// 1df: 84 c0                         testb   %al, %al
// 1e1: 74 28                         je      0x20b <_JIT_ENTRY+0x20b>
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _Py_HandlePending
// 1ed: 4c 89 ef                      movq    %r13, %rdi
// 1f0: ff d0                         callq   *%rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 74 15                         je      0x20b <_JIT_ENTRY+0x20b>
// 1f6: 4c 89 f8                      movq    %r15, %rax
// 1f9: 48 29 d8                      subq    %rbx, %rax
// 1fc: 48 83 c0 b8                   addq    $-0x48, %rax
// 200: 48 c1 e8 03                   shrq    $0x3, %rax
// 204: 89 43 40                      movl    %eax, 0x40(%rbx)
// 207: 31 c0                         xorl    %eax, %eax
// 209: eb 73                         jmp     0x27e <_JIT_ENTRY+0x27e>
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _JIT_OPARG
// 215: f7 d0                         notl    %eax
// 217: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21c: 48 98                         cltq
// 21e: 49 8b 4c c6 f0                movq    -0x10(%r14,%rax,8), %rcx
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  PyLong_Type
// 22d: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 231: 75 20                         jne     0x253 <_JIT_ENTRY+0x253>
// 233: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000235:  R_X86_64_64  _JIT_OPARG
// 23d: f7 d1                         notl    %ecx
// 23f: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 245: 48 63 c9                      movslq  %ecx, %rcx
// 248: 49 8b 4c ce f8                movq    -0x8(%r14,%rcx,8), %rcx
// 24d: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 251: 74 3a                         je      0x28d <_JIT_ENTRY+0x28d>
// 253: 4d 89 fe                      movq    %r15, %r14
// 256: 49 29 de                      subq    %rbx, %r14
// 259: 49 83 c6 b8                   addq    $-0x48, %r14
// 25d: 49 c1 ee 03                   shrq    $0x3, %r14
// 261: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 265: 48 8b 03                      movq    (%rbx), %rax
// 268: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000026a:  R_X86_64_64  _JIT_TARGET
// 272: 89 c9                         movl    %ecx, %ecx
// 274: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 278: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 27e: 48 83 c4 28                   addq    $0x28, %rsp
// 282: 5b                            popq    %rbx
// 283: 41 5c                         popq    %r12
// 285: 41 5d                         popq    %r13
// 287: 41 5e                         popq    %r14
// 289: 41 5f                         popq    %r15
// 28b: 5d                            popq    %rbp
// 28c: c3                            retq
// 28d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028f:  R_X86_64_64  _JIT_CONTINUE
// 297: 48 89 df                      movq    %rbx, %rdi
// 29a: 4c 89 fe                      movq    %r15, %rsi
// 29d: 4c 89 ea                      movq    %r13, %rdx
// 2a0: 48 83 c4 28                   addq    $0x28, %rsp
// 2a4: 5b                            popq    %rbx
// 2a5: 41 5c                         popq    %r12
// 2a7: 41 5d                         popq    %r13
// 2a9: 41 5e                         popq    %r14
// 2ab: 41 5f                         popq    %r15
// 2ad: 5d                            popq    %rbp
// 2ae: ff e0                         jmpq    *%rax
// 2b0: 
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_BOTH_INT_code_body[689] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x45, 0x8d, 0x78, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xec, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xdb, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x9d, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x0f, 0x89, 0xbb, 0x00, 0x00, 0x00, 0xe9, 0xd7, 0x00, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdf, 0x45, 0x31, 0xff, 0xeb, 0x13, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x74, 0xb7, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x85, 0xc0, 0x78, 0xe6, 0xeb, 0x2a, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x2c, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x15, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0x73, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x8b, 0x4c, 0xce, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x3a, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_BOTH_INT_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_BOTH_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_BOTH_INT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_GUARD_BOTH_UNICODE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_GUARD_BOTH_UNICODE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 45 8d 78 01                   leal    0x1(%r8), %r15d
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 45 0f 44 f8                   cmovel  %r8d, %r15d
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 ec 01 00 00             je      0x256 <_JIT_ENTRY+0x256>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 db 01 00 00             je      0x256 <_JIT_ENTRY+0x256>
// 7b: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 80: 4c 89 0c 24                   movq    %r9, (%rsp)
// 84: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 89: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 8e: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 0f 94 c3                      sete    %bl
// 98: 44 89 fa                      movl    %r15d, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 84 c3                         testb   %al, %bl
// bd: 74 24                         je      0xe3 <_JIT_ENTRY+0xe3>
// bf: 49 8b 04 24                   movq    (%r12), %rax
// c3: 48 85 c0                      testq   %rax, %rax
// c6: 0f 8e 9d 00 00 00             jle     0x169 <_JIT_ENTRY+0x169>
// cc: 85 c0                         testl   %eax, %eax
// ce: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// d3: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// d8: 0f 89 bb 00 00 00             jns     0x199 <_JIT_ENTRY+0x199>
// de: e9 d7 00 00 00                jmp     0x1ba <_JIT_ENTRY+0x1ba>
// e3: 41 83 ff 02                   cmpl    $0x2, %r15d
// e7: bb 01 00 00 00                movl    $0x1, %ebx
// ec: 41 0f 43 df                   cmovael %r15d, %ebx
// f0: 45 31 ff                      xorl    %r15d, %r15d
// f3: eb 13                         jmp     0x108 <_JIT_ENTRY+0x108>
// f5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 100: 49 ff c7                      incq    %r15
// 103: 4c 39 fb                      cmpq    %r15, %rbx
// 106: 74 b7                         je      0xbf <_JIT_ENTRY+0xbf>
// 108: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 10d: 49 8b 45 00                   movq    (%r13), %rax
// 111: 48 85 c0                      testq   %rax, %rax
// 114: 7e 0a                         jle     0x120 <_JIT_ENTRY+0x120>
// 116: 85 c0                         testl   %eax, %eax
// 118: 78 e6                         js      0x100 <_JIT_ENTRY+0x100>
// 11a: eb 2a                         jmp     0x146 <_JIT_ENTRY+0x146>
// 11c: 0f 1f 40 00                   nopl    (%rax)
// 120: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000122:  R_X86_64_64  .rodata.str1.1
// 12a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 12f: 4c 89 ea                      movq    %r13, %rdx
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _Py_NegativeRefcount
// 13c: ff d0                         callq   *%rax
// 13e: 49 8b 45 00                   movq    (%r13), %rax
// 142: 85 c0                         testl   %eax, %eax
// 144: 78 ba                         js      0x100 <_JIT_ENTRY+0x100>
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 150: ff d0                         callq   *%rax
// 152: 49 ff 4d 00                   decq    (%r13)
// 156: 75 a8                         jne     0x100 <_JIT_ENTRY+0x100>
// 158: 4c 89 ef                      movq    %r13, %rdi
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_Dealloc
// 165: ff d0                         callq   *%rax
// 167: eb 97                         jmp     0x100 <_JIT_ENTRY+0x100>
// 169: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000016b:  R_X86_64_64  .rodata.str1.1
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_NegativeRefcount
// 17d: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 182: 4c 89 e2                      movq    %r12, %rdx
// 185: ff d0                         callq   *%rax
// 187: 49 8b 04 24                   movq    (%r12), %rax
// 18b: 85 c0                         testl   %eax, %eax
// 18d: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 192: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 197: 78 21                         js      0x1ba <_JIT_ENTRY+0x1ba>
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 ff 0c 24                   decq    (%r12)
// 1a9: 75 0f                         jne     0x1ba <_JIT_ENTRY+0x1ba>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_Dealloc
// 1b5: 4c 89 e7                      movq    %r12, %rdi
// 1b8: ff d0                         callq   *%rax
// 1ba: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1bf: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1c3: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1c8: 48 85 d2                      testq   %rdx, %rdx
// 1cb: 74 2c                         je      0x1f9 <_JIT_ENTRY+0x1f9>
// 1cd: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1d1: 4d 8d 3c ce                   leaq    (%r14,%rcx,8), %r15
// 1d5: 48 89 10                      movq    %rdx, (%rax)
// 1d8: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1dc: 48 8b 00                      movq    (%rax), %rax
// 1df: 84 c0                         testb   %al, %al
// 1e1: 74 28                         je      0x20b <_JIT_ENTRY+0x20b>
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _Py_HandlePending
// 1ed: 4c 89 ef                      movq    %r13, %rdi
// 1f0: ff d0                         callq   *%rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 74 15                         je      0x20b <_JIT_ENTRY+0x20b>
// 1f6: 4c 89 f8                      movq    %r15, %rax
// 1f9: 48 29 d8                      subq    %rbx, %rax
// 1fc: 48 83 c0 b8                   addq    $-0x48, %rax
// 200: 48 c1 e8 03                   shrq    $0x3, %rax
// 204: 89 43 40                      movl    %eax, 0x40(%rbx)
// 207: 31 c0                         xorl    %eax, %eax
// 209: eb 73                         jmp     0x27e <_JIT_ENTRY+0x27e>
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _JIT_OPARG
// 215: f7 d0                         notl    %eax
// 217: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21c: 48 98                         cltq
// 21e: 49 8b 4c c6 f0                movq    -0x10(%r14,%rax,8), %rcx
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  PyUnicode_Type
// 22d: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 231: 75 20                         jne     0x253 <_JIT_ENTRY+0x253>
// 233: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000235:  R_X86_64_64  _JIT_OPARG
// 23d: f7 d1                         notl    %ecx
// 23f: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 245: 48 63 c9                      movslq  %ecx, %rcx
// 248: 49 8b 4c ce f8                movq    -0x8(%r14,%rcx,8), %rcx
// 24d: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 251: 74 3a                         je      0x28d <_JIT_ENTRY+0x28d>
// 253: 4d 89 fe                      movq    %r15, %r14
// 256: 49 29 de                      subq    %rbx, %r14
// 259: 49 83 c6 b8                   addq    $-0x48, %r14
// 25d: 49 c1 ee 03                   shrq    $0x3, %r14
// 261: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 265: 48 8b 03                      movq    (%rbx), %rax
// 268: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000026a:  R_X86_64_64  _JIT_TARGET
// 272: 89 c9                         movl    %ecx, %ecx
// 274: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 278: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 27e: 48 83 c4 28                   addq    $0x28, %rsp
// 282: 5b                            popq    %rbx
// 283: 41 5c                         popq    %r12
// 285: 41 5d                         popq    %r13
// 287: 41 5e                         popq    %r14
// 289: 41 5f                         popq    %r15
// 28b: 5d                            popq    %rbp
// 28c: c3                            retq
// 28d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028f:  R_X86_64_64  _JIT_CONTINUE
// 297: 48 89 df                      movq    %rbx, %rdi
// 29a: 4c 89 fe                      movq    %r15, %rsi
// 29d: 4c 89 ea                      movq    %r13, %rdx
// 2a0: 48 83 c4 28                   addq    $0x28, %rsp
// 2a4: 5b                            popq    %rbx
// 2a5: 41 5c                         popq    %r12
// 2a7: 41 5d                         popq    %r13
// 2a9: 41 5e                         popq    %r14
// 2ab: 41 5f                         popq    %r15
// 2ad: 5d                            popq    %rbp
// 2ae: ff e0                         jmpq    *%rax
// 2b0: 
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_BOTH_UNICODE_code_body[689] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x45, 0x8d, 0x78, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xec, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xdb, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x9d, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x0f, 0x89, 0xbb, 0x00, 0x00, 0x00, 0xe9, 0xd7, 0x00, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdf, 0x45, 0x31, 0xff, 0xeb, 0x13, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x74, 0xb7, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x85, 0xc0, 0x78, 0xe6, 0xeb, 0x2a, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x2c, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x15, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0x73, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x8b, 0x4c, 0xce, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x3a, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_BOTH_UNICODE_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_BOTH_UNICODE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_BOTH_UNICODE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_GUARD_BUILTINS_VERSION
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_GUARD_BUILTINS_VERSION.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 ff                      movq    %rdi, %r15
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 dc 01 00 00             je      0x246 <_JIT_ENTRY+0x246>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 cb 01 00 00             je      0x246 <_JIT_ENTRY+0x246>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// 8f: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 41 0f 94 c7                   sete    %r15b
// 9a: 89 da                         movl    %ebx, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 b7 00 00 00             je      0x17b <_JIT_ENTRY+0x17b>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// f6: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// fb: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 100: 78 21                         js      0x123 <_JIT_ENTRY+0x123>
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10c: ff d0                         callq   *%rax
// 10e: 49 ff 0c 24                   decq    (%r12)
// 112: 75 0f                         jne     0x123 <_JIT_ENTRY+0x123>
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_Dealloc
// 11e: 4c 89 e7                      movq    %r12, %rdi
// 121: ff d0                         callq   *%rax
// 123: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 128: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 12c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 130: 48 85 c9                      testq   %rcx, %rcx
// 133: 74 30                         je      0x165 <_JIT_ENTRY+0x165>
// 135: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 139: 48 89 08                      movq    %rcx, (%rax)
// 13c: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 140: 48 8b 00                      movq    (%rax), %rax
// 143: 84 c0                         testb   %al, %al
// 145: 0f 84 ae 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_HandlePending
// 155: 48 89 df                      movq    %rbx, %rdi
// 158: ff d0                         callq   *%rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 84 97 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 162: 4c 89 f0                      movq    %r14, %rax
// 165: 4c 29 f8                      subq    %r15, %rax
// 168: 48 83 c0 b8                   addq    $-0x48, %rax
// 16c: 48 c1 e8 03                   shrq    $0x3, %rax
// 170: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 174: 31 c0                         xorl    %eax, %eax
// 176: e9 f3 00 00 00                jmp     0x26e <_JIT_ENTRY+0x26e>
// 17b: 83 fb 02                      cmpl    $0x2, %ebx
// 17e: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 184: 44 0f 43 fb                   cmovael %ebx, %r15d
// 188: 31 db                         xorl    %ebx, %ebx
// 18a: eb 10                         jmp     0x19c <_JIT_ENTRY+0x19c>
// 18c: 0f 1f 40 00                   nopl    (%rax)
// 190: 48 ff c3                      incq    %rbx
// 193: 49 39 df                      cmpq    %rbx, %r15
// 196: 0f 84 28 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 19c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1a1: 49 8b 45 00                   movq    (%r13), %rax
// 1a5: 48 85 c0                      testq   %rax, %rax
// 1a8: 7e 06                         jle     0x1b0 <_JIT_ENTRY+0x1b0>
// 1aa: 85 c0                         testl   %eax, %eax
// 1ac: 78 e2                         js      0x190 <_JIT_ENTRY+0x190>
// 1ae: eb 26                         jmp     0x1d6 <_JIT_ENTRY+0x1d6>
// 1b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1
// 1ba: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1bf: 4c 89 ea                      movq    %r13, %rdx
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _Py_NegativeRefcount
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 8b 45 00                   movq    (%r13), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 ba                         js      0x190 <_JIT_ENTRY+0x190>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 ff 4d 00                   decq    (%r13)
// 1e6: 75 a8                         jne     0x190 <_JIT_ENTRY+0x190>
// 1e8: 4c 89 ef                      movq    %r13, %rdi
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: ff d0                         callq   *%rax
// 1f7: eb 97                         jmp     0x190 <_JIT_ENTRY+0x190>
// 1f9: 49 8b 47 20                   movq    0x20(%r15), %rax
// 1fd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ff:  R_X86_64_64  PyDict_Type
// 207: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 20b: 75 39                         jne     0x246 <_JIT_ENTRY+0x246>
// 20d: 48 8b 40 20                   movq    0x20(%rax), %rax
// 211: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000213:  R_X86_64_64  _JIT_OPERAND
// 21b: 0f b7 c9                      movzwl  %cx, %ecx
// 21e: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 221: 75 23                         jne     0x246 <_JIT_ENTRY+0x246>
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _JIT_CONTINUE
// 22d: 4c 89 ff                      movq    %r15, %rdi
// 230: 4c 89 f6                      movq    %r14, %rsi
// 233: 48 89 da                      movq    %rbx, %rdx
// 236: 48 83 c4 28                   addq    $0x28, %rsp
// 23a: 5b                            popq    %rbx
// 23b: 41 5c                         popq    %r12
// 23d: 41 5d                         popq    %r13
// 23f: 41 5e                         popq    %r14
// 241: 41 5f                         popq    %r15
// 243: 5d                            popq    %rbp
// 244: ff e0                         jmpq    *%rax
// 246: 4d 29 fe                      subq    %r15, %r14
// 249: 49 83 c6 b8                   addq    $-0x48, %r14
// 24d: 49 c1 ee 03                   shrq    $0x3, %r14
// 251: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 255: 49 8b 07                      movq    (%r15), %rax
// 258: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025a:  R_X86_64_64  _JIT_TARGET
// 262: 89 c9                         movl    %ecx, %ecx
// 264: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 268: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 26e: 48 83 c4 28                   addq    $0x28, %rsp
// 272: 5b                            popq    %rbx
// 273: 41 5c                         popq    %r12
// 275: 41 5d                         popq    %r13
// 277: 41 5e                         popq    %r14
// 279: 41 5f                         popq    %r15
// 27b: 5d                            popq    %rbp
// 27c: c3                            retq
// 27d: 
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_BUILTINS_VERSION_code_body[638] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xdc, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xcb, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x30, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0xe9, 0xf3, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfb, 0x31, 0xdb, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x8b, 0x47, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x39, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_BUILTINS_VERSION_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_BUILTINS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_BUILTINS_VERSION_data_holes[1];

// _CALL_BUILTIN_CLASSplus_GUARD_DORV_VALUES
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_GUARD_DORV_VALUES.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 ff                      movq    %rdi, %r15
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 9e 01 00 00             je      0x208 <_JIT_ENTRY+0x208>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 8d 01 00 00             je      0x208 <_JIT_ENTRY+0x208>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// 8f: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 41 0f 94 c7                   sete    %r15b
// 9a: 89 da                         movl    %ebx, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 9f 00 00 00             je      0x163 <_JIT_ENTRY+0x163>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// f6: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// fb: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 100: 48 8b 2c 24                   movq    (%rsp), %rbp
// 104: 78 16                         js      0x11c <_JIT_ENTRY+0x11c>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 0c 24                   decq    (%r12)
// 116: 0f 84 16 01 00 00             je      0x232 <_JIT_ENTRY+0x232>
// 11c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 121: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 125: 48 85 ed                      testq   %rbp, %rbp
// 128: 0f 84 25 01 00 00             je      0x253 <_JIT_ENTRY+0x253>
// 12e: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 132: 48 89 28                      movq    %rbp, (%rax)
// 135: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 139: 48 8b 00                      movq    (%rax), %rax
// 13c: 84 c0                         testb   %al, %al
// 13e: 0f 84 a3 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_HandlePending
// 14e: 48 89 df                      movq    %rbx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 84 8c 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 15b: 4c 89 e0                      movq    %r12, %rax
// 15e: e9 f0 00 00 00                jmp     0x253 <_JIT_ENTRY+0x253>
// 163: 83 fb 02                      cmpl    $0x2, %ebx
// 166: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 16c: 44 0f 43 eb                   cmovael %ebx, %r13d
// 170: 31 db                         xorl    %ebx, %ebx
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 48 ff c3                      incq    %rbx
// 183: 49 39 dd                      cmpq    %rbx, %r13
// 186: 0f 84 38 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 18c: 4c 8b 7c dd 00                movq    (%rbp,%rbx,8), %r15
// 191: 49 8b 07                      movq    (%r15), %rax
// 194: 48 85 c0                      testq   %rax, %rax
// 197: 7e 07                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 199: 85 c0                         testl   %eax, %eax
// 19b: 78 e3                         js      0x180 <_JIT_ENTRY+0x180>
// 19d: eb 26                         jmp     0x1c5 <_JIT_ENTRY+0x1c5>
// 19f: 90                            nop
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 fa                      movq    %r15, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 07                      movq    (%r15), %rax
// 1c1: 85 c0                         testl   %eax, %eax
// 1c3: 78 bb                         js      0x180 <_JIT_ENTRY+0x180>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 ff 0f                      decq    (%r15)
// 1d4: 75 aa                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d6: 4c 89 ff                      movq    %r15, %rdi
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_Dealloc
// 1e3: ff d0                         callq   *%rax
// 1e5: eb 99                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _JIT_OPARG
// 1f1: f7 d0                         notl    %eax
// 1f3: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f8: 48 98                         cltq
// 1fa: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1ff: f6 40 e8 01                   testb   $0x1, -0x18(%rax)
// 203: 75 6e                         jne     0x273 <_JIT_ENTRY+0x273>
// 205: 4d 89 e6                      movq    %r12, %r14
// 208: 4d 29 fe                      subq    %r15, %r14
// 20b: 49 83 c6 b8                   addq    $-0x48, %r14
// 20f: 49 c1 ee 03                   shrq    $0x3, %r14
// 213: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 217: 49 8b 07                      movq    (%r15), %rax
// 21a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021c:  R_X86_64_64  _JIT_TARGET
// 224: 89 c9                         movl    %ecx, %ecx
// 226: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 22a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 230: eb 32                         jmp     0x264 <_JIT_ENTRY+0x264>
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_Dealloc
// 23c: 4c 89 e7                      movq    %r12, %rdi
// 23f: ff d0                         callq   *%rax
// 241: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 246: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 24a: 48 85 ed                      testq   %rbp, %rbp
// 24d: 0f 85 db fe ff ff             jne     0x12e <_JIT_ENTRY+0x12e>
// 253: 4c 29 f8                      subq    %r15, %rax
// 256: 48 83 c0 b8                   addq    $-0x48, %rax
// 25a: 48 c1 e8 03                   shrq    $0x3, %rax
// 25e: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 262: 31 c0                         xorl    %eax, %eax
// 264: 48 83 c4 28                   addq    $0x28, %rsp
// 268: 5b                            popq    %rbx
// 269: 41 5c                         popq    %r12
// 26b: 41 5d                         popq    %r13
// 26d: 41 5e                         popq    %r14
// 26f: 41 5f                         popq    %r15
// 271: 5d                            popq    %rbp
// 272: c3                            retq
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _JIT_CONTINUE
// 27d: 4c 89 ff                      movq    %r15, %rdi
// 280: 4c 89 e6                      movq    %r12, %rsi
// 283: 48 89 da                      movq    %rbx, %rdx
// 286: 48 83 c4 28                   addq    $0x28, %rsp
// 28a: 5b                            popq    %rbx
// 28b: 41 5c                         popq    %r12
// 28d: 41 5d                         popq    %r13
// 28f: 41 5e                         popq    %r14
// 291: 41 5f                         popq    %r15
// 293: 5d                            popq    %rbp
// 294: ff e0                         jmpq    *%rax
// 296: 
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_DORV_VALUES_code_body[663] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x9e, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x8d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x16, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x25, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0xf0, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xeb, 0x31, 0xdb, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x7c, 0xdd, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0xf6, 0x40, 0xe8, 0x01, 0x75, 0x6e, 0x4d, 0x89, 0xe6, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x85, 0xdb, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_DORV_VALUES_code_holes[15] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_DORV_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_DORV_VALUES_data_holes[1];

// _CALL_BUILTIN_CLASSplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 fd                      movq    %rdi, %r13
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 e7 01 00 00             je      0x251 <_JIT_ENTRY+0x251>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 d6 01 00 00             je      0x251 <_JIT_ENTRY+0x251>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 8f: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 41 0f 94 c6                   sete    %r14b
// 9a: 89 da                         movl    %ebx, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c6                      testb   %al, %r14b
// be: 0f 84 b7 00 00 00             je      0x17b <_JIT_ENTRY+0x17b>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// f6: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// fb: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 100: 78 21                         js      0x123 <_JIT_ENTRY+0x123>
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10c: ff d0                         callq   *%rax
// 10e: 49 ff 0c 24                   decq    (%r12)
// 112: 75 0f                         jne     0x123 <_JIT_ENTRY+0x123>
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_Dealloc
// 11e: 4c 89 e7                      movq    %r12, %rdi
// 121: ff d0                         callq   *%rax
// 123: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 128: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 12c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 130: 48 85 c9                      testq   %rcx, %rcx
// 133: 74 30                         je      0x165 <_JIT_ENTRY+0x165>
// 135: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 139: 48 89 08                      movq    %rcx, (%rax)
// 13c: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 140: 48 8b 00                      movq    (%rax), %rax
// 143: 84 c0                         testb   %al, %al
// 145: 0f 84 ae 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_HandlePending
// 155: 48 89 df                      movq    %rbx, %rdi
// 158: ff d0                         callq   *%rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 84 97 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 162: 4c 89 f0                      movq    %r14, %rax
// 165: 4c 29 e8                      subq    %r13, %rax
// 168: 48 83 c0 b8                   addq    $-0x48, %rax
// 16c: 48 c1 e8 03                   shrq    $0x3, %rax
// 170: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 174: 31 c0                         xorl    %eax, %eax
// 176: e9 ff 00 00 00                jmp     0x27a <_JIT_ENTRY+0x27a>
// 17b: 83 fb 02                      cmpl    $0x2, %ebx
// 17e: 41 be 01 00 00 00             movl    $0x1, %r14d
// 184: 44 0f 43 f3                   cmovael %ebx, %r14d
// 188: 31 db                         xorl    %ebx, %ebx
// 18a: eb 10                         jmp     0x19c <_JIT_ENTRY+0x19c>
// 18c: 0f 1f 40 00                   nopl    (%rax)
// 190: 48 ff c3                      incq    %rbx
// 193: 49 39 de                      cmpq    %rbx, %r14
// 196: 0f 84 28 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 19c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1a1: 49 8b 45 00                   movq    (%r13), %rax
// 1a5: 48 85 c0                      testq   %rax, %rax
// 1a8: 7e 06                         jle     0x1b0 <_JIT_ENTRY+0x1b0>
// 1aa: 85 c0                         testl   %eax, %eax
// 1ac: 78 e2                         js      0x190 <_JIT_ENTRY+0x190>
// 1ae: eb 26                         jmp     0x1d6 <_JIT_ENTRY+0x1d6>
// 1b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1
// 1ba: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1bf: 4c 89 ea                      movq    %r13, %rdx
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _Py_NegativeRefcount
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 8b 45 00                   movq    (%r13), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 ba                         js      0x190 <_JIT_ENTRY+0x190>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 ff 4d 00                   decq    (%r13)
// 1e6: 75 a8                         jne     0x190 <_JIT_ENTRY+0x190>
// 1e8: 4c 89 ef                      movq    %r13, %rdi
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: ff d0                         callq   *%rax
// 1f7: eb 97                         jmp     0x190 <_JIT_ENTRY+0x190>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _JIT_OPARG
// 203: f7 d0                         notl    %eax
// 205: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 20a: 48 98                         cltq
// 20c: 49 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %rdi
// 211: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// 215: 75 14                         jne     0x22b <_JIT_ENTRY+0x22b>
// 217: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 225: ff d0                         callq   *%rax
// 227: 84 c0                         testb   %al, %al
// 229: 74 23                         je      0x24e <_JIT_ENTRY+0x24e>
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _JIT_CONTINUE
// 235: 4c 89 ef                      movq    %r13, %rdi
// 238: 4c 89 f6                      movq    %r14, %rsi
// 23b: 48 89 da                      movq    %rbx, %rdx
// 23e: 48 83 c4 28                   addq    $0x28, %rsp
// 242: 5b                            popq    %rbx
// 243: 41 5c                         popq    %r12
// 245: 41 5d                         popq    %r13
// 247: 41 5e                         popq    %r14
// 249: 41 5f                         popq    %r15
// 24b: 5d                            popq    %rbp
// 24c: ff e0                         jmpq    *%rax
// 24e: 4d 89 f7                      movq    %r14, %r15
// 251: 4d 29 ef                      subq    %r13, %r15
// 254: 49 83 c7 b8                   addq    $-0x48, %r15
// 258: 49 c1 ef 03                   shrq    $0x3, %r15
// 25c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 260: 49 8b 45 00                   movq    (%r13), %rax
// 264: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000266:  R_X86_64_64  _JIT_TARGET
// 26e: 89 c9                         movl    %ecx, %ecx
// 270: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 274: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 27a: 48 83 c4 28                   addq    $0x28, %rsp
// 27e: 5b                            popq    %rbx
// 27f: 41 5c                         popq    %r12
// 281: 41 5d                         popq    %r13
// 283: 41 5e                         popq    %r14
// 285: 41 5f                         popq    %r15
// 287: 5d                            popq    %rbp
// 288: c3                            retq
// 289: 
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_body[650] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd7, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xe7, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xd6, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x30, 0x4f, 0x8d, 0x34, 0xf7, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xe9, 0xff, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc7, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x14, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x84, 0xc0, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xf7, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_GUARD_GLOBALS_VERSION
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_GUARD_GLOBALS_VERSION.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 ff                      movq    %rdi, %r15
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 dc 01 00 00             je      0x246 <_JIT_ENTRY+0x246>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 cb 01 00 00             je      0x246 <_JIT_ENTRY+0x246>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// 8f: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 41 0f 94 c7                   sete    %r15b
// 9a: 89 da                         movl    %ebx, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 b7 00 00 00             je      0x17b <_JIT_ENTRY+0x17b>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// f6: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// fb: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 100: 78 21                         js      0x123 <_JIT_ENTRY+0x123>
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10c: ff d0                         callq   *%rax
// 10e: 49 ff 0c 24                   decq    (%r12)
// 112: 75 0f                         jne     0x123 <_JIT_ENTRY+0x123>
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_Dealloc
// 11e: 4c 89 e7                      movq    %r12, %rdi
// 121: ff d0                         callq   *%rax
// 123: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 128: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 12c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 130: 48 85 c9                      testq   %rcx, %rcx
// 133: 74 30                         je      0x165 <_JIT_ENTRY+0x165>
// 135: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 139: 48 89 08                      movq    %rcx, (%rax)
// 13c: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 140: 48 8b 00                      movq    (%rax), %rax
// 143: 84 c0                         testb   %al, %al
// 145: 0f 84 ae 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_HandlePending
// 155: 48 89 df                      movq    %rbx, %rdi
// 158: ff d0                         callq   *%rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 84 97 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 162: 4c 89 f0                      movq    %r14, %rax
// 165: 4c 29 f8                      subq    %r15, %rax
// 168: 48 83 c0 b8                   addq    $-0x48, %rax
// 16c: 48 c1 e8 03                   shrq    $0x3, %rax
// 170: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 174: 31 c0                         xorl    %eax, %eax
// 176: e9 f3 00 00 00                jmp     0x26e <_JIT_ENTRY+0x26e>
// 17b: 83 fb 02                      cmpl    $0x2, %ebx
// 17e: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 184: 44 0f 43 fb                   cmovael %ebx, %r15d
// 188: 31 db                         xorl    %ebx, %ebx
// 18a: eb 10                         jmp     0x19c <_JIT_ENTRY+0x19c>
// 18c: 0f 1f 40 00                   nopl    (%rax)
// 190: 48 ff c3                      incq    %rbx
// 193: 49 39 df                      cmpq    %rbx, %r15
// 196: 0f 84 28 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 19c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1a1: 49 8b 45 00                   movq    (%r13), %rax
// 1a5: 48 85 c0                      testq   %rax, %rax
// 1a8: 7e 06                         jle     0x1b0 <_JIT_ENTRY+0x1b0>
// 1aa: 85 c0                         testl   %eax, %eax
// 1ac: 78 e2                         js      0x190 <_JIT_ENTRY+0x190>
// 1ae: eb 26                         jmp     0x1d6 <_JIT_ENTRY+0x1d6>
// 1b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1
// 1ba: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1bf: 4c 89 ea                      movq    %r13, %rdx
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _Py_NegativeRefcount
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 8b 45 00                   movq    (%r13), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 ba                         js      0x190 <_JIT_ENTRY+0x190>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 ff 4d 00                   decq    (%r13)
// 1e6: 75 a8                         jne     0x190 <_JIT_ENTRY+0x190>
// 1e8: 4c 89 ef                      movq    %r13, %rdi
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: ff d0                         callq   *%rax
// 1f7: eb 97                         jmp     0x190 <_JIT_ENTRY+0x190>
// 1f9: 49 8b 47 18                   movq    0x18(%r15), %rax
// 1fd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ff:  R_X86_64_64  PyDict_Type
// 207: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 20b: 75 39                         jne     0x246 <_JIT_ENTRY+0x246>
// 20d: 48 8b 40 20                   movq    0x20(%rax), %rax
// 211: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000213:  R_X86_64_64  _JIT_OPERAND
// 21b: 0f b7 c9                      movzwl  %cx, %ecx
// 21e: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 221: 75 23                         jne     0x246 <_JIT_ENTRY+0x246>
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _JIT_CONTINUE
// 22d: 4c 89 ff                      movq    %r15, %rdi
// 230: 4c 89 f6                      movq    %r14, %rsi
// 233: 48 89 da                      movq    %rbx, %rdx
// 236: 48 83 c4 28                   addq    $0x28, %rsp
// 23a: 5b                            popq    %rbx
// 23b: 41 5c                         popq    %r12
// 23d: 41 5d                         popq    %r13
// 23f: 41 5e                         popq    %r14
// 241: 41 5f                         popq    %r15
// 243: 5d                            popq    %rbp
// 244: ff e0                         jmpq    *%rax
// 246: 4d 29 fe                      subq    %r15, %r14
// 249: 49 83 c6 b8                   addq    $-0x48, %r14
// 24d: 49 c1 ee 03                   shrq    $0x3, %r14
// 251: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 255: 49 8b 07                      movq    (%r15), %rax
// 258: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025a:  R_X86_64_64  _JIT_TARGET
// 262: 89 c9                         movl    %ecx, %ecx
// 264: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 268: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 26e: 48 83 c4 28                   addq    $0x28, %rsp
// 272: 5b                            popq    %rbx
// 273: 41 5c                         popq    %r12
// 275: 41 5d                         popq    %r13
// 277: 41 5e                         popq    %r14
// 279: 41 5f                         popq    %r15
// 27b: 5d                            popq    %rbp
// 27c: c3                            retq
// 27d: 
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_GLOBALS_VERSION_code_body[638] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xdc, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xcb, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x30, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0xe9, 0xf3, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfb, 0x31, 0xdb, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x8b, 0x47, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x39, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_GLOBALS_VERSION_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_GLOBALS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_GLOBALS_VERSION_data_holes[1];

// _CALL_BUILTIN_CLASSplus_GUARD_IS_FALSE_POP
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_GUARD_IS_FALSE_POP.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 fd                      movq    %rdi, %r13
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 45 8d 70 01                   leal    0x1(%r8), %r14d
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 45 0f 44 f0                   cmovel  %r8d, %r14d
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 0d 01 00 00             je      0x177 <_JIT_ENTRY+0x177>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 fc 00 00 00             je      0x177 <_JIT_ENTRY+0x177>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 8f: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 0f 94 c3                      sete    %bl
// 99: 44 89 f2                      movl    %r14d, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 84 c3                         testb   %al, %bl
// bd: 0f 84 ef 00 00 00             je      0x1b2 <_JIT_ENTRY+0x1b2>
// c3: 49 8b 04 24                   movq    (%r12), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f 22                         jg      0xee <_JIT_ENTRY+0xee>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d8:  R_X86_64_64  _Py_NegativeRefcount
// e0: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e5: 4c 89 e2                      movq    %r12, %rdx
// e8: ff d0                         callq   *%rax
// ea: 49 8b 04 24                   movq    (%r12), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// f5: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// fa: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// ff: 78 21                         js      0x122 <_JIT_ENTRY+0x122>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10b: ff d0                         callq   *%rax
// 10d: 49 ff 0c 24                   decq    (%r12)
// 111: 75 0f                         jne     0x122 <_JIT_ENTRY+0x122>
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _Py_Dealloc
// 11d: 4c 89 e7                      movq    %r12, %rdi
// 120: ff d0                         callq   *%rax
// 122: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 127: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 12b: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12f: 48 85 c9                      testq   %rcx, %rcx
// 132: 74 30                         je      0x164 <_JIT_ENTRY+0x164>
// 134: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 138: 48 89 08                      movq    %rcx, (%rax)
// 13b: 49 8b 46 10                   movq    0x10(%r14), %rax
// 13f: 48 8b 00                      movq    (%rax), %rax
// 142: 84 c0                         testb   %al, %al
// 144: 0f 84 ed 00 00 00             je      0x237 <_JIT_ENTRY+0x237>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_HandlePending
// 154: 4c 89 f7                      movq    %r14, %rdi
// 157: ff d0                         callq   *%rax
// 159: 85 c0                         testl   %eax, %eax
// 15b: 0f 84 d6 00 00 00             je      0x237 <_JIT_ENTRY+0x237>
// 161: 48 89 d8                      movq    %rbx, %rax
// 164: 4c 29 e8                      subq    %r13, %rax
// 167: 48 83 c0 b8                   addq    $-0x48, %rax
// 16b: 48 c1 e8 03                   shrq    $0x3, %rax
// 16f: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 173: 31 c0                         xorl    %eax, %eax
// 175: eb 2c                         jmp     0x1a3 <_JIT_ENTRY+0x1a3>
// 177: 4c 89 fb                      movq    %r15, %rbx
// 17a: 4c 29 eb                      subq    %r13, %rbx
// 17d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 181: 48 c1 eb 03                   shrq    $0x3, %rbx
// 185: 41 89 5d 40                   movl    %ebx, 0x40(%r13)
// 189: 49 8b 45 00                   movq    (%r13), %rax
// 18d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018f:  R_X86_64_64  _JIT_TARGET
// 197: 89 c9                         movl    %ecx, %ecx
// 199: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 19d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1a3: 48 83 c4 28                   addq    $0x28, %rsp
// 1a7: 5b                            popq    %rbx
// 1a8: 41 5c                         popq    %r12
// 1aa: 41 5d                         popq    %r13
// 1ac: 41 5e                         popq    %r14
// 1ae: 41 5f                         popq    %r15
// 1b0: 5d                            popq    %rbp
// 1b1: c3                            retq
// 1b2: 41 83 fe 02                   cmpl    $0x2, %r14d
// 1b6: bb 01 00 00 00                movl    $0x1, %ebx
// 1bb: 41 0f 43 de                   cmovael %r14d, %ebx
// 1bf: 45 31 ed                      xorl    %r13d, %r13d
// 1c2: eb 18                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 1d0: 49 ff c5                      incq    %r13
// 1d3: 4c 39 eb                      cmpq    %r13, %rbx
// 1d6: 0f 84 e7 fe ff ff             je      0xc3 <_JIT_ENTRY+0xc3>
// 1dc: 4e 8b 74 ed 00                movq    (%rbp,%r13,8), %r14
// 1e1: 49 8b 06                      movq    (%r14), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7e 07                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1e9: 85 c0                         testl   %eax, %eax
// 1eb: 78 e3                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ed: eb 26                         jmp     0x215 <_JIT_ENTRY+0x215>
// 1ef: 90                            nop
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1ff: 4c 89 f2                      movq    %r14, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 06                      movq    (%r14), %rax
// 211: 85 c0                         testl   %eax, %eax
// 213: 78 bb                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21f: ff d0                         callq   *%rax
// 221: 49 ff 0e                      decq    (%r14)
// 224: 75 aa                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 4c 89 f7                      movq    %r14, %rdi
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_Dealloc
// 233: ff d0                         callq   *%rax
// 235: eb 99                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _JIT_OPARG
// 241: f7 d0                         notl    %eax
// 243: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 248: 48 98                         cltq
// 24a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024c:  R_X86_64_64  _Py_TrueStruct
// 254: 49 39 4c c7 f8                cmpq    %rcx, -0x8(%r15,%rax,8)
// 259: 0f 84 1b ff ff ff             je      0x17a <_JIT_ENTRY+0x17a>
// 25f: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 263: 48 83 c6 f8                   addq    $-0x8, %rsi
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _JIT_CONTINUE
// 271: 4c 89 ef                      movq    %r13, %rdi
// 274: 4c 89 f2                      movq    %r14, %rdx
// 277: 48 83 c4 28                   addq    $0x28, %rsp
// 27b: 5b                            popq    %rbx
// 27c: 41 5c                         popq    %r12
// 27e: 41 5d                         popq    %r13
// 280: 41 5e                         popq    %r14
// 282: 41 5f                         popq    %r15
// 284: 5d                            popq    %rbp
// 285: ff e0                         jmpq    *%rax
// 287: 
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_IS_FALSE_POP_code_body[648] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x45, 0x8d, 0x70, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf0, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd7, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x0d, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xfc, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xf2, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xef, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x30, 0x49, 0x8d, 0x1c, 0xdf, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xd6, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xeb, 0x2c, 0x4c, 0x89, 0xfb, 0x4c, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5d, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfe, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xde, 0x45, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xeb, 0x0f, 0x84, 0xe7, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x74, 0xed, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc7, 0xf8, 0x0f, 0x84, 0x1b, 0xff, 0xff, 0xff, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_IS_FALSE_POP_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_IS_FALSE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_IS_FALSE_POP_data_holes[1];

// _CALL_BUILTIN_CLASSplus_GUARD_IS_NONE_POP
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_GUARD_IS_NONE_POP.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 74 76                         je      0xdc <_JIT_ENTRY+0xdc>
// 66: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6e: 4d 85 c0                      testq   %r8, %r8
// 71: 74 69                         je      0xdc <_JIT_ENTRY+0xdc>
// 73: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 78: 4c 89 0c 24                   movq    %r9, (%rsp)
// 7c: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 81: 4c 89 74 24 20                movq    %r14, 0x20(%rsp)
// 86: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8a: 48 85 c0                      testq   %rax, %rax
// 8d: 41 0f 94 c6                   sete    %r14b
// 91: 89 da                         movl    %ebx, %edx
// 93: 4c 89 e7                      movq    %r12, %rdi
// 96: 48 89 ee                      movq    %rbp, %rsi
// 99: 31 c9                         xorl    %ecx, %ecx
// 9b: 41 ff d0                      callq   *%r8
// 9e: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a5:  R_X86_64_64  _JIT_OPARG
// ad: 66 85 c0                      testw   %ax, %ax
// b0: 0f 94 c0                      sete    %al
// b3: 41 84 c6                      testb   %al, %r14b
// b6: 74 54                         je      0x10c <_JIT_ENTRY+0x10c>
// b8: 49 8b 04 24                   movq    (%r12), %rax
// bc: 48 85 c0                      testq   %rax, %rax
// bf: 0f 8e c2 00 00 00             jle     0x187 <_JIT_ENTRY+0x187>
// c5: 85 c0                         testl   %eax, %eax
// c7: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// cc: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// d1: 0f 89 e0 00 00 00             jns     0x1b7 <_JIT_ENTRY+0x1b7>
// d7: e9 fc 00 00 00                jmp     0x1d8 <_JIT_ENTRY+0x1d8>
// dc: 4c 89 fb                      movq    %r15, %rbx
// df: 4c 29 f3                      subq    %r14, %rbx
// e2: 48 83 c3 b8                   addq    $-0x48, %rbx
// e6: 48 c1 eb 03                   shrq    $0x3, %rbx
// ea: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// ee: 49 8b 06                      movq    (%r14), %rax
// f1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f3:  R_X86_64_64  _JIT_TARGET
// fb: 89 c9                         movl    %ecx, %ecx
// fd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 101: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 107: e9 1c 01 00 00                jmp     0x228 <_JIT_ENTRY+0x228>
// 10c: 83 fb 02                      cmpl    $0x2, %ebx
// 10f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 115: 44 0f 43 eb                   cmovael %ebx, %r13d
// 119: 31 db                         xorl    %ebx, %ebx
// 11b: eb 0b                         jmp     0x128 <_JIT_ENTRY+0x128>
// 11d: 0f 1f 00                      nopl    (%rax)
// 120: 48 ff c3                      incq    %rbx
// 123: 49 39 dd                      cmpq    %rbx, %r13
// 126: 74 90                         je      0xb8 <_JIT_ENTRY+0xb8>
// 128: 4c 8b 74 dd 00                movq    (%rbp,%rbx,8), %r14
// 12d: 49 8b 06                      movq    (%r14), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7e 0b                         jle     0x140 <_JIT_ENTRY+0x140>
// 135: 85 c0                         testl   %eax, %eax
// 137: 78 e7                         js      0x120 <_JIT_ENTRY+0x120>
// 139: eb 2a                         jmp     0x165 <_JIT_ENTRY+0x165>
// 13b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 f2                      movq    %r14, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 06                      movq    (%r14), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 bb                         js      0x120 <_JIT_ENTRY+0x120>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0e                      decq    (%r14)
// 174: 75 aa                         jne     0x120 <_JIT_ENTRY+0x120>
// 176: 4c 89 f7                      movq    %r14, %rdi
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: ff d0                         callq   *%rax
// 185: eb 99                         jmp     0x120 <_JIT_ENTRY+0x120>
// 187: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000189:  R_X86_64_64  .rodata.str1.1
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _Py_NegativeRefcount
// 19b: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a0: 4c 89 e2                      movq    %r12, %rdx
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 8b 04 24                   movq    (%r12), %rax
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 1b0: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 1b5: 78 21                         js      0x1d8 <_JIT_ENTRY+0x1d8>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c1: ff d0                         callq   *%rax
// 1c3: 49 ff 0c 24                   decq    (%r12)
// 1c7: 75 0f                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_Dealloc
// 1d3: 4c 89 e7                      movq    %r12, %rdi
// 1d6: ff d0                         callq   *%rax
// 1d8: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1dd: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 1e1: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1e6: 48 85 d2                      testq   %rdx, %rdx
// 1e9: 74 2c                         je      0x217 <_JIT_ENTRY+0x217>
// 1eb: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1ef: 49 8d 1c cf                   leaq    (%r15,%rcx,8), %rbx
// 1f3: 48 89 10                      movq    %rdx, (%rax)
// 1f6: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1fa: 48 8b 00                      movq    (%rax), %rax
// 1fd: 84 c0                         testb   %al, %al
// 1ff: 74 36                         je      0x237 <_JIT_ENTRY+0x237>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_HandlePending
// 20b: 4c 89 ef                      movq    %r13, %rdi
// 20e: ff d0                         callq   *%rax
// 210: 85 c0                         testl   %eax, %eax
// 212: 74 23                         je      0x237 <_JIT_ENTRY+0x237>
// 214: 48 89 d8                      movq    %rbx, %rax
// 217: 4c 29 f0                      subq    %r14, %rax
// 21a: 48 83 c0 b8                   addq    $-0x48, %rax
// 21e: 48 c1 e8 03                   shrq    $0x3, %rax
// 222: 41 89 46 40                   movl    %eax, 0x40(%r14)
// 226: 31 c0                         xorl    %eax, %eax
// 228: 48 83 c4 28                   addq    $0x28, %rsp
// 22c: 5b                            popq    %rbx
// 22d: 41 5c                         popq    %r12
// 22f: 41 5d                         popq    %r13
// 231: 41 5e                         popq    %r14
// 233: 41 5f                         popq    %r15
// 235: 5d                            popq    %rbp
// 236: c3                            retq
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _JIT_OPARG
// 241: f7 d0                         notl    %eax
// 243: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 248: 48 98                         cltq
// 24a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024c:  R_X86_64_64  _Py_NoneStruct
// 254: 49 39 4c c7 f8                cmpq    %rcx, -0x8(%r15,%rax,8)
// 259: 0f 85 80 fe ff ff             jne     0xdf <_JIT_ENTRY+0xdf>
// 25f: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 263: 48 83 c6 f8                   addq    $-0x8, %rsi
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _JIT_CONTINUE
// 271: 4c 89 f7                      movq    %r14, %rdi
// 274: 4c 89 ea                      movq    %r13, %rdx
// 277: 48 83 c4 28                   addq    $0x28, %rsp
// 27b: 5b                            popq    %rbx
// 27c: 41 5c                         popq    %r12
// 27e: 41 5d                         popq    %r13
// 280: 41 5e                         popq    %r14
// 282: 41 5f                         popq    %r15
// 284: 5d                            popq    %rbp
// 285: ff e0                         jmpq    *%rax
// 287: 
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_IS_NONE_POP_code_body[648] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfe, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd7, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x76, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x69, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x74, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x74, 0x54, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc2, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x0f, 0x89, 0xe0, 0x00, 0x00, 0x00, 0xe9, 0xfc, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfb, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x1c, 0x01, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xeb, 0x31, 0xdb, 0xeb, 0x0b, 0x0f, 0x1f, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x74, 0x90, 0x4c, 0x8b, 0x74, 0xdd, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x0b, 0x85, 0xc0, 0x78, 0xe7, 0xeb, 0x2a, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x2c, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x1c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x23, 0x48, 0x89, 0xd8, 0x4c, 0x29, 0xf0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x46, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc7, 0xf8, 0x0f, 0x85, 0x80, 0xfe, 0xff, 0xff, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_IS_NONE_POP_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_IS_NONE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_IS_NONE_POP_data_holes[1];

// _CALL_BUILTIN_CLASSplus_GUARD_IS_NOT_NONE_POP
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_GUARD_IS_NOT_NONE_POP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 fd                      movq    %rdi, %r13
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 f9 00 00 00             je      0x163 <_JIT_ENTRY+0x163>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 e8 00 00 00             je      0x163 <_JIT_ENTRY+0x163>
// 7b: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 80: 4c 89 0c 24                   movq    %r9, (%rsp)
// 84: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 89: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 8e: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 41 0f 94 c6                   sete    %r14b
// 99: 89 da                         movl    %ebx, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c6                      testb   %al, %r14b
// be: 0f 84 d0 00 00 00             je      0x194 <_JIT_ENTRY+0x194>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// d0: 7f 22                         jg      0xf4 <_JIT_ENTRY+0xf4>
// d2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d4:  R_X86_64_64  .rodata.str1.1
// dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000de:  R_X86_64_64  _Py_NegativeRefcount
// e6: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// eb: 4c 89 e2                      movq    %r12, %rdx
// ee: ff d0                         callq   *%rax
// f0: 49 8b 04 24                   movq    (%r12), %rax
// f4: 85 c0                         testl   %eax, %eax
// f6: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// fb: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 100: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 105: 78 16                         js      0x11d <_JIT_ENTRY+0x11d>
// 107: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000109:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 111: ff d0                         callq   *%rax
// 113: 49 ff 0c 24                   decq    (%r12)
// 117: 0f 84 a0 01 00 00             je      0x2bd <_JIT_ENTRY+0x2bd>
// 11d: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 121: 4d 85 f6                      testq   %r14, %r14
// 124: 0f 84 af 01 00 00             je      0x2d9 <_JIT_ENTRY+0x2d9>
// 12a: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12e: 49 8d 1c cf                   leaq    (%r15,%rcx,8), %rbx
// 132: 4c 89 30                      movq    %r14, (%rax)
// 135: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 139: 48 8b 00                      movq    (%rax), %rax
// 13c: 84 c0                         testb   %al, %al
// 13e: 0f 84 d5 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_HandlePending
// 14e: 48 89 ef                      movq    %rbp, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 84 be 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 15b: 48 89 d8                      movq    %rbx, %rax
// 15e: e9 76 01 00 00                jmp     0x2d9 <_JIT_ENTRY+0x2d9>
// 163: 4c 89 fb                      movq    %r15, %rbx
// 166: 4c 29 eb                      subq    %r13, %rbx
// 169: 48 83 c3 b8                   addq    $-0x48, %rbx
// 16d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 171: 41 89 5d 40                   movl    %ebx, 0x40(%r13)
// 175: 49 8b 45 00                   movq    (%r13), %rax
// 179: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017b:  R_X86_64_64  _JIT_TARGET
// 183: 89 c9                         movl    %ecx, %ecx
// 185: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 189: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 18f: e9 56 01 00 00                jmp     0x2ea <_JIT_ENTRY+0x2ea>
// 194: 83 fb 02                      cmpl    $0x2, %ebx
// 197: 41 be 01 00 00 00             movl    $0x1, %r14d
// 19d: 44 0f 43 f3                   cmovael %ebx, %r14d
// 1a1: 31 db                         xorl    %ebx, %ebx
// 1a3: eb 17                         jmp     0x1bc <_JIT_ENTRY+0x1bc>
// 1a5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 1b0: 48 ff c3                      incq    %rbx
// 1b3: 49 39 de                      cmpq    %rbx, %r14
// 1b6: 0f 84 08 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 1bc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1c1: 49 8b 45 00                   movq    (%r13), %rax
// 1c5: 48 85 c0                      testq   %rax, %rax
// 1c8: 7e 06                         jle     0x1d0 <_JIT_ENTRY+0x1d0>
// 1ca: 85 c0                         testl   %eax, %eax
// 1cc: 78 e2                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1ce: eb 26                         jmp     0x1f6 <_JIT_ENTRY+0x1f6>
// 1d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1
// 1da: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1df: 4c 89 ea                      movq    %r13, %rdx
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_NegativeRefcount
// 1ec: ff d0                         callq   *%rax
// 1ee: 49 8b 45 00                   movq    (%r13), %rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 78 ba                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 200: ff d0                         callq   *%rax
// 202: 49 ff 4d 00                   decq    (%r13)
// 206: 75 a8                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 208: 4c 89 ef                      movq    %r13, %rdi
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_Dealloc
// 215: ff d0                         callq   *%rax
// 217: eb 97                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_OPARG
// 223: f7 d0                         notl    %eax
// 225: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 22a: 4c 63 e0                      movslq  %eax, %r12
// 22d: 4f 8b 74 e7 f8                movq    -0x8(%r15,%r12,8), %r14
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_NoneStruct
// 23c: 49 39 c6                      cmpq    %rax, %r14
// 23f: 0f 84 21 ff ff ff             je      0x166 <_JIT_ENTRY+0x166>
// 245: 49 8b 06                      movq    (%r14), %rax
// 248: 48 85 c0                      testq   %rax, %rax
// 24b: 7f 21                         jg      0x26e <_JIT_ENTRY+0x26e>
// 24d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024f:  R_X86_64_64  .rodata.str1.1
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_NegativeRefcount
// 261: be 14 0d 00 00                movl    $0xd14, %esi            # imm = 0xD14
// 266: 4c 89 f2                      movq    %r14, %rdx
// 269: ff d0                         callq   *%rax
// 26b: 49 8b 06                      movq    (%r14), %rax
// 26e: 4f 8d 3c e7                   leaq    (%r15,%r12,8), %r15
// 272: 49 83 c7 f8                   addq    $-0x8, %r15
// 276: 85 c0                         testl   %eax, %eax
// 278: 78 20                         js      0x29a <_JIT_ENTRY+0x29a>
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 284: ff d0                         callq   *%rax
// 286: 49 ff 0e                      decq    (%r14)
// 289: 75 0f                         jne     0x29a <_JIT_ENTRY+0x29a>
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_Dealloc
// 295: 4c 89 f7                      movq    %r14, %rdi
// 298: ff d0                         callq   *%rax
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _JIT_CONTINUE
// 2a4: 4c 89 ef                      movq    %r13, %rdi
// 2a7: 4c 89 fe                      movq    %r15, %rsi
// 2aa: 48 89 ea                      movq    %rbp, %rdx
// 2ad: 48 83 c4 28                   addq    $0x28, %rsp
// 2b1: 5b                            popq    %rbx
// 2b2: 41 5c                         popq    %r12
// 2b4: 41 5d                         popq    %r13
// 2b6: 41 5e                         popq    %r14
// 2b8: 41 5f                         popq    %r15
// 2ba: 5d                            popq    %rbp
// 2bb: ff e0                         jmpq    *%rax
// 2bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bf:  R_X86_64_64  _Py_Dealloc
// 2c7: 4c 89 e7                      movq    %r12, %rdi
// 2ca: ff d0                         callq   *%rax
// 2cc: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 2d0: 4d 85 f6                      testq   %r14, %r14
// 2d3: 0f 85 51 fe ff ff             jne     0x12a <_JIT_ENTRY+0x12a>
// 2d9: 4c 29 e8                      subq    %r13, %rax
// 2dc: 48 83 c0 b8                   addq    $-0x48, %rax
// 2e0: 48 c1 e8 03                   shrq    $0x3, %rax
// 2e4: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 2e8: 31 c0                         xorl    %eax, %eax
// 2ea: 48 83 c4 28                   addq    $0x28, %rsp
// 2ee: 5b                            popq    %rbx
// 2ef: 41 5c                         popq    %r12
// 2f1: 41 5d                         popq    %r13
// 2f3: 41 5e                         popq    %r14
// 2f5: 41 5f                         popq    %r15
// 2f7: 5d                            popq    %rbp
// 2f8: c3                            retq
// 2f9: 
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_IS_NOT_NONE_POP_code_body[762] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd7, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xd0, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xa0, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xdf, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0xaf, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x1c, 0xcf, 0x4c, 0x89, 0x30, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xbe, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0xe9, 0x76, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xfb, 0x4c, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5d, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x56, 0x01, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x17, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x08, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe0, 0x4f, 0x8b, 0x74, 0xe7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc6, 0x0f, 0x84, 0x21, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x0d, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x4f, 0x8d, 0x3c, 0xe7, 0x49, 0x83, 0xc7, 0xf8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x4d, 0x85, 0xf6, 0x0f, 0x85, 0x51, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_IS_NOT_NONE_POP_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_IS_NOT_NONE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_IS_NOT_NONE_POP_data_holes[1];

// _CALL_BUILTIN_CLASSplus_GUARD_IS_TRUE_POP
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_GUARD_IS_TRUE_POP.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 fd                      movq    %rdi, %r13
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 45 8d 70 01                   leal    0x1(%r8), %r14d
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 45 0f 44 f0                   cmovel  %r8d, %r14d
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 0d 01 00 00             je      0x177 <_JIT_ENTRY+0x177>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 fc 00 00 00             je      0x177 <_JIT_ENTRY+0x177>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 8f: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 0f 94 c3                      sete    %bl
// 99: 44 89 f2                      movl    %r14d, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 84 c3                         testb   %al, %bl
// bd: 0f 84 ef 00 00 00             je      0x1b2 <_JIT_ENTRY+0x1b2>
// c3: 49 8b 04 24                   movq    (%r12), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f 22                         jg      0xee <_JIT_ENTRY+0xee>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d8:  R_X86_64_64  _Py_NegativeRefcount
// e0: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e5: 4c 89 e2                      movq    %r12, %rdx
// e8: ff d0                         callq   *%rax
// ea: 49 8b 04 24                   movq    (%r12), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// f5: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// fa: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// ff: 78 21                         js      0x122 <_JIT_ENTRY+0x122>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10b: ff d0                         callq   *%rax
// 10d: 49 ff 0c 24                   decq    (%r12)
// 111: 75 0f                         jne     0x122 <_JIT_ENTRY+0x122>
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _Py_Dealloc
// 11d: 4c 89 e7                      movq    %r12, %rdi
// 120: ff d0                         callq   *%rax
// 122: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 127: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 12b: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12f: 48 85 c9                      testq   %rcx, %rcx
// 132: 74 30                         je      0x164 <_JIT_ENTRY+0x164>
// 134: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 138: 48 89 08                      movq    %rcx, (%rax)
// 13b: 49 8b 46 10                   movq    0x10(%r14), %rax
// 13f: 48 8b 00                      movq    (%rax), %rax
// 142: 84 c0                         testb   %al, %al
// 144: 0f 84 ed 00 00 00             je      0x237 <_JIT_ENTRY+0x237>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_HandlePending
// 154: 4c 89 f7                      movq    %r14, %rdi
// 157: ff d0                         callq   *%rax
// 159: 85 c0                         testl   %eax, %eax
// 15b: 0f 84 d6 00 00 00             je      0x237 <_JIT_ENTRY+0x237>
// 161: 48 89 d8                      movq    %rbx, %rax
// 164: 4c 29 e8                      subq    %r13, %rax
// 167: 48 83 c0 b8                   addq    $-0x48, %rax
// 16b: 48 c1 e8 03                   shrq    $0x3, %rax
// 16f: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 173: 31 c0                         xorl    %eax, %eax
// 175: eb 2c                         jmp     0x1a3 <_JIT_ENTRY+0x1a3>
// 177: 4c 89 fb                      movq    %r15, %rbx
// 17a: 4c 29 eb                      subq    %r13, %rbx
// 17d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 181: 48 c1 eb 03                   shrq    $0x3, %rbx
// 185: 41 89 5d 40                   movl    %ebx, 0x40(%r13)
// 189: 49 8b 45 00                   movq    (%r13), %rax
// 18d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018f:  R_X86_64_64  _JIT_TARGET
// 197: 89 c9                         movl    %ecx, %ecx
// 199: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 19d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1a3: 48 83 c4 28                   addq    $0x28, %rsp
// 1a7: 5b                            popq    %rbx
// 1a8: 41 5c                         popq    %r12
// 1aa: 41 5d                         popq    %r13
// 1ac: 41 5e                         popq    %r14
// 1ae: 41 5f                         popq    %r15
// 1b0: 5d                            popq    %rbp
// 1b1: c3                            retq
// 1b2: 41 83 fe 02                   cmpl    $0x2, %r14d
// 1b6: bb 01 00 00 00                movl    $0x1, %ebx
// 1bb: 41 0f 43 de                   cmovael %r14d, %ebx
// 1bf: 45 31 ed                      xorl    %r13d, %r13d
// 1c2: eb 18                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 1d0: 49 ff c5                      incq    %r13
// 1d3: 4c 39 eb                      cmpq    %r13, %rbx
// 1d6: 0f 84 e7 fe ff ff             je      0xc3 <_JIT_ENTRY+0xc3>
// 1dc: 4e 8b 74 ed 00                movq    (%rbp,%r13,8), %r14
// 1e1: 49 8b 06                      movq    (%r14), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7e 07                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1e9: 85 c0                         testl   %eax, %eax
// 1eb: 78 e3                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ed: eb 26                         jmp     0x215 <_JIT_ENTRY+0x215>
// 1ef: 90                            nop
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1ff: 4c 89 f2                      movq    %r14, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 06                      movq    (%r14), %rax
// 211: 85 c0                         testl   %eax, %eax
// 213: 78 bb                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21f: ff d0                         callq   *%rax
// 221: 49 ff 0e                      decq    (%r14)
// 224: 75 aa                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 4c 89 f7                      movq    %r14, %rdi
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_Dealloc
// 233: ff d0                         callq   *%rax
// 235: eb 99                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _JIT_OPARG
// 241: f7 d0                         notl    %eax
// 243: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 248: 48 98                         cltq
// 24a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024c:  R_X86_64_64  _Py_FalseStruct
// 254: 49 39 4c c7 f8                cmpq    %rcx, -0x8(%r15,%rax,8)
// 259: 0f 84 1b ff ff ff             je      0x17a <_JIT_ENTRY+0x17a>
// 25f: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 263: 48 83 c6 f8                   addq    $-0x8, %rsi
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _JIT_CONTINUE
// 271: 4c 89 ef                      movq    %r13, %rdi
// 274: 4c 89 f2                      movq    %r14, %rdx
// 277: 48 83 c4 28                   addq    $0x28, %rsp
// 27b: 5b                            popq    %rbx
// 27c: 41 5c                         popq    %r12
// 27e: 41 5d                         popq    %r13
// 280: 41 5e                         popq    %r14
// 282: 41 5f                         popq    %r15
// 284: 5d                            popq    %rbp
// 285: ff e0                         jmpq    *%rax
// 287: 
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_IS_TRUE_POP_code_body[648] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x45, 0x8d, 0x70, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf0, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd7, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x0d, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xfc, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xf2, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xef, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x30, 0x49, 0x8d, 0x1c, 0xdf, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xd6, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xeb, 0x2c, 0x4c, 0x89, 0xfb, 0x4c, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5d, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfe, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xde, 0x45, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xeb, 0x0f, 0x84, 0xe7, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x74, 0xed, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc7, 0xf8, 0x0f, 0x84, 0x1b, 0xff, 0xff, 0xff, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_IS_TRUE_POP_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_IS_TRUE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_IS_TRUE_POP_data_holes[1];

// _CALL_BUILTIN_CLASSplus_GUARD_KEYS_VERSION
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_GUARD_KEYS_VERSION.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 45 8d 78 01                   leal    0x1(%r8), %r15d
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 45 0f 44 f8                   cmovel  %r8d, %r15d
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 08 02 00 00             je      0x272 <_JIT_ENTRY+0x272>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 f7 01 00 00             je      0x272 <_JIT_ENTRY+0x272>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 8f: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 0f 94 c3                      sete    %bl
// 99: 44 89 fa                      movl    %r15d, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 84 c3                         testb   %al, %bl
// bd: 0f 84 9f 00 00 00             je      0x162 <_JIT_ENTRY+0x162>
// c3: 49 8b 04 24                   movq    (%r12), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f 22                         jg      0xee <_JIT_ENTRY+0xee>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d8:  R_X86_64_64  _Py_NegativeRefcount
// e0: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e5: 4c 89 e2                      movq    %r12, %rdx
// e8: ff d0                         callq   *%rax
// ea: 49 8b 04 24                   movq    (%r12), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f5: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// fa: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// ff: 48 8b 2c 24                   movq    (%rsp), %rbp
// 103: 78 16                         js      0x11b <_JIT_ENTRY+0x11b>
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10f: ff d0                         callq   *%rax
// 111: 49 ff 0c 24                   decq    (%r12)
// 115: 0f 84 21 01 00 00             je      0x23c <_JIT_ENTRY+0x23c>
// 11b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 120: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 124: 48 85 ed                      testq   %rbp, %rbp
// 127: 0f 84 30 01 00 00             je      0x25d <_JIT_ENTRY+0x25d>
// 12d: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 131: 48 89 28                      movq    %rbp, (%rax)
// 134: 49 8b 47 10                   movq    0x10(%r15), %rax
// 138: 48 8b 00                      movq    (%rax), %rax
// 13b: 84 c0                         testb   %al, %al
// 13d: 0f 84 a4 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_HandlePending
// 14d: 4c 89 ff                      movq    %r15, %rdi
// 150: ff d0                         callq   *%rax
// 152: 85 c0                         testl   %eax, %eax
// 154: 0f 84 8d 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 15a: 4c 89 e0                      movq    %r12, %rax
// 15d: e9 fb 00 00 00                jmp     0x25d <_JIT_ENTRY+0x25d>
// 162: 41 83 ff 02                   cmpl    $0x2, %r15d
// 166: bb 01 00 00 00                movl    $0x1, %ebx
// 16b: 41 0f 43 df                   cmovael %r15d, %ebx
// 16f: 45 31 ed                      xorl    %r13d, %r13d
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 49 ff c5                      incq    %r13
// 183: 4c 39 eb                      cmpq    %r13, %rbx
// 186: 0f 84 37 ff ff ff             je      0xc3 <_JIT_ENTRY+0xc3>
// 18c: 4e 8b 7c ed 00                movq    (%rbp,%r13,8), %r15
// 191: 49 8b 07                      movq    (%r15), %rax
// 194: 48 85 c0                      testq   %rax, %rax
// 197: 7e 07                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 199: 85 c0                         testl   %eax, %eax
// 19b: 78 e3                         js      0x180 <_JIT_ENTRY+0x180>
// 19d: eb 26                         jmp     0x1c5 <_JIT_ENTRY+0x1c5>
// 19f: 90                            nop
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 fa                      movq    %r15, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 07                      movq    (%r15), %rax
// 1c1: 85 c0                         testl   %eax, %eax
// 1c3: 78 bb                         js      0x180 <_JIT_ENTRY+0x180>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 ff 0f                      decq    (%r15)
// 1d4: 75 aa                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d6: 4c 89 ff                      movq    %r15, %rdi
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_Dealloc
// 1e3: ff d0                         callq   *%rax
// 1e5: eb 99                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _JIT_OPARG
// 1f1: f7 d0                         notl    %eax
// 1f3: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f8: 48 98                         cltq
// 1fa: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1ff: 48 8b 40 08                   movq    0x8(%rax), %rax
// 203: 48 8b 80 70 03 00 00          movq    0x370(%rax), %rax
// 20a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020c:  R_X86_64_64  _JIT_OPERAND
// 214: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 217: 75 56                         jne     0x26f <_JIT_ENTRY+0x26f>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_CONTINUE
// 223: 48 89 df                      movq    %rbx, %rdi
// 226: 4c 89 e6                      movq    %r12, %rsi
// 229: 4c 89 fa                      movq    %r15, %rdx
// 22c: 48 83 c4 28                   addq    $0x28, %rsp
// 230: 5b                            popq    %rbx
// 231: 41 5c                         popq    %r12
// 233: 41 5d                         popq    %r13
// 235: 41 5e                         popq    %r14
// 237: 41 5f                         popq    %r15
// 239: 5d                            popq    %rbp
// 23a: ff e0                         jmpq    *%rax
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_Dealloc
// 246: 4c 89 e7                      movq    %r12, %rdi
// 249: ff d0                         callq   *%rax
// 24b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 250: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 254: 48 85 ed                      testq   %rbp, %rbp
// 257: 0f 85 d0 fe ff ff             jne     0x12d <_JIT_ENTRY+0x12d>
// 25d: 48 29 d8                      subq    %rbx, %rax
// 260: 48 83 c0 b8                   addq    $-0x48, %rax
// 264: 48 c1 e8 03                   shrq    $0x3, %rax
// 268: 89 43 40                      movl    %eax, 0x40(%rbx)
// 26b: 31 c0                         xorl    %eax, %eax
// 26d: eb 2b                         jmp     0x29a <_JIT_ENTRY+0x29a>
// 26f: 4d 89 e6                      movq    %r12, %r14
// 272: 49 29 de                      subq    %rbx, %r14
// 275: 49 83 c6 b8                   addq    $-0x48, %r14
// 279: 49 c1 ee 03                   shrq    $0x3, %r14
// 27d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 281: 48 8b 03                      movq    (%rbx), %rax
// 284: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000286:  R_X86_64_64  _JIT_TARGET
// 28e: 89 c9                         movl    %ecx, %ecx
// 290: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 294: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 29a: 48 83 c4 28                   addq    $0x28, %rsp
// 29e: 5b                            popq    %rbx
// 29f: 41 5c                         popq    %r12
// 2a1: 41 5d                         popq    %r13
// 2a3: 41 5e                         popq    %r14
// 2a5: 41 5f                         popq    %r15
// 2a7: 5d                            popq    %rbp
// 2a8: c3                            retq
// 2a9: 
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_KEYS_VERSION_code_body[682] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x45, 0x8d, 0x78, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x08, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xf7, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x21, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x30, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8d, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0xfb, 0x00, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdf, 0x45, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xeb, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x7c, 0xed, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x80, 0x70, 0x03, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x56, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x85, 0xd0, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_KEYS_VERSION_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_KEYS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_KEYS_VERSION_data_holes[1];

// _CALL_BUILTIN_CLASSplus_GUARD_NOT_EXHAUSTED_LIST
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_GUARD_NOT_EXHAUSTED_LIST.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 45 8d 78 01                   leal    0x1(%r8), %r15d
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 45 0f 44 f8                   cmovel  %r8d, %r15d
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 ce 01 00 00             je      0x238 <_JIT_ENTRY+0x238>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 bd 01 00 00             je      0x238 <_JIT_ENTRY+0x238>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 8f: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 0f 94 c3                      sete    %bl
// 99: 44 89 fa                      movl    %r15d, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 84 c3                         testb   %al, %bl
// bd: 0f 84 9f 00 00 00             je      0x162 <_JIT_ENTRY+0x162>
// c3: 49 8b 04 24                   movq    (%r12), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f 22                         jg      0xee <_JIT_ENTRY+0xee>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d8:  R_X86_64_64  _Py_NegativeRefcount
// e0: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e5: 4c 89 e2                      movq    %r12, %rdx
// e8: ff d0                         callq   *%rax
// ea: 49 8b 04 24                   movq    (%r12), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f5: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// fa: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// ff: 48 8b 2c 24                   movq    (%rsp), %rbp
// 103: 78 16                         js      0x11b <_JIT_ENTRY+0x11b>
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10f: ff d0                         callq   *%rax
// 111: 49 ff 0c 24                   decq    (%r12)
// 115: 0f 84 54 01 00 00             je      0x26f <_JIT_ENTRY+0x26f>
// 11b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 120: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 124: 48 85 ed                      testq   %rbp, %rbp
// 127: 0f 84 63 01 00 00             je      0x290 <_JIT_ENTRY+0x290>
// 12d: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 131: 48 89 28                      movq    %rbp, (%rax)
// 134: 49 8b 47 10                   movq    0x10(%r15), %rax
// 138: 48 8b 00                      movq    (%rax), %rax
// 13b: 84 c0                         testb   %al, %al
// 13d: 0f 84 a4 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_HandlePending
// 14d: 4c 89 ff                      movq    %r15, %rdi
// 150: ff d0                         callq   *%rax
// 152: 85 c0                         testl   %eax, %eax
// 154: 0f 84 8d 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 15a: 4c 89 e0                      movq    %r12, %rax
// 15d: e9 2e 01 00 00                jmp     0x290 <_JIT_ENTRY+0x290>
// 162: 41 83 ff 02                   cmpl    $0x2, %r15d
// 166: bb 01 00 00 00                movl    $0x1, %ebx
// 16b: 41 0f 43 df                   cmovael %r15d, %ebx
// 16f: 45 31 ed                      xorl    %r13d, %r13d
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 49 ff c5                      incq    %r13
// 183: 4c 39 eb                      cmpq    %r13, %rbx
// 186: 0f 84 37 ff ff ff             je      0xc3 <_JIT_ENTRY+0xc3>
// 18c: 4e 8b 7c ed 00                movq    (%rbp,%r13,8), %r15
// 191: 49 8b 07                      movq    (%r15), %rax
// 194: 48 85 c0                      testq   %rax, %rax
// 197: 7e 07                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 199: 85 c0                         testl   %eax, %eax
// 19b: 78 e3                         js      0x180 <_JIT_ENTRY+0x180>
// 19d: eb 26                         jmp     0x1c5 <_JIT_ENTRY+0x1c5>
// 19f: 90                            nop
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 fa                      movq    %r15, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 07                      movq    (%r15), %rax
// 1c1: 85 c0                         testl   %eax, %eax
// 1c3: 78 bb                         js      0x180 <_JIT_ENTRY+0x180>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 ff 0f                      decq    (%r15)
// 1d4: 75 aa                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d6: 4c 89 ff                      movq    %r15, %rdi
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_Dealloc
// 1e3: ff d0                         callq   *%rax
// 1e5: eb 99                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _JIT_OPARG
// 1f1: f7 d0                         notl    %eax
// 1f3: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f8: 48 98                         cltq
// 1fa: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1ff: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 203: 48 85 c9                      testq   %rcx, %rcx
// 206: 74 2d                         je      0x235 <_JIT_ENTRY+0x235>
// 208: 48 8b 40 10                   movq    0x10(%rax), %rax
// 20c: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// 210: 7d 23                         jge     0x235 <_JIT_ENTRY+0x235>
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _JIT_CONTINUE
// 21c: 48 89 df                      movq    %rbx, %rdi
// 21f: 4c 89 e6                      movq    %r12, %rsi
// 222: 4c 89 fa                      movq    %r15, %rdx
// 225: 48 83 c4 28                   addq    $0x28, %rsp
// 229: 5b                            popq    %rbx
// 22a: 41 5c                         popq    %r12
// 22c: 41 5d                         popq    %r13
// 22e: 41 5e                         popq    %r14
// 230: 41 5f                         popq    %r15
// 232: 5d                            popq    %rbp
// 233: ff e0                         jmpq    *%rax
// 235: 4d 89 e6                      movq    %r12, %r14
// 238: 49 29 de                      subq    %rbx, %r14
// 23b: 49 83 c6 b8                   addq    $-0x48, %r14
// 23f: 49 c1 ee 03                   shrq    $0x3, %r14
// 243: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 247: 48 8b 03                      movq    (%rbx), %rax
// 24a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024c:  R_X86_64_64  _JIT_TARGET
// 254: 89 c9                         movl    %ecx, %ecx
// 256: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 25a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 260: 48 83 c4 28                   addq    $0x28, %rsp
// 264: 5b                            popq    %rbx
// 265: 41 5c                         popq    %r12
// 267: 41 5d                         popq    %r13
// 269: 41 5e                         popq    %r14
// 26b: 41 5f                         popq    %r15
// 26d: 5d                            popq    %rbp
// 26e: c3                            retq
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  _Py_Dealloc
// 279: 4c 89 e7                      movq    %r12, %rdi
// 27c: ff d0                         callq   *%rax
// 27e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 283: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 287: 48 85 ed                      testq   %rbp, %rbp
// 28a: 0f 85 9d fe ff ff             jne     0x12d <_JIT_ENTRY+0x12d>
// 290: 48 29 d8                      subq    %rbx, %rax
// 293: 48 83 c0 b8                   addq    $-0x48, %rax
// 297: 48 c1 e8 03                   shrq    $0x3, %rax
// 29b: 89 43 40                      movl    %eax, 0x40(%rbx)
// 29e: 31 c0                         xorl    %eax, %eax
// 2a0: eb be                         jmp     0x260 <_JIT_ENTRY+0x260>
// 2a2: 
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_NOT_EXHAUSTED_LIST_code_body[675] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x45, 0x8d, 0x78, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xce, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xbd, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x54, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x63, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8d, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x2e, 0x01, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdf, 0x45, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xeb, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x7c, 0xed, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x2d, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x85, 0x9d, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xbe};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_NOT_EXHAUSTED_LIST_code_holes[15] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_NOT_EXHAUSTED_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_NOT_EXHAUSTED_LIST_data_holes[1];

// _CALL_BUILTIN_CLASSplus_GUARD_NOT_EXHAUSTED_RANGE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_GUARD_NOT_EXHAUSTED_RANGE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 45 8d 78 01                   leal    0x1(%r8), %r15d
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 45 0f 44 f8                   cmovel  %r8d, %r15d
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 f5 01 00 00             je      0x25f <_JIT_ENTRY+0x25f>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 e4 01 00 00             je      0x25f <_JIT_ENTRY+0x25f>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 8f: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 0f 94 c3                      sete    %bl
// 99: 44 89 fa                      movl    %r15d, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 84 c3                         testb   %al, %bl
// bd: 0f 84 9f 00 00 00             je      0x162 <_JIT_ENTRY+0x162>
// c3: 49 8b 04 24                   movq    (%r12), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f 22                         jg      0xee <_JIT_ENTRY+0xee>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d8:  R_X86_64_64  _Py_NegativeRefcount
// e0: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e5: 4c 89 e2                      movq    %r12, %rdx
// e8: ff d0                         callq   *%rax
// ea: 49 8b 04 24                   movq    (%r12), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f5: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// fa: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// ff: 48 8b 2c 24                   movq    (%rsp), %rbp
// 103: 78 16                         js      0x11b <_JIT_ENTRY+0x11b>
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10f: ff d0                         callq   *%rax
// 111: 49 ff 0c 24                   decq    (%r12)
// 115: 0f 84 0e 01 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 11b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 120: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 124: 48 85 ed                      testq   %rbp, %rbp
// 127: 0f 84 1d 01 00 00             je      0x24a <_JIT_ENTRY+0x24a>
// 12d: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 131: 48 89 28                      movq    %rbp, (%rax)
// 134: 49 8b 47 10                   movq    0x10(%r15), %rax
// 138: 48 8b 00                      movq    (%rax), %rax
// 13b: 84 c0                         testb   %al, %al
// 13d: 0f 84 a4 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_HandlePending
// 14d: 4c 89 ff                      movq    %r15, %rdi
// 150: ff d0                         callq   *%rax
// 152: 85 c0                         testl   %eax, %eax
// 154: 0f 84 8d 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 15a: 4c 89 e0                      movq    %r12, %rax
// 15d: e9 e8 00 00 00                jmp     0x24a <_JIT_ENTRY+0x24a>
// 162: 41 83 ff 02                   cmpl    $0x2, %r15d
// 166: bb 01 00 00 00                movl    $0x1, %ebx
// 16b: 41 0f 43 df                   cmovael %r15d, %ebx
// 16f: 45 31 ed                      xorl    %r13d, %r13d
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 49 ff c5                      incq    %r13
// 183: 4c 39 eb                      cmpq    %r13, %rbx
// 186: 0f 84 37 ff ff ff             je      0xc3 <_JIT_ENTRY+0xc3>
// 18c: 4e 8b 7c ed 00                movq    (%rbp,%r13,8), %r15
// 191: 49 8b 07                      movq    (%r15), %rax
// 194: 48 85 c0                      testq   %rax, %rax
// 197: 7e 07                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 199: 85 c0                         testl   %eax, %eax
// 19b: 78 e3                         js      0x180 <_JIT_ENTRY+0x180>
// 19d: eb 26                         jmp     0x1c5 <_JIT_ENTRY+0x1c5>
// 19f: 90                            nop
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 fa                      movq    %r15, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 07                      movq    (%r15), %rax
// 1c1: 85 c0                         testl   %eax, %eax
// 1c3: 78 bb                         js      0x180 <_JIT_ENTRY+0x180>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 ff 0f                      decq    (%r15)
// 1d4: 75 aa                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d6: 4c 89 ff                      movq    %r15, %rdi
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_Dealloc
// 1e3: ff d0                         callq   *%rax
// 1e5: eb 99                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _JIT_OPARG
// 1f1: f7 d0                         notl    %eax
// 1f3: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f8: 48 98                         cltq
// 1fa: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1ff: 48 83 78 20 00                cmpq    $0x0, 0x20(%rax)
// 204: 7e 56                         jle     0x25c <_JIT_ENTRY+0x25c>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _JIT_CONTINUE
// 210: 48 89 df                      movq    %rbx, %rdi
// 213: 4c 89 e6                      movq    %r12, %rsi
// 216: 4c 89 fa                      movq    %r15, %rdx
// 219: 48 83 c4 28                   addq    $0x28, %rsp
// 21d: 5b                            popq    %rbx
// 21e: 41 5c                         popq    %r12
// 220: 41 5d                         popq    %r13
// 222: 41 5e                         popq    %r14
// 224: 41 5f                         popq    %r15
// 226: 5d                            popq    %rbp
// 227: ff e0                         jmpq    *%rax
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_Dealloc
// 233: 4c 89 e7                      movq    %r12, %rdi
// 236: ff d0                         callq   *%rax
// 238: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 23d: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 241: 48 85 ed                      testq   %rbp, %rbp
// 244: 0f 85 e3 fe ff ff             jne     0x12d <_JIT_ENTRY+0x12d>
// 24a: 48 29 d8                      subq    %rbx, %rax
// 24d: 48 83 c0 b8                   addq    $-0x48, %rax
// 251: 48 c1 e8 03                   shrq    $0x3, %rax
// 255: 89 43 40                      movl    %eax, 0x40(%rbx)
// 258: 31 c0                         xorl    %eax, %eax
// 25a: eb 2b                         jmp     0x287 <_JIT_ENTRY+0x287>
// 25c: 4d 89 e6                      movq    %r12, %r14
// 25f: 49 29 de                      subq    %rbx, %r14
// 262: 49 83 c6 b8                   addq    $-0x48, %r14
// 266: 49 c1 ee 03                   shrq    $0x3, %r14
// 26a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 26e: 48 8b 03                      movq    (%rbx), %rax
// 271: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000273:  R_X86_64_64  _JIT_TARGET
// 27b: 89 c9                         movl    %ecx, %ecx
// 27d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 281: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 287: 48 83 c4 28                   addq    $0x28, %rsp
// 28b: 5b                            popq    %rbx
// 28c: 41 5c                         popq    %r12
// 28e: 41 5d                         popq    %r13
// 290: 41 5e                         popq    %r14
// 292: 41 5f                         popq    %r15
// 294: 5d                            popq    %rbp
// 295: c3                            retq
// 296: 
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_NOT_EXHAUSTED_RANGE_code_body[663] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x45, 0x8d, 0x78, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf5, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe4, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x0e, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x1d, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8d, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0xe8, 0x00, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdf, 0x45, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xeb, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x7c, 0xed, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x83, 0x78, 0x20, 0x00, 0x7e, 0x56, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x85, 0xe3, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_NOT_EXHAUSTED_RANGE_code_holes[15] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_NOT_EXHAUSTED_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_NOT_EXHAUSTED_RANGE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_GUARD_NOT_EXHAUSTED_TUPLE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_GUARD_NOT_EXHAUSTED_TUPLE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 45 8d 78 01                   leal    0x1(%r8), %r15d
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 45 0f 44 f8                   cmovel  %r8d, %r15d
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 ce 01 00 00             je      0x238 <_JIT_ENTRY+0x238>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 bd 01 00 00             je      0x238 <_JIT_ENTRY+0x238>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 8f: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 0f 94 c3                      sete    %bl
// 99: 44 89 fa                      movl    %r15d, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 84 c3                         testb   %al, %bl
// bd: 0f 84 9f 00 00 00             je      0x162 <_JIT_ENTRY+0x162>
// c3: 49 8b 04 24                   movq    (%r12), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f 22                         jg      0xee <_JIT_ENTRY+0xee>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d8:  R_X86_64_64  _Py_NegativeRefcount
// e0: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e5: 4c 89 e2                      movq    %r12, %rdx
// e8: ff d0                         callq   *%rax
// ea: 49 8b 04 24                   movq    (%r12), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f5: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// fa: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// ff: 48 8b 2c 24                   movq    (%rsp), %rbp
// 103: 78 16                         js      0x11b <_JIT_ENTRY+0x11b>
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10f: ff d0                         callq   *%rax
// 111: 49 ff 0c 24                   decq    (%r12)
// 115: 0f 84 54 01 00 00             je      0x26f <_JIT_ENTRY+0x26f>
// 11b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 120: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 124: 48 85 ed                      testq   %rbp, %rbp
// 127: 0f 84 63 01 00 00             je      0x290 <_JIT_ENTRY+0x290>
// 12d: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 131: 48 89 28                      movq    %rbp, (%rax)
// 134: 49 8b 47 10                   movq    0x10(%r15), %rax
// 138: 48 8b 00                      movq    (%rax), %rax
// 13b: 84 c0                         testb   %al, %al
// 13d: 0f 84 a4 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_HandlePending
// 14d: 4c 89 ff                      movq    %r15, %rdi
// 150: ff d0                         callq   *%rax
// 152: 85 c0                         testl   %eax, %eax
// 154: 0f 84 8d 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 15a: 4c 89 e0                      movq    %r12, %rax
// 15d: e9 2e 01 00 00                jmp     0x290 <_JIT_ENTRY+0x290>
// 162: 41 83 ff 02                   cmpl    $0x2, %r15d
// 166: bb 01 00 00 00                movl    $0x1, %ebx
// 16b: 41 0f 43 df                   cmovael %r15d, %ebx
// 16f: 45 31 ed                      xorl    %r13d, %r13d
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 49 ff c5                      incq    %r13
// 183: 4c 39 eb                      cmpq    %r13, %rbx
// 186: 0f 84 37 ff ff ff             je      0xc3 <_JIT_ENTRY+0xc3>
// 18c: 4e 8b 7c ed 00                movq    (%rbp,%r13,8), %r15
// 191: 49 8b 07                      movq    (%r15), %rax
// 194: 48 85 c0                      testq   %rax, %rax
// 197: 7e 07                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 199: 85 c0                         testl   %eax, %eax
// 19b: 78 e3                         js      0x180 <_JIT_ENTRY+0x180>
// 19d: eb 26                         jmp     0x1c5 <_JIT_ENTRY+0x1c5>
// 19f: 90                            nop
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 fa                      movq    %r15, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 07                      movq    (%r15), %rax
// 1c1: 85 c0                         testl   %eax, %eax
// 1c3: 78 bb                         js      0x180 <_JIT_ENTRY+0x180>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 ff 0f                      decq    (%r15)
// 1d4: 75 aa                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d6: 4c 89 ff                      movq    %r15, %rdi
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_Dealloc
// 1e3: ff d0                         callq   *%rax
// 1e5: eb 99                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _JIT_OPARG
// 1f1: f7 d0                         notl    %eax
// 1f3: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f8: 48 98                         cltq
// 1fa: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1ff: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 203: 48 85 c9                      testq   %rcx, %rcx
// 206: 74 2d                         je      0x235 <_JIT_ENTRY+0x235>
// 208: 48 8b 40 10                   movq    0x10(%rax), %rax
// 20c: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// 210: 7d 23                         jge     0x235 <_JIT_ENTRY+0x235>
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _JIT_CONTINUE
// 21c: 48 89 df                      movq    %rbx, %rdi
// 21f: 4c 89 e6                      movq    %r12, %rsi
// 222: 4c 89 fa                      movq    %r15, %rdx
// 225: 48 83 c4 28                   addq    $0x28, %rsp
// 229: 5b                            popq    %rbx
// 22a: 41 5c                         popq    %r12
// 22c: 41 5d                         popq    %r13
// 22e: 41 5e                         popq    %r14
// 230: 41 5f                         popq    %r15
// 232: 5d                            popq    %rbp
// 233: ff e0                         jmpq    *%rax
// 235: 4d 89 e6                      movq    %r12, %r14
// 238: 49 29 de                      subq    %rbx, %r14
// 23b: 49 83 c6 b8                   addq    $-0x48, %r14
// 23f: 49 c1 ee 03                   shrq    $0x3, %r14
// 243: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 247: 48 8b 03                      movq    (%rbx), %rax
// 24a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024c:  R_X86_64_64  _JIT_TARGET
// 254: 89 c9                         movl    %ecx, %ecx
// 256: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 25a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 260: 48 83 c4 28                   addq    $0x28, %rsp
// 264: 5b                            popq    %rbx
// 265: 41 5c                         popq    %r12
// 267: 41 5d                         popq    %r13
// 269: 41 5e                         popq    %r14
// 26b: 41 5f                         popq    %r15
// 26d: 5d                            popq    %rbp
// 26e: c3                            retq
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  _Py_Dealloc
// 279: 4c 89 e7                      movq    %r12, %rdi
// 27c: ff d0                         callq   *%rax
// 27e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 283: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 287: 48 85 ed                      testq   %rbp, %rbp
// 28a: 0f 85 9d fe ff ff             jne     0x12d <_JIT_ENTRY+0x12d>
// 290: 48 29 d8                      subq    %rbx, %rax
// 293: 48 83 c0 b8                   addq    $-0x48, %rax
// 297: 48 c1 e8 03                   shrq    $0x3, %rax
// 29b: 89 43 40                      movl    %eax, 0x40(%rbx)
// 29e: 31 c0                         xorl    %eax, %eax
// 2a0: eb be                         jmp     0x260 <_JIT_ENTRY+0x260>
// 2a2: 
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_NOT_EXHAUSTED_TUPLE_code_body[675] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x45, 0x8d, 0x78, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xce, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xbd, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x54, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x63, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8d, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x2e, 0x01, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdf, 0x45, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xeb, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x7c, 0xed, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x2d, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x85, 0x9d, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xbe};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_NOT_EXHAUSTED_TUPLE_code_holes[15] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_NOT_EXHAUSTED_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_NOT_EXHAUSTED_TUPLE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_GUARD_TYPE_VERSION
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_GUARD_TYPE_VERSION.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 45 8d 78 01                   leal    0x1(%r8), %r15d
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 45 0f 44 f8                   cmovel  %r8d, %r15d
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 04 02 00 00             je      0x26e <_JIT_ENTRY+0x26e>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 f3 01 00 00             je      0x26e <_JIT_ENTRY+0x26e>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 8f: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 0f 94 c3                      sete    %bl
// 99: 44 89 fa                      movl    %r15d, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 84 c3                         testb   %al, %bl
// bd: 0f 84 9f 00 00 00             je      0x162 <_JIT_ENTRY+0x162>
// c3: 49 8b 04 24                   movq    (%r12), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f 22                         jg      0xee <_JIT_ENTRY+0xee>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d8:  R_X86_64_64  _Py_NegativeRefcount
// e0: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e5: 4c 89 e2                      movq    %r12, %rdx
// e8: ff d0                         callq   *%rax
// ea: 49 8b 04 24                   movq    (%r12), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f5: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// fa: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// ff: 48 8b 2c 24                   movq    (%rsp), %rbp
// 103: 78 16                         js      0x11b <_JIT_ENTRY+0x11b>
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10f: ff d0                         callq   *%rax
// 111: 49 ff 0c 24                   decq    (%r12)
// 115: 0f 84 1d 01 00 00             je      0x238 <_JIT_ENTRY+0x238>
// 11b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 120: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 124: 48 85 ed                      testq   %rbp, %rbp
// 127: 0f 84 2c 01 00 00             je      0x259 <_JIT_ENTRY+0x259>
// 12d: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 131: 48 89 28                      movq    %rbp, (%rax)
// 134: 49 8b 47 10                   movq    0x10(%r15), %rax
// 138: 48 8b 00                      movq    (%rax), %rax
// 13b: 84 c0                         testb   %al, %al
// 13d: 0f 84 a4 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_HandlePending
// 14d: 4c 89 ff                      movq    %r15, %rdi
// 150: ff d0                         callq   *%rax
// 152: 85 c0                         testl   %eax, %eax
// 154: 0f 84 8d 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 15a: 4c 89 e0                      movq    %r12, %rax
// 15d: e9 f7 00 00 00                jmp     0x259 <_JIT_ENTRY+0x259>
// 162: 41 83 ff 02                   cmpl    $0x2, %r15d
// 166: bb 01 00 00 00                movl    $0x1, %ebx
// 16b: 41 0f 43 df                   cmovael %r15d, %ebx
// 16f: 45 31 ed                      xorl    %r13d, %r13d
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 49 ff c5                      incq    %r13
// 183: 4c 39 eb                      cmpq    %r13, %rbx
// 186: 0f 84 37 ff ff ff             je      0xc3 <_JIT_ENTRY+0xc3>
// 18c: 4e 8b 7c ed 00                movq    (%rbp,%r13,8), %r15
// 191: 49 8b 07                      movq    (%r15), %rax
// 194: 48 85 c0                      testq   %rax, %rax
// 197: 7e 07                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 199: 85 c0                         testl   %eax, %eax
// 19b: 78 e3                         js      0x180 <_JIT_ENTRY+0x180>
// 19d: eb 26                         jmp     0x1c5 <_JIT_ENTRY+0x1c5>
// 19f: 90                            nop
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 fa                      movq    %r15, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 07                      movq    (%r15), %rax
// 1c1: 85 c0                         testl   %eax, %eax
// 1c3: 78 bb                         js      0x180 <_JIT_ENTRY+0x180>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 ff 0f                      decq    (%r15)
// 1d4: 75 aa                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d6: 4c 89 ff                      movq    %r15, %rdi
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_Dealloc
// 1e3: ff d0                         callq   *%rax
// 1e5: eb 99                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _JIT_OPARG
// 1f1: f7 d0                         notl    %eax
// 1f3: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f8: 48 98                         cltq
// 1fa: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1ff: 48 8b 40 08                   movq    0x8(%rax), %rax
// 203: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000205:  R_X86_64_64  _JIT_OPERAND
// 20d: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 213: 75 56                         jne     0x26b <_JIT_ENTRY+0x26b>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _JIT_CONTINUE
// 21f: 48 89 df                      movq    %rbx, %rdi
// 222: 4c 89 e6                      movq    %r12, %rsi
// 225: 4c 89 fa                      movq    %r15, %rdx
// 228: 48 83 c4 28                   addq    $0x28, %rsp
// 22c: 5b                            popq    %rbx
// 22d: 41 5c                         popq    %r12
// 22f: 41 5d                         popq    %r13
// 231: 41 5e                         popq    %r14
// 233: 41 5f                         popq    %r15
// 235: 5d                            popq    %rbp
// 236: ff e0                         jmpq    *%rax
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _Py_Dealloc
// 242: 4c 89 e7                      movq    %r12, %rdi
// 245: ff d0                         callq   *%rax
// 247: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 24c: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 250: 48 85 ed                      testq   %rbp, %rbp
// 253: 0f 85 d4 fe ff ff             jne     0x12d <_JIT_ENTRY+0x12d>
// 259: 48 29 d8                      subq    %rbx, %rax
// 25c: 48 83 c0 b8                   addq    $-0x48, %rax
// 260: 48 c1 e8 03                   shrq    $0x3, %rax
// 264: 89 43 40                      movl    %eax, 0x40(%rbx)
// 267: 31 c0                         xorl    %eax, %eax
// 269: eb 2b                         jmp     0x296 <_JIT_ENTRY+0x296>
// 26b: 4d 89 e6                      movq    %r12, %r14
// 26e: 49 29 de                      subq    %rbx, %r14
// 271: 49 83 c6 b8                   addq    $-0x48, %r14
// 275: 49 c1 ee 03                   shrq    $0x3, %r14
// 279: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 27d: 48 8b 03                      movq    (%rbx), %rax
// 280: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000282:  R_X86_64_64  _JIT_TARGET
// 28a: 89 c9                         movl    %ecx, %ecx
// 28c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 290: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 296: 48 83 c4 28                   addq    $0x28, %rsp
// 29a: 5b                            popq    %rbx
// 29b: 41 5c                         popq    %r12
// 29d: 41 5d                         popq    %r13
// 29f: 41 5e                         popq    %r14
// 2a1: 41 5f                         popq    %r15
// 2a3: 5d                            popq    %rbp
// 2a4: c3                            retq
// 2a5: 
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_TYPE_VERSION_code_body[678] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x45, 0x8d, 0x78, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x04, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xf3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x1d, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x2c, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8d, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0xf7, 0x00, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdf, 0x45, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xeb, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x7c, 0xed, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x56, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x85, 0xd4, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_TYPE_VERSION_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_GUARD_TYPE_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_GUARD_TYPE_VERSION_data_holes[1];

// _CALL_BUILTIN_CLASSplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f8 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e7 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 82: 48 89 14 24                   movq    %rdx, (%rsp)
// 86: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 cc 00 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// f2: 4c 8b 3c 24                   movq    (%rsp), %r15
// f6: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// fb: 78 16                         js      0x113 <_JIT_ENTRY+0x113>
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 107: ff d0                         callq   *%rax
// 109: 49 ff 0c 24                   decq    (%r12)
// 10d: 0f 84 1b 02 00 00             je      0x32e <_JIT_ENTRY+0x32e>
// 113: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 118: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 11c: 4d 85 ed                      testq   %r13, %r13
// 11f: 0f 84 2a 02 00 00             je      0x34f <_JIT_ENTRY+0x34f>
// 125: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 12a: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 12e: 4c 89 28                      movq    %r13, (%rax)
// 131: 49 8b 47 10                   movq    0x10(%r15), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 0f 84 c9 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_HandlePending
// 14a: 4c 89 ff                      movq    %r15, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 0f 84 b2 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 157: 4c 89 e0                      movq    %r12, %rax
// 15a: e9 f0 01 00 00                jmp     0x34f <_JIT_ENTRY+0x34f>
// 15f: 49 29 fe                      subq    %rdi, %r14
// 162: 49 83 c6 b8                   addq    $-0x48, %r14
// 166: 49 c1 ee 03                   shrq    $0x3, %r14
// 16a: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 16e: 48 8b 07                      movq    (%rdi), %rax
// 171: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000173:  R_X86_64_64  _JIT_TARGET
// 17b: 89 c9                         movl    %ecx, %ecx
// 17d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 181: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 187: e9 d3 01 00 00                jmp     0x35f <_JIT_ENTRY+0x35f>
// 18c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 190: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 196: 45 0f 43 fd                   cmovael %r13d, %r15d
// 19a: 31 db                         xorl    %ebx, %ebx
// 19c: eb 0e                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19e: 66 90                         nop
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 df                      cmpq    %rbx, %r15
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: 0f b7 c0                      movzwl  %ax, %eax
// 216: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 21b: 29 c1                         subl    %eax, %ecx
// 21d: 48 63 c9                      movslq  %ecx, %rcx
// 220: f7 d0                         notl    %eax
// 222: 48 98                         cltq
// 224: 48 01 c8                      addq    %rcx, %rax
// 227: 4d 8b 2c c6                   movq    (%r14,%rax,8), %r13
// 22b: 49 8b 5d 18                   movq    0x18(%r13), %rbx
// 22f: 8b 03                         movl    (%rbx), %eax
// 231: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000233:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 23b: ff c0                         incl    %eax
// 23d: 74 04                         je      0x243 <_JIT_ENTRY+0x243>
// 23f: 89 03                         movl    %eax, (%rbx)
// 241: ff d5                         callq   *%rbp
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _JIT_OPARG
// 24d: f7 d0                         notl    %eax
// 24f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 254: 48 98                         cltq
// 256: 48 01 c0                      addq    %rax, %rax
// 259: 49 89 1c c6                   movq    %rbx, (%r14,%rax,8)
// 25d: 4d 8b 7d 10                   movq    0x10(%r13), %r15
// 261: 41 8b 07                      movl    (%r15), %eax
// 264: ff c0                         incl    %eax
// 266: 74 05                         je      0x26d <_JIT_ENTRY+0x26d>
// 268: 41 89 07                      movl    %eax, (%r15)
// 26b: ff d5                         callq   *%rbp
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _JIT_OPARG
// 277: 0f b7 c0                      movzwl  %ax, %eax
// 27a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 27f: 29 c1                         subl    %eax, %ecx
// 281: 48 63 c9                      movslq  %ecx, %rcx
// 284: f7 d0                         notl    %eax
// 286: 48 98                         cltq
// 288: 48 01 c8                      addq    %rcx, %rax
// 28b: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 28f: 49 8b 45 00                   movq    (%r13), %rax
// 293: 48 85 c0                      testq   %rax, %rax
// 296: 7f 22                         jg      0x2ba <_JIT_ENTRY+0x2ba>
// 298: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029a:  R_X86_64_64  .rodata.str1.1
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _Py_NegativeRefcount
// 2ac: be 18 0a 00 00                movl    $0xa18, %esi            # imm = 0xA18
// 2b1: 4c 89 ea                      movq    %r13, %rdx
// 2b4: ff d0                         callq   *%rax
// 2b6: 49 8b 45 00                   movq    (%r13), %rax
// 2ba: 85 c0                         testl   %eax, %eax
// 2bc: 78 21                         js      0x2df <_JIT_ENTRY+0x2df>
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c8: ff d0                         callq   *%rax
// 2ca: 49 ff 4d 00                   decq    (%r13)
// 2ce: 75 0f                         jne     0x2df <_JIT_ENTRY+0x2df>
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _Py_Dealloc
// 2da: 4c 89 ef                      movq    %r13, %rdi
// 2dd: ff d0                         callq   *%rax
// 2df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e1:  R_X86_64_64  _JIT_OPARG
// 2e9: 0f b7 c0                      movzwl  %ax, %eax
// 2ec: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 2f1: 29 c1                         subl    %eax, %ecx
// 2f3: 48 63 c9                      movslq  %ecx, %rcx
// 2f6: f7 d0                         notl    %eax
// 2f8: 48 98                         cltq
// 2fa: 48 01 c1                      addq    %rax, %rcx
// 2fd: 4d 89 3c ce                   movq    %r15, (%r14,%rcx,8)
// 301: 48 01 c0                      addq    %rax, %rax
// 304: 49 89 1c c6                   movq    %rbx, (%r14,%rax,8)
// 308: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030a:  R_X86_64_64  _JIT_CONTINUE
// 312: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 317: 4c 89 e6                      movq    %r12, %rsi
// 31a: 48 8b 14 24                   movq    (%rsp), %rdx
// 31e: 48 83 c4 28                   addq    $0x28, %rsp
// 322: 5b                            popq    %rbx
// 323: 41 5c                         popq    %r12
// 325: 41 5d                         popq    %r13
// 327: 41 5e                         popq    %r14
// 329: 41 5f                         popq    %r15
// 32b: 5d                            popq    %rbp
// 32c: ff e0                         jmpq    *%rax
// 32e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000330:  R_X86_64_64  _Py_Dealloc
// 338: 4c 89 e7                      movq    %r12, %rdi
// 33b: ff d0                         callq   *%rax
// 33d: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 342: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 346: 4d 85 ed                      testq   %r13, %r13
// 349: 0f 85 d6 fd ff ff             jne     0x125 <_JIT_ENTRY+0x125>
// 34f: 48 29 d8                      subq    %rbx, %rax
// 352: 48 83 c0 b8                   addq    $-0x48, %rax
// 356: 48 c1 e8 03                   shrq    $0x3, %rax
// 35a: 89 43 40                      movl    %eax, 0x40(%rbx)
// 35d: 31 c0                         xorl    %eax, %eax
// 35f: 48 83 c4 28                   addq    $0x28, %rsp
// 363: 5b                            popq    %rbx
// 364: 41 5c                         popq    %r12
// 366: 41 5d                         popq    %r13
// 368: 41 5e                         popq    %r14
// 36a: 41 5f                         popq    %r15
// 36c: 5d                            popq    %rbp
// 36d: c3                            retq
// 36e: 
static const unsigned char _CALL_BUILTIN_CLASSplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_body[879] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x1b, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x2a, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0xf0, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xd3, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x4d, 0x8b, 0x2c, 0xc6, 0x49, 0x8b, 0x5d, 0x18, 0x8b, 0x03, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x04, 0x89, 0x03, 0xff, 0xd5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc0, 0x49, 0x89, 0x1c, 0xc6, 0x4d, 0x8b, 0x7d, 0x10, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x05, 0x41, 0x89, 0x07, 0xff, 0xd5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x4d, 0x89, 0x3c, 0xc6, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc1, 0x4d, 0x89, 0x3c, 0xce, 0x48, 0x01, 0xc0, 0x49, 0x89, 0x1c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x0f, 0x85, 0xd6, 0xfd, 0xff, 0xff, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[23] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x30a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x330, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _CALL_BUILTIN_CLASSplus_INIT_CALL_PY_EXACT_ARGS
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_INIT_CALL_PY_EXACT_ARGS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 75: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 7a: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 7f: 48 89 3c 24                   movq    %rdi, (%rsp)
// 83: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 ea                      movl    %r13d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c8 00 00 00             jle     0x189 <_JIT_ENTRY+0x189>
// c1: 85 c0                         testl   %eax, %eax
// c3: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// c8: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// cd: 0f 88 fc 00 00 00             js      0x1cf <_JIT_ENTRY+0x1cf>
// d3: e9 e1 00 00 00                jmp     0x1b9 <_JIT_ENTRY+0x1b9>
// d8: 49 29 fe                      subq    %rdi, %r14
// db: 49 83 c6 b8                   addq    $-0x48, %r14
// df: 49 c1 ee 03                   shrq    $0x3, %r14
// e3: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 67 02 00 00                jmp     0x36c <_JIT_ENTRY+0x36c>
// 105: 41 83 fd 02                   cmpl    $0x2, %r13d
// 109: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 10f: 45 0f 43 fd                   cmovael %r13d, %r15d
// 113: 31 db                         xorl    %ebx, %ebx
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 48 ff c3                      incq    %rbx
// 123: 49 39 df                      cmpq    %rbx, %r15
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 12d: 49 8b 45 00                   movq    (%r13), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 0a                         jle     0x140 <_JIT_ENTRY+0x140>
// 136: 85 c0                         testl   %eax, %eax
// 138: 78 e6                         js      0x120 <_JIT_ENTRY+0x120>
// 13a: eb 2a                         jmp     0x166 <_JIT_ENTRY+0x166>
// 13c: 0f 1f 40 00                   nopl    (%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 ea                      movq    %r13, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 78 ba                         js      0x120 <_JIT_ENTRY+0x120>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 4d 00                   decq    (%r13)
// 176: 75 a8                         jne     0x120 <_JIT_ENTRY+0x120>
// 178: 4c 89 ef                      movq    %r13, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: eb 97                         jmp     0x120 <_JIT_ENTRY+0x120>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1b2: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 1b7: 78 16                         js      0x1cf <_JIT_ENTRY+0x1cf>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c3: ff d0                         callq   *%rax
// 1c5: 49 ff 0c 24                   decq    (%r12)
// 1c9: 0f 84 68 01 00 00             je      0x337 <_JIT_ENTRY+0x337>
// 1cf: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 1d3: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 1d8: 48 85 d2                      testq   %rdx, %rdx
// 1db: 0f 84 77 01 00 00             je      0x358 <_JIT_ENTRY+0x358>
// 1e1: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1e6: 49 8d 1c ce                   leaq    (%r14,%rcx,8), %rbx
// 1ea: 48 89 10                      movq    %rdx, (%rax)
// 1ed: 49 8b 47 10                   movq    0x10(%r15), %rax
// 1f1: 48 8b 00                      movq    (%rax), %rax
// 1f4: 84 c0                         testb   %al, %al
// 1f6: 74 1b                         je      0x213 <_JIT_ENTRY+0x213>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_HandlePending
// 202: 4c 89 ff                      movq    %r15, %rdi
// 205: ff d0                         callq   *%rax
// 207: 85 c0                         testl   %eax, %eax
// 209: 74 08                         je      0x213 <_JIT_ENTRY+0x213>
// 20b: 48 89 d8                      movq    %rbx, %rax
// 20e: e9 45 01 00 00                jmp     0x358 <_JIT_ENTRY+0x358>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _JIT_OPARG
// 21d: 0f b7 c0                      movzwl  %ax, %eax
// 220: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 225: 29 c1                         subl    %eax, %ecx
// 227: f7 d0                         notl    %eax
// 229: 48 63 d0                      movslq  %eax, %rdx
// 22c: 48 63 c1                      movslq  %ecx, %rax
// 22f: 48 01 d0                      addq    %rdx, %rax
// 232: 48 01 d2                      addq    %rdx, %rdx
// 235: 49 8b 2c c6                   movq    (%r14,%rax,8), %rbp
// 239: 49 8b 0c d6                   movq    (%r14,%rdx,8), %rcx
// 23d: 4c 8b 6d 30                   movq    0x30(%rbp), %r13
// 241: 4c 89 fe                      movq    %r15, %rsi
// 244: 4d 8b bf 00 01 00 00          movq    0x100(%r15), %r15
// 24b: 49 63 45 4c                   movslq  0x4c(%r13), %rax
// 24f: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 253: 48 89 86 00 01 00 00          movq    %rax, 0x100(%rsi)
// 25a: 49 89 6f 10                   movq    %rbp, 0x10(%r15)
// 25e: 41 8b 45 00                   movl    (%r13), %eax
// 262: ff c0                         incl    %eax
// 264: 4d 8d 24 d6                   leaq    (%r14,%rdx,8), %r12
// 268: 48 85 c9                      testq   %rcx, %rcx
// 26b: 0f 84 0a 01 00 00             je      0x37b <_JIT_ENTRY+0x37b>
// 271: 85 c0                         testl   %eax, %eax
// 273: 74 10                         je      0x285 <_JIT_ENTRY+0x285>
// 275: 41 89 45 00                   movl    %eax, (%r13)
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 283: ff d0                         callq   *%rax
// 285: 4d 89 2f                      movq    %r13, (%r15)
// 288: 0f 10 45 10                   movups  0x10(%rbp), %xmm0
// 28c: 41 0f 11 47 18                movups  %xmm0, 0x18(%r15)
// 291: 49 c7 47 28 00 00 00 00       movq    $0x0, 0x28(%r15)
// 299: 41 8b 4d 48                   movl    0x48(%r13), %ecx
// 29d: 41 89 4f 40                   movl    %ecx, 0x40(%r15)
// 2a1: 49 c7 47 30 00 00 00 00       movq    $0x0, 0x30(%r15)
// 2a9: 49 81 c5 c8 00 00 00          addq    $0xc8, %r13
// 2b0: 4d 89 6f 38                   movq    %r13, 0x38(%r15)
// 2b4: 66 41 c7 47 44 00 00          movw    $0x0, 0x44(%r15)
// 2bb: 41 c6 47 46 00                movb    $0x0, 0x46(%r15)
// 2c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c2:  R_X86_64_64  _JIT_OPARG
// 2ca: 44 0f b7 e8                   movzwl  %ax, %r13d
// 2ce: 41 ff c5                      incl    %r13d
// 2d1: 45 85 ed                      testl   %r13d, %r13d
// 2d4: 0f 9f c2                      setg    %dl
// 2d7: 44 39 e9                      cmpl    %r13d, %ecx
// 2da: 0f 8e 44 01 00 00             jle     0x424 <_JIT_ENTRY+0x424>
// 2e0: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000002e2:  R_X86_64_64  _JIT_OPARG
// 2ea: 0f b7 dd                      movzwl  %bp, %ebx
// 2ed: 44 8d 6b 01                   leal    0x1(%rbx), %r13d
// 2f1: 4b 8d 3c ef                   leaq    (%r15,%r13,8), %rdi
// 2f5: 48 83 c7 48                   addq    $0x48, %rdi
// 2f9: 44 89 e8                      movl    %r13d, %eax
// 2fc: f7 d0                         notl    %eax
// 2fe: 01 c1                         addl    %eax, %ecx
// 300: 48 8d 14 cd 08 00 00 00       leaq    0x8(,%rcx,8), %rdx
// 308: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030a:  R_X86_64_64  memset
// 312: 31 f6                         xorl    %esi, %esi
// 314: ff d0                         callq   *%rax
// 316: 45 85 ed                      testl   %r13d, %r13d
// 319: 0f 8e e8 01 00 00             jle     0x507 <_JIT_ENTRY+0x507>
// 31f: 0f b7 c5                      movzwl  %bp, %eax
// 322: f7 d3                         notl    %ebx
// 324: 48 63 cb                      movslq  %ebx, %rcx
// 327: 48 29 c1                      subq    %rax, %rcx
// 32a: 49 8d 04 ce                   leaq    (%r14,%rcx,8), %rax
// 32e: 48 83 c0 f8                   addq    $-0x8, %rax
// 332: e9 12 01 00 00                jmp     0x449 <_JIT_ENTRY+0x449>
// 337: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000339:  R_X86_64_64  _Py_Dealloc
// 341: 4c 89 e7                      movq    %r12, %rdi
// 344: ff d0                         callq   *%rax
// 346: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 34a: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 34f: 48 85 d2                      testq   %rdx, %rdx
// 352: 0f 85 89 fe ff ff             jne     0x1e1 <_JIT_ENTRY+0x1e1>
// 358: 48 8b 0c 24                   movq    (%rsp), %rcx
// 35c: 48 29 c8                      subq    %rcx, %rax
// 35f: 48 83 c0 b8                   addq    $-0x48, %rax
// 363: 48 c1 e8 03                   shrq    $0x3, %rax
// 367: 89 41 40                      movl    %eax, 0x40(%rcx)
// 36a: 31 c0                         xorl    %eax, %eax
// 36c: 48 83 c4 28                   addq    $0x28, %rsp
// 370: 5b                            popq    %rbx
// 371: 41 5c                         popq    %r12
// 373: 41 5d                         popq    %r13
// 375: 41 5e                         popq    %r14
// 377: 41 5f                         popq    %r15
// 379: 5d                            popq    %rbp
// 37a: c3                            retq
// 37b: 85 c0                         testl   %eax, %eax
// 37d: 74 10                         je      0x38f <_JIT_ENTRY+0x38f>
// 37f: 41 89 45 00                   movl    %eax, (%r13)
// 383: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000385:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 38d: ff d0                         callq   *%rax
// 38f: 4d 89 2f                      movq    %r13, (%r15)
// 392: 0f 10 45 10                   movups  0x10(%rbp), %xmm0
// 396: 41 0f 11 47 18                movups  %xmm0, 0x18(%r15)
// 39b: 49 c7 47 28 00 00 00 00       movq    $0x0, 0x28(%r15)
// 3a3: 41 8b 45 48                   movl    0x48(%r13), %eax
// 3a7: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 3ab: 49 c7 47 30 00 00 00 00       movq    $0x0, 0x30(%r15)
// 3b3: 49 81 c5 c8 00 00 00          addq    $0xc8, %r13
// 3ba: 4d 89 6f 38                   movq    %r13, 0x38(%r15)
// 3be: 66 41 c7 47 44 00 00          movw    $0x0, 0x44(%r15)
// 3c5: 41 c6 47 46 00                movb    $0x0, 0x46(%r15)
// 3ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000003cc:  R_X86_64_64  _JIT_OPARG
// 3d4: 44 0f b7 e9                   movzwl  %cx, %r13d
// 3d8: 45 85 ed                      testl   %r13d, %r13d
// 3db: 0f 9f c2                      setg    %dl
// 3de: 44 39 e8                      cmpl    %r13d, %eax
// 3e1: 7e 53                         jle     0x436 <_JIT_ENTRY+0x436>
// 3e3: 0f b7 d9                      movzwl  %cx, %ebx
// 3e6: 49 8d 3c df                   leaq    (%r15,%rbx,8), %rdi
// 3ea: 48 83 c7 48                   addq    $0x48, %rdi
// 3ee: 44 0f b7 e9                   movzwl  %cx, %r13d
// 3f2: 44 89 ed                      movl    %r13d, %ebp
// 3f5: f7 d5                         notl    %ebp
// 3f7: 01 e8                         addl    %ebp, %eax
// 3f9: 48 8d 14 c5 08 00 00 00       leaq    0x8(,%rax,8), %rdx
// 401: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000403:  R_X86_64_64  memset
// 40b: 31 f6                         xorl    %esi, %esi
// 40d: ff d0                         callq   *%rax
// 40f: 45 85 ed                      testl   %r13d, %r13d
// 412: 0f 8e ef 00 00 00             jle     0x507 <_JIT_ENTRY+0x507>
// 418: 48 63 c5                      movslq  %ebp, %rax
// 41b: 48 29 d8                      subq    %rbx, %rax
// 41e: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 422: eb 25                         jmp     0x449 <_JIT_ENTRY+0x449>
// 424: f7 d0                         notl    %eax
// 426: 48 0d 00 00 ff ff             orq     $-0x10000, %rax         # imm = 0xFFFF0000
// 42c: f6 c2 01                      testb   $0x1, %dl
// 42f: 75 14                         jne     0x445 <_JIT_ENTRY+0x445>
// 431: e9 d1 00 00 00                jmp     0x507 <_JIT_ENTRY+0x507>
// 436: 0f b7 c1                      movzwl  %cx, %eax
// 439: 48 f7 d8                      negq    %rax
// 43c: f6 c2 01                      testb   $0x1, %dl
// 43f: 0f 84 c2 00 00 00             je      0x507 <_JIT_ENTRY+0x507>
// 445: 48 8d 04 c3                   leaq    (%rbx,%rax,8), %rax
// 449: 41 83 fd 02                   cmpl    $0x2, %r13d
// 44d: b9 01 00 00 00                movl    $0x1, %ecx
// 452: 41 0f 4d cd                   cmovgel %r13d, %ecx
// 456: 83 f9 08                      cmpl    $0x8, %ecx
// 459: 72 10                         jb      0x46b <_JIT_ENTRY+0x46b>
// 45b: 4c 89 fa                      movq    %r15, %rdx
// 45e: 48 29 c2                      subq    %rax, %rdx
// 461: 48 83 c2 48                   addq    $0x48, %rdx
// 465: 48 83 fa 20                   cmpq    $0x20, %rdx
// 469: 73 67                         jae     0x4d2 <_JIT_ENTRY+0x4d2>
// 46b: 31 d2                         xorl    %edx, %edx
// 46d: 48 89 d6                      movq    %rdx, %rsi
// 470: 48 f7 d6                      notq    %rsi
// 473: 48 01 ce                      addq    %rcx, %rsi
// 476: 48 89 cf                      movq    %rcx, %rdi
// 479: 48 83 e7 03                   andq    $0x3, %rdi
// 47d: 74 12                         je      0x491 <_JIT_ENTRY+0x491>
// 47f: 90                            nop
// 480: 4c 8b 04 d0                   movq    (%rax,%rdx,8), %r8
// 484: 4d 89 44 d7 48                movq    %r8, 0x48(%r15,%rdx,8)
// 489: 48 ff c2                      incq    %rdx
// 48c: 48 ff cf                      decq    %rdi
// 48f: 75 ef                         jne     0x480 <_JIT_ENTRY+0x480>
// 491: 48 83 fe 03                   cmpq    $0x3, %rsi
// 495: 72 70                         jb      0x507 <_JIT_ENTRY+0x507>
// 497: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 4a0: 48 8b 34 d0                   movq    (%rax,%rdx,8), %rsi
// 4a4: 49 89 74 d7 48                movq    %rsi, 0x48(%r15,%rdx,8)
// 4a9: 48 8b 74 d0 08                movq    0x8(%rax,%rdx,8), %rsi
// 4ae: 49 89 74 d7 50                movq    %rsi, 0x50(%r15,%rdx,8)
// 4b3: 48 8b 74 d0 10                movq    0x10(%rax,%rdx,8), %rsi
// 4b8: 49 89 74 d7 58                movq    %rsi, 0x58(%r15,%rdx,8)
// 4bd: 48 8b 74 d0 18                movq    0x18(%rax,%rdx,8), %rsi
// 4c2: 49 89 74 d7 60                movq    %rsi, 0x60(%r15,%rdx,8)
// 4c7: 48 83 c2 04                   addq    $0x4, %rdx
// 4cb: 48 39 d1                      cmpq    %rdx, %rcx
// 4ce: 75 d0                         jne     0x4a0 <_JIT_ENTRY+0x4a0>
// 4d0: eb 35                         jmp     0x507 <_JIT_ENTRY+0x507>
// 4d2: 89 ca                         movl    %ecx, %edx
// 4d4: 81 e2 fc ff ff 7f             andl    $0x7ffffffc, %edx       # imm = 0x7FFFFFFC
// 4da: 31 f6                         xorl    %esi, %esi
// 4dc: 0f 1f 40 00                   nopl    (%rax)
// 4e0: 0f 10 04 f0                   movups  (%rax,%rsi,8), %xmm0
// 4e4: 0f 10 4c f0 10                movups  0x10(%rax,%rsi,8), %xmm1
// 4e9: 41 0f 11 44 f7 48             movups  %xmm0, 0x48(%r15,%rsi,8)
// 4ef: 41 0f 11 4c f7 58             movups  %xmm1, 0x58(%r15,%rsi,8)
// 4f5: 48 83 c6 04                   addq    $0x4, %rsi
// 4f9: 48 39 f2                      cmpq    %rsi, %rdx
// 4fc: 75 e2                         jne     0x4e0 <_JIT_ENTRY+0x4e0>
// 4fe: 48 39 ca                      cmpq    %rcx, %rdx
// 501: 0f 85 66 ff ff ff             jne     0x46d <_JIT_ENTRY+0x46d>
// 507: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000509:  R_X86_64_64  _JIT_OPARG
// 511: 0f b7 c0                      movzwl  %ax, %eax
// 514: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 519: 29 c1                         subl    %eax, %ecx
// 51b: 48 63 c9                      movslq  %ecx, %rcx
// 51e: f7 d0                         notl    %eax
// 520: 48 98                         cltq
// 522: 48 01 c8                      addq    %rcx, %rax
// 525: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 529: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000052b:  R_X86_64_64  _JIT_CONTINUE
// 533: 48 8b 3c 24                   movq    (%rsp), %rdi
// 537: 4c 89 e6                      movq    %r12, %rsi
// 53a: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 53f: 48 83 c4 28                   addq    $0x28, %rsp
// 543: 5b                            popq    %rbx
// 544: 41 5c                         popq    %r12
// 546: 41 5d                         popq    %r13
// 548: 41 5e                         popq    %r14
// 54a: 41 5f                         popq    %r15
// 54c: 5d                            popq    %rbp
// 54d: ff e0                         jmpq    *%rax
// 54f: 
static const unsigned char _CALL_BUILTIN_CLASSplus_INIT_CALL_PY_EXACT_ARGS_code_body[1360] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc8, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x0f, 0x88, 0xfc, 0x00, 0x00, 0x00, 0xe9, 0xe1, 0x00, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x67, 0x02, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x74, 0x8c, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x85, 0xc0, 0x78, 0xe6, 0xeb, 0x2a, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x68, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x77, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x49, 0x8d, 0x1c, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x48, 0x89, 0xd8, 0xe9, 0x45, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x63, 0xd0, 0x48, 0x63, 0xc1, 0x48, 0x01, 0xd0, 0x48, 0x01, 0xd2, 0x49, 0x8b, 0x2c, 0xc6, 0x49, 0x8b, 0x0c, 0xd6, 0x4c, 0x8b, 0x6d, 0x30, 0x4c, 0x89, 0xfe, 0x4d, 0x8b, 0xbf, 0x00, 0x01, 0x00, 0x00, 0x49, 0x63, 0x45, 0x4c, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x89, 0x86, 0x00, 0x01, 0x00, 0x00, 0x49, 0x89, 0x6f, 0x10, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x4d, 0x8d, 0x24, 0xd6, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x0a, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x2f, 0x0f, 0x10, 0x45, 0x10, 0x41, 0x0f, 0x11, 0x47, 0x18, 0x49, 0xc7, 0x47, 0x28, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x4d, 0x48, 0x41, 0x89, 0x4f, 0x40, 0x49, 0xc7, 0x47, 0x30, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xc8, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0x38, 0x66, 0x41, 0xc7, 0x47, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x47, 0x46, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe8, 0x41, 0xff, 0xc5, 0x45, 0x85, 0xed, 0x0f, 0x9f, 0xc2, 0x44, 0x39, 0xe9, 0x0f, 0x8e, 0x44, 0x01, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xdd, 0x44, 0x8d, 0x6b, 0x01, 0x4b, 0x8d, 0x3c, 0xef, 0x48, 0x83, 0xc7, 0x48, 0x44, 0x89, 0xe8, 0xf7, 0xd0, 0x01, 0xc1, 0x48, 0x8d, 0x14, 0xcd, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x45, 0x85, 0xed, 0x0f, 0x8e, 0xe8, 0x01, 0x00, 0x00, 0x0f, 0xb7, 0xc5, 0xf7, 0xd3, 0x48, 0x63, 0xcb, 0x48, 0x29, 0xc1, 0x49, 0x8d, 0x04, 0xce, 0x48, 0x83, 0xc0, 0xf8, 0xe9, 0x12, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x0f, 0x85, 0x89, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x41, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x85, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x2f, 0x0f, 0x10, 0x45, 0x10, 0x41, 0x0f, 0x11, 0x47, 0x18, 0x49, 0xc7, 0x47, 0x28, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x48, 0x41, 0x89, 0x47, 0x40, 0x49, 0xc7, 0x47, 0x30, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xc8, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0x38, 0x66, 0x41, 0xc7, 0x47, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x47, 0x46, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe9, 0x45, 0x85, 0xed, 0x0f, 0x9f, 0xc2, 0x44, 0x39, 0xe8, 0x7e, 0x53, 0x0f, 0xb7, 0xd9, 0x49, 0x8d, 0x3c, 0xdf, 0x48, 0x83, 0xc7, 0x48, 0x44, 0x0f, 0xb7, 0xe9, 0x44, 0x89, 0xed, 0xf7, 0xd5, 0x01, 0xe8, 0x48, 0x8d, 0x14, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x45, 0x85, 0xed, 0x0f, 0x8e, 0xef, 0x00, 0x00, 0x00, 0x48, 0x63, 0xc5, 0x48, 0x29, 0xd8, 0x49, 0x8d, 0x04, 0xc6, 0xeb, 0x25, 0xf7, 0xd0, 0x48, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xf6, 0xc2, 0x01, 0x75, 0x14, 0xe9, 0xd1, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0xf7, 0xd8, 0xf6, 0xc2, 0x01, 0x0f, 0x84, 0xc2, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x04, 0xc3, 0x41, 0x83, 0xfd, 0x02, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x4d, 0xcd, 0x83, 0xf9, 0x08, 0x72, 0x10, 0x4c, 0x89, 0xfa, 0x48, 0x29, 0xc2, 0x48, 0x83, 0xc2, 0x48, 0x48, 0x83, 0xfa, 0x20, 0x73, 0x67, 0x31, 0xd2, 0x48, 0x89, 0xd6, 0x48, 0xf7, 0xd6, 0x48, 0x01, 0xce, 0x48, 0x89, 0xcf, 0x48, 0x83, 0xe7, 0x03, 0x74, 0x12, 0x90, 0x4c, 0x8b, 0x04, 0xd0, 0x4d, 0x89, 0x44, 0xd7, 0x48, 0x48, 0xff, 0xc2, 0x48, 0xff, 0xcf, 0x75, 0xef, 0x48, 0x83, 0xfe, 0x03, 0x72, 0x70, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x34, 0xd0, 0x49, 0x89, 0x74, 0xd7, 0x48, 0x48, 0x8b, 0x74, 0xd0, 0x08, 0x49, 0x89, 0x74, 0xd7, 0x50, 0x48, 0x8b, 0x74, 0xd0, 0x10, 0x49, 0x89, 0x74, 0xd7, 0x58, 0x48, 0x8b, 0x74, 0xd0, 0x18, 0x49, 0x89, 0x74, 0xd7, 0x60, 0x48, 0x83, 0xc2, 0x04, 0x48, 0x39, 0xd1, 0x75, 0xd0, 0xeb, 0x35, 0x89, 0xca, 0x81, 0xe2, 0xfc, 0xff, 0xff, 0x7f, 0x31, 0xf6, 0x0f, 0x1f, 0x40, 0x00, 0x0f, 0x10, 0x04, 0xf0, 0x0f, 0x10, 0x4c, 0xf0, 0x10, 0x41, 0x0f, 0x11, 0x44, 0xf7, 0x48, 0x41, 0x0f, 0x11, 0x4c, 0xf7, 0x58, 0x48, 0x83, 0xc6, 0x04, 0x48, 0x39, 0xf2, 0x75, 0xe2, 0x48, 0x39, 0xca, 0x0f, 0x85, 0x66, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_INIT_CALL_PY_EXACT_ARGS_code_holes[23] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x30a, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x339, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x385, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x3cc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x403, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x509, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_INIT_CALL_PY_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_INIT_CALL_PY_EXACT_ARGS_data_holes[1];

// _CALL_BUILTIN_CLASSplus_INSERT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_INSERT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 79 01                   leal    0x1(%r9), %r15d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 f9                   cmovel  %r9d, %r15d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 14 24                   movq    %r10, (%rsp)
// 79: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 7e: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 83: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 fa                      movl    %r15d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c6 00 00 00             jle     0x187 <_JIT_ENTRY+0x187>
// c1: 85 c0                         testl   %eax, %eax
// c3: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// c8: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// cd: 0f 89 e4 00 00 00             jns     0x1b7 <_JIT_ENTRY+0x1b7>
// d3: e9 00 01 00 00                jmp     0x1d8 <_JIT_ENTRY+0x1d8>
// d8: 49 29 fe                      subq    %rdi, %r14
// db: 49 83 c6 b8                   addq    $-0x48, %r14
// df: 49 c1 ee 03                   shrq    $0x3, %r14
// e3: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 23 01 00 00                jmp     0x228 <_JIT_ENTRY+0x228>
// 105: 41 83 ff 02                   cmpl    $0x2, %r15d
// 109: bb 01 00 00 00                movl    $0x1, %ebx
// 10e: 41 0f 43 df                   cmovael %r15d, %ebx
// 112: 45 31 ed                      xorl    %r13d, %r13d
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 49 ff c5                      incq    %r13
// 123: 4c 39 eb                      cmpq    %r13, %rbx
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4e 8b 7c ed 00                movq    (%rbp,%r13,8), %r15
// 12d: 49 8b 07                      movq    (%r15), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7e 0b                         jle     0x140 <_JIT_ENTRY+0x140>
// 135: 85 c0                         testl   %eax, %eax
// 137: 78 e7                         js      0x120 <_JIT_ENTRY+0x120>
// 139: eb 2a                         jmp     0x165 <_JIT_ENTRY+0x165>
// 13b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 fa                      movq    %r15, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 07                      movq    (%r15), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 bb                         js      0x120 <_JIT_ENTRY+0x120>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0f                      decq    (%r15)
// 174: 75 aa                         jne     0x120 <_JIT_ENTRY+0x120>
// 176: 4c 89 ff                      movq    %r15, %rdi
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: ff d0                         callq   *%rax
// 185: eb 99                         jmp     0x120 <_JIT_ENTRY+0x120>
// 187: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000189:  R_X86_64_64  .rodata.str1.1
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _Py_NegativeRefcount
// 19b: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a0: 4c 89 e2                      movq    %r12, %rdx
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 8b 04 24                   movq    (%r12), %rax
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 1b0: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b5: 78 21                         js      0x1d8 <_JIT_ENTRY+0x1d8>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c1: ff d0                         callq   *%rax
// 1c3: 49 ff 0c 24                   decq    (%r12)
// 1c7: 75 0f                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_Dealloc
// 1d3: 4c 89 e7                      movq    %r12, %rdi
// 1d6: ff d0                         callq   *%rax
// 1d8: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 1dc: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1e1: 48 85 d2                      testq   %rdx, %rdx
// 1e4: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// 1e9: 74 2c                         je      0x217 <_JIT_ENTRY+0x217>
// 1eb: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1ef: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 1f3: 48 89 10                      movq    %rdx, (%rax)
// 1f6: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 1fa: 48 8b 00                      movq    (%rax), %rax
// 1fd: 84 c0                         testb   %al, %al
// 1ff: 74 36                         je      0x237 <_JIT_ENTRY+0x237>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_HandlePending
// 20b: 48 89 ef                      movq    %rbp, %rdi
// 20e: ff d0                         callq   *%rax
// 210: 85 c0                         testl   %eax, %eax
// 212: 74 23                         je      0x237 <_JIT_ENTRY+0x237>
// 214: 4c 89 e0                      movq    %r12, %rax
// 217: 4c 29 e8                      subq    %r13, %rax
// 21a: 48 83 c0 b8                   addq    $-0x48, %rax
// 21e: 48 c1 e8 03                   shrq    $0x3, %rax
// 222: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 226: 31 c0                         xorl    %eax, %eax
// 228: 48 83 c4 28                   addq    $0x28, %rsp
// 22c: 5b                            popq    %rbx
// 22d: 41 5c                         popq    %r12
// 22f: 41 5d                         popq    %r13
// 231: 41 5e                         popq    %r14
// 233: 41 5f                         popq    %r15
// 235: 5d                            popq    %rbp
// 236: c3                            retq
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _JIT_OPARG
// 241: 0f b7 d0                      movzwl  %ax, %edx
// 244: f7 d0                         notl    %eax
// 246: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24b: 48 98                         cltq
// 24d: 49 8b 5c c6 f8                movq    -0x8(%r14,%rax,8), %rbx
// 252: 4c 8d 3c 00                   leaq    (%rax,%rax), %r15
// 256: 4b 8d 3c fe                   leaq    (%r14,%r15,8), %rdi
// 25a: 48 29 d0                      subq    %rdx, %rax
// 25d: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 261: 48 c1 e2 03                   shlq    $0x3, %rdx
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  memmove
// 26f: ff d0                         callq   *%rax
// 271: 4b 89 1c fe                   movq    %rbx, (%r14,%r15,8)
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  _JIT_CONTINUE
// 27f: 4c 89 ef                      movq    %r13, %rdi
// 282: 4c 89 e6                      movq    %r12, %rsi
// 285: 48 89 ea                      movq    %rbp, %rdx
// 288: 48 83 c4 28                   addq    $0x28, %rsp
// 28c: 5b                            popq    %rbx
// 28d: 41 5c                         popq    %r12
// 28f: 41 5d                         popq    %r13
// 291: 41 5e                         popq    %r14
// 293: 41 5f                         popq    %r15
// 295: 5d                            popq    %rbp
// 296: ff e0                         jmpq    *%rax
// 298: 
static const unsigned char _CALL_BUILTIN_CLASSplus_INSERT_code_body[665] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x79, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x89, 0xe4, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x23, 0x01, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdf, 0x45, 0x31, 0xed, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xeb, 0x74, 0x8c, 0x4e, 0x8b, 0x7c, 0xed, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x0b, 0x85, 0xc0, 0x78, 0xe7, 0xeb, 0x2a, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x74, 0x2c, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x23, 0x4c, 0x89, 0xe0, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x5c, 0xc6, 0xf8, 0x4c, 0x8d, 0x3c, 0x00, 0x4b, 0x8d, 0x3c, 0xfe, 0x48, 0x29, 0xd0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xc1, 0xe2, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4b, 0x89, 0x1c, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_INSERT_code_holes[16] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &memmove, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_INSERT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_INSERT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_IS_NONE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_IS_NONE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f9 00 00 00             je      0x160 <_JIT_ENTRY+0x160>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e8 00 00 00             je      0x160 <_JIT_ENTRY+0x160>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 41 0f 94 c7                   sete    %r15b
// 96: 89 da                         movl    %ebx, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 41 84 c7                      testb   %al, %r15b
// bb: 0f 84 cc 00 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e3: 4c 89 e2                      movq    %r12, %rdx
// e6: ff d0                         callq   *%rax
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 85 c0                         testl   %eax, %eax
// ee: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// f3: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// f8: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 0c 24                   decq    (%r12)
// 10f: 0f 84 78 01 00 00             je      0x28d <_JIT_ENTRY+0x28d>
// 115: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 119: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 11e: 48 85 d2                      testq   %rdx, %rdx
// 121: 0f 84 87 01 00 00             je      0x2ae <_JIT_ENTRY+0x2ae>
// 127: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12b: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 12f: 48 89 10                      movq    %rdx, (%rax)
// 132: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 136: 48 8b 00                      movq    (%rax), %rax
// 139: 84 c0                         testb   %al, %al
// 13b: 0f 84 c8 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_HandlePending
// 14b: 48 89 ef                      movq    %rbp, %rdi
// 14e: ff d0                         callq   *%rax
// 150: 85 c0                         testl   %eax, %eax
// 152: 0f 84 b1 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 158: 4c 89 e0                      movq    %r12, %rax
// 15b: e9 4e 01 00 00                jmp     0x2ae <_JIT_ENTRY+0x2ae>
// 160: 49 29 fe                      subq    %rdi, %r14
// 163: 49 83 c6 b8                   addq    $-0x48, %r14
// 167: 49 c1 ee 03                   shrq    $0x3, %r14
// 16b: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 16f: 48 8b 07                      movq    (%rdi), %rax
// 172: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000174:  R_X86_64_64  _JIT_TARGET
// 17c: 89 c9                         movl    %ecx, %ecx
// 17e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 182: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 188: e9 32 01 00 00                jmp     0x2bf <_JIT_ENTRY+0x2bf>
// 18d: 83 fb 02                      cmpl    $0x2, %ebx
// 190: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 196: 44 0f 43 fb                   cmovael %ebx, %r15d
// 19a: 31 db                         xorl    %ebx, %ebx
// 19c: eb 0e                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19e: 66 90                         nop
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 df                      cmpq    %rbx, %r15
// 1a6: 0f 84 15 ff ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 98                         cltq
// 21c: 4d 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %r15
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _Py_NoneStruct
// 22b: 49 39 c7                      cmpq    %rax, %r15
// 22e: 0f 84 9a 00 00 00             je      0x2ce <_JIT_ENTRY+0x2ce>
// 234: 49 8b 07                      movq    (%r15), %rax
// 237: 48 85 c0                      testq   %rax, %rax
// 23a: 7f 21                         jg      0x25d <_JIT_ENTRY+0x25d>
// 23c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023e:  R_X86_64_64  .rodata.str1.1
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_NegativeRefcount
// 250: be ef 07 00 00                movl    $0x7ef, %esi            # imm = 0x7EF
// 255: 4c 89 fa                      movq    %r15, %rdx
// 258: ff d0                         callq   *%rax
// 25a: 49 8b 07                      movq    (%r15), %rax
// 25d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000025f:  R_X86_64_64  _Py_FalseStruct
// 267: 85 c0                         testl   %eax, %eax
// 269: 78 6d                         js      0x2d8 <_JIT_ENTRY+0x2d8>
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 275: ff d0                         callq   *%rax
// 277: 49 ff 0f                      decq    (%r15)
// 27a: 75 5c                         jne     0x2d8 <_JIT_ENTRY+0x2d8>
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_Dealloc
// 286: 4c 89 ff                      movq    %r15, %rdi
// 289: ff d0                         callq   *%rax
// 28b: eb 4b                         jmp     0x2d8 <_JIT_ENTRY+0x2d8>
// 28d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028f:  R_X86_64_64  _Py_Dealloc
// 297: 4c 89 e7                      movq    %r12, %rdi
// 29a: ff d0                         callq   *%rax
// 29c: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 2a0: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2a5: 48 85 d2                      testq   %rdx, %rdx
// 2a8: 0f 85 79 fe ff ff             jne     0x127 <_JIT_ENTRY+0x127>
// 2ae: 4c 29 e8                      subq    %r13, %rax
// 2b1: 48 83 c0 b8                   addq    $-0x48, %rax
// 2b5: 48 c1 e8 03                   shrq    $0x3, %rax
// 2b9: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 2bd: 31 c0                         xorl    %eax, %eax
// 2bf: 48 83 c4 28                   addq    $0x28, %rsp
// 2c3: 5b                            popq    %rbx
// 2c4: 41 5c                         popq    %r12
// 2c6: 41 5d                         popq    %r13
// 2c8: 41 5e                         popq    %r14
// 2ca: 41 5f                         popq    %r15
// 2cc: 5d                            popq    %rbp
// 2cd: c3                            retq
// 2ce: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000002d0:  R_X86_64_64  _Py_TrueStruct
// 2d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002da:  R_X86_64_64  _JIT_OPARG
// 2e2: f7 d0                         notl    %eax
// 2e4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2e9: 48 98                         cltq
// 2eb: 49 89 5c c6 f8                movq    %rbx, -0x8(%r14,%rax,8)
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  _JIT_CONTINUE
// 2fa: 4c 89 ef                      movq    %r13, %rdi
// 2fd: 4c 89 e6                      movq    %r12, %rsi
// 300: 48 89 ea                      movq    %rbp, %rdx
// 303: 48 83 c4 28                   addq    $0x28, %rsp
// 307: 5b                            popq    %rbx
// 308: 41 5c                         popq    %r12
// 30a: 41 5d                         popq    %r13
// 30c: 41 5e                         popq    %r14
// 30e: 41 5f                         popq    %r15
// 310: 5d                            popq    %rbp
// 311: ff e0                         jmpq    *%rax
// 313: 
static const unsigned char _CALL_BUILTIN_CLASSplus_IS_NONE_code_body[788] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x78, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x87, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x4e, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x32, 0x01, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfb, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x15, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x7c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc7, 0x0f, 0x84, 0x9a, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xef, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x6d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x5c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x4b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x85, 0x79, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x5c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_IS_NONE_code_holes[23] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2da, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_IS_NONE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_IS_NONE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_IS_OP
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_IS_OP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f5 00 00 00             je      0x15c <_JIT_ENTRY+0x15c>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e4 00 00 00             je      0x15c <_JIT_ENTRY+0x15c>
// 78: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 7d: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 82: 48 89 14 24                   movq    %rdx, (%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 c9 00 00 00             je      0x189 <_JIT_ENTRY+0x189>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// f2: 48 8b 1c 24                   movq    (%rsp), %rbx
// f6: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// fb: 78 16                         js      0x113 <_JIT_ENTRY+0x113>
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 107: ff d0                         callq   *%rax
// 109: 49 ff 0c 24                   decq    (%r12)
// 10d: 0f 84 1d 02 00 00             je      0x330 <_JIT_ENTRY+0x330>
// 113: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 118: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 11c: 4d 85 ff                      testq   %r15, %r15
// 11f: 0f 84 2c 02 00 00             je      0x351 <_JIT_ENTRY+0x351>
// 125: 4c 89 38                      movq    %r15, (%rax)
// 128: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 12c: 48 8b 00                      movq    (%rax), %rax
// 12f: 84 c0                         testb   %al, %al
// 131: 0f 84 d2 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_HandlePending
// 141: 48 89 df                      movq    %rbx, %rdi
// 144: ff d0                         callq   *%rax
// 146: 85 c0                         testl   %eax, %eax
// 148: 0f 84 bb 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 14e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 153: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 157: e9 f5 01 00 00                jmp     0x351 <_JIT_ENTRY+0x351>
// 15c: 49 29 fe                      subq    %rdi, %r14
// 15f: 49 83 c6 b8                   addq    $-0x48, %r14
// 163: 49 c1 ee 03                   shrq    $0x3, %r14
// 167: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 16b: 48 8b 07                      movq    (%rdi), %rax
// 16e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000170:  R_X86_64_64  _JIT_TARGET
// 178: 89 c9                         movl    %ecx, %ecx
// 17a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 17e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 184: e9 d8 01 00 00                jmp     0x361 <_JIT_ENTRY+0x361>
// 189: 41 83 fd 02                   cmpl    $0x2, %r13d
// 18d: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 193: 45 0f 43 fd                   cmovael %r13d, %r15d
// 197: 31 db                         xorl    %ebx, %ebx
// 199: eb 11                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 df                      cmpq    %rbx, %r15
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 63 d8                      movslq  %eax, %rbx
// 21d: 4d 8b 64 de f0                movq    -0x10(%r14,%rbx,8), %r12
// 222: 4d 8b 6c de f8                movq    -0x8(%r14,%rbx,8), %r13
// 227: 49 8b 04 24                   movq    (%r12), %rax
// 22b: 48 85 c0                      testq   %rax, %rax
// 22e: 7f 22                         jg      0x252 <_JIT_ENTRY+0x252>
// 230: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000232:  R_X86_64_64  .rodata.str1.1
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _Py_NegativeRefcount
// 244: be 98 07 00 00                movl    $0x798, %esi            # imm = 0x798
// 249: 4c 89 e2                      movq    %r12, %rdx
// 24c: ff d0                         callq   *%rax
// 24e: 49 8b 04 24                   movq    (%r12), %rax
// 252: 85 c0                         testl   %eax, %eax
// 254: 78 21                         js      0x277 <_JIT_ENTRY+0x277>
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 260: ff d0                         callq   *%rax
// 262: 49 ff 0c 24                   decq    (%r12)
// 266: 75 0f                         jne     0x277 <_JIT_ENTRY+0x277>
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _Py_Dealloc
// 272: 4c 89 e7                      movq    %r12, %rdi
// 275: ff d0                         callq   *%rax
// 277: 49 8b 45 00                   movq    (%r13), %rax
// 27b: 48 85 c0                      testq   %rax, %rax
// 27e: 7f 22                         jg      0x2a2 <_JIT_ENTRY+0x2a2>
// 280: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000282:  R_X86_64_64  .rodata.str1.1
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _Py_NegativeRefcount
// 294: be 99 07 00 00                movl    $0x799, %esi            # imm = 0x799
// 299: 4c 89 ea                      movq    %r13, %rdx
// 29c: ff d0                         callq   *%rax
// 29e: 49 8b 45 00                   movq    (%r13), %rax
// 2a2: 4d 8d 3c de                   leaq    (%r14,%rbx,8), %r15
// 2a6: 49 83 c7 f8                   addq    $-0x8, %r15
// 2aa: 85 c0                         testl   %eax, %eax
// 2ac: 78 21                         js      0x2cf <_JIT_ENTRY+0x2cf>
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b8: ff d0                         callq   *%rax
// 2ba: 49 ff 4d 00                   decq    (%r13)
// 2be: 75 0f                         jne     0x2cf <_JIT_ENTRY+0x2cf>
// 2c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c2:  R_X86_64_64  _Py_Dealloc
// 2ca: 4c 89 ef                      movq    %r13, %rdi
// 2cd: ff d0                         callq   *%rax
// 2cf: 31 c0                         xorl    %eax, %eax
// 2d1: 4d 39 ec                      cmpq    %r13, %r12
// 2d4: 0f 94 c0                      sete    %al
// 2d7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002d9:  R_X86_64_64  _JIT_OPARG
// 2e1: 66 39 c8                      cmpw    %cx, %ax
// 2e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e6:  R_X86_64_64  _Py_FalseStruct
// 2ee: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002f0:  R_X86_64_64  _Py_TrueStruct
// 2f8: 48 0f 44 d0                   cmoveq  %rax, %rdx
// 2fc: f7 d1                         notl    %ecx
// 2fe: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 304: 48 63 c1                      movslq  %ecx, %rax
// 307: 49 89 54 c6 f0                movq    %rdx, -0x10(%r14,%rax,8)
// 30c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030e:  R_X86_64_64  _JIT_CONTINUE
// 316: 48 89 ef                      movq    %rbp, %rdi
// 319: 4c 89 fe                      movq    %r15, %rsi
// 31c: 48 8b 14 24                   movq    (%rsp), %rdx
// 320: 48 83 c4 28                   addq    $0x28, %rsp
// 324: 5b                            popq    %rbx
// 325: 41 5c                         popq    %r12
// 327: 41 5d                         popq    %r13
// 329: 41 5e                         popq    %r14
// 32b: 41 5f                         popq    %r15
// 32d: 5d                            popq    %rbp
// 32e: ff e0                         jmpq    *%rax
// 330: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000332:  R_X86_64_64  _Py_Dealloc
// 33a: 4c 89 e7                      movq    %r12, %rdi
// 33d: ff d0                         callq   *%rax
// 33f: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 344: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 348: 4d 85 ff                      testq   %r15, %r15
// 34b: 0f 85 d4 fd ff ff             jne     0x125 <_JIT_ENTRY+0x125>
// 351: 48 29 e8                      subq    %rbp, %rax
// 354: 48 83 c0 b8                   addq    $-0x48, %rax
// 358: 48 c1 e8 03                   shrq    $0x3, %rax
// 35c: 89 45 40                      movl    %eax, 0x40(%rbp)
// 35f: 31 c0                         xorl    %eax, %eax
// 361: 48 83 c4 28                   addq    $0x28, %rsp
// 365: 5b                            popq    %rbx
// 366: 41 5c                         popq    %r12
// 368: 41 5d                         popq    %r13
// 36a: 41 5e                         popq    %r14
// 36c: 41 5f                         popq    %r15
// 36e: 5d                            popq    %rbp
// 36f: c3                            retq
// 370: 
static const unsigned char _CALL_BUILTIN_CLASSplus_IS_OP_code_body[881] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf5, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe4, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x1d, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x2c, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xbb, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0xf5, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xd8, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x64, 0xde, 0xf0, 0x4d, 0x8b, 0x6c, 0xde, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4d, 0x8d, 0x3c, 0xde, 0x49, 0x83, 0xc7, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x31, 0xc0, 0x4d, 0x39, 0xec, 0x0f, 0x94, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x39, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd0, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x54, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xff, 0x0f, 0x85, 0xd4, 0xfd, 0xff, 0xff, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_IS_OP_code_holes[26] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x30e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x332, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_IS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_IS_OP_data_holes[1];

// _CALL_BUILTIN_CLASSplus_ITER_CHECK_LIST
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_ITER_CHECK_LIST.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 ff                      movq    %rdi, %r15
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 a8 01 00 00             je      0x212 <_JIT_ENTRY+0x212>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 97 01 00 00             je      0x212 <_JIT_ENTRY+0x212>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// 8f: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 41 0f 94 c7                   sete    %r15b
// 9a: 89 da                         movl    %ebx, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 9f 00 00 00             je      0x163 <_JIT_ENTRY+0x163>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// f6: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// fb: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 100: 48 8b 2c 24                   movq    (%rsp), %rbp
// 104: 78 16                         js      0x11c <_JIT_ENTRY+0x11c>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 0c 24                   decq    (%r12)
// 116: 0f 84 20 01 00 00             je      0x23c <_JIT_ENTRY+0x23c>
// 11c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 121: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 125: 48 85 ed                      testq   %rbp, %rbp
// 128: 0f 84 2f 01 00 00             je      0x25d <_JIT_ENTRY+0x25d>
// 12e: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 132: 48 89 28                      movq    %rbp, (%rax)
// 135: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 139: 48 8b 00                      movq    (%rax), %rax
// 13c: 84 c0                         testb   %al, %al
// 13e: 0f 84 a3 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_HandlePending
// 14e: 48 89 df                      movq    %rbx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 84 8c 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 15b: 4c 89 e0                      movq    %r12, %rax
// 15e: e9 fa 00 00 00                jmp     0x25d <_JIT_ENTRY+0x25d>
// 163: 83 fb 02                      cmpl    $0x2, %ebx
// 166: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 16c: 44 0f 43 eb                   cmovael %ebx, %r13d
// 170: 31 db                         xorl    %ebx, %ebx
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 48 ff c3                      incq    %rbx
// 183: 49 39 dd                      cmpq    %rbx, %r13
// 186: 0f 84 38 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 18c: 4c 8b 7c dd 00                movq    (%rbp,%rbx,8), %r15
// 191: 49 8b 07                      movq    (%r15), %rax
// 194: 48 85 c0                      testq   %rax, %rax
// 197: 7e 07                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 199: 85 c0                         testl   %eax, %eax
// 19b: 78 e3                         js      0x180 <_JIT_ENTRY+0x180>
// 19d: eb 26                         jmp     0x1c5 <_JIT_ENTRY+0x1c5>
// 19f: 90                            nop
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 fa                      movq    %r15, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 07                      movq    (%r15), %rax
// 1c1: 85 c0                         testl   %eax, %eax
// 1c3: 78 bb                         js      0x180 <_JIT_ENTRY+0x180>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 ff 0f                      decq    (%r15)
// 1d4: 75 aa                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d6: 4c 89 ff                      movq    %r15, %rdi
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_Dealloc
// 1e3: ff d0                         callq   *%rax
// 1e5: eb 99                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _JIT_OPARG
// 1f1: f7 d0                         notl    %eax
// 1f3: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f8: 48 98                         cltq
// 1fa: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1ff: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000201:  R_X86_64_64  PyListIter_Type
// 209: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 20d: 74 6e                         je      0x27d <_JIT_ENTRY+0x27d>
// 20f: 4d 89 e6                      movq    %r12, %r14
// 212: 4d 29 fe                      subq    %r15, %r14
// 215: 49 83 c6 b8                   addq    $-0x48, %r14
// 219: 49 c1 ee 03                   shrq    $0x3, %r14
// 21d: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 221: 49 8b 07                      movq    (%r15), %rax
// 224: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000226:  R_X86_64_64  _JIT_TARGET
// 22e: 89 c9                         movl    %ecx, %ecx
// 230: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 234: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 23a: eb 32                         jmp     0x26e <_JIT_ENTRY+0x26e>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_Dealloc
// 246: 4c 89 e7                      movq    %r12, %rdi
// 249: ff d0                         callq   *%rax
// 24b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 250: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 254: 48 85 ed                      testq   %rbp, %rbp
// 257: 0f 85 d1 fe ff ff             jne     0x12e <_JIT_ENTRY+0x12e>
// 25d: 4c 29 f8                      subq    %r15, %rax
// 260: 48 83 c0 b8                   addq    $-0x48, %rax
// 264: 48 c1 e8 03                   shrq    $0x3, %rax
// 268: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 26c: 31 c0                         xorl    %eax, %eax
// 26e: 48 83 c4 28                   addq    $0x28, %rsp
// 272: 5b                            popq    %rbx
// 273: 41 5c                         popq    %r12
// 275: 41 5d                         popq    %r13
// 277: 41 5e                         popq    %r14
// 279: 41 5f                         popq    %r15
// 27b: 5d                            popq    %rbp
// 27c: c3                            retq
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _JIT_CONTINUE
// 287: 4c 89 ff                      movq    %r15, %rdi
// 28a: 4c 89 e6                      movq    %r12, %rsi
// 28d: 48 89 da                      movq    %rbx, %rdx
// 290: 48 83 c4 28                   addq    $0x28, %rsp
// 294: 5b                            popq    %rbx
// 295: 41 5c                         popq    %r12
// 297: 41 5d                         popq    %r13
// 299: 41 5e                         popq    %r14
// 29b: 41 5f                         popq    %r15
// 29d: 5d                            popq    %rbp
// 29e: ff e0                         jmpq    *%rax
// 2a0: 
static const unsigned char _CALL_BUILTIN_CLASSplus_ITER_CHECK_LIST_code_body[673] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xa8, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x97, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x20, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x2f, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0xfa, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xeb, 0x31, 0xdb, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x7c, 0xdd, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x6e, 0x4d, 0x89, 0xe6, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x85, 0xd1, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_ITER_CHECK_LIST_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyListIter_Type, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_ITER_CHECK_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_ITER_CHECK_LIST_data_holes[1];

// _CALL_BUILTIN_CLASSplus_ITER_CHECK_RANGE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_ITER_CHECK_RANGE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 ff                      movq    %rdi, %r15
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 a8 01 00 00             je      0x212 <_JIT_ENTRY+0x212>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 97 01 00 00             je      0x212 <_JIT_ENTRY+0x212>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// 8f: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 41 0f 94 c7                   sete    %r15b
// 9a: 89 da                         movl    %ebx, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 9f 00 00 00             je      0x163 <_JIT_ENTRY+0x163>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// f6: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// fb: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 100: 48 8b 2c 24                   movq    (%rsp), %rbp
// 104: 78 16                         js      0x11c <_JIT_ENTRY+0x11c>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 0c 24                   decq    (%r12)
// 116: 0f 84 20 01 00 00             je      0x23c <_JIT_ENTRY+0x23c>
// 11c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 121: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 125: 48 85 ed                      testq   %rbp, %rbp
// 128: 0f 84 2f 01 00 00             je      0x25d <_JIT_ENTRY+0x25d>
// 12e: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 132: 48 89 28                      movq    %rbp, (%rax)
// 135: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 139: 48 8b 00                      movq    (%rax), %rax
// 13c: 84 c0                         testb   %al, %al
// 13e: 0f 84 a3 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_HandlePending
// 14e: 48 89 df                      movq    %rbx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 84 8c 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 15b: 4c 89 e0                      movq    %r12, %rax
// 15e: e9 fa 00 00 00                jmp     0x25d <_JIT_ENTRY+0x25d>
// 163: 83 fb 02                      cmpl    $0x2, %ebx
// 166: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 16c: 44 0f 43 eb                   cmovael %ebx, %r13d
// 170: 31 db                         xorl    %ebx, %ebx
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 48 ff c3                      incq    %rbx
// 183: 49 39 dd                      cmpq    %rbx, %r13
// 186: 0f 84 38 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 18c: 4c 8b 7c dd 00                movq    (%rbp,%rbx,8), %r15
// 191: 49 8b 07                      movq    (%r15), %rax
// 194: 48 85 c0                      testq   %rax, %rax
// 197: 7e 07                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 199: 85 c0                         testl   %eax, %eax
// 19b: 78 e3                         js      0x180 <_JIT_ENTRY+0x180>
// 19d: eb 26                         jmp     0x1c5 <_JIT_ENTRY+0x1c5>
// 19f: 90                            nop
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 fa                      movq    %r15, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 07                      movq    (%r15), %rax
// 1c1: 85 c0                         testl   %eax, %eax
// 1c3: 78 bb                         js      0x180 <_JIT_ENTRY+0x180>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 ff 0f                      decq    (%r15)
// 1d4: 75 aa                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d6: 4c 89 ff                      movq    %r15, %rdi
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_Dealloc
// 1e3: ff d0                         callq   *%rax
// 1e5: eb 99                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _JIT_OPARG
// 1f1: f7 d0                         notl    %eax
// 1f3: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f8: 48 98                         cltq
// 1fa: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1ff: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000201:  R_X86_64_64  PyRangeIter_Type
// 209: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 20d: 74 6e                         je      0x27d <_JIT_ENTRY+0x27d>
// 20f: 4d 89 e6                      movq    %r12, %r14
// 212: 4d 29 fe                      subq    %r15, %r14
// 215: 49 83 c6 b8                   addq    $-0x48, %r14
// 219: 49 c1 ee 03                   shrq    $0x3, %r14
// 21d: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 221: 49 8b 07                      movq    (%r15), %rax
// 224: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000226:  R_X86_64_64  _JIT_TARGET
// 22e: 89 c9                         movl    %ecx, %ecx
// 230: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 234: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 23a: eb 32                         jmp     0x26e <_JIT_ENTRY+0x26e>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_Dealloc
// 246: 4c 89 e7                      movq    %r12, %rdi
// 249: ff d0                         callq   *%rax
// 24b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 250: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 254: 48 85 ed                      testq   %rbp, %rbp
// 257: 0f 85 d1 fe ff ff             jne     0x12e <_JIT_ENTRY+0x12e>
// 25d: 4c 29 f8                      subq    %r15, %rax
// 260: 48 83 c0 b8                   addq    $-0x48, %rax
// 264: 48 c1 e8 03                   shrq    $0x3, %rax
// 268: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 26c: 31 c0                         xorl    %eax, %eax
// 26e: 48 83 c4 28                   addq    $0x28, %rsp
// 272: 5b                            popq    %rbx
// 273: 41 5c                         popq    %r12
// 275: 41 5d                         popq    %r13
// 277: 41 5e                         popq    %r14
// 279: 41 5f                         popq    %r15
// 27b: 5d                            popq    %rbp
// 27c: c3                            retq
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _JIT_CONTINUE
// 287: 4c 89 ff                      movq    %r15, %rdi
// 28a: 4c 89 e6                      movq    %r12, %rsi
// 28d: 48 89 da                      movq    %rbx, %rdx
// 290: 48 83 c4 28                   addq    $0x28, %rsp
// 294: 5b                            popq    %rbx
// 295: 41 5c                         popq    %r12
// 297: 41 5d                         popq    %r13
// 299: 41 5e                         popq    %r14
// 29b: 41 5f                         popq    %r15
// 29d: 5d                            popq    %rbp
// 29e: ff e0                         jmpq    *%rax
// 2a0: 
static const unsigned char _CALL_BUILTIN_CLASSplus_ITER_CHECK_RANGE_code_body[673] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xa8, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x97, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x20, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x2f, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0xfa, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xeb, 0x31, 0xdb, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x7c, 0xdd, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x6e, 0x4d, 0x89, 0xe6, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x85, 0xd1, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_ITER_CHECK_RANGE_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyRangeIter_Type, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_ITER_CHECK_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_ITER_CHECK_RANGE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_ITER_CHECK_TUPLE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_ITER_CHECK_TUPLE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 ff                      movq    %rdi, %r15
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 a8 01 00 00             je      0x212 <_JIT_ENTRY+0x212>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 97 01 00 00             je      0x212 <_JIT_ENTRY+0x212>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// 8f: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 41 0f 94 c7                   sete    %r15b
// 9a: 89 da                         movl    %ebx, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 9f 00 00 00             je      0x163 <_JIT_ENTRY+0x163>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// f6: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// fb: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 100: 48 8b 2c 24                   movq    (%rsp), %rbp
// 104: 78 16                         js      0x11c <_JIT_ENTRY+0x11c>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 0c 24                   decq    (%r12)
// 116: 0f 84 20 01 00 00             je      0x23c <_JIT_ENTRY+0x23c>
// 11c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 121: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 125: 48 85 ed                      testq   %rbp, %rbp
// 128: 0f 84 2f 01 00 00             je      0x25d <_JIT_ENTRY+0x25d>
// 12e: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 132: 48 89 28                      movq    %rbp, (%rax)
// 135: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 139: 48 8b 00                      movq    (%rax), %rax
// 13c: 84 c0                         testb   %al, %al
// 13e: 0f 84 a3 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_HandlePending
// 14e: 48 89 df                      movq    %rbx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 84 8c 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 15b: 4c 89 e0                      movq    %r12, %rax
// 15e: e9 fa 00 00 00                jmp     0x25d <_JIT_ENTRY+0x25d>
// 163: 83 fb 02                      cmpl    $0x2, %ebx
// 166: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 16c: 44 0f 43 eb                   cmovael %ebx, %r13d
// 170: 31 db                         xorl    %ebx, %ebx
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 48 ff c3                      incq    %rbx
// 183: 49 39 dd                      cmpq    %rbx, %r13
// 186: 0f 84 38 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 18c: 4c 8b 7c dd 00                movq    (%rbp,%rbx,8), %r15
// 191: 49 8b 07                      movq    (%r15), %rax
// 194: 48 85 c0                      testq   %rax, %rax
// 197: 7e 07                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 199: 85 c0                         testl   %eax, %eax
// 19b: 78 e3                         js      0x180 <_JIT_ENTRY+0x180>
// 19d: eb 26                         jmp     0x1c5 <_JIT_ENTRY+0x1c5>
// 19f: 90                            nop
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 fa                      movq    %r15, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 07                      movq    (%r15), %rax
// 1c1: 85 c0                         testl   %eax, %eax
// 1c3: 78 bb                         js      0x180 <_JIT_ENTRY+0x180>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 ff 0f                      decq    (%r15)
// 1d4: 75 aa                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d6: 4c 89 ff                      movq    %r15, %rdi
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_Dealloc
// 1e3: ff d0                         callq   *%rax
// 1e5: eb 99                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _JIT_OPARG
// 1f1: f7 d0                         notl    %eax
// 1f3: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f8: 48 98                         cltq
// 1fa: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1ff: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000201:  R_X86_64_64  PyTupleIter_Type
// 209: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 20d: 74 6e                         je      0x27d <_JIT_ENTRY+0x27d>
// 20f: 4d 89 e6                      movq    %r12, %r14
// 212: 4d 29 fe                      subq    %r15, %r14
// 215: 49 83 c6 b8                   addq    $-0x48, %r14
// 219: 49 c1 ee 03                   shrq    $0x3, %r14
// 21d: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 221: 49 8b 07                      movq    (%r15), %rax
// 224: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000226:  R_X86_64_64  _JIT_TARGET
// 22e: 89 c9                         movl    %ecx, %ecx
// 230: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 234: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 23a: eb 32                         jmp     0x26e <_JIT_ENTRY+0x26e>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_Dealloc
// 246: 4c 89 e7                      movq    %r12, %rdi
// 249: ff d0                         callq   *%rax
// 24b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 250: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 254: 48 85 ed                      testq   %rbp, %rbp
// 257: 0f 85 d1 fe ff ff             jne     0x12e <_JIT_ENTRY+0x12e>
// 25d: 4c 29 f8                      subq    %r15, %rax
// 260: 48 83 c0 b8                   addq    $-0x48, %rax
// 264: 48 c1 e8 03                   shrq    $0x3, %rax
// 268: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 26c: 31 c0                         xorl    %eax, %eax
// 26e: 48 83 c4 28                   addq    $0x28, %rsp
// 272: 5b                            popq    %rbx
// 273: 41 5c                         popq    %r12
// 275: 41 5d                         popq    %r13
// 277: 41 5e                         popq    %r14
// 279: 41 5f                         popq    %r15
// 27b: 5d                            popq    %rbp
// 27c: c3                            retq
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _JIT_CONTINUE
// 287: 4c 89 ff                      movq    %r15, %rdi
// 28a: 4c 89 e6                      movq    %r12, %rsi
// 28d: 48 89 da                      movq    %rbx, %rdx
// 290: 48 83 c4 28                   addq    $0x28, %rsp
// 294: 5b                            popq    %rbx
// 295: 41 5c                         popq    %r12
// 297: 41 5d                         popq    %r13
// 299: 41 5e                         popq    %r14
// 29b: 41 5f                         popq    %r15
// 29d: 5d                            popq    %rbp
// 29e: ff e0                         jmpq    *%rax
// 2a0: 
static const unsigned char _CALL_BUILTIN_CLASSplus_ITER_CHECK_TUPLE_code_body[673] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xa8, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x97, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x20, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x2f, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0xfa, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xeb, 0x31, 0xdb, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x7c, 0xdd, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x6e, 0x4d, 0x89, 0xe6, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x85, 0xd1, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_ITER_CHECK_TUPLE_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTupleIter_Type, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_ITER_CHECK_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_ITER_CHECK_TUPLE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_ITER_NEXT_LIST
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_ITER_NEXT_LIST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 14 24                   movq    %r10, (%rsp)
// 79: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 7e: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 83: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 ea                      movl    %r13d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c8 00 00 00             jle     0x189 <_JIT_ENTRY+0x189>
// c1: 85 c0                         testl   %eax, %eax
// c3: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// c8: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// cd: 0f 89 e6 00 00 00             jns     0x1b9 <_JIT_ENTRY+0x1b9>
// d3: e9 02 01 00 00                jmp     0x1da <_JIT_ENTRY+0x1da>
// d8: 49 29 fe                      subq    %rdi, %r14
// db: 49 83 c6 b8                   addq    $-0x48, %r14
// df: 49 c1 ee 03                   shrq    $0x3, %r14
// e3: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 22 01 00 00                jmp     0x227 <_JIT_ENTRY+0x227>
// 105: 41 83 fd 02                   cmpl    $0x2, %r13d
// 109: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 10f: 45 0f 43 fd                   cmovael %r13d, %r15d
// 113: 31 db                         xorl    %ebx, %ebx
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 48 ff c3                      incq    %rbx
// 123: 49 39 df                      cmpq    %rbx, %r15
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 12d: 49 8b 45 00                   movq    (%r13), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 0a                         jle     0x140 <_JIT_ENTRY+0x140>
// 136: 85 c0                         testl   %eax, %eax
// 138: 78 e6                         js      0x120 <_JIT_ENTRY+0x120>
// 13a: eb 2a                         jmp     0x166 <_JIT_ENTRY+0x166>
// 13c: 0f 1f 40 00                   nopl    (%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 ea                      movq    %r13, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 78 ba                         js      0x120 <_JIT_ENTRY+0x120>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 4d 00                   decq    (%r13)
// 176: 75 a8                         jne     0x120 <_JIT_ENTRY+0x120>
// 178: 4c 89 ef                      movq    %r13, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: eb 97                         jmp     0x120 <_JIT_ENTRY+0x120>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 1b2: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b7: 78 21                         js      0x1da <_JIT_ENTRY+0x1da>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c3: ff d0                         callq   *%rax
// 1c5: 49 ff 0c 24                   decq    (%r12)
// 1c9: 75 0f                         jne     0x1da <_JIT_ENTRY+0x1da>
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _Py_Dealloc
// 1d5: 4c 89 e7                      movq    %r12, %rdi
// 1d8: ff d0                         callq   *%rax
// 1da: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 1de: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1e3: 48 85 c9                      testq   %rcx, %rcx
// 1e6: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 1eb: 74 29                         je      0x216 <_JIT_ENTRY+0x216>
// 1ed: 48 89 08                      movq    %rcx, (%rax)
// 1f0: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1f4: 48 8b 00                      movq    (%rax), %rax
// 1f7: 84 c0                         testb   %al, %al
// 1f9: 74 3b                         je      0x236 <_JIT_ENTRY+0x236>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_HandlePending
// 205: 4c 89 ef                      movq    %r13, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 85 c0                         testl   %eax, %eax
// 20c: 74 28                         je      0x236 <_JIT_ENTRY+0x236>
// 20e: 48 8b 04 24                   movq    (%rsp), %rax
// 212: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 216: 4c 29 f8                      subq    %r15, %rax
// 219: 48 83 c0 b8                   addq    $-0x48, %rax
// 21d: 48 c1 e8 03                   shrq    $0x3, %rax
// 221: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 225: 31 c0                         xorl    %eax, %eax
// 227: 48 83 c4 28                   addq    $0x28, %rsp
// 22b: 5b                            popq    %rbx
// 22c: 41 5c                         popq    %r12
// 22e: 41 5d                         popq    %r13
// 230: 41 5e                         popq    %r14
// 232: 41 5f                         popq    %r15
// 234: 5d                            popq    %rbp
// 235: c3                            retq
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _JIT_OPARG
// 240: f7 d0                         notl    %eax
// 242: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 247: 48 98                         cltq
// 249: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 24e: 48 8b 48 10                   movq    0x10(%rax), %rcx
// 252: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 256: 48 8b 52 18                   movq    0x18(%rdx), %rdx
// 25a: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
// 25e: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// 262: 48 8b 1c ca                   movq    (%rdx,%rcx,8), %rbx
// 266: 8b 03                         movl    (%rbx), %eax
// 268: ff c0                         incl    %eax
// 26a: 74 0e                         je      0x27a <_JIT_ENTRY+0x27a>
// 26c: 89 03                         movl    %eax, (%rbx)
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 278: ff d0                         callq   *%rax
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  _JIT_OPARG
// 284: f7 d0                         notl    %eax
// 286: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 28b: 48 98                         cltq
// 28d: 49 89 1c c6                   movq    %rbx, (%r14,%rax,8)
// 291: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 295: 48 83 c6 08                   addq    $0x8, %rsi
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _JIT_CONTINUE
// 2a3: 4c 89 ff                      movq    %r15, %rdi
// 2a6: 4c 89 ea                      movq    %r13, %rdx
// 2a9: 48 83 c4 28                   addq    $0x28, %rsp
// 2ad: 5b                            popq    %rbx
// 2ae: 41 5c                         popq    %r12
// 2b0: 41 5d                         popq    %r13
// 2b2: 41 5e                         popq    %r14
// 2b4: 41 5f                         popq    %r15
// 2b6: 5d                            popq    %rbp
// 2b7: ff e0                         jmpq    *%rax
// 2b9: 
static const unsigned char _CALL_BUILTIN_CLASSplus_ITER_NEXT_LIST_code_body[698] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc8, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x89, 0xe6, 0x00, 0x00, 0x00, 0xe9, 0x02, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x22, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x74, 0x8c, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x85, 0xc0, 0x78, 0xe6, 0xeb, 0x2a, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x74, 0x29, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x28, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10, 0x48, 0x8b, 0x1c, 0xca, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x1c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_ITER_NEXT_LIST_code_holes[17] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_ITER_NEXT_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_ITER_NEXT_LIST_data_holes[1];

// _CALL_BUILTIN_CLASSplus_ITER_NEXT_RANGE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_ITER_NEXT_RANGE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 75: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 7a: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 7f: 48 89 3c 24                   movq    %rdi, (%rsp)
// 83: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 ea                      movl    %r13d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c8 00 00 00             jle     0x189 <_JIT_ENTRY+0x189>
// c1: 85 c0                         testl   %eax, %eax
// c3: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// c8: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// cd: 0f 89 e6 00 00 00             jns     0x1b9 <_JIT_ENTRY+0x1b9>
// d3: e9 f7 00 00 00                jmp     0x1cf <_JIT_ENTRY+0x1cf>
// d8: 49 29 fe                      subq    %rdi, %r14
// db: 49 83 c6 b8                   addq    $-0x48, %r14
// df: 49 c1 ee 03                   shrq    $0x3, %r14
// e3: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 c0 01 00 00                jmp     0x2c5 <_JIT_ENTRY+0x2c5>
// 105: 41 83 fd 02                   cmpl    $0x2, %r13d
// 109: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 10f: 45 0f 43 fd                   cmovael %r13d, %r15d
// 113: 31 db                         xorl    %ebx, %ebx
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 48 ff c3                      incq    %rbx
// 123: 49 39 df                      cmpq    %rbx, %r15
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 12d: 49 8b 45 00                   movq    (%r13), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 0a                         jle     0x140 <_JIT_ENTRY+0x140>
// 136: 85 c0                         testl   %eax, %eax
// 138: 78 e6                         js      0x120 <_JIT_ENTRY+0x120>
// 13a: eb 2a                         jmp     0x166 <_JIT_ENTRY+0x166>
// 13c: 0f 1f 40 00                   nopl    (%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 ea                      movq    %r13, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 78 ba                         js      0x120 <_JIT_ENTRY+0x120>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 4d 00                   decq    (%r13)
// 176: 75 a8                         jne     0x120 <_JIT_ENTRY+0x120>
// 178: 4c 89 ef                      movq    %r13, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: eb 97                         jmp     0x120 <_JIT_ENTRY+0x120>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 1b2: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 1b7: 78 16                         js      0x1cf <_JIT_ENTRY+0x1cf>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c3: ff d0                         callq   *%rax
// 1c5: 49 ff 0c 24                   decq    (%r12)
// 1c9: 0f 84 be 00 00 00             je      0x28d <_JIT_ENTRY+0x28d>
// 1cf: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 1d3: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1d8: 48 85 d2                      testq   %rdx, %rdx
// 1db: 0f 84 cd 00 00 00             je      0x2ae <_JIT_ENTRY+0x2ae>
// 1e1: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1e6: 49 8d 1c ce                   leaq    (%r14,%rcx,8), %rbx
// 1ea: 48 89 10                      movq    %rdx, (%rax)
// 1ed: 49 8b 47 10                   movq    0x10(%r15), %rax
// 1f1: 48 8b 00                      movq    (%rax), %rax
// 1f4: 84 c0                         testb   %al, %al
// 1f6: 74 17                         je      0x20f <_JIT_ENTRY+0x20f>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_HandlePending
// 202: 4c 89 ff                      movq    %r15, %rdi
// 205: ff d0                         callq   *%rax
// 207: 85 c0                         testl   %eax, %eax
// 209: 0f 85 a2 00 00 00             jne     0x2b1 <_JIT_ENTRY+0x2b1>
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _JIT_OPARG
// 219: f7 d0                         notl    %eax
// 21b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 220: 48 98                         cltq
// 222: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 227: 48 8b 78 10                   movq    0x10(%rax), %rdi
// 22b: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 22f: 48 01 f9                      addq    %rdi, %rcx
// 232: 48 89 48 10                   movq    %rcx, 0x10(%rax)
// 236: 48 ff 48 20                   decq    0x20(%rax)
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  PyLong_FromLong
// 244: ff d0                         callq   *%rax
// 246: 48 85 c0                      testq   %rax, %rax
// 249: 74 66                         je      0x2b1 <_JIT_ENTRY+0x2b1>
// 24b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024d:  R_X86_64_64  _JIT_OPARG
// 255: f7 d1                         notl    %ecx
// 257: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 25d: 48 63 c9                      movslq  %ecx, %rcx
// 260: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 264: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 268: 48 83 c6 08                   addq    $0x8, %rsi
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _JIT_CONTINUE
// 276: 48 8b 3c 24                   movq    (%rsp), %rdi
// 27a: 4c 89 fa                      movq    %r15, %rdx
// 27d: 48 83 c4 28                   addq    $0x28, %rsp
// 281: 5b                            popq    %rbx
// 282: 41 5c                         popq    %r12
// 284: 41 5d                         popq    %r13
// 286: 41 5e                         popq    %r14
// 288: 41 5f                         popq    %r15
// 28a: 5d                            popq    %rbp
// 28b: ff e0                         jmpq    *%rax
// 28d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028f:  R_X86_64_64  _Py_Dealloc
// 297: 4c 89 e7                      movq    %r12, %rdi
// 29a: ff d0                         callq   *%rax
// 29c: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 2a0: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2a5: 48 85 d2                      testq   %rdx, %rdx
// 2a8: 0f 85 33 ff ff ff             jne     0x1e1 <_JIT_ENTRY+0x1e1>
// 2ae: 48 89 c3                      movq    %rax, %rbx
// 2b1: 48 8b 04 24                   movq    (%rsp), %rax
// 2b5: 48 29 c3                      subq    %rax, %rbx
// 2b8: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2bc: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2c0: 89 58 40                      movl    %ebx, 0x40(%rax)
// 2c3: 31 c0                         xorl    %eax, %eax
// 2c5: 48 83 c4 28                   addq    $0x28, %rsp
// 2c9: 5b                            popq    %rbx
// 2ca: 41 5c                         popq    %r12
// 2cc: 41 5d                         popq    %r13
// 2ce: 41 5e                         popq    %r14
// 2d0: 41 5f                         popq    %r15
// 2d2: 5d                            popq    %rbp
// 2d3: c3                            retq
// 2d4: 
static const unsigned char _CALL_BUILTIN_CLASSplus_ITER_NEXT_RANGE_code_body[725] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x54, 0x24, 0x20, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc8, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x0f, 0x89, 0xe6, 0x00, 0x00, 0x00, 0xe9, 0xf7, 0x00, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xc0, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x74, 0x8c, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x85, 0xc0, 0x78, 0xe6, 0xeb, 0x2a, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xbe, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xcd, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x8d, 0x1c, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x78, 0x10, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x01, 0xf9, 0x48, 0x89, 0x48, 0x10, 0x48, 0xff, 0x48, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x66, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x85, 0x33, 0xff, 0xff, 0xff, 0x48, 0x89, 0xc3, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x58, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_ITER_NEXT_RANGE_code_holes[17] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromLong, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_ITER_NEXT_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_ITER_NEXT_RANGE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_ITER_NEXT_TUPLE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_ITER_NEXT_TUPLE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 14 24                   movq    %r10, (%rsp)
// 79: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 7e: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 83: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 ea                      movl    %r13d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c8 00 00 00             jle     0x189 <_JIT_ENTRY+0x189>
// c1: 85 c0                         testl   %eax, %eax
// c3: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// c8: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// cd: 0f 89 e6 00 00 00             jns     0x1b9 <_JIT_ENTRY+0x1b9>
// d3: e9 02 01 00 00                jmp     0x1da <_JIT_ENTRY+0x1da>
// d8: 49 29 fe                      subq    %rdi, %r14
// db: 49 83 c6 b8                   addq    $-0x48, %r14
// df: 49 c1 ee 03                   shrq    $0x3, %r14
// e3: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 22 01 00 00                jmp     0x227 <_JIT_ENTRY+0x227>
// 105: 41 83 fd 02                   cmpl    $0x2, %r13d
// 109: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 10f: 45 0f 43 fd                   cmovael %r13d, %r15d
// 113: 31 db                         xorl    %ebx, %ebx
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 48 ff c3                      incq    %rbx
// 123: 49 39 df                      cmpq    %rbx, %r15
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 12d: 49 8b 45 00                   movq    (%r13), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 0a                         jle     0x140 <_JIT_ENTRY+0x140>
// 136: 85 c0                         testl   %eax, %eax
// 138: 78 e6                         js      0x120 <_JIT_ENTRY+0x120>
// 13a: eb 2a                         jmp     0x166 <_JIT_ENTRY+0x166>
// 13c: 0f 1f 40 00                   nopl    (%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 ea                      movq    %r13, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 78 ba                         js      0x120 <_JIT_ENTRY+0x120>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 4d 00                   decq    (%r13)
// 176: 75 a8                         jne     0x120 <_JIT_ENTRY+0x120>
// 178: 4c 89 ef                      movq    %r13, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: eb 97                         jmp     0x120 <_JIT_ENTRY+0x120>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 1b2: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b7: 78 21                         js      0x1da <_JIT_ENTRY+0x1da>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c3: ff d0                         callq   *%rax
// 1c5: 49 ff 0c 24                   decq    (%r12)
// 1c9: 75 0f                         jne     0x1da <_JIT_ENTRY+0x1da>
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _Py_Dealloc
// 1d5: 4c 89 e7                      movq    %r12, %rdi
// 1d8: ff d0                         callq   *%rax
// 1da: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 1de: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1e3: 48 85 c9                      testq   %rcx, %rcx
// 1e6: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 1eb: 74 29                         je      0x216 <_JIT_ENTRY+0x216>
// 1ed: 48 89 08                      movq    %rcx, (%rax)
// 1f0: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1f4: 48 8b 00                      movq    (%rax), %rax
// 1f7: 84 c0                         testb   %al, %al
// 1f9: 74 3b                         je      0x236 <_JIT_ENTRY+0x236>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_HandlePending
// 205: 4c 89 ef                      movq    %r13, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 85 c0                         testl   %eax, %eax
// 20c: 74 28                         je      0x236 <_JIT_ENTRY+0x236>
// 20e: 48 8b 04 24                   movq    (%rsp), %rax
// 212: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 216: 4c 29 f8                      subq    %r15, %rax
// 219: 48 83 c0 b8                   addq    $-0x48, %rax
// 21d: 48 c1 e8 03                   shrq    $0x3, %rax
// 221: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 225: 31 c0                         xorl    %eax, %eax
// 227: 48 83 c4 28                   addq    $0x28, %rsp
// 22b: 5b                            popq    %rbx
// 22c: 41 5c                         popq    %r12
// 22e: 41 5d                         popq    %r13
// 230: 41 5e                         popq    %r14
// 232: 41 5f                         popq    %r15
// 234: 5d                            popq    %rbp
// 235: c3                            retq
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _JIT_OPARG
// 240: f7 d0                         notl    %eax
// 242: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 247: 48 98                         cltq
// 249: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 24e: 48 8b 48 10                   movq    0x10(%rax), %rcx
// 252: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 256: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
// 25a: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// 25e: 48 8b 5c ca 18                movq    0x18(%rdx,%rcx,8), %rbx
// 263: 8b 03                         movl    (%rbx), %eax
// 265: ff c0                         incl    %eax
// 267: 74 0e                         je      0x277 <_JIT_ENTRY+0x277>
// 269: 89 03                         movl    %eax, (%rbx)
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 275: ff d0                         callq   *%rax
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _JIT_OPARG
// 281: f7 d0                         notl    %eax
// 283: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 288: 48 98                         cltq
// 28a: 49 89 1c c6                   movq    %rbx, (%r14,%rax,8)
// 28e: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 292: 48 83 c6 08                   addq    $0x8, %rsi
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _JIT_CONTINUE
// 2a0: 4c 89 ff                      movq    %r15, %rdi
// 2a3: 4c 89 ea                      movq    %r13, %rdx
// 2a6: 48 83 c4 28                   addq    $0x28, %rsp
// 2aa: 5b                            popq    %rbx
// 2ab: 41 5c                         popq    %r12
// 2ad: 41 5d                         popq    %r13
// 2af: 41 5e                         popq    %r14
// 2b1: 41 5f                         popq    %r15
// 2b3: 5d                            popq    %rbp
// 2b4: ff e0                         jmpq    *%rax
// 2b6: 
static const unsigned char _CALL_BUILTIN_CLASSplus_ITER_NEXT_TUPLE_code_body[695] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc8, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x89, 0xe6, 0x00, 0x00, 0x00, 0xe9, 0x02, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x22, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x74, 0x8c, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x85, 0xc0, 0x78, 0xe6, 0xeb, 0x2a, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x74, 0x29, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x28, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10, 0x48, 0x8b, 0x5c, 0xca, 0x18, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x1c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_ITER_NEXT_TUPLE_code_holes[17] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_ITER_NEXT_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_ITER_NEXT_TUPLE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_JUMP_TO_TOP
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_JUMP_TO_TOP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 71 01                   leal    0x1(%r9), %r14d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 f1                   cmovel  %r9d, %r14d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 21 01 00 00             je      0x188 <_JIT_ENTRY+0x188>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 10 01 00 00             je      0x188 <_JIT_ENTRY+0x188>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 f2                      movl    %r14d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 ff 00 00 00             je      0x1bf <_JIT_ENTRY+0x1bf>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// f2: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// f7: 78 21                         js      0x11a <_JIT_ENTRY+0x11a>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 0c 24                   decq    (%r12)
// 109: 75 0f                         jne     0x11a <_JIT_ENTRY+0x11a>
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_Dealloc
// 115: 4c 89 e7                      movq    %r12, %rdi
// 118: ff d0                         callq   *%rax
// 11a: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 11e: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 123: 48 85 d2                      testq   %rdx, %rdx
// 126: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 12b: 74 48                         je      0x175 <_JIT_ENTRY+0x175>
// 12d: 48 8b 0c 24                   movq    (%rsp), %rcx
// 131: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 135: 48 89 10                      movq    %rdx, (%rax)
// 138: 49 8b 45 10                   movq    0x10(%r13), %rax
// 13c: 48 8b 08                      movq    (%rax), %rcx
// 13f: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000141:  R_X86_64_64  _Py_HandlePending
// 149: 84 c9                         testb   %cl, %cl
// 14b: 74 0d                         je      0x15a <_JIT_ENTRY+0x15a>
// 14d: 4c 89 ef                      movq    %r13, %rdi
// 150: ff d3                         callq   *%rbx
// 152: 85 c0                         testl   %eax, %eax
// 154: 75 1c                         jne     0x172 <_JIT_ENTRY+0x172>
// 156: 49 8b 45 10                   movq    0x10(%r13), %rax
// 15a: 48 8b 00                      movq    (%rax), %rax
// 15d: 84 c0                         testb   %al, %al
// 15f: 0f 84 e2 00 00 00             je      0x247 <_JIT_ENTRY+0x247>
// 165: 4c 89 ef                      movq    %r13, %rdi
// 168: ff d3                         callq   *%rbx
// 16a: 85 c0                         testl   %eax, %eax
// 16c: 0f 84 d5 00 00 00             je      0x247 <_JIT_ENTRY+0x247>
// 172: 4c 89 f8                      movq    %r15, %rax
// 175: 4c 29 f0                      subq    %r14, %rax
// 178: 48 83 c0 b8                   addq    $-0x48, %rax
// 17c: 48 c1 e8 03                   shrq    $0x3, %rax
// 180: 41 89 46 40                   movl    %eax, 0x40(%r14)
// 184: 31 c0                         xorl    %eax, %eax
// 186: eb 28                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 188: 49 29 ff                      subq    %rdi, %r15
// 18b: 49 83 c7 b8                   addq    $-0x48, %r15
// 18f: 49 c1 ef 03                   shrq    $0x3, %r15
// 193: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 197: 48 8b 07                      movq    (%rdi), %rax
// 19a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019c:  R_X86_64_64  _JIT_TARGET
// 1a4: 89 c9                         movl    %ecx, %ecx
// 1a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b0: 48 83 c4 28                   addq    $0x28, %rsp
// 1b4: 5b                            popq    %rbx
// 1b5: 41 5c                         popq    %r12
// 1b7: 41 5d                         popq    %r13
// 1b9: 41 5e                         popq    %r14
// 1bb: 41 5f                         popq    %r15
// 1bd: 5d                            popq    %rbp
// 1be: c3                            retq
// 1bf: 41 83 fe 02                   cmpl    $0x2, %r14d
// 1c3: bb 01 00 00 00                movl    $0x1, %ebx
// 1c8: 41 0f 43 de                   cmovael %r14d, %ebx
// 1cc: 45 31 ed                      xorl    %r13d, %r13d
// 1cf: eb 1b                         jmp     0x1ec <_JIT_ENTRY+0x1ec>
// 1d1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 1e0: 49 ff c5                      incq    %r13
// 1e3: 4c 39 eb                      cmpq    %r13, %rbx
// 1e6: 0f 84 d4 fe ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ec: 4e 8b 74 ed 00                movq    (%rbp,%r13,8), %r14
// 1f1: 49 8b 06                      movq    (%r14), %rax
// 1f4: 48 85 c0                      testq   %rax, %rax
// 1f7: 7e 07                         jle     0x200 <_JIT_ENTRY+0x200>
// 1f9: 85 c0                         testl   %eax, %eax
// 1fb: 78 e3                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1fd: eb 26                         jmp     0x225 <_JIT_ENTRY+0x225>
// 1ff: 90                            nop
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 20f: 4c 89 f2                      movq    %r14, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 06                      movq    (%r14), %rax
// 221: 85 c0                         testl   %eax, %eax
// 223: 78 bb                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22f: ff d0                         callq   *%rax
// 231: 49 ff 0e                      decq    (%r14)
// 234: 75 aa                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 236: 4c 89 f7                      movq    %r14, %rdi
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _Py_Dealloc
// 243: ff d0                         callq   *%rax
// 245: eb 99                         jmp     0x1e0 <_JIT_ENTRY+0x1e0>
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _JIT_CONTINUE
// 251: 4c 89 f7                      movq    %r14, %rdi
// 254: 4c 89 fe                      movq    %r15, %rsi
// 257: 4c 89 ea                      movq    %r13, %rdx
// 25a: 48 83 c4 28                   addq    $0x28, %rsp
// 25e: 5b                            popq    %rbx
// 25f: 41 5c                         popq    %r12
// 261: 41 5d                         popq    %r13
// 263: 41 5e                         popq    %r14
// 265: 41 5f                         popq    %r15
// 267: 5d                            popq    %rbp
// 268: ff e0                         jmpq    *%rax
// 26a: 
static const unsigned char _CALL_BUILTIN_CLASSplus_JUMP_TO_TOP_code_body[619] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x71, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf1, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x21, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x10, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xf2, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xff, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x74, 0x48, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0xc9, 0x74, 0x0d, 0x4c, 0x89, 0xef, 0xff, 0xd3, 0x85, 0xc0, 0x75, 0x1c, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xe2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd3, 0x85, 0xc0, 0x0f, 0x84, 0xd5, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x4c, 0x29, 0xf0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x46, 0x40, 0x31, 0xc0, 0xeb, 0x28, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfe, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xde, 0x45, 0x31, 0xed, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xeb, 0x0f, 0x84, 0xd4, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x74, 0xed, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_JUMP_TO_TOP_code_holes[14] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_JUMP_TO_TOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_JUMP_TO_TOP_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LIST_APPEND
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LIST_APPEND.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 14 24                   movq    %r10, (%rsp)
// 79: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 7e: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 83: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 ea                      movl    %r13d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c8 00 00 00             jle     0x189 <_JIT_ENTRY+0x189>
// c1: 85 c0                         testl   %eax, %eax
// c3: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// c8: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// cd: 0f 89 e6 00 00 00             jns     0x1b9 <_JIT_ENTRY+0x1b9>
// d3: e9 02 01 00 00                jmp     0x1da <_JIT_ENTRY+0x1da>
// d8: 49 29 ff                      subq    %rdi, %r15
// db: 49 83 c7 b8                   addq    $-0x48, %r15
// df: 49 c1 ef 03                   shrq    $0x3, %r15
// e3: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 9e 01 00 00                jmp     0x2a3 <_JIT_ENTRY+0x2a3>
// 105: 41 83 fd 02                   cmpl    $0x2, %r13d
// 109: 41 be 01 00 00 00             movl    $0x1, %r14d
// 10f: 45 0f 43 f5                   cmovael %r13d, %r14d
// 113: 31 db                         xorl    %ebx, %ebx
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 48 ff c3                      incq    %rbx
// 123: 49 39 de                      cmpq    %rbx, %r14
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 12d: 49 8b 45 00                   movq    (%r13), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 0a                         jle     0x140 <_JIT_ENTRY+0x140>
// 136: 85 c0                         testl   %eax, %eax
// 138: 78 e6                         js      0x120 <_JIT_ENTRY+0x120>
// 13a: eb 2a                         jmp     0x166 <_JIT_ENTRY+0x166>
// 13c: 0f 1f 40 00                   nopl    (%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 ea                      movq    %r13, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 78 ba                         js      0x120 <_JIT_ENTRY+0x120>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 4d 00                   decq    (%r13)
// 176: 75 a8                         jne     0x120 <_JIT_ENTRY+0x120>
// 178: 4c 89 ef                      movq    %r13, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: eb 97                         jmp     0x120 <_JIT_ENTRY+0x120>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 1b2: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 1b7: 78 21                         js      0x1da <_JIT_ENTRY+0x1da>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c3: ff d0                         callq   *%rax
// 1c5: 49 ff 0c 24                   decq    (%r12)
// 1c9: 75 0f                         jne     0x1da <_JIT_ENTRY+0x1da>
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _Py_Dealloc
// 1d5: 4c 89 e7                      movq    %r12, %rdi
// 1d8: ff d0                         callq   *%rax
// 1da: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1df: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 1e3: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1e8: 48 85 c0                      testq   %rax, %rax
// 1eb: 0f 84 a1 00 00 00             je      0x292 <_JIT_ENTRY+0x292>
// 1f1: 49 89 04 24                   movq    %rax, (%r12)
// 1f5: 49 8b 46 10                   movq    0x10(%r14), %rax
// 1f9: 48 8b 00                      movq    (%rax), %rax
// 1fc: 84 c0                         testb   %al, %al
// 1fe: 74 1d                         je      0x21d <_JIT_ENTRY+0x21d>
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _Py_HandlePending
// 20a: 4c 89 f7                      movq    %r14, %rdi
// 20d: ff d0                         callq   *%rax
// 20f: 85 c0                         testl   %eax, %eax
// 211: 74 0a                         je      0x21d <_JIT_ENTRY+0x21d>
// 213: 48 8b 04 24                   movq    (%rsp), %rax
// 217: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 21b: eb 75                         jmp     0x292 <_JIT_ENTRY+0x292>
// 21d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021f:  R_X86_64_64  _JIT_OPARG
// 227: f7 d0                         notl    %eax
// 229: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 22e: 48 98                         cltq
// 230: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 234: 49 83 c4 f8                   addq    $-0x8, %r12
// 238: 49 8b 74 c7 f8                movq    -0x8(%r15,%rax,8), %rsi
// 23d: 48 01 c0                      addq    %rax, %rax
// 240: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 244: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 248: 48 39 47 20                   cmpq    %rax, 0x20(%rdi)
// 24c: 7e 11                         jle     0x25f <_JIT_ENTRY+0x25f>
// 24e: 48 8b 4f 18                   movq    0x18(%rdi), %rcx
// 252: 48 89 34 c1                   movq    %rsi, (%rcx,%rax,8)
// 256: 48 ff c0                      incq    %rax
// 259: 48 89 47 10                   movq    %rax, 0x10(%rdi)
// 25d: eb 10                         jmp     0x26f <_JIT_ENTRY+0x26f>
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _PyList_AppendTakeRefListResize
// 269: ff d0                         callq   *%rax
// 26b: 85 c0                         testl   %eax, %eax
// 26d: 78 23                         js      0x292 <_JIT_ENTRY+0x292>
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  _JIT_CONTINUE
// 279: 48 89 df                      movq    %rbx, %rdi
// 27c: 4c 89 e6                      movq    %r12, %rsi
// 27f: 4c 89 f2                      movq    %r14, %rdx
// 282: 48 83 c4 28                   addq    $0x28, %rsp
// 286: 5b                            popq    %rbx
// 287: 41 5c                         popq    %r12
// 289: 41 5d                         popq    %r13
// 28b: 41 5e                         popq    %r14
// 28d: 41 5f                         popq    %r15
// 28f: 5d                            popq    %rbp
// 290: ff e0                         jmpq    *%rax
// 292: 49 29 dc                      subq    %rbx, %r12
// 295: 49 83 c4 b8                   addq    $-0x48, %r12
// 299: 49 c1 ec 03                   shrq    $0x3, %r12
// 29d: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2a1: 31 c0                         xorl    %eax, %eax
// 2a3: 48 83 c4 28                   addq    $0x28, %rsp
// 2a7: 5b                            popq    %rbx
// 2a8: 41 5c                         popq    %r12
// 2aa: 41 5d                         popq    %r13
// 2ac: 41 5e                         popq    %r14
// 2ae: 41 5f                         popq    %r15
// 2b0: 5d                            popq    %rbp
// 2b1: c3                            retq
// 2b2: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LIST_APPEND_code_body[691] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc8, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x0f, 0x89, 0xe6, 0x00, 0x00, 0x00, 0xe9, 0x02, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x9e, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x74, 0x8c, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x85, 0xc0, 0x78, 0xe6, 0xeb, 0x2a, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xc7, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xa1, 0x00, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x0a, 0x48, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x24, 0xc7, 0xeb, 0x75, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x49, 0x8b, 0x74, 0xc7, 0xf8, 0x48, 0x01, 0xc0, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x39, 0x47, 0x20, 0x7e, 0x11, 0x48, 0x8b, 0x4f, 0x18, 0x48, 0x89, 0x34, 0xc1, 0x48, 0xff, 0xc0, 0x48, 0x89, 0x47, 0x10, 0xeb, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_LIST_APPEND_code_holes[16] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_AppendTakeRefListResize, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LIST_APPEND_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LIST_APPEND_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LIST_EXTEND
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LIST_EXTEND.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 76                         je      0xd9 <_JIT_ENTRY+0xd9>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 69                         je      0xd9 <_JIT_ENTRY+0xd9>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 14 24                   movq    %r10, (%rsp)
// 79: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 7e: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 83: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 41 0f 94 c6                   sete    %r14b
// 8e: 89 da                         movl    %ebx, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 41 84 c6                      testb   %al, %r14b
// b3: 74 51                         je      0x106 <_JIT_ENTRY+0x106>
// b5: 49 8b 04 24                   movq    (%r12), %rax
// b9: 48 85 c0                      testq   %rax, %rax
// bc: 0f 8e c7 00 00 00             jle     0x189 <_JIT_ENTRY+0x189>
// c2: 85 c0                         testl   %eax, %eax
// c4: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// c9: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// ce: 0f 89 e5 00 00 00             jns     0x1b9 <_JIT_ENTRY+0x1b9>
// d4: e9 01 01 00 00                jmp     0x1da <_JIT_ENTRY+0x1da>
// d9: 49 29 ff                      subq    %rdi, %r15
// dc: 49 83 c7 b8                   addq    $-0x48, %r15
// e0: 49 c1 ef 03                   shrq    $0x3, %r15
// e4: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// e8: 48 8b 07                      movq    (%rdi), %rax
// eb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ed:  R_X86_64_64  _JIT_TARGET
// f5: 89 c9                         movl    %ecx, %ecx
// f7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fb: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 101: e9 a0 02 00 00                jmp     0x3a6 <_JIT_ENTRY+0x3a6>
// 106: 83 fb 02                      cmpl    $0x2, %ebx
// 109: 41 be 01 00 00 00             movl    $0x1, %r14d
// 10f: 44 0f 43 f3                   cmovael %ebx, %r14d
// 113: 31 db                         xorl    %ebx, %ebx
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 48 ff c3                      incq    %rbx
// 123: 49 39 de                      cmpq    %rbx, %r14
// 126: 74 8d                         je      0xb5 <_JIT_ENTRY+0xb5>
// 128: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 12d: 49 8b 45 00                   movq    (%r13), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 0a                         jle     0x140 <_JIT_ENTRY+0x140>
// 136: 85 c0                         testl   %eax, %eax
// 138: 78 e6                         js      0x120 <_JIT_ENTRY+0x120>
// 13a: eb 2a                         jmp     0x166 <_JIT_ENTRY+0x166>
// 13c: 0f 1f 40 00                   nopl    (%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 ea                      movq    %r13, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 78 ba                         js      0x120 <_JIT_ENTRY+0x120>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 4d 00                   decq    (%r13)
// 176: 75 a8                         jne     0x120 <_JIT_ENTRY+0x120>
// 178: 4c 89 ef                      movq    %r13, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: eb 97                         jmp     0x120 <_JIT_ENTRY+0x120>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 1b2: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 1b7: 78 21                         js      0x1da <_JIT_ENTRY+0x1da>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c3: ff d0                         callq   *%rax
// 1c5: 49 ff 0c 24                   decq    (%r12)
// 1c9: 75 0f                         jne     0x1da <_JIT_ENTRY+0x1da>
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _Py_Dealloc
// 1d5: 4c 89 e7                      movq    %r12, %rdi
// 1d8: ff d0                         callq   *%rax
// 1da: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1df: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 1e3: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1e8: 48 85 c0                      testq   %rax, %rax
// 1eb: 0f 84 a4 01 00 00             je      0x395 <_JIT_ENTRY+0x395>
// 1f1: 49 89 04 24                   movq    %rax, (%r12)
// 1f5: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 1f9: 48 8b 00                      movq    (%rax), %rax
// 1fc: 84 c0                         testb   %al, %al
// 1fe: 74 20                         je      0x220 <_JIT_ENTRY+0x220>
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _Py_HandlePending
// 20a: 48 89 ef                      movq    %rbp, %rdi
// 20d: ff d0                         callq   *%rax
// 20f: 85 c0                         testl   %eax, %eax
// 211: 74 0d                         je      0x220 <_JIT_ENTRY+0x220>
// 213: 48 8b 04 24                   movq    (%rsp), %rax
// 217: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 21b: e9 75 01 00 00                jmp     0x395 <_JIT_ENTRY+0x395>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _JIT_OPARG
// 22a: f7 d0                         notl    %eax
// 22c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 231: 48 98                         cltq
// 233: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 237: 49 83 c4 f8                   addq    $-0x8, %r12
// 23b: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 240: 48 01 c0                      addq    %rax, %rax
// 243: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _PyList_Extend
// 251: 4c 89 ee                      movq    %r13, %rsi
// 254: ff d0                         callq   *%rax
// 256: 48 85 c0                      testq   %rax, %rax
// 259: 74 73                         je      0x2ce <_JIT_ENTRY+0x2ce>
// 25b: 49 8b 45 00                   movq    (%r13), %rax
// 25f: 48 85 c0                      testq   %rax, %rax
// 262: 7f 22                         jg      0x286 <_JIT_ENTRY+0x286>
// 264: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000266:  R_X86_64_64  .rodata.str1.1
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_NegativeRefcount
// 278: be 47 05 00 00                movl    $0x547, %esi            # imm = 0x547
// 27d: 4c 89 ea                      movq    %r13, %rdx
// 280: ff d0                         callq   *%rax
// 282: 49 8b 45 00                   movq    (%r13), %rax
// 286: 85 c0                         testl   %eax, %eax
// 288: 78 21                         js      0x2ab <_JIT_ENTRY+0x2ab>
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 294: ff d0                         callq   *%rax
// 296: 49 ff 4d 00                   decq    (%r13)
// 29a: 75 0f                         jne     0x2ab <_JIT_ENTRY+0x2ab>
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _Py_Dealloc
// 2a6: 4c 89 ef                      movq    %r13, %rdi
// 2a9: ff d0                         callq   *%rax
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _JIT_CONTINUE
// 2b5: 4c 89 f7                      movq    %r14, %rdi
// 2b8: 4c 89 e6                      movq    %r12, %rsi
// 2bb: 48 89 ea                      movq    %rbp, %rdx
// 2be: 48 83 c4 28                   addq    $0x28, %rsp
// 2c2: 5b                            popq    %rbx
// 2c3: 41 5c                         popq    %r12
// 2c5: 41 5d                         popq    %r13
// 2c7: 41 5e                         popq    %r14
// 2c9: 41 5f                         popq    %r15
// 2cb: 5d                            popq    %rbp
// 2cc: ff e0                         jmpq    *%rax
// 2ce: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000002d0:  R_X86_64_64  PyExc_TypeError
// 2d8: 48 8b 33                      movq    (%rbx), %rsi
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _PyErr_ExceptionMatches
// 2e5: 48 89 ef                      movq    %rbp, %rdi
// 2e8: ff d0                         callq   *%rax
// 2ea: 85 c0                         testl   %eax, %eax
// 2ec: 74 57                         je      0x345 <_JIT_ENTRY+0x345>
// 2ee: 49 8b 45 08                   movq    0x8(%r13), %rax
// 2f2: 48 83 b8 d8 00 00 00 00       cmpq    $0x0, 0xd8(%rax)
// 2fa: 75 49                         jne     0x345 <_JIT_ENTRY+0x345>
// 2fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fe:  R_X86_64_64  PySequence_Check
// 306: 4c 89 ef                      movq    %r13, %rdi
// 309: ff d0                         callq   *%rax
// 30b: 85 c0                         testl   %eax, %eax
// 30d: 75 36                         jne     0x345 <_JIT_ENTRY+0x345>
// 30f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000311:  R_X86_64_64  _PyErr_Clear
// 319: 48 89 ef                      movq    %rbp, %rdi
// 31c: ff d0                         callq   *%rax
// 31e: 48 8b 33                      movq    (%rbx), %rsi
// 321: 49 8b 45 08                   movq    0x8(%r13), %rax
// 325: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 329: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000032b:  R_X86_64_64  .rodata.str1.1+0x39
// 333: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000335:  R_X86_64_64  _PyErr_Format
// 33d: 48 89 ef                      movq    %rbp, %rdi
// 340: 31 c0                         xorl    %eax, %eax
// 342: 41 ff d0                      callq   *%r8
// 345: 49 8b 45 00                   movq    (%r13), %rax
// 349: 48 85 c0                      testq   %rax, %rax
// 34c: 7f 22                         jg      0x370 <_JIT_ENTRY+0x370>
// 34e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000350:  R_X86_64_64  .rodata.str1.1
// 358: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035a:  R_X86_64_64  _Py_NegativeRefcount
// 362: be 43 05 00 00                movl    $0x543, %esi            # imm = 0x543
// 367: 4c 89 ea                      movq    %r13, %rdx
// 36a: ff d0                         callq   *%rax
// 36c: 49 8b 45 00                   movq    (%r13), %rax
// 370: 85 c0                         testl   %eax, %eax
// 372: 78 21                         js      0x395 <_JIT_ENTRY+0x395>
// 374: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000376:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 37e: ff d0                         callq   *%rax
// 380: 49 ff 4d 00                   decq    (%r13)
// 384: 75 0f                         jne     0x395 <_JIT_ENTRY+0x395>
// 386: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000388:  R_X86_64_64  _Py_Dealloc
// 390: 4c 89 ef                      movq    %r13, %rdi
// 393: ff d0                         callq   *%rax
// 395: 4d 29 f4                      subq    %r14, %r12
// 398: 49 83 c4 b8                   addq    $-0x48, %r12
// 39c: 49 c1 ec 03                   shrq    $0x3, %r12
// 3a0: 45 89 66 40                   movl    %r12d, 0x40(%r14)
// 3a4: 31 c0                         xorl    %eax, %eax
// 3a6: 48 83 c4 28                   addq    $0x28, %rsp
// 3aa: 5b                            popq    %rbx
// 3ab: 41 5c                         popq    %r12
// 3ad: 41 5d                         popq    %r13
// 3af: 41 5e                         popq    %r14
// 3b1: 41 5f                         popq    %r15
// 3b3: 5d                            popq    %rbp
// 3b4: c3                            retq
// 3b5: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LIST_EXTEND_code_body[950] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x76, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x69, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc7, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x0f, 0x89, 0xe5, 0x00, 0x00, 0x00, 0xe9, 0x01, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xa0, 0x02, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x74, 0x8d, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x85, 0xc0, 0x78, 0xe6, 0xeb, 0x2a, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xc7, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xa4, 0x01, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x0d, 0x48, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x24, 0xc7, 0xe9, 0x75, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0x01, 0xc0, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x73, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x47, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x57, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x83, 0xb8, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x75, 0x49, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x33, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x29, 0xf4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x66, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_LIST_EXTEND_code_holes[30] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_Extend, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x2fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Check, 0x0},
    {0x311, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x32b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x335, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x350, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x35a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x376, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x388, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00Value after * must be an iterable, not %.200s\x00'
// 67: 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LIST_EXTEND_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x2a, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LIST_EXTEND_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_ASSERTION_ERROR
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_ASSERTION_ERROR.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 79 01                   leal    0x1(%r9), %r15d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 f9                   cmovel  %r9d, %r15d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 14 24                   movq    %r10, (%rsp)
// 79: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 7e: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 83: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 fa                      movl    %r15d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c6 00 00 00             jle     0x187 <_JIT_ENTRY+0x187>
// c1: 85 c0                         testl   %eax, %eax
// c3: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// c8: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// cd: 0f 89 e4 00 00 00             jns     0x1b7 <_JIT_ENTRY+0x1b7>
// d3: e9 00 01 00 00                jmp     0x1d8 <_JIT_ENTRY+0x1d8>
// d8: 49 29 fe                      subq    %rdi, %r14
// db: 49 83 c6 b8                   addq    $-0x48, %r14
// df: 49 c1 ee 03                   shrq    $0x3, %r14
// e3: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 20 01 00 00                jmp     0x225 <_JIT_ENTRY+0x225>
// 105: 41 83 ff 02                   cmpl    $0x2, %r15d
// 109: bb 01 00 00 00                movl    $0x1, %ebx
// 10e: 41 0f 43 df                   cmovael %r15d, %ebx
// 112: 45 31 ed                      xorl    %r13d, %r13d
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 49 ff c5                      incq    %r13
// 123: 4c 39 eb                      cmpq    %r13, %rbx
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4e 8b 7c ed 00                movq    (%rbp,%r13,8), %r15
// 12d: 49 8b 07                      movq    (%r15), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7e 0b                         jle     0x140 <_JIT_ENTRY+0x140>
// 135: 85 c0                         testl   %eax, %eax
// 137: 78 e7                         js      0x120 <_JIT_ENTRY+0x120>
// 139: eb 2a                         jmp     0x165 <_JIT_ENTRY+0x165>
// 13b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 fa                      movq    %r15, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 07                      movq    (%r15), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 bb                         js      0x120 <_JIT_ENTRY+0x120>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0f                      decq    (%r15)
// 174: 75 aa                         jne     0x120 <_JIT_ENTRY+0x120>
// 176: 4c 89 ff                      movq    %r15, %rdi
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: ff d0                         callq   *%rax
// 185: eb 99                         jmp     0x120 <_JIT_ENTRY+0x120>
// 187: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000189:  R_X86_64_64  .rodata.str1.1
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _Py_NegativeRefcount
// 19b: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a0: 4c 89 e2                      movq    %r12, %rdx
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 8b 04 24                   movq    (%r12), %rax
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 1b0: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b5: 78 21                         js      0x1d8 <_JIT_ENTRY+0x1d8>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c1: ff d0                         callq   *%rax
// 1c3: 49 ff 0c 24                   decq    (%r12)
// 1c7: 75 0f                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_Dealloc
// 1d3: 4c 89 e7                      movq    %r12, %rdi
// 1d6: ff d0                         callq   *%rax
// 1d8: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 1dc: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1e1: 48 85 c9                      testq   %rcx, %rcx
// 1e4: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 1e9: 74 29                         je      0x214 <_JIT_ENTRY+0x214>
// 1eb: 48 89 08                      movq    %rcx, (%rax)
// 1ee: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1f2: 48 8b 00                      movq    (%rax), %rax
// 1f5: 84 c0                         testb   %al, %al
// 1f7: 74 3b                         je      0x234 <_JIT_ENTRY+0x234>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_HandlePending
// 203: 4c 89 ef                      movq    %r13, %rdi
// 206: ff d0                         callq   *%rax
// 208: 85 c0                         testl   %eax, %eax
// 20a: 74 28                         je      0x234 <_JIT_ENTRY+0x234>
// 20c: 48 8b 04 24                   movq    (%rsp), %rax
// 210: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 214: 4c 29 f8                      subq    %r15, %rax
// 217: 48 83 c0 b8                   addq    $-0x48, %rax
// 21b: 48 c1 e8 03                   shrq    $0x3, %rax
// 21f: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 223: 31 c0                         xorl    %eax, %eax
// 225: 48 83 c4 28                   addq    $0x28, %rsp
// 229: 5b                            popq    %rbx
// 22a: 41 5c                         popq    %r12
// 22c: 41 5d                         popq    %r13
// 22e: 41 5e                         popq    %r14
// 230: 41 5f                         popq    %r15
// 232: 5d                            popq    %rbp
// 233: c3                            retq
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  PyExc_AssertionError
// 23e: 48 8b 18                      movq    (%rax), %rbx
// 241: 8b 03                         movl    (%rbx), %eax
// 243: ff c0                         incl    %eax
// 245: 74 0e                         je      0x255 <_JIT_ENTRY+0x255>
// 247: 89 03                         movl    %eax, (%rbx)
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 253: ff d0                         callq   *%rax
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _JIT_OPARG
// 25f: f7 d0                         notl    %eax
// 261: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 266: 48 98                         cltq
// 268: 49 89 1c c6                   movq    %rbx, (%r14,%rax,8)
// 26c: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 270: 48 83 c6 08                   addq    $0x8, %rsi
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _JIT_CONTINUE
// 27e: 4c 89 ff                      movq    %r15, %rdi
// 281: 4c 89 ea                      movq    %r13, %rdx
// 284: 48 83 c4 28                   addq    $0x28, %rsp
// 288: 5b                            popq    %rbx
// 289: 41 5c                         popq    %r12
// 28b: 41 5d                         popq    %r13
// 28d: 41 5e                         popq    %r14
// 28f: 41 5f                         popq    %r15
// 291: 5d                            popq    %rbp
// 292: ff e0                         jmpq    *%rax
// 294: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_ASSERTION_ERROR_code_body[661] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x79, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x89, 0xe4, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x20, 0x01, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdf, 0x45, 0x31, 0xed, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xeb, 0x74, 0x8c, 0x4e, 0x8b, 0x7c, 0xed, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x0b, 0x85, 0xc0, 0x78, 0xe7, 0xeb, 0x2a, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x74, 0x29, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x28, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x18, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x1c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_ASSERTION_ERROR_code_holes[17] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AssertionError, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_ASSERTION_ERROR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_ASSERTION_ERROR_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_ATTR
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_ATTR.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 fc 00 00 00             je      0x163 <_JIT_ENTRY+0x163>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 eb 00 00 00             je      0x163 <_JIT_ENTRY+0x163>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 82: 48 89 54 24 28                movq    %rdx, 0x28(%rsp)
// 87: 48 89 7c 24 30                movq    %rdi, 0x30(%rsp)
// 8c: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 90: 48 85 c0                      testq   %rax, %rax
// 93: 41 0f 94 c7                   sete    %r15b
// 97: 89 da                         movl    %ebx, %edx
// 99: 4c 89 e7                      movq    %r12, %rdi
// 9c: 48 89 ee                      movq    %rbp, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: 41 ff d0                      callq   *%r8
// a4: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _JIT_OPARG
// b3: 66 85 c0                      testw   %ax, %ax
// b6: 0f 94 c0                      sete    %al
// b9: 41 84 c7                      testb   %al, %r15b
// bc: 0f 84 ce 00 00 00             je      0x190 <_JIT_ENTRY+0x190>
// c2: 49 8b 04 24                   movq    (%r12), %rax
// c6: 48 85 c0                      testq   %rax, %rax
// c9: 7f 22                         jg      0xed <_JIT_ENTRY+0xed>
// cb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cd:  R_X86_64_64  .rodata.str1.1
// d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d7:  R_X86_64_64  _Py_NegativeRefcount
// df: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e4: 4c 89 e2                      movq    %r12, %rdx
// e7: ff d0                         callq   *%rax
// e9: 49 8b 04 24                   movq    (%r12), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 48 8b 5c 24 30                movq    0x30(%rsp), %rbx
// f4: 48 8b 6c 24 28                movq    0x28(%rsp), %rbp
// f9: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// fe: 78 16                         js      0x116 <_JIT_ENTRY+0x116>
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10a: ff d0                         callq   *%rax
// 10c: 49 ff 0c 24                   decq    (%r12)
// 110: 0f 84 6a 01 00 00             je      0x280 <_JIT_ENTRY+0x280>
// 116: 4f 8d 2c fe                   leaq    (%r14,%r15,8), %r13
// 11a: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 11f: 48 85 c9                      testq   %rcx, %rcx
// 122: 0f 84 5d 02 00 00             je      0x385 <_JIT_ENTRY+0x385>
// 128: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 12d: 4d 8d 3c c6                   leaq    (%r14,%rax,8), %r15
// 131: 49 89 4d 00                   movq    %rcx, (%r13)
// 135: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 139: 48 8b 00                      movq    (%rax), %rax
// 13c: 84 c0                         testb   %al, %al
// 13e: 0f 84 d5 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_HandlePending
// 14e: 48 89 ef                      movq    %rbp, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 84 be 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 15b: 4d 89 fd                      movq    %r15, %r13
// 15e: e9 22 02 00 00                jmp     0x385 <_JIT_ENTRY+0x385>
// 163: 49 29 fe                      subq    %rdi, %r14
// 166: 49 83 c6 b8                   addq    $-0x48, %r14
// 16a: 49 c1 ee 03                   shrq    $0x3, %r14
// 16e: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 172: 48 8b 07                      movq    (%rdi), %rax
// 175: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000177:  R_X86_64_64  _JIT_TARGET
// 17f: 89 c9                         movl    %ecx, %ecx
// 181: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 185: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 18b: e9 06 02 00 00                jmp     0x396 <_JIT_ENTRY+0x396>
// 190: 83 fb 02                      cmpl    $0x2, %ebx
// 193: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 199: 44 0f 43 fb                   cmovael %ebx, %r15d
// 19d: 31 db                         xorl    %ebx, %ebx
// 19f: eb 1b                         jmp     0x1bc <_JIT_ENTRY+0x1bc>
// 1a1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 1b0: 48 ff c3                      incq    %rbx
// 1b3: 49 39 df                      cmpq    %rbx, %r15
// 1b6: 0f 84 06 ff ff ff             je      0xc2 <_JIT_ENTRY+0xc2>
// 1bc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1c1: 49 8b 45 00                   movq    (%r13), %rax
// 1c5: 48 85 c0                      testq   %rax, %rax
// 1c8: 7e 06                         jle     0x1d0 <_JIT_ENTRY+0x1d0>
// 1ca: 85 c0                         testl   %eax, %eax
// 1cc: 78 e2                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1ce: eb 26                         jmp     0x1f6 <_JIT_ENTRY+0x1f6>
// 1d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1
// 1da: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1df: 4c 89 ea                      movq    %r13, %rdx
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_NegativeRefcount
// 1ec: ff d0                         callq   *%rax
// 1ee: 49 8b 45 00                   movq    (%r13), %rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 78 ba                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 200: ff d0                         callq   *%rax
// 202: 49 ff 4d 00                   decq    (%r13)
// 206: 75 a8                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 208: 4c 89 ef                      movq    %r13, %rdi
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_Dealloc
// 215: ff d0                         callq   *%rax
// 217: eb 97                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_OPARG
// 223: 89 c1                         movl    %eax, %ecx
// 225: f7 d1                         notl    %ecx
// 227: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 22d: 48 63 c9                      movslq  %ecx, %rcx
// 230: 4d 8d 2c ce                   leaq    (%r14,%rcx,8), %r13
// 234: 49 83 c5 f8                   addq    $-0x8, %r13
// 238: 4d 8b 64 ce f8                movq    -0x8(%r14,%rcx,8), %r12
// 23d: 48 8b 0b                      movq    (%rbx), %rcx
// 240: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 244: 89 c2                         movl    %eax, %edx
// 246: 81 e2 fe ff 00 00             andl    $0xfffe, %edx           # imm = 0xFFFE
// 24c: 48 8b 74 91 18                movq    0x18(%rcx,%rdx,4), %rsi
// 251: a8 01                         testb   $0x1, %al
// 253: 74 51                         je      0x2a6 <_JIT_ENTRY+0x2a6>
// 255: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  _PyObject_GetMethod
// 268: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 26d: 4c 89 e7                      movq    %r12, %rdi
// 270: ff d0                         callq   *%rax
// 272: 85 c0                         testl   %eax, %eax
// 274: 74 68                         je      0x2de <_JIT_ENTRY+0x2de>
// 276: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 27b: e9 bb 00 00 00                jmp     0x33b <_JIT_ENTRY+0x33b>
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_Dealloc
// 28a: 4c 89 e7                      movq    %r12, %rdi
// 28d: ff d0                         callq   *%rax
// 28f: 4f 8d 2c fe                   leaq    (%r14,%r15,8), %r13
// 293: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 298: 48 85 c9                      testq   %rcx, %rcx
// 29b: 0f 85 87 fe ff ff             jne     0x128 <_JIT_ENTRY+0x128>
// 2a1: e9 df 00 00 00                jmp     0x385 <_JIT_ENTRY+0x385>
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  PyObject_GetAttr
// 2b0: 4c 89 e7                      movq    %r12, %rdi
// 2b3: ff d0                         callq   *%rax
// 2b5: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 2ba: 49 8b 04 24                   movq    (%r12), %rax
// 2be: 48 85 c0                      testq   %rax, %rax
// 2c1: 7f 46                         jg      0x309 <_JIT_ENTRY+0x309>
// 2c3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c5:  R_X86_64_64  .rodata.str1.1
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _Py_NegativeRefcount
// 2d7: be 4b 06 00 00                movl    $0x64b, %esi            # imm = 0x64B
// 2dc: eb 22                         jmp     0x300 <_JIT_ENTRY+0x300>
// 2de: 49 8b 04 24                   movq    (%r12), %rax
// 2e2: 48 85 c0                      testq   %rax, %rax
// 2e5: 7f 22                         jg      0x309 <_JIT_ENTRY+0x309>
// 2e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e9:  R_X86_64_64  .rodata.str1.1
// 2f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f3:  R_X86_64_64  _Py_NegativeRefcount
// 2fb: be 43 06 00 00                movl    $0x643, %esi            # imm = 0x643
// 300: 4c 89 e2                      movq    %r12, %rdx
// 303: ff d0                         callq   *%rax
// 305: 49 8b 04 24                   movq    (%r12), %rax
// 309: 85 c0                         testl   %eax, %eax
// 30b: 78 21                         js      0x32e <_JIT_ENTRY+0x32e>
// 30d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 317: ff d0                         callq   *%rax
// 319: 49 ff 0c 24                   decq    (%r12)
// 31d: 75 0f                         jne     0x32e <_JIT_ENTRY+0x32e>
// 31f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000321:  R_X86_64_64  _Py_Dealloc
// 329: 4c 89 e7                      movq    %r12, %rdi
// 32c: ff d0                         callq   *%rax
// 32e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 333: 48 85 c0                      testq   %rax, %rax
// 336: 74 4d                         je      0x385 <_JIT_ENTRY+0x385>
// 338: 45 31 e4                      xorl    %r12d, %r12d
// 33b: 49 89 45 00                   movq    %rax, (%r13)
// 33f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000341:  R_X86_64_64  _JIT_OPARG
// 349: a8 01                         testb   $0x1, %al
// 34b: 74 03                         je      0x350 <_JIT_ENTRY+0x350>
// 34d: 4d 89 27                      movq    %r12, (%r15)
// 350: 89 c1                         movl    %eax, %ecx
// 352: 83 e1 01                      andl    $0x1, %ecx
// 355: f7 d0                         notl    %eax
// 357: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 35c: 48 98                         cltq
// 35e: 48 01 c8                      addq    %rcx, %rax
// 361: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 365: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000367:  R_X86_64_64  _JIT_CONTINUE
// 36f: 48 89 df                      movq    %rbx, %rdi
// 372: 48 89 ea                      movq    %rbp, %rdx
// 375: 48 83 c4 38                   addq    $0x38, %rsp
// 379: 5b                            popq    %rbx
// 37a: 41 5c                         popq    %r12
// 37c: 41 5d                         popq    %r13
// 37e: 41 5e                         popq    %r14
// 380: 41 5f                         popq    %r15
// 382: 5d                            popq    %rbp
// 383: ff e0                         jmpq    *%rax
// 385: 49 29 dd                      subq    %rbx, %r13
// 388: 49 83 c5 b8                   addq    $-0x48, %r13
// 38c: 49 c1 ed 03                   shrq    $0x3, %r13
// 390: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 394: 31 c0                         xorl    %eax, %eax
// 396: 48 83 c4 38                   addq    $0x38, %rsp
// 39a: 5b                            popq    %rbx
// 39b: 41 5c                         popq    %r12
// 39d: 41 5d                         popq    %r13
// 39f: 41 5e                         popq    %r14
// 3a1: 41 5f                         popq    %r15
// 3a3: 5d                            popq    %rbp
// 3a4: c3                            retq
// 3a5: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_ATTR_code_body[934] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xfc, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xeb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x28, 0x48, 0x89, 0x7c, 0x24, 0x30, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xce, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x6c, 0x24, 0x28, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x6a, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x5d, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8d, 0x3c, 0xc6, 0x49, 0x89, 0x4d, 0x00, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xbe, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xfd, 0xe9, 0x22, 0x02, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x06, 0x02, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfb, 0x31, 0xdb, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x06, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x4d, 0x8d, 0x2c, 0xce, 0x49, 0x83, 0xc5, 0xf8, 0x4d, 0x8b, 0x64, 0xce, 0xf8, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x49, 0x20, 0x89, 0xc2, 0x81, 0xe2, 0xfe, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x91, 0x18, 0xa8, 0x01, 0x74, 0x51, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x68, 0x48, 0x8b, 0x44, 0x24, 0x08, 0xe9, 0xbb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4f, 0x8d, 0x2c, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x0f, 0x85, 0x87, 0xfe, 0xff, 0xff, 0xe9, 0xdf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x46, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4b, 0x06, 0x00, 0x00, 0xeb, 0x22, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x4d, 0x45, 0x31, 0xe4, 0x49, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x03, 0x4d, 0x89, 0x27, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_ATTR_code_holes[24] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_GetMethod, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetAttr, 0x0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x30f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x321, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x341, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x367, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_ATTR_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_ATTR_CLASS
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_ATTR_CLASS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f8 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e7 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 cc 00 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// f2: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// f7: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// fc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 101: 78 16                         js      0x119 <_JIT_ENTRY+0x119>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10d: ff d0                         callq   *%rax
// 10f: 49 ff 0c 24                   decq    (%r12)
// 113: 0f 84 2b 01 00 00             je      0x244 <_JIT_ENTRY+0x244>
// 119: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 11d: 4d 85 ff                      testq   %r15, %r15
// 120: 0f 84 3a 01 00 00             je      0x260 <_JIT_ENTRY+0x260>
// 126: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12a: 49 8d 1c ce                   leaq    (%r14,%rcx,8), %rbx
// 12e: 4c 89 38                      movq    %r15, (%rax)
// 131: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 0f 84 c9 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_HandlePending
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 0f 84 b2 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 157: 48 89 d8                      movq    %rbx, %rax
// 15a: e9 01 01 00 00                jmp     0x260 <_JIT_ENTRY+0x260>
// 15f: 49 29 fe                      subq    %rdi, %r14
// 162: 49 83 c6 b8                   addq    $-0x48, %r14
// 166: 49 c1 ee 03                   shrq    $0x3, %r14
// 16a: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 16e: 48 8b 07                      movq    (%rdi), %rax
// 171: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000173:  R_X86_64_64  _JIT_TARGET
// 17b: 89 c9                         movl    %ecx, %ecx
// 17d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 181: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 187: e9 e5 00 00 00                jmp     0x271 <_JIT_ENTRY+0x271>
// 18c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 190: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 196: 45 0f 43 fd                   cmovael %r13d, %r15d
// 19a: 31 db                         xorl    %ebx, %ebx
// 19c: eb 0e                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19e: 66 90                         nop
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 df                      cmpq    %rbx, %r15
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 98                         cltq
// 21c: 4d 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %r15
// 221: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000223:  R_X86_64_64  _JIT_OPERAND
// 22b: 41 8b 04 24                   movl    (%r12), %eax
// 22f: ff c0                         incl    %eax
// 231: 75 4d                         jne     0x280 <_JIT_ENTRY+0x280>
// 233: 49 8b 07                      movq    (%r15), %rax
// 236: 48 85 c0                      testq   %rax, %rax
// 239: 7e 5d                         jle     0x298 <_JIT_ENTRY+0x298>
// 23b: 85 c0                         testl   %eax, %eax
// 23d: 79 7e                         jns     0x2bd <_JIT_ENTRY+0x2bd>
// 23f: e9 99 00 00 00                jmp     0x2dd <_JIT_ENTRY+0x2dd>
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _Py_Dealloc
// 24e: 4c 89 e7                      movq    %r12, %rdi
// 251: ff d0                         callq   *%rax
// 253: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 257: 4d 85 ff                      testq   %r15, %r15
// 25a: 0f 85 c6 fe ff ff             jne     0x126 <_JIT_ENTRY+0x126>
// 260: 4c 29 e8                      subq    %r13, %rax
// 263: 48 83 c0 b8                   addq    $-0x48, %rax
// 267: 48 c1 e8 03                   shrq    $0x3, %rax
// 26b: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 26f: 31 c0                         xorl    %eax, %eax
// 271: 48 83 c4 28                   addq    $0x28, %rsp
// 275: 5b                            popq    %rbx
// 276: 41 5c                         popq    %r12
// 278: 41 5d                         popq    %r13
// 27a: 41 5e                         popq    %r14
// 27c: 41 5f                         popq    %r15
// 27e: 5d                            popq    %rbp
// 27f: c3                            retq
// 280: 41 89 04 24                   movl    %eax, (%r12)
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 28e: ff d0                         callq   *%rax
// 290: 49 8b 07                      movq    (%r15), %rax
// 293: 48 85 c0                      testq   %rax, %rax
// 296: 7f a3                         jg      0x23b <_JIT_ENTRY+0x23b>
// 298: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029a:  R_X86_64_64  .rodata.str1.1
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _Py_NegativeRefcount
// 2ac: be f3 06 00 00                movl    $0x6f3, %esi            # imm = 0x6F3
// 2b1: 4c 89 fa                      movq    %r15, %rdx
// 2b4: ff d0                         callq   *%rax
// 2b6: 49 8b 07                      movq    (%r15), %rax
// 2b9: 85 c0                         testl   %eax, %eax
// 2bb: 78 20                         js      0x2dd <_JIT_ENTRY+0x2dd>
// 2bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c7: ff d0                         callq   *%rax
// 2c9: 49 ff 0f                      decq    (%r15)
// 2cc: 75 0f                         jne     0x2dd <_JIT_ENTRY+0x2dd>
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _Py_Dealloc
// 2d8: 4c 89 ff                      movq    %r15, %rdi
// 2db: ff d0                         callq   *%rax
// 2dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002df:  R_X86_64_64  _JIT_OPARG
// 2e7: 89 c1                         movl    %eax, %ecx
// 2e9: f7 d1                         notl    %ecx
// 2eb: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 2f1: 48 63 c9                      movslq  %ecx, %rcx
// 2f4: 4d 89 64 ce f8                movq    %r12, -0x8(%r14,%rcx,8)
// 2f9: a8 01                         testb   $0x1, %al
// 2fb: 74 07                         je      0x304 <_JIT_ENTRY+0x304>
// 2fd: 48 c7 03 00 00 00 00          movq    $0x0, (%rbx)
// 304: 89 c1                         movl    %eax, %ecx
// 306: 83 e1 01                      andl    $0x1, %ecx
// 309: f7 d0                         notl    %eax
// 30b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 310: 48 98                         cltq
// 312: 48 01 c8                      addq    %rcx, %rax
// 315: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 319: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031b:  R_X86_64_64  _JIT_CONTINUE
// 323: 4c 89 ef                      movq    %r13, %rdi
// 326: 48 89 ea                      movq    %rbp, %rdx
// 329: 48 83 c4 28                   addq    $0x28, %rsp
// 32d: 5b                            popq    %rbx
// 32e: 41 5c                         popq    %r12
// 330: 41 5d                         popq    %r13
// 332: 41 5e                         popq    %r14
// 334: 41 5f                         popq    %r15
// 336: 5d                            popq    %rbp
// 337: ff e0                         jmpq    *%rax
// 339: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_ATTR_CLASS_code_body[826] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x2b, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xde, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x3a, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x1c, 0xce, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0xe9, 0x01, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xe5, 0x00, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x7c, 0xc6, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x75, 0x4d, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x5d, 0x85, 0xc0, 0x79, 0x7e, 0xe9, 0x99, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x4d, 0x85, 0xff, 0x0f, 0x85, 0xc6, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xa3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x64, 0xce, 0xf8, 0xa8, 0x01, 0x74, 0x07, 0x48, 0xc7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_ATTR_CLASS_code_holes[22] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_ATTR_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_ATTR_CLASS_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_ATTR_INSTANCE_VALUE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_ATTR_INSTANCE_VALUE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 fd                      movq    %rdi, %r13
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 0a 02 00 00             je      0x274 <_JIT_ENTRY+0x274>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 f9 01 00 00             je      0x274 <_JIT_ENTRY+0x274>
// 7b: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 80: 4c 89 0c 24                   movq    %r9, (%rsp)
// 84: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 89: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 8e: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 41 0f 94 c7                   sete    %r15b
// 99: 89 da                         movl    %ebx, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 9f 00 00 00             je      0x163 <_JIT_ENTRY+0x163>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// d0: 7f 22                         jg      0xf4 <_JIT_ENTRY+0xf4>
// d2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d4:  R_X86_64_64  .rodata.str1.1
// dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000de:  R_X86_64_64  _Py_NegativeRefcount
// e6: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// eb: 4c 89 e2                      movq    %r12, %rdx
// ee: ff d0                         callq   *%rax
// f0: 49 8b 04 24                   movq    (%r12), %rax
// f4: 85 c0                         testl   %eax, %eax
// f6: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// fb: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 100: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 105: 78 16                         js      0x11d <_JIT_ENTRY+0x11d>
// 107: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000109:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 111: ff d0                         callq   *%rax
// 113: 49 ff 0c 24                   decq    (%r12)
// 117: 0f 84 25 01 00 00             je      0x242 <_JIT_ENTRY+0x242>
// 11d: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 121: 4d 85 ff                      testq   %r15, %r15
// 124: 0f 84 34 01 00 00             je      0x25e <_JIT_ENTRY+0x25e>
// 12a: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12e: 49 8d 1c ce                   leaq    (%r14,%rcx,8), %rbx
// 132: 4c 89 38                      movq    %r15, (%rax)
// 135: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 139: 48 8b 00                      movq    (%rax), %rax
// 13c: 84 c0                         testb   %al, %al
// 13e: 0f 84 a5 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_HandlePending
// 14e: 48 89 ef                      movq    %rbp, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 84 8e 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 15b: 48 89 d8                      movq    %rbx, %rax
// 15e: e9 fb 00 00 00                jmp     0x25e <_JIT_ENTRY+0x25e>
// 163: 83 fb 02                      cmpl    $0x2, %ebx
// 166: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 16c: 44 0f 43 fb                   cmovael %ebx, %r15d
// 170: 31 db                         xorl    %ebx, %ebx
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 48 ff c3                      incq    %rbx
// 183: 49 39 df                      cmpq    %rbx, %r15
// 186: 0f 84 38 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 18c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 191: 49 8b 45 00                   movq    (%r13), %rax
// 195: 48 85 c0                      testq   %rax, %rax
// 198: 7e 06                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 78 e2                         js      0x180 <_JIT_ENTRY+0x180>
// 19e: eb 26                         jmp     0x1c6 <_JIT_ENTRY+0x1c6>
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 ea                      movq    %r13, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 45 00                   movq    (%r13), %rax
// 1c2: 85 c0                         testl   %eax, %eax
// 1c4: 78 ba                         js      0x180 <_JIT_ENTRY+0x180>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d0: ff d0                         callq   *%rax
// 1d2: 49 ff 4d 00                   decq    (%r13)
// 1d6: 75 a8                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d8: 4c 89 ef                      movq    %r13, %rdi
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_Dealloc
// 1e5: ff d0                         callq   *%rax
// 1e7: eb 97                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_OPARG
// 1f3: f7 d0                         notl    %eax
// 1f5: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1fa: 48 98                         cltq
// 1fc: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 201: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 206: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000208:  R_X86_64_64  _JIT_OPERAND
// 210: 0f b7 c9                      movzwl  %cx, %ecx
// 213: 4c 8b 7c c8 01                movq    0x1(%rax,%rcx,8), %r15
// 218: 4d 85 ff                      testq   %r15, %r15
// 21b: 74 54                         je      0x271 <_JIT_ENTRY+0x271>
// 21d: 41 8b 07                      movl    (%r15), %eax
// 220: ff c0                         incl    %eax
// 222: 0f 85 84 00 00 00             jne     0x2ac <_JIT_ENTRY+0x2ac>
// 228: 49 8b 04 24                   movq    (%r12), %rax
// 22c: 48 85 c0                      testq   %rax, %rax
// 22f: 0f 8e 93 00 00 00             jle     0x2c8 <_JIT_ENTRY+0x2c8>
// 235: 85 c0                         testl   %eax, %eax
// 237: 0f 89 b1 00 00 00             jns     0x2ee <_JIT_ENTRY+0x2ee>
// 23d: e9 cd 00 00 00                jmp     0x30f <_JIT_ENTRY+0x30f>
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _Py_Dealloc
// 24c: 4c 89 e7                      movq    %r12, %rdi
// 24f: ff d0                         callq   *%rax
// 251: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 255: 4d 85 ff                      testq   %r15, %r15
// 258: 0f 85 cc fe ff ff             jne     0x12a <_JIT_ENTRY+0x12a>
// 25e: 4c 29 e8                      subq    %r13, %rax
// 261: 48 83 c0 b8                   addq    $-0x48, %rax
// 265: 48 c1 e8 03                   shrq    $0x3, %rax
// 269: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 26d: 31 c0                         xorl    %eax, %eax
// 26f: eb 2c                         jmp     0x29d <_JIT_ENTRY+0x29d>
// 271: 49 89 de                      movq    %rbx, %r14
// 274: 4d 29 ee                      subq    %r13, %r14
// 277: 49 83 c6 b8                   addq    $-0x48, %r14
// 27b: 49 c1 ee 03                   shrq    $0x3, %r14
// 27f: 45 89 75 40                   movl    %r14d, 0x40(%r13)
// 283: 49 8b 45 00                   movq    (%r13), %rax
// 287: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000289:  R_X86_64_64  _JIT_TARGET
// 291: 89 c9                         movl    %ecx, %ecx
// 293: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 297: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 29d: 48 83 c4 28                   addq    $0x28, %rsp
// 2a1: 5b                            popq    %rbx
// 2a2: 41 5c                         popq    %r12
// 2a4: 41 5d                         popq    %r13
// 2a6: 41 5e                         popq    %r14
// 2a8: 41 5f                         popq    %r15
// 2aa: 5d                            popq    %rbp
// 2ab: c3                            retq
// 2ac: 41 89 07                      movl    %eax, (%r15)
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2b9: ff d0                         callq   *%rax
// 2bb: 49 8b 04 24                   movq    (%r12), %rax
// 2bf: 48 85 c0                      testq   %rax, %rax
// 2c2: 0f 8f 6d ff ff ff             jg      0x235 <_JIT_ENTRY+0x235>
// 2c8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ca:  R_X86_64_64  .rodata.str1.1
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_NegativeRefcount
// 2dc: be 75 06 00 00                movl    $0x675, %esi            # imm = 0x675
// 2e1: 4c 89 e2                      movq    %r12, %rdx
// 2e4: ff d0                         callq   *%rax
// 2e6: 49 8b 04 24                   movq    (%r12), %rax
// 2ea: 85 c0                         testl   %eax, %eax
// 2ec: 78 21                         js      0x30f <_JIT_ENTRY+0x30f>
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f8: ff d0                         callq   *%rax
// 2fa: 49 ff 0c 24                   decq    (%r12)
// 2fe: 75 0f                         jne     0x30f <_JIT_ENTRY+0x30f>
// 300: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000302:  R_X86_64_64  _Py_Dealloc
// 30a: 4c 89 e7                      movq    %r12, %rdi
// 30d: ff d0                         callq   *%rax
// 30f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000311:  R_X86_64_64  _JIT_OPARG
// 319: 89 c1                         movl    %eax, %ecx
// 31b: f7 d1                         notl    %ecx
// 31d: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 323: 48 63 c9                      movslq  %ecx, %rcx
// 326: 4d 89 7c ce f8                movq    %r15, -0x8(%r14,%rcx,8)
// 32b: a8 01                         testb   $0x1, %al
// 32d: 74 07                         je      0x336 <_JIT_ENTRY+0x336>
// 32f: 48 c7 03 00 00 00 00          movq    $0x0, (%rbx)
// 336: 89 c1                         movl    %eax, %ecx
// 338: 83 e1 01                      andl    $0x1, %ecx
// 33b: f7 d0                         notl    %eax
// 33d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 342: 48 98                         cltq
// 344: 48 01 c8                      addq    %rcx, %rax
// 347: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 34b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034d:  R_X86_64_64  _JIT_CONTINUE
// 355: 4c 89 ef                      movq    %r13, %rdi
// 358: 48 89 ea                      movq    %rbp, %rdx
// 35b: 48 83 c4 28                   addq    $0x28, %rsp
// 35f: 5b                            popq    %rbx
// 360: 41 5c                         popq    %r12
// 362: 41 5d                         popq    %r13
// 364: 41 5e                         popq    %r14
// 366: 41 5f                         popq    %r15
// 368: 5d                            popq    %rbp
// 369: ff e0                         jmpq    *%rax
// 36b: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_ATTR_INSTANCE_VALUE_code_body[876] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x0a, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xf9, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x25, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xde, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x34, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x1c, 0xce, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8e, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0xe9, 0xfb, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfb, 0x31, 0xdb, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x7c, 0xc8, 0x01, 0x4d, 0x85, 0xff, 0x74, 0x54, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x0f, 0x85, 0x84, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x93, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xb1, 0x00, 0x00, 0x00, 0xe9, 0xcd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x4d, 0x85, 0xff, 0x0f, 0x85, 0xcc, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xeb, 0x2c, 0x49, 0x89, 0xde, 0x4d, 0x29, 0xee, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x75, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x6d, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x7c, 0xce, 0xf8, 0xa8, 0x01, 0x74, 0x07, 0x48, 0xc7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_ATTR_INSTANCE_VALUE_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x311, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x34d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_ATTR_INSTANCE_VALUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_ATTR_INSTANCE_VALUE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_ATTR_METHOD_LAZY_DICT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f5 00 00 00             je      0x15c <_JIT_ENTRY+0x15c>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e4 00 00 00             je      0x15c <_JIT_ENTRY+0x15c>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 c9 00 00 00             je      0x189 <_JIT_ENTRY+0x189>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// f2: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// f7: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// fc: 78 16                         js      0x114 <_JIT_ENTRY+0x114>
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 108: ff d0                         callq   *%rax
// 10a: 49 ff 0c 24                   decq    (%r12)
// 10e: 0f 84 71 01 00 00             je      0x285 <_JIT_ENTRY+0x285>
// 114: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 118: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 11d: 48 85 c9                      testq   %rcx, %rcx
// 120: 0f 84 80 01 00 00             je      0x2a6 <_JIT_ENTRY+0x2a6>
// 126: 48 89 08                      movq    %rcx, (%rax)
// 129: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 12d: 48 8b 00                      movq    (%rax), %rax
// 130: 84 c0                         testb   %al, %al
// 132: 0f 84 d1 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_HandlePending
// 142: 48 89 ef                      movq    %rbp, %rdi
// 145: ff d0                         callq   *%rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 0f 84 ba 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 14f: 48 8b 04 24                   movq    (%rsp), %rax
// 153: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 157: e9 4a 01 00 00                jmp     0x2a6 <_JIT_ENTRY+0x2a6>
// 15c: 49 29 fe                      subq    %rdi, %r14
// 15f: 49 83 c6 b8                   addq    $-0x48, %r14
// 163: 49 c1 ee 03                   shrq    $0x3, %r14
// 167: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 16b: 48 8b 07                      movq    (%rdi), %rax
// 16e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000170:  R_X86_64_64  _JIT_TARGET
// 178: 89 c9                         movl    %ecx, %ecx
// 17a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 17e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 184: e9 2e 01 00 00                jmp     0x2b7 <_JIT_ENTRY+0x2b7>
// 189: 41 83 fd 02                   cmpl    $0x2, %r13d
// 18d: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 193: 45 0f 43 fd                   cmovael %r13d, %r15d
// 197: 31 db                         xorl    %ebx, %ebx
// 199: eb 11                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 df                      cmpq    %rbx, %r15
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 98                         cltq
// 21c: 49 8b 5c c6 f8                movq    -0x8(%r14,%rax,8), %rbx
// 221: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000223:  R_X86_64_64  _JIT_OPERAND
// 22b: 41 8b 07                      movl    (%r15), %eax
// 22e: ff c0                         incl    %eax
// 230: 74 0f                         je      0x241 <_JIT_ENTRY+0x241>
// 232: 41 89 07                      movl    %eax, (%r15)
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 23f: ff d0                         callq   *%rax
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _JIT_OPARG
// 24b: f7 d0                         notl    %eax
// 24d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 252: 48 98                         cltq
// 254: 4d 89 7c c6 f8                movq    %r15, -0x8(%r14,%rax,8)
// 259: 49 89 1c c6                   movq    %rbx, (%r14,%rax,8)
// 25d: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 261: 48 83 c6 08                   addq    $0x8, %rsi
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _JIT_CONTINUE
// 26f: 4c 89 ef                      movq    %r13, %rdi
// 272: 48 89 ea                      movq    %rbp, %rdx
// 275: 48 83 c4 28                   addq    $0x28, %rsp
// 279: 5b                            popq    %rbx
// 27a: 41 5c                         popq    %r12
// 27c: 41 5d                         popq    %r13
// 27e: 41 5e                         popq    %r14
// 280: 41 5f                         popq    %r15
// 282: 5d                            popq    %rbp
// 283: ff e0                         jmpq    *%rax
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _Py_Dealloc
// 28f: 4c 89 e7                      movq    %r12, %rdi
// 292: ff d0                         callq   *%rax
// 294: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 298: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 29d: 48 85 c9                      testq   %rcx, %rcx
// 2a0: 0f 85 80 fe ff ff             jne     0x126 <_JIT_ENTRY+0x126>
// 2a6: 4c 29 e8                      subq    %r13, %rax
// 2a9: 48 83 c0 b8                   addq    $-0x48, %rax
// 2ad: 48 c1 e8 03                   shrq    $0x3, %rax
// 2b1: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 2b5: 31 c0                         xorl    %eax, %eax
// 2b7: 48 83 c4 28                   addq    $0x28, %rsp
// 2bb: 5b                            popq    %rbx
// 2bc: 41 5c                         popq    %r12
// 2be: 41 5d                         popq    %r13
// 2c0: 41 5e                         popq    %r14
// 2c2: 41 5f                         popq    %r15
// 2c4: 5d                            popq    %rbp
// 2c5: c3                            retq
// 2c6: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_ATTR_METHOD_LAZY_DICT_code_body[711] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf5, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe4, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x71, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x80, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xba, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0x4a, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x2e, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x5c, 0xc6, 0xf8, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x7c, 0xc6, 0xf8, 0x49, 0x89, 0x1c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x85, 0x80, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_ATTR_METHOD_LAZY_DICT_code_holes[18] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_ATTR_METHOD_LAZY_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_ATTR_METHOD_NO_DICT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_ATTR_METHOD_NO_DICT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f5 00 00 00             je      0x15c <_JIT_ENTRY+0x15c>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e4 00 00 00             je      0x15c <_JIT_ENTRY+0x15c>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 c9 00 00 00             je      0x189 <_JIT_ENTRY+0x189>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// f2: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// f7: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// fc: 78 16                         js      0x114 <_JIT_ENTRY+0x114>
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 108: ff d0                         callq   *%rax
// 10a: 49 ff 0c 24                   decq    (%r12)
// 10e: 0f 84 71 01 00 00             je      0x285 <_JIT_ENTRY+0x285>
// 114: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 118: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 11d: 48 85 c9                      testq   %rcx, %rcx
// 120: 0f 84 80 01 00 00             je      0x2a6 <_JIT_ENTRY+0x2a6>
// 126: 48 89 08                      movq    %rcx, (%rax)
// 129: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 12d: 48 8b 00                      movq    (%rax), %rax
// 130: 84 c0                         testb   %al, %al
// 132: 0f 84 d1 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_HandlePending
// 142: 48 89 ef                      movq    %rbp, %rdi
// 145: ff d0                         callq   *%rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 0f 84 ba 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 14f: 48 8b 04 24                   movq    (%rsp), %rax
// 153: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 157: e9 4a 01 00 00                jmp     0x2a6 <_JIT_ENTRY+0x2a6>
// 15c: 49 29 fe                      subq    %rdi, %r14
// 15f: 49 83 c6 b8                   addq    $-0x48, %r14
// 163: 49 c1 ee 03                   shrq    $0x3, %r14
// 167: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 16b: 48 8b 07                      movq    (%rdi), %rax
// 16e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000170:  R_X86_64_64  _JIT_TARGET
// 178: 89 c9                         movl    %ecx, %ecx
// 17a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 17e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 184: e9 2e 01 00 00                jmp     0x2b7 <_JIT_ENTRY+0x2b7>
// 189: 41 83 fd 02                   cmpl    $0x2, %r13d
// 18d: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 193: 45 0f 43 fd                   cmovael %r13d, %r15d
// 197: 31 db                         xorl    %ebx, %ebx
// 199: eb 11                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 df                      cmpq    %rbx, %r15
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 98                         cltq
// 21c: 49 8b 5c c6 f8                movq    -0x8(%r14,%rax,8), %rbx
// 221: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000223:  R_X86_64_64  _JIT_OPERAND
// 22b: 41 8b 07                      movl    (%r15), %eax
// 22e: ff c0                         incl    %eax
// 230: 74 0f                         je      0x241 <_JIT_ENTRY+0x241>
// 232: 41 89 07                      movl    %eax, (%r15)
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 23f: ff d0                         callq   *%rax
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _JIT_OPARG
// 24b: f7 d0                         notl    %eax
// 24d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 252: 48 98                         cltq
// 254: 4d 89 7c c6 f8                movq    %r15, -0x8(%r14,%rax,8)
// 259: 49 89 1c c6                   movq    %rbx, (%r14,%rax,8)
// 25d: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 261: 48 83 c6 08                   addq    $0x8, %rsi
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _JIT_CONTINUE
// 26f: 4c 89 ef                      movq    %r13, %rdi
// 272: 48 89 ea                      movq    %rbp, %rdx
// 275: 48 83 c4 28                   addq    $0x28, %rsp
// 279: 5b                            popq    %rbx
// 27a: 41 5c                         popq    %r12
// 27c: 41 5d                         popq    %r13
// 27e: 41 5e                         popq    %r14
// 280: 41 5f                         popq    %r15
// 282: 5d                            popq    %rbp
// 283: ff e0                         jmpq    *%rax
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _Py_Dealloc
// 28f: 4c 89 e7                      movq    %r12, %rdi
// 292: ff d0                         callq   *%rax
// 294: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 298: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 29d: 48 85 c9                      testq   %rcx, %rcx
// 2a0: 0f 85 80 fe ff ff             jne     0x126 <_JIT_ENTRY+0x126>
// 2a6: 4c 29 e8                      subq    %r13, %rax
// 2a9: 48 83 c0 b8                   addq    $-0x48, %rax
// 2ad: 48 c1 e8 03                   shrq    $0x3, %rax
// 2b1: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 2b5: 31 c0                         xorl    %eax, %eax
// 2b7: 48 83 c4 28                   addq    $0x28, %rsp
// 2bb: 5b                            popq    %rbx
// 2bc: 41 5c                         popq    %r12
// 2be: 41 5d                         popq    %r13
// 2c0: 41 5e                         popq    %r14
// 2c2: 41 5f                         popq    %r15
// 2c4: 5d                            popq    %rbp
// 2c5: c3                            retq
// 2c6: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_ATTR_METHOD_NO_DICT_code_body[711] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf5, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe4, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x71, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x80, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xba, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0x4a, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x2e, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x5c, 0xc6, 0xf8, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x7c, 0xc6, 0xf8, 0x49, 0x89, 0x1c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x85, 0x80, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_ATTR_METHOD_NO_DICT_code_holes[18] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_ATTR_METHOD_NO_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_ATTR_METHOD_NO_DICT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_ATTR_METHOD_WITH_VALUES
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_ATTR_METHOD_WITH_VALUES.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f5 00 00 00             je      0x15c <_JIT_ENTRY+0x15c>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e4 00 00 00             je      0x15c <_JIT_ENTRY+0x15c>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 c9 00 00 00             je      0x189 <_JIT_ENTRY+0x189>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// f2: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// f7: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// fc: 78 16                         js      0x114 <_JIT_ENTRY+0x114>
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 108: ff d0                         callq   *%rax
// 10a: 49 ff 0c 24                   decq    (%r12)
// 10e: 0f 84 71 01 00 00             je      0x285 <_JIT_ENTRY+0x285>
// 114: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 118: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 11d: 48 85 c9                      testq   %rcx, %rcx
// 120: 0f 84 80 01 00 00             je      0x2a6 <_JIT_ENTRY+0x2a6>
// 126: 48 89 08                      movq    %rcx, (%rax)
// 129: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 12d: 48 8b 00                      movq    (%rax), %rax
// 130: 84 c0                         testb   %al, %al
// 132: 0f 84 d1 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_HandlePending
// 142: 48 89 ef                      movq    %rbp, %rdi
// 145: ff d0                         callq   *%rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 0f 84 ba 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 14f: 48 8b 04 24                   movq    (%rsp), %rax
// 153: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 157: e9 4a 01 00 00                jmp     0x2a6 <_JIT_ENTRY+0x2a6>
// 15c: 49 29 fe                      subq    %rdi, %r14
// 15f: 49 83 c6 b8                   addq    $-0x48, %r14
// 163: 49 c1 ee 03                   shrq    $0x3, %r14
// 167: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 16b: 48 8b 07                      movq    (%rdi), %rax
// 16e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000170:  R_X86_64_64  _JIT_TARGET
// 178: 89 c9                         movl    %ecx, %ecx
// 17a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 17e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 184: e9 2e 01 00 00                jmp     0x2b7 <_JIT_ENTRY+0x2b7>
// 189: 41 83 fd 02                   cmpl    $0x2, %r13d
// 18d: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 193: 45 0f 43 fd                   cmovael %r13d, %r15d
// 197: 31 db                         xorl    %ebx, %ebx
// 199: eb 11                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 df                      cmpq    %rbx, %r15
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 98                         cltq
// 21c: 49 8b 5c c6 f8                movq    -0x8(%r14,%rax,8), %rbx
// 221: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000223:  R_X86_64_64  _JIT_OPERAND
// 22b: 41 8b 07                      movl    (%r15), %eax
// 22e: ff c0                         incl    %eax
// 230: 74 0f                         je      0x241 <_JIT_ENTRY+0x241>
// 232: 41 89 07                      movl    %eax, (%r15)
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 23f: ff d0                         callq   *%rax
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _JIT_OPARG
// 24b: f7 d0                         notl    %eax
// 24d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 252: 48 98                         cltq
// 254: 4d 89 7c c6 f8                movq    %r15, -0x8(%r14,%rax,8)
// 259: 49 89 1c c6                   movq    %rbx, (%r14,%rax,8)
// 25d: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 261: 48 83 c6 08                   addq    $0x8, %rsi
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _JIT_CONTINUE
// 26f: 4c 89 ef                      movq    %r13, %rdi
// 272: 48 89 ea                      movq    %rbp, %rdx
// 275: 48 83 c4 28                   addq    $0x28, %rsp
// 279: 5b                            popq    %rbx
// 27a: 41 5c                         popq    %r12
// 27c: 41 5d                         popq    %r13
// 27e: 41 5e                         popq    %r14
// 280: 41 5f                         popq    %r15
// 282: 5d                            popq    %rbp
// 283: ff e0                         jmpq    *%rax
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _Py_Dealloc
// 28f: 4c 89 e7                      movq    %r12, %rdi
// 292: ff d0                         callq   *%rax
// 294: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 298: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 29d: 48 85 c9                      testq   %rcx, %rcx
// 2a0: 0f 85 80 fe ff ff             jne     0x126 <_JIT_ENTRY+0x126>
// 2a6: 4c 29 e8                      subq    %r13, %rax
// 2a9: 48 83 c0 b8                   addq    $-0x48, %rax
// 2ad: 48 c1 e8 03                   shrq    $0x3, %rax
// 2b1: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 2b5: 31 c0                         xorl    %eax, %eax
// 2b7: 48 83 c4 28                   addq    $0x28, %rsp
// 2bb: 5b                            popq    %rbx
// 2bc: 41 5c                         popq    %r12
// 2be: 41 5d                         popq    %r13
// 2c0: 41 5e                         popq    %r14
// 2c2: 41 5f                         popq    %r15
// 2c4: 5d                            popq    %rbp
// 2c5: c3                            retq
// 2c6: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_ATTR_METHOD_WITH_VALUES_code_body[711] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf5, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe4, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x71, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x80, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xba, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0x4a, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x2e, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x5c, 0xc6, 0xf8, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x7c, 0xc6, 0xf8, 0x49, 0x89, 0x1c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x85, 0x80, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_ATTR_METHOD_WITH_VALUES_code_holes[18] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_ATTR_METHOD_WITH_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_ATTR_METHOD_WITH_VALUES_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_ATTR_MODULE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_ATTR_MODULE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 fd                      movq    %rdi, %r13
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 21 02 00 00             je      0x28b <_JIT_ENTRY+0x28b>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 10 02 00 00             je      0x28b <_JIT_ENTRY+0x28b>
// 7b: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 80: 4c 89 0c 24                   movq    %r9, (%rsp)
// 84: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 89: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 8e: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 41 0f 94 c7                   sete    %r15b
// 99: 89 da                         movl    %ebx, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 9f 00 00 00             je      0x163 <_JIT_ENTRY+0x163>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// d0: 7f 22                         jg      0xf4 <_JIT_ENTRY+0xf4>
// d2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d4:  R_X86_64_64  .rodata.str1.1
// dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000de:  R_X86_64_64  _Py_NegativeRefcount
// e6: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// eb: 4c 89 e2                      movq    %r12, %rdx
// ee: ff d0                         callq   *%rax
// f0: 49 8b 04 24                   movq    (%r12), %rax
// f4: 85 c0                         testl   %eax, %eax
// f6: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// fb: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 100: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 105: 78 16                         js      0x11d <_JIT_ENTRY+0x11d>
// 107: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000109:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 111: ff d0                         callq   *%rax
// 113: 49 ff 0c 24                   decq    (%r12)
// 117: 0f 84 3c 01 00 00             je      0x259 <_JIT_ENTRY+0x259>
// 11d: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 121: 4d 85 ff                      testq   %r15, %r15
// 124: 0f 84 4b 01 00 00             je      0x275 <_JIT_ENTRY+0x275>
// 12a: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12e: 49 8d 1c ce                   leaq    (%r14,%rcx,8), %rbx
// 132: 4c 89 38                      movq    %r15, (%rax)
// 135: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 139: 48 8b 00                      movq    (%rax), %rax
// 13c: 84 c0                         testb   %al, %al
// 13e: 0f 84 a5 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_HandlePending
// 14e: 48 89 ef                      movq    %rbp, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 84 8e 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 15b: 48 89 d8                      movq    %rbx, %rax
// 15e: e9 12 01 00 00                jmp     0x275 <_JIT_ENTRY+0x275>
// 163: 83 fb 02                      cmpl    $0x2, %ebx
// 166: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 16c: 44 0f 43 fb                   cmovael %ebx, %r15d
// 170: 31 db                         xorl    %ebx, %ebx
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 48 ff c3                      incq    %rbx
// 183: 49 39 df                      cmpq    %rbx, %r15
// 186: 0f 84 38 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 18c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 191: 49 8b 45 00                   movq    (%r13), %rax
// 195: 48 85 c0                      testq   %rax, %rax
// 198: 7e 06                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 78 e2                         js      0x180 <_JIT_ENTRY+0x180>
// 19e: eb 26                         jmp     0x1c6 <_JIT_ENTRY+0x1c6>
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 ea                      movq    %r13, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 45 00                   movq    (%r13), %rax
// 1c2: 85 c0                         testl   %eax, %eax
// 1c4: 78 ba                         js      0x180 <_JIT_ENTRY+0x180>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d0: ff d0                         callq   *%rax
// 1d2: 49 ff 4d 00                   decq    (%r13)
// 1d6: 75 a8                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d8: 4c 89 ef                      movq    %r13, %rdi
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_Dealloc
// 1e5: ff d0                         callq   *%rax
// 1e7: eb 97                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_OPARG
// 1f3: f7 d0                         notl    %eax
// 1f5: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1fa: 48 98                         cltq
// 1fc: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 201: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 206: 48 8b 40 20                   movq    0x20(%rax), %rax
// 20a: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 20e: ba 01 00 00 00                movl    $0x1, %edx
// 213: 48 d3 e2                      shlq    %cl, %rdx
// 216: 48 01 c2                      addq    %rax, %rdx
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_OPERAND
// 223: 0f b7 c0                      movzwl  %ax, %eax
// 226: 48 c1 e0 04                   shlq    $0x4, %rax
// 22a: 4c 8b 7c 10 28                movq    0x28(%rax,%rdx), %r15
// 22f: 4d 85 ff                      testq   %r15, %r15
// 232: 74 54                         je      0x288 <_JIT_ENTRY+0x288>
// 234: 41 8b 07                      movl    (%r15), %eax
// 237: ff c0                         incl    %eax
// 239: 0f 85 84 00 00 00             jne     0x2c3 <_JIT_ENTRY+0x2c3>
// 23f: 49 8b 04 24                   movq    (%r12), %rax
// 243: 48 85 c0                      testq   %rax, %rax
// 246: 0f 8e 93 00 00 00             jle     0x2df <_JIT_ENTRY+0x2df>
// 24c: 85 c0                         testl   %eax, %eax
// 24e: 0f 89 b1 00 00 00             jns     0x305 <_JIT_ENTRY+0x305>
// 254: e9 cd 00 00 00                jmp     0x326 <_JIT_ENTRY+0x326>
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _Py_Dealloc
// 263: 4c 89 e7                      movq    %r12, %rdi
// 266: ff d0                         callq   *%rax
// 268: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 26c: 4d 85 ff                      testq   %r15, %r15
// 26f: 0f 85 b5 fe ff ff             jne     0x12a <_JIT_ENTRY+0x12a>
// 275: 4c 29 e8                      subq    %r13, %rax
// 278: 48 83 c0 b8                   addq    $-0x48, %rax
// 27c: 48 c1 e8 03                   shrq    $0x3, %rax
// 280: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 284: 31 c0                         xorl    %eax, %eax
// 286: eb 2c                         jmp     0x2b4 <_JIT_ENTRY+0x2b4>
// 288: 49 89 de                      movq    %rbx, %r14
// 28b: 4d 29 ee                      subq    %r13, %r14
// 28e: 49 83 c6 b8                   addq    $-0x48, %r14
// 292: 49 c1 ee 03                   shrq    $0x3, %r14
// 296: 45 89 75 40                   movl    %r14d, 0x40(%r13)
// 29a: 49 8b 45 00                   movq    (%r13), %rax
// 29e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002a0:  R_X86_64_64  _JIT_TARGET
// 2a8: 89 c9                         movl    %ecx, %ecx
// 2aa: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2ae: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2b4: 48 83 c4 28                   addq    $0x28, %rsp
// 2b8: 5b                            popq    %rbx
// 2b9: 41 5c                         popq    %r12
// 2bb: 41 5d                         popq    %r13
// 2bd: 41 5e                         popq    %r14
// 2bf: 41 5f                         popq    %r15
// 2c1: 5d                            popq    %rbp
// 2c2: c3                            retq
// 2c3: 41 89 07                      movl    %eax, (%r15)
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2d0: ff d0                         callq   *%rax
// 2d2: 49 8b 04 24                   movq    (%r12), %rax
// 2d6: 48 85 c0                      testq   %rax, %rax
// 2d9: 0f 8f 6d ff ff ff             jg      0x24c <_JIT_ENTRY+0x24c>
// 2df: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e1:  R_X86_64_64  .rodata.str1.1
// 2e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002eb:  R_X86_64_64  _Py_NegativeRefcount
// 2f3: be 97 06 00 00                movl    $0x697, %esi            # imm = 0x697
// 2f8: 4c 89 e2                      movq    %r12, %rdx
// 2fb: ff d0                         callq   *%rax
// 2fd: 49 8b 04 24                   movq    (%r12), %rax
// 301: 85 c0                         testl   %eax, %eax
// 303: 78 21                         js      0x326 <_JIT_ENTRY+0x326>
// 305: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000307:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 30f: ff d0                         callq   *%rax
// 311: 49 ff 0c 24                   decq    (%r12)
// 315: 75 0f                         jne     0x326 <_JIT_ENTRY+0x326>
// 317: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000319:  R_X86_64_64  _Py_Dealloc
// 321: 4c 89 e7                      movq    %r12, %rdi
// 324: ff d0                         callq   *%rax
// 326: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000328:  R_X86_64_64  _JIT_OPARG
// 330: 89 c1                         movl    %eax, %ecx
// 332: f7 d1                         notl    %ecx
// 334: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 33a: 48 63 c9                      movslq  %ecx, %rcx
// 33d: 4d 89 7c ce f8                movq    %r15, -0x8(%r14,%rcx,8)
// 342: a8 01                         testb   $0x1, %al
// 344: 74 07                         je      0x34d <_JIT_ENTRY+0x34d>
// 346: 48 c7 03 00 00 00 00          movq    $0x0, (%rbx)
// 34d: 89 c1                         movl    %eax, %ecx
// 34f: 83 e1 01                      andl    $0x1, %ecx
// 352: f7 d0                         notl    %eax
// 354: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 359: 48 98                         cltq
// 35b: 48 01 c8                      addq    %rcx, %rax
// 35e: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 362: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000364:  R_X86_64_64  _JIT_CONTINUE
// 36c: 4c 89 ef                      movq    %r13, %rdi
// 36f: 48 89 ea                      movq    %rbp, %rdx
// 372: 48 83 c4 28                   addq    $0x28, %rsp
// 376: 5b                            popq    %rbx
// 377: 41 5c                         popq    %r12
// 379: 41 5d                         popq    %r13
// 37b: 41 5e                         popq    %r14
// 37d: 41 5f                         popq    %r15
// 37f: 5d                            popq    %rbp
// 380: ff e0                         jmpq    *%rax
// 382: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_ATTR_MODULE_code_body[899] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x21, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x10, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x3c, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xde, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x4b, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x1c, 0xce, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8e, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0xe9, 0x12, 0x01, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfb, 0x31, 0xdb, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x7c, 0x10, 0x28, 0x4d, 0x85, 0xff, 0x74, 0x54, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x0f, 0x85, 0x84, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x93, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xb1, 0x00, 0x00, 0x00, 0xe9, 0xcd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x4d, 0x85, 0xff, 0x0f, 0x85, 0xb5, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xeb, 0x2c, 0x49, 0x89, 0xde, 0x4d, 0x29, 0xee, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x75, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x6d, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x7c, 0xce, 0xf8, 0xa8, 0x01, 0x74, 0x07, 0x48, 0xc7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_ATTR_MODULE_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2e1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x307, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x319, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x364, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_ATTR_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_ATTR_MODULE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f8 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e7 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 cc 00 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// f2: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// f7: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// fc: 78 16                         js      0x114 <_JIT_ENTRY+0x114>
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 108: ff d0                         callq   *%rax
// 10a: 49 ff 0c 24                   decq    (%r12)
// 10e: 0f 84 b3 01 00 00             je      0x2c7 <_JIT_ENTRY+0x2c7>
// 114: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 118: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 11d: 48 85 d2                      testq   %rdx, %rdx
// 120: 0f 84 c2 01 00 00             je      0x2e8 <_JIT_ENTRY+0x2e8>
// 126: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12a: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 12e: 48 89 10                      movq    %rdx, (%rax)
// 131: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 0f 84 c9 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_HandlePending
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 0f 84 b2 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 157: 4c 89 e0                      movq    %r12, %rax
// 15a: e9 89 01 00 00                jmp     0x2e8 <_JIT_ENTRY+0x2e8>
// 15f: 49 29 fe                      subq    %rdi, %r14
// 162: 49 83 c6 b8                   addq    $-0x48, %r14
// 166: 49 c1 ee 03                   shrq    $0x3, %r14
// 16a: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 16e: 48 8b 07                      movq    (%rdi), %rax
// 171: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000173:  R_X86_64_64  _JIT_TARGET
// 17b: 89 c9                         movl    %ecx, %ecx
// 17d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 181: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 187: e9 6d 01 00 00                jmp     0x2f9 <_JIT_ENTRY+0x2f9>
// 18c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 190: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 196: 45 0f 43 fd                   cmovael %r13d, %r15d
// 19a: 31 db                         xorl    %ebx, %ebx
// 19c: eb 0e                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19e: 66 90                         nop
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 df                      cmpq    %rbx, %r15
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 98                         cltq
// 21c: 4d 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %r15
// 221: 49 8b 07                      movq    (%r15), %rax
// 224: 48 85 c0                      testq   %rax, %rax
// 227: 7f 21                         jg      0x24a <_JIT_ENTRY+0x24a>
// 229: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022b:  R_X86_64_64  .rodata.str1.1
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_NegativeRefcount
// 23d: be d9 09 00 00                movl    $0x9d9, %esi            # imm = 0x9D9
// 242: 4c 89 fa                      movq    %r15, %rdx
// 245: ff d0                         callq   *%rax
// 247: 49 8b 07                      movq    (%r15), %rax
// 24a: 85 c0                         testl   %eax, %eax
// 24c: 78 20                         js      0x26e <_JIT_ENTRY+0x26e>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 258: ff d0                         callq   *%rax
// 25a: 49 ff 0f                      decq    (%r15)
// 25d: 75 0f                         jne     0x26e <_JIT_ENTRY+0x26e>
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _Py_Dealloc
// 269: 4c 89 ff                      movq    %r15, %rdi
// 26c: ff d0                         callq   *%rax
// 26e: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000270:  R_X86_64_64  _JIT_OPERAND
// 278: 8b 03                         movl    (%rbx), %eax
// 27a: ff c0                         incl    %eax
// 27c: 74 0e                         je      0x28c <_JIT_ENTRY+0x28c>
// 27e: 89 03                         movl    %eax, (%rbx)
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 28a: ff d0                         callq   *%rax
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _JIT_OPARG
// 296: f7 d0                         notl    %eax
// 298: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 29d: 48 98                         cltq
// 29f: 49 89 5c c6 f8                movq    %rbx, -0x8(%r14,%rax,8)
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _JIT_CONTINUE
// 2ae: 4c 89 ef                      movq    %r13, %rdi
// 2b1: 4c 89 e6                      movq    %r12, %rsi
// 2b4: 48 89 ea                      movq    %rbp, %rdx
// 2b7: 48 83 c4 28                   addq    $0x28, %rsp
// 2bb: 5b                            popq    %rbx
// 2bc: 41 5c                         popq    %r12
// 2be: 41 5d                         popq    %r13
// 2c0: 41 5e                         popq    %r14
// 2c2: 41 5f                         popq    %r15
// 2c4: 5d                            popq    %rbp
// 2c5: ff e0                         jmpq    *%rax
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _Py_Dealloc
// 2d1: 4c 89 e7                      movq    %r12, %rdi
// 2d4: ff d0                         callq   *%rax
// 2d6: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 2da: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2df: 48 85 d2                      testq   %rdx, %rdx
// 2e2: 0f 85 3e fe ff ff             jne     0x126 <_JIT_ENTRY+0x126>
// 2e8: 4c 29 e8                      subq    %r13, %rax
// 2eb: 48 83 c0 b8                   addq    $-0x48, %rax
// 2ef: 48 c1 e8 03                   shrq    $0x3, %rax
// 2f3: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 2f7: 31 c0                         xorl    %eax, %eax
// 2f9: 48 83 c4 28                   addq    $0x28, %rsp
// 2fd: 5b                            popq    %rbx
// 2fe: 41 5c                         popq    %r12
// 300: 41 5d                         popq    %r13
// 302: 41 5e                         popq    %r14
// 304: 41 5f                         popq    %r15
// 306: 5d                            popq    %rbp
// 307: c3                            retq
// 308: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_body[777] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xb3, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xc2, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x89, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x6d, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x7c, 0xc6, 0xf8, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd9, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x5c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x85, 0x3e, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_holes[22] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f8 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e7 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 cc 00 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// f2: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// f7: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// fc: 78 16                         js      0x114 <_JIT_ENTRY+0x114>
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 108: ff d0                         callq   *%rax
// 10a: 49 ff 0c 24                   decq    (%r12)
// 10e: 0f 84 b3 01 00 00             je      0x2c7 <_JIT_ENTRY+0x2c7>
// 114: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 118: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 11d: 48 85 d2                      testq   %rdx, %rdx
// 120: 0f 84 c2 01 00 00             je      0x2e8 <_JIT_ENTRY+0x2e8>
// 126: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12a: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 12e: 48 89 10                      movq    %rdx, (%rax)
// 131: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 0f 84 c9 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_HandlePending
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 0f 84 b2 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 157: 4c 89 e0                      movq    %r12, %rax
// 15a: e9 89 01 00 00                jmp     0x2e8 <_JIT_ENTRY+0x2e8>
// 15f: 49 29 fe                      subq    %rdi, %r14
// 162: 49 83 c6 b8                   addq    $-0x48, %r14
// 166: 49 c1 ee 03                   shrq    $0x3, %r14
// 16a: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 16e: 48 8b 07                      movq    (%rdi), %rax
// 171: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000173:  R_X86_64_64  _JIT_TARGET
// 17b: 89 c9                         movl    %ecx, %ecx
// 17d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 181: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 187: e9 6d 01 00 00                jmp     0x2f9 <_JIT_ENTRY+0x2f9>
// 18c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 190: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 196: 45 0f 43 fd                   cmovael %r13d, %r15d
// 19a: 31 db                         xorl    %ebx, %ebx
// 19c: eb 0e                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19e: 66 90                         nop
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 df                      cmpq    %rbx, %r15
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 98                         cltq
// 21c: 4d 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %r15
// 221: 49 8b 07                      movq    (%r15), %rax
// 224: 48 85 c0                      testq   %rax, %rax
// 227: 7f 21                         jg      0x24a <_JIT_ENTRY+0x24a>
// 229: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022b:  R_X86_64_64  .rodata.str1.1
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_NegativeRefcount
// 23d: be c8 09 00 00                movl    $0x9c8, %esi            # imm = 0x9C8
// 242: 4c 89 fa                      movq    %r15, %rdx
// 245: ff d0                         callq   *%rax
// 247: 49 8b 07                      movq    (%r15), %rax
// 24a: 85 c0                         testl   %eax, %eax
// 24c: 78 20                         js      0x26e <_JIT_ENTRY+0x26e>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 258: ff d0                         callq   *%rax
// 25a: 49 ff 0f                      decq    (%r15)
// 25d: 75 0f                         jne     0x26e <_JIT_ENTRY+0x26e>
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _Py_Dealloc
// 269: 4c 89 ff                      movq    %r15, %rdi
// 26c: ff d0                         callq   *%rax
// 26e: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000270:  R_X86_64_64  _JIT_OPERAND
// 278: 8b 03                         movl    (%rbx), %eax
// 27a: ff c0                         incl    %eax
// 27c: 74 0e                         je      0x28c <_JIT_ENTRY+0x28c>
// 27e: 89 03                         movl    %eax, (%rbx)
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 28a: ff d0                         callq   *%rax
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _JIT_OPARG
// 296: f7 d0                         notl    %eax
// 298: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 29d: 48 98                         cltq
// 29f: 49 89 5c c6 f8                movq    %rbx, -0x8(%r14,%rax,8)
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _JIT_CONTINUE
// 2ae: 4c 89 ef                      movq    %r13, %rdi
// 2b1: 4c 89 e6                      movq    %r12, %rsi
// 2b4: 48 89 ea                      movq    %rbp, %rdx
// 2b7: 48 83 c4 28                   addq    $0x28, %rsp
// 2bb: 5b                            popq    %rbx
// 2bc: 41 5c                         popq    %r12
// 2be: 41 5d                         popq    %r13
// 2c0: 41 5e                         popq    %r14
// 2c2: 41 5f                         popq    %r15
// 2c4: 5d                            popq    %rbp
// 2c5: ff e0                         jmpq    *%rax
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _Py_Dealloc
// 2d1: 4c 89 e7                      movq    %r12, %rdi
// 2d4: ff d0                         callq   *%rax
// 2d6: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 2da: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2df: 48 85 d2                      testq   %rdx, %rdx
// 2e2: 0f 85 3e fe ff ff             jne     0x126 <_JIT_ENTRY+0x126>
// 2e8: 4c 29 e8                      subq    %r13, %rax
// 2eb: 48 83 c0 b8                   addq    $-0x48, %rax
// 2ef: 48 c1 e8 03                   shrq    $0x3, %rax
// 2f3: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 2f7: 31 c0                         xorl    %eax, %eax
// 2f9: 48 83 c4 28                   addq    $0x28, %rsp
// 2fd: 5b                            popq    %rbx
// 2fe: 41 5c                         popq    %r12
// 300: 41 5d                         popq    %r13
// 302: 41 5e                         popq    %r14
// 304: 41 5f                         popq    %r15
// 306: 5d                            popq    %rbp
// 307: c3                            retq
// 308: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_body[777] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xb3, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xc2, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x89, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x6d, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x7c, 0xc6, 0xf8, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc8, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x5c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x85, 0x3e, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_holes[22] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_ATTR_SLOT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_ATTR_SLOT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 fd                      movq    %rdi, %r13
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 04 02 00 00             je      0x26e <_JIT_ENTRY+0x26e>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 f3 01 00 00             je      0x26e <_JIT_ENTRY+0x26e>
// 7b: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 80: 4c 89 0c 24                   movq    %r9, (%rsp)
// 84: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 89: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 8e: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 41 0f 94 c7                   sete    %r15b
// 99: 89 da                         movl    %ebx, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 9f 00 00 00             je      0x163 <_JIT_ENTRY+0x163>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// d0: 7f 22                         jg      0xf4 <_JIT_ENTRY+0xf4>
// d2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d4:  R_X86_64_64  .rodata.str1.1
// dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000de:  R_X86_64_64  _Py_NegativeRefcount
// e6: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// eb: 4c 89 e2                      movq    %r12, %rdx
// ee: ff d0                         callq   *%rax
// f0: 49 8b 04 24                   movq    (%r12), %rax
// f4: 85 c0                         testl   %eax, %eax
// f6: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// fb: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 100: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 105: 78 16                         js      0x11d <_JIT_ENTRY+0x11d>
// 107: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000109:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 111: ff d0                         callq   *%rax
// 113: 49 ff 0c 24                   decq    (%r12)
// 117: 0f 84 1f 01 00 00             je      0x23c <_JIT_ENTRY+0x23c>
// 11d: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 121: 4d 85 ff                      testq   %r15, %r15
// 124: 0f 84 2e 01 00 00             je      0x258 <_JIT_ENTRY+0x258>
// 12a: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12e: 49 8d 1c ce                   leaq    (%r14,%rcx,8), %rbx
// 132: 4c 89 38                      movq    %r15, (%rax)
// 135: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 139: 48 8b 00                      movq    (%rax), %rax
// 13c: 84 c0                         testb   %al, %al
// 13e: 0f 84 a5 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_HandlePending
// 14e: 48 89 ef                      movq    %rbp, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 84 8e 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 15b: 48 89 d8                      movq    %rbx, %rax
// 15e: e9 f5 00 00 00                jmp     0x258 <_JIT_ENTRY+0x258>
// 163: 83 fb 02                      cmpl    $0x2, %ebx
// 166: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 16c: 44 0f 43 fb                   cmovael %ebx, %r15d
// 170: 31 db                         xorl    %ebx, %ebx
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 48 ff c3                      incq    %rbx
// 183: 49 39 df                      cmpq    %rbx, %r15
// 186: 0f 84 38 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 18c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 191: 49 8b 45 00                   movq    (%r13), %rax
// 195: 48 85 c0                      testq   %rax, %rax
// 198: 7e 06                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 78 e2                         js      0x180 <_JIT_ENTRY+0x180>
// 19e: eb 26                         jmp     0x1c6 <_JIT_ENTRY+0x1c6>
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 ea                      movq    %r13, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 45 00                   movq    (%r13), %rax
// 1c2: 85 c0                         testl   %eax, %eax
// 1c4: 78 ba                         js      0x180 <_JIT_ENTRY+0x180>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d0: ff d0                         callq   *%rax
// 1d2: 49 ff 4d 00                   decq    (%r13)
// 1d6: 75 a8                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d8: 4c 89 ef                      movq    %r13, %rdi
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_Dealloc
// 1e5: ff d0                         callq   *%rax
// 1e7: eb 97                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_OPARG
// 1f3: f7 d0                         notl    %eax
// 1f5: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1fa: 48 98                         cltq
// 1fc: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _JIT_OPERAND
// 20b: 0f b7 c0                      movzwl  %ax, %eax
// 20e: 4d 8b 3c 04                   movq    (%r12,%rax), %r15
// 212: 4d 85 ff                      testq   %r15, %r15
// 215: 74 54                         je      0x26b <_JIT_ENTRY+0x26b>
// 217: 41 8b 07                      movl    (%r15), %eax
// 21a: ff c0                         incl    %eax
// 21c: 0f 85 84 00 00 00             jne     0x2a6 <_JIT_ENTRY+0x2a6>
// 222: 49 8b 04 24                   movq    (%r12), %rax
// 226: 48 85 c0                      testq   %rax, %rax
// 229: 0f 8e 93 00 00 00             jle     0x2c2 <_JIT_ENTRY+0x2c2>
// 22f: 85 c0                         testl   %eax, %eax
// 231: 0f 89 b1 00 00 00             jns     0x2e8 <_JIT_ENTRY+0x2e8>
// 237: e9 cd 00 00 00                jmp     0x309 <_JIT_ENTRY+0x309>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_Dealloc
// 246: 4c 89 e7                      movq    %r12, %rdi
// 249: ff d0                         callq   *%rax
// 24b: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 24f: 4d 85 ff                      testq   %r15, %r15
// 252: 0f 85 d2 fe ff ff             jne     0x12a <_JIT_ENTRY+0x12a>
// 258: 4c 29 e8                      subq    %r13, %rax
// 25b: 48 83 c0 b8                   addq    $-0x48, %rax
// 25f: 48 c1 e8 03                   shrq    $0x3, %rax
// 263: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 267: 31 c0                         xorl    %eax, %eax
// 269: eb 2c                         jmp     0x297 <_JIT_ENTRY+0x297>
// 26b: 49 89 de                      movq    %rbx, %r14
// 26e: 4d 29 ee                      subq    %r13, %r14
// 271: 49 83 c6 b8                   addq    $-0x48, %r14
// 275: 49 c1 ee 03                   shrq    $0x3, %r14
// 279: 45 89 75 40                   movl    %r14d, 0x40(%r13)
// 27d: 49 8b 45 00                   movq    (%r13), %rax
// 281: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000283:  R_X86_64_64  _JIT_TARGET
// 28b: 89 c9                         movl    %ecx, %ecx
// 28d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 291: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 297: 48 83 c4 28                   addq    $0x28, %rsp
// 29b: 5b                            popq    %rbx
// 29c: 41 5c                         popq    %r12
// 29e: 41 5d                         popq    %r13
// 2a0: 41 5e                         popq    %r14
// 2a2: 41 5f                         popq    %r15
// 2a4: 5d                            popq    %rbp
// 2a5: c3                            retq
// 2a6: 41 89 07                      movl    %eax, (%r15)
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2b3: ff d0                         callq   *%rax
// 2b5: 49 8b 04 24                   movq    (%r12), %rax
// 2b9: 48 85 c0                      testq   %rax, %rax
// 2bc: 0f 8f 6d ff ff ff             jg      0x22f <_JIT_ENTRY+0x22f>
// 2c2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c4:  R_X86_64_64  .rodata.str1.1
// 2cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ce:  R_X86_64_64  _Py_NegativeRefcount
// 2d6: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 2db: 4c 89 e2                      movq    %r12, %rdx
// 2de: ff d0                         callq   *%rax
// 2e0: 49 8b 04 24                   movq    (%r12), %rax
// 2e4: 85 c0                         testl   %eax, %eax
// 2e6: 78 21                         js      0x309 <_JIT_ENTRY+0x309>
// 2e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ea:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f2: ff d0                         callq   *%rax
// 2f4: 49 ff 0c 24                   decq    (%r12)
// 2f8: 75 0f                         jne     0x309 <_JIT_ENTRY+0x309>
// 2fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fc:  R_X86_64_64  _Py_Dealloc
// 304: 4c 89 e7                      movq    %r12, %rdi
// 307: ff d0                         callq   *%rax
// 309: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030b:  R_X86_64_64  _JIT_OPARG
// 313: 89 c1                         movl    %eax, %ecx
// 315: f7 d1                         notl    %ecx
// 317: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 31d: 48 63 c9                      movslq  %ecx, %rcx
// 320: 4d 89 7c ce f8                movq    %r15, -0x8(%r14,%rcx,8)
// 325: a8 01                         testb   $0x1, %al
// 327: 74 07                         je      0x330 <_JIT_ENTRY+0x330>
// 329: 48 c7 03 00 00 00 00          movq    $0x0, (%rbx)
// 330: 89 c1                         movl    %eax, %ecx
// 332: 83 e1 01                      andl    $0x1, %ecx
// 335: f7 d0                         notl    %eax
// 337: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 33c: 48 98                         cltq
// 33e: 48 01 c8                      addq    %rcx, %rax
// 341: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 345: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000347:  R_X86_64_64  _JIT_CONTINUE
// 34f: 4c 89 ef                      movq    %r13, %rdi
// 352: 48 89 ea                      movq    %rbp, %rdx
// 355: 48 83 c4 28                   addq    $0x28, %rsp
// 359: 5b                            popq    %rbx
// 35a: 41 5c                         popq    %r12
// 35c: 41 5d                         popq    %r13
// 35e: 41 5e                         popq    %r14
// 360: 41 5f                         popq    %r15
// 362: 5d                            popq    %rbp
// 363: ff e0                         jmpq    *%rax
// 365: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_ATTR_SLOT_code_body[870] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x04, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xf3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x1f, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xde, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x2e, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x1c, 0xce, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8e, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0xe9, 0xf5, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfb, 0x31, 0xdb, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x3c, 0x04, 0x4d, 0x85, 0xff, 0x74, 0x54, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x0f, 0x85, 0x84, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x93, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xb1, 0x00, 0x00, 0x00, 0xe9, 0xcd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x4d, 0x85, 0xff, 0x0f, 0x85, 0xd2, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xeb, 0x2c, 0x49, 0x89, 0xde, 0x4d, 0x29, 0xee, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x75, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x6d, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x7c, 0xce, 0xf8, 0xa8, 0x01, 0x74, 0x07, 0x48, 0xc7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_ATTR_SLOT_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x347, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_ATTR_SLOT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_ATTR_SLOT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_ATTR_WITH_HINT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_ATTR_WITH_HINT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 fd                      movq    %rdi, %r13
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 9b 02 00 00             je      0x305 <_JIT_ENTRY+0x305>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 8a 02 00 00             je      0x305 <_JIT_ENTRY+0x305>
// 7b: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 80: 4c 89 0c 24                   movq    %r9, (%rsp)
// 84: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 89: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 8e: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 41 0f 94 c7                   sete    %r15b
// 99: 89 da                         movl    %ebx, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 9f 00 00 00             je      0x163 <_JIT_ENTRY+0x163>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// d0: 7f 22                         jg      0xf4 <_JIT_ENTRY+0xf4>
// d2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d4:  R_X86_64_64  .rodata.str1.1
// dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000de:  R_X86_64_64  _Py_NegativeRefcount
// e6: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// eb: 4c 89 e2                      movq    %r12, %rdx
// ee: ff d0                         callq   *%rax
// f0: 49 8b 04 24                   movq    (%r12), %rax
// f4: 85 c0                         testl   %eax, %eax
// f6: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// fb: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 100: 78 16                         js      0x118 <_JIT_ENTRY+0x118>
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10c: ff d0                         callq   *%rax
// 10e: 49 ff 0c 24                   decq    (%r12)
// 112: 0f 84 72 01 00 00             je      0x28a <_JIT_ENTRY+0x28a>
// 118: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 11c: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 121: 48 85 d2                      testq   %rdx, %rdx
// 124: 0f 84 81 01 00 00             je      0x2ab <_JIT_ENTRY+0x2ab>
// 12a: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12e: 4d 8d 3c ce                   leaq    (%r14,%rcx,8), %r15
// 132: 48 89 10                      movq    %rdx, (%rax)
// 135: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 139: 48 8b 00                      movq    (%rax), %rax
// 13c: 84 c0                         testb   %al, %al
// 13e: 0f 84 a5 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_HandlePending
// 14e: 48 89 ef                      movq    %rbp, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 84 8e 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 15b: 4c 89 f8                      movq    %r15, %rax
// 15e: e9 48 01 00 00                jmp     0x2ab <_JIT_ENTRY+0x2ab>
// 163: 83 fb 02                      cmpl    $0x2, %ebx
// 166: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 16c: 44 0f 43 fb                   cmovael %ebx, %r15d
// 170: 31 db                         xorl    %ebx, %ebx
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 48 ff c3                      incq    %rbx
// 183: 49 39 df                      cmpq    %rbx, %r15
// 186: 0f 84 38 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 18c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 191: 49 8b 45 00                   movq    (%r13), %rax
// 195: 48 85 c0                      testq   %rax, %rax
// 198: 7e 06                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 78 e2                         js      0x180 <_JIT_ENTRY+0x180>
// 19e: eb 26                         jmp     0x1c6 <_JIT_ENTRY+0x1c6>
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 ea                      movq    %r13, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 45 00                   movq    (%r13), %rax
// 1c2: 85 c0                         testl   %eax, %eax
// 1c4: 78 ba                         js      0x180 <_JIT_ENTRY+0x180>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d0: ff d0                         callq   *%rax
// 1d2: 49 ff 4d 00                   decq    (%r13)
// 1d6: 75 a8                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d8: 4c 89 ef                      movq    %r13, %rdi
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_Dealloc
// 1e5: ff d0                         callq   *%rax
// 1e7: eb 97                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_OPARG
// 1f3: f7 d0                         notl    %eax
// 1f5: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1fa: 48 98                         cltq
// 1fc: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 201: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 206: 48 8b 40 20                   movq    0x20(%rax), %rax
// 20a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020c:  R_X86_64_64  _JIT_OPERAND
// 214: 0f b7 c9                      movzwl  %cx, %ecx
// 217: 48 39 48 18                   cmpq    %rcx, 0x18(%rax)
// 21b: 0f 86 e1 00 00 00             jbe     0x302 <_JIT_ENTRY+0x302>
// 221: 49 8b 4d 00                   movq    (%r13), %rcx
// 225: 48 8b 51 20                   movq    0x20(%rcx), %rdx
// 229: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: 81 e6 fe ff 00 00             andl    $0xfffe, %esi           # imm = 0xFFFE
// 239: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 23d: bf 01 00 00 00                movl    $0x1, %edi
// 242: 48 d3 e7                      shlq    %cl, %rdi
// 245: 48 8b 4c b2 18                movq    0x18(%rdx,%rsi,4), %rcx
// 24a: 80 78 0a 00                   cmpb    $0x0, 0xa(%rax)
// 24e: 48 8d 44 38 20                leaq    0x20(%rax,%rdi), %rax
// 253: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000255:  R_X86_64_64  _JIT_OPERAND
// 25d: 0f b7 d2                      movzwl  %dx, %edx
// 260: 74 5c                         je      0x2be <_JIT_ENTRY+0x2be>
// 262: 48 c1 e2 04                   shlq    $0x4, %rdx
// 266: 48 39 0c 10                   cmpq    %rcx, (%rax,%rdx)
// 26a: 0f 85 92 00 00 00             jne     0x302 <_JIT_ENTRY+0x302>
// 270: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000272:  R_X86_64_64  _JIT_OPERAND
// 27a: 0f b7 c9                      movzwl  %cx, %ecx
// 27d: 48 c1 e1 04                   shlq    $0x4, %rcx
// 281: 48 01 c8                      addq    %rcx, %rax
// 284: 48 83 c0 08                   addq    $0x8, %rax
// 288: eb 58                         jmp     0x2e2 <_JIT_ENTRY+0x2e2>
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _Py_Dealloc
// 294: 4c 89 e7                      movq    %r12, %rdi
// 297: ff d0                         callq   *%rax
// 299: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 29d: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2a2: 48 85 d2                      testq   %rdx, %rdx
// 2a5: 0f 85 7f fe ff ff             jne     0x12a <_JIT_ENTRY+0x12a>
// 2ab: 4c 29 e8                      subq    %r13, %rax
// 2ae: 48 83 c0 b8                   addq    $-0x48, %rax
// 2b2: 48 c1 e8 03                   shrq    $0x3, %rax
// 2b6: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 2ba: 31 c0                         xorl    %eax, %eax
// 2bc: eb 70                         jmp     0x32e <_JIT_ENTRY+0x32e>
// 2be: 48 8d 14 52                   leaq    (%rdx,%rdx,2), %rdx
// 2c2: 48 39 4c d0 08                cmpq    %rcx, 0x8(%rax,%rdx,8)
// 2c7: 75 39                         jne     0x302 <_JIT_ENTRY+0x302>
// 2c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002cb:  R_X86_64_64  _JIT_OPERAND
// 2d3: 0f b7 c9                      movzwl  %cx, %ecx
// 2d6: 48 8d 0c 49                   leaq    (%rcx,%rcx,2), %rcx
// 2da: 48 8d 04 c8                   leaq    (%rax,%rcx,8), %rax
// 2de: 48 83 c0 10                   addq    $0x10, %rax
// 2e2: 48 8b 18                      movq    (%rax), %rbx
// 2e5: 48 85 db                      testq   %rbx, %rbx
// 2e8: 74 18                         je      0x302 <_JIT_ENTRY+0x302>
// 2ea: 8b 03                         movl    (%rbx), %eax
// 2ec: ff c0                         incl    %eax
// 2ee: 75 4d                         jne     0x33d <_JIT_ENTRY+0x33d>
// 2f0: 49 8b 04 24                   movq    (%r12), %rax
// 2f4: 48 85 c0                      testq   %rax, %rax
// 2f7: 7e 5b                         jle     0x354 <_JIT_ENTRY+0x354>
// 2f9: 85 c0                         testl   %eax, %eax
// 2fb: 79 7d                         jns     0x37a <_JIT_ENTRY+0x37a>
// 2fd: e9 99 00 00 00                jmp     0x39b <_JIT_ENTRY+0x39b>
// 302: 4d 89 fe                      movq    %r15, %r14
// 305: 4d 29 ee                      subq    %r13, %r14
// 308: 49 83 c6 b8                   addq    $-0x48, %r14
// 30c: 49 c1 ee 03                   shrq    $0x3, %r14
// 310: 45 89 75 40                   movl    %r14d, 0x40(%r13)
// 314: 49 8b 45 00                   movq    (%r13), %rax
// 318: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000031a:  R_X86_64_64  _JIT_TARGET
// 322: 89 c9                         movl    %ecx, %ecx
// 324: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 328: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 32e: 48 83 c4 28                   addq    $0x28, %rsp
// 332: 5b                            popq    %rbx
// 333: 41 5c                         popq    %r12
// 335: 41 5d                         popq    %r13
// 337: 41 5e                         popq    %r14
// 339: 41 5f                         popq    %r15
// 33b: 5d                            popq    %rbp
// 33c: c3                            retq
// 33d: 89 03                         movl    %eax, (%rbx)
// 33f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000341:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 349: ff d0                         callq   *%rax
// 34b: 49 8b 04 24                   movq    (%r12), %rax
// 34f: 48 85 c0                      testq   %rax, %rax
// 352: 7f a5                         jg      0x2f9 <_JIT_ENTRY+0x2f9>
// 354: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000356:  R_X86_64_64  .rodata.str1.1
// 35e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000360:  R_X86_64_64  _Py_NegativeRefcount
// 368: be c3 06 00 00                movl    $0x6c3, %esi            # imm = 0x6C3
// 36d: 4c 89 e2                      movq    %r12, %rdx
// 370: ff d0                         callq   *%rax
// 372: 49 8b 04 24                   movq    (%r12), %rax
// 376: 85 c0                         testl   %eax, %eax
// 378: 78 21                         js      0x39b <_JIT_ENTRY+0x39b>
// 37a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 384: ff d0                         callq   *%rax
// 386: 49 ff 0c 24                   decq    (%r12)
// 38a: 75 0f                         jne     0x39b <_JIT_ENTRY+0x39b>
// 38c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038e:  R_X86_64_64  _Py_Dealloc
// 396: 4c 89 e7                      movq    %r12, %rdi
// 399: ff d0                         callq   *%rax
// 39b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039d:  R_X86_64_64  _JIT_OPARG
// 3a5: 89 c1                         movl    %eax, %ecx
// 3a7: f7 d1                         notl    %ecx
// 3a9: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 3af: 48 63 c9                      movslq  %ecx, %rcx
// 3b2: 49 89 5c ce f8                movq    %rbx, -0x8(%r14,%rcx,8)
// 3b7: a8 01                         testb   $0x1, %al
// 3b9: 74 07                         je      0x3c2 <_JIT_ENTRY+0x3c2>
// 3bb: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// 3c2: 89 c1                         movl    %eax, %ecx
// 3c4: 83 e1 01                      andl    $0x1, %ecx
// 3c7: f7 d0                         notl    %eax
// 3c9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 3ce: 48 98                         cltq
// 3d0: 48 01 c8                      addq    %rcx, %rax
// 3d3: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 3d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d9:  R_X86_64_64  _JIT_CONTINUE
// 3e1: 4c 89 ef                      movq    %r13, %rdi
// 3e4: 48 89 ea                      movq    %rbp, %rdx
// 3e7: 48 83 c4 28                   addq    $0x28, %rsp
// 3eb: 5b                            popq    %rbx
// 3ec: 41 5c                         popq    %r12
// 3ee: 41 5d                         popq    %r13
// 3f0: 41 5e                         popq    %r14
// 3f2: 41 5f                         popq    %r15
// 3f4: 5d                            popq    %rbp
// 3f5: ff e0                         jmpq    *%rax
// 3f7: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_ATTR_WITH_HINT_code_body[1016] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x9b, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x8a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x72, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x81, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xce, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8e, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0xe9, 0x48, 0x01, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfb, 0x31, 0xdb, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x39, 0x48, 0x18, 0x0f, 0x86, 0xe1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x4d, 0x00, 0x48, 0x8b, 0x51, 0x20, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe6, 0xfe, 0xff, 0x00, 0x00, 0x0f, 0xb6, 0x48, 0x09, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe7, 0x48, 0x8b, 0x4c, 0xb2, 0x18, 0x80, 0x78, 0x0a, 0x00, 0x48, 0x8d, 0x44, 0x38, 0x20, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x74, 0x5c, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0x39, 0x0c, 0x10, 0x0f, 0x85, 0x92, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0x01, 0xc8, 0x48, 0x83, 0xc0, 0x08, 0xeb, 0x58, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x85, 0x7f, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xeb, 0x70, 0x48, 0x8d, 0x14, 0x52, 0x48, 0x39, 0x4c, 0xd0, 0x08, 0x75, 0x39, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x0c, 0x49, 0x48, 0x8d, 0x04, 0xc8, 0x48, 0x83, 0xc0, 0x10, 0x48, 0x8b, 0x18, 0x48, 0x85, 0xdb, 0x74, 0x18, 0x8b, 0x03, 0xff, 0xc0, 0x75, 0x4d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x5b, 0x85, 0xc0, 0x79, 0x7d, 0xe9, 0x99, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xfe, 0x4d, 0x29, 0xee, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x75, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa5, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x5c, 0xce, 0xf8, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_ATTR_WITH_HINT_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x341, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x356, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x360, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x37c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x38e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x39d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3d9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_ATTR_WITH_HINT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_ATTR_WITH_HINT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_BUILD_CLASS
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_BUILD_CLASS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 77 01 00 00             je      0x1de <_JIT_ENTRY+0x1de>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 66 01 00 00             je      0x1de <_JIT_ENTRY+0x1de>
// 78: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 7d: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 82: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 87: 48 89 7c 24 28                movq    %rdi, 0x28(%rsp)
// 8c: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 90: 48 85 c0                      testq   %rax, %rax
// 93: 41 0f 94 c6                   sete    %r14b
// 97: 89 da                         movl    %ebx, %edx
// 99: 4c 89 e7                      movq    %r12, %rdi
// 9c: 48 89 ee                      movq    %rbp, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: 41 ff d0                      callq   *%r8
// a4: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _JIT_OPARG
// b3: 66 85 c0                      testw   %ax, %ax
// b6: 0f 94 c0                      sete    %al
// b9: 41 84 c6                      testb   %al, %r14b
// bc: 0f 84 49 01 00 00             je      0x20b <_JIT_ENTRY+0x20b>
// c2: 49 8b 04 24                   movq    (%r12), %rax
// c6: 48 85 c0                      testq   %rax, %rax
// c9: 7f 22                         jg      0xed <_JIT_ENTRY+0xed>
// cb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cd:  R_X86_64_64  .rodata.str1.1
// d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d7:  R_X86_64_64  _Py_NegativeRefcount
// df: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e4: 4c 89 e2                      movq    %r12, %rdx
// e7: ff d0                         callq   *%rax
// e9: 49 8b 04 24                   movq    (%r12), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 4c 8b 74 24 28                movq    0x28(%rsp), %r14
// f4: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 49 ff 0c 24                   decq    (%r12)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 4c 89 e7                      movq    %r12, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 121: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 125: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 12a: 48 85 d2                      testq   %rdx, %rdx
// 12d: 0f 84 56 01 00 00             je      0x289 <_JIT_ENTRY+0x289>
// 133: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 138: 49 8d 1c cf                   leaq    (%r15,%rcx,8), %rbx
// 13c: 48 89 10                      movq    %rdx, (%rax)
// 13f: 49 8b 45 10                   movq    0x10(%r13), %rax
// 143: 48 8b 00                      movq    (%rax), %rax
// 146: 84 c0                         testb   %al, %al
// 148: 74 17                         je      0x161 <_JIT_ENTRY+0x161>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_HandlePending
// 154: 4c 89 ef                      movq    %r13, %rdi
// 157: ff d0                         callq   *%rax
// 159: 85 c0                         testl   %eax, %eax
// 15b: 0f 85 53 01 00 00             jne     0x2b4 <_JIT_ENTRY+0x2b4>
// 161: 49 8b 7e 20                   movq    0x20(%r14), %rdi
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  PyMapping_GetOptionalItem
// 16f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000171:  R_X86_64_64  _PyRuntime
// 179: 48 81 c6 40 a9 00 00          addq    $0xa940, %rsi           # imm = 0xA940
// 180: 48 8d 54 24 30                leaq    0x30(%rsp), %rdx
// 185: ff d0                         callq   *%rax
// 187: 85 c0                         testl   %eax, %eax
// 189: 0f 88 25 01 00 00             js      0x2b4 <_JIT_ENTRY+0x2b4>
// 18f: 48 8b 44 24 30                movq    0x30(%rsp), %rax
// 194: 48 85 c0                      testq   %rax, %rax
// 197: 0f 84 f1 00 00 00             je      0x28e <_JIT_ENTRY+0x28e>
// 19d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019f:  R_X86_64_64  _JIT_OPARG
// 1a7: f7 d1                         notl    %ecx
// 1a9: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 04 cf                   movq    %rax, (%r15,%rcx,8)
// 1b6: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// 1ba: 48 83 c6 08                   addq    $0x8, %rsi
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _JIT_CONTINUE
// 1c8: 4c 89 f7                      movq    %r14, %rdi
// 1cb: 4c 89 ea                      movq    %r13, %rdx
// 1ce: 48 83 c4 38                   addq    $0x38, %rsp
// 1d2: 5b                            popq    %rbx
// 1d3: 41 5c                         popq    %r12
// 1d5: 41 5d                         popq    %r13
// 1d7: 41 5e                         popq    %r14
// 1d9: 41 5f                         popq    %r15
// 1db: 5d                            popq    %rbp
// 1dc: ff e0                         jmpq    *%rax
// 1de: 49 29 ff                      subq    %rdi, %r15
// 1e1: 49 83 c7 b8                   addq    $-0x48, %r15
// 1e5: 49 c1 ef 03                   shrq    $0x3, %r15
// 1e9: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 1ed: 48 8b 07                      movq    (%rdi), %rax
// 1f0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f2:  R_X86_64_64  _JIT_TARGET
// 1fa: 89 c9                         movl    %ecx, %ecx
// 1fc: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 200: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 206: e9 ba 00 00 00                jmp     0x2c5 <_JIT_ENTRY+0x2c5>
// 20b: 83 fb 02                      cmpl    $0x2, %ebx
// 20e: 41 be 01 00 00 00             movl    $0x1, %r14d
// 214: 44 0f 43 f3                   cmovael %ebx, %r14d
// 218: 31 db                         xorl    %ebx, %ebx
// 21a: eb 10                         jmp     0x22c <_JIT_ENTRY+0x22c>
// 21c: 0f 1f 40 00                   nopl    (%rax)
// 220: 48 ff c3                      incq    %rbx
// 223: 49 39 de                      cmpq    %rbx, %r14
// 226: 0f 84 96 fe ff ff             je      0xc2 <_JIT_ENTRY+0xc2>
// 22c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 231: 49 8b 45 00                   movq    (%r13), %rax
// 235: 48 85 c0                      testq   %rax, %rax
// 238: 7e 06                         jle     0x240 <_JIT_ENTRY+0x240>
// 23a: 85 c0                         testl   %eax, %eax
// 23c: 78 e2                         js      0x220 <_JIT_ENTRY+0x220>
// 23e: eb 26                         jmp     0x266 <_JIT_ENTRY+0x266>
// 240: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000242:  R_X86_64_64  .rodata.str1.1
// 24a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 24f: 4c 89 ea                      movq    %r13, %rdx
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_NegativeRefcount
// 25c: ff d0                         callq   *%rax
// 25e: 49 8b 45 00                   movq    (%r13), %rax
// 262: 85 c0                         testl   %eax, %eax
// 264: 78 ba                         js      0x220 <_JIT_ENTRY+0x220>
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 270: ff d0                         callq   *%rax
// 272: 49 ff 4d 00                   decq    (%r13)
// 276: 75 a8                         jne     0x220 <_JIT_ENTRY+0x220>
// 278: 4c 89 ef                      movq    %r13, %rdi
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_Dealloc
// 285: ff d0                         callq   *%rax
// 287: eb 97                         jmp     0x220 <_JIT_ENTRY+0x220>
// 289: 48 89 c3                      movq    %rax, %rbx
// 28c: eb 26                         jmp     0x2b4 <_JIT_ENTRY+0x2b4>
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  PyExc_NameError
// 298: 48 8b 30                      movq    (%rax), %rsi
// 29b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000029d:  R_X86_64_64  .rodata.str1.1+0x39
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _PyErr_SetString
// 2af: 4c 89 ef                      movq    %r13, %rdi
// 2b2: ff d0                         callq   *%rax
// 2b4: 4c 29 f3                      subq    %r14, %rbx
// 2b7: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2bb: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2bf: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2c3: 31 c0                         xorl    %eax, %eax
// 2c5: 48 83 c4 38                   addq    $0x38, %rsp
// 2c9: 5b                            popq    %rbx
// 2ca: 41 5c                         popq    %r12
// 2cc: 41 5d                         popq    %r13
// 2ce: 41 5e                         popq    %r14
// 2d0: 41 5f                         popq    %r15
// 2d2: 5d                            popq    %rbp
// 2d3: c3                            retq
// 2d4: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_BUILD_CLASS_code_body[725] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x77, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x66, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x54, 0x24, 0x20, 0x48, 0x89, 0x7c, 0x24, 0x28, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0x49, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x28, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x56, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x8d, 0x1c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x53, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x7e, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc6, 0x40, 0xa9, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x30, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x25, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x30, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xf1, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xcf, 0x49, 0x8d, 0x34, 0xcf, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xba, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x96, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0x89, 0xc3, 0xeb, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_BUILD_CLASS_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__build_class__ not found\x00'
// 53: 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_BUILD_CLASS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x5f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_BUILD_CLASS_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_CONST
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_CONST.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 14 24                   movq    %r10, (%rsp)
// 79: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 7e: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 83: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 ea                      movl    %r13d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c8 00 00 00             jle     0x189 <_JIT_ENTRY+0x189>
// c1: 85 c0                         testl   %eax, %eax
// c3: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// c8: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// cd: 0f 89 e6 00 00 00             jns     0x1b9 <_JIT_ENTRY+0x1b9>
// d3: e9 02 01 00 00                jmp     0x1da <_JIT_ENTRY+0x1da>
// d8: 49 29 fe                      subq    %rdi, %r14
// db: 49 83 c6 b8                   addq    $-0x48, %r14
// df: 49 c1 ee 03                   shrq    $0x3, %r14
// e3: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 22 01 00 00                jmp     0x227 <_JIT_ENTRY+0x227>
// 105: 41 83 fd 02                   cmpl    $0x2, %r13d
// 109: bb 01 00 00 00                movl    $0x1, %ebx
// 10e: 41 0f 43 dd                   cmovael %r13d, %ebx
// 112: 45 31 ff                      xorl    %r15d, %r15d
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 49 ff c7                      incq    %r15
// 123: 4c 39 fb                      cmpq    %r15, %rbx
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 12d: 49 8b 45 00                   movq    (%r13), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 0a                         jle     0x140 <_JIT_ENTRY+0x140>
// 136: 85 c0                         testl   %eax, %eax
// 138: 78 e6                         js      0x120 <_JIT_ENTRY+0x120>
// 13a: eb 2a                         jmp     0x166 <_JIT_ENTRY+0x166>
// 13c: 0f 1f 40 00                   nopl    (%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 ea                      movq    %r13, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 78 ba                         js      0x120 <_JIT_ENTRY+0x120>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 4d 00                   decq    (%r13)
// 176: 75 a8                         jne     0x120 <_JIT_ENTRY+0x120>
// 178: 4c 89 ef                      movq    %r13, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: eb 97                         jmp     0x120 <_JIT_ENTRY+0x120>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 1b2: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b7: 78 21                         js      0x1da <_JIT_ENTRY+0x1da>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c3: ff d0                         callq   *%rax
// 1c5: 49 ff 0c 24                   decq    (%r12)
// 1c9: 75 0f                         jne     0x1da <_JIT_ENTRY+0x1da>
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _Py_Dealloc
// 1d5: 4c 89 e7                      movq    %r12, %rdi
// 1d8: ff d0                         callq   *%rax
// 1da: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 1de: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1e3: 48 85 c9                      testq   %rcx, %rcx
// 1e6: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 1eb: 74 29                         je      0x216 <_JIT_ENTRY+0x216>
// 1ed: 48 89 08                      movq    %rcx, (%rax)
// 1f0: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1f4: 48 8b 00                      movq    (%rax), %rax
// 1f7: 84 c0                         testb   %al, %al
// 1f9: 74 3b                         je      0x236 <_JIT_ENTRY+0x236>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_HandlePending
// 205: 4c 89 ef                      movq    %r13, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 85 c0                         testl   %eax, %eax
// 20c: 74 28                         je      0x236 <_JIT_ENTRY+0x236>
// 20e: 48 8b 04 24                   movq    (%rsp), %rax
// 212: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 216: 4c 29 f8                      subq    %r15, %rax
// 219: 48 83 c0 b8                   addq    $-0x48, %rax
// 21d: 48 c1 e8 03                   shrq    $0x3, %rax
// 221: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 225: 31 c0                         xorl    %eax, %eax
// 227: 48 83 c4 28                   addq    $0x28, %rsp
// 22b: 5b                            popq    %rbx
// 22c: 41 5c                         popq    %r12
// 22e: 41 5d                         popq    %r13
// 230: 41 5e                         popq    %r14
// 232: 41 5f                         popq    %r15
// 234: 5d                            popq    %rbp
// 235: c3                            retq
// 236: 49 8b 07                      movq    (%r15), %rax
// 239: 48 8b 40 18                   movq    0x18(%rax), %rax
// 23d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023f:  R_X86_64_64  _JIT_OPARG
// 247: 0f b7 c9                      movzwl  %cx, %ecx
// 24a: 48 8b 5c c8 18                movq    0x18(%rax,%rcx,8), %rbx
// 24f: 8b 03                         movl    (%rbx), %eax
// 251: ff c0                         incl    %eax
// 253: 74 0e                         je      0x263 <_JIT_ENTRY+0x263>
// 255: 89 03                         movl    %eax, (%rbx)
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 261: ff d0                         callq   *%rax
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _JIT_OPARG
// 26d: f7 d0                         notl    %eax
// 26f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 274: 48 98                         cltq
// 276: 49 89 1c c6                   movq    %rbx, (%r14,%rax,8)
// 27a: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 27e: 48 83 c6 08                   addq    $0x8, %rsi
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _JIT_CONTINUE
// 28c: 4c 89 ff                      movq    %r15, %rdi
// 28f: 4c 89 ea                      movq    %r13, %rdx
// 292: 48 83 c4 28                   addq    $0x28, %rsp
// 296: 5b                            popq    %rbx
// 297: 41 5c                         popq    %r12
// 299: 41 5d                         popq    %r13
// 29b: 41 5e                         popq    %r14
// 29d: 41 5f                         popq    %r15
// 29f: 5d                            popq    %rbp
// 2a0: ff e0                         jmpq    *%rax
// 2a2: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_CONST_code_body[675] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc8, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x89, 0xe6, 0x00, 0x00, 0x00, 0xe9, 0x02, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x22, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xff, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x74, 0x8c, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x85, 0xc0, 0x78, 0xe6, 0xeb, 0x2a, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x74, 0x29, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x28, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x07, 0x48, 0x8b, 0x40, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x5c, 0xc8, 0x18, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x1c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_CONST_code_holes[17] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_CONST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_CONST_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_DEREF
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_DEREF.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 61 01 00 00             je      0x1c8 <_JIT_ENTRY+0x1c8>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 50 01 00 00             je      0x1c8 <_JIT_ENTRY+0x1c8>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 41 0f 94 c6                   sete    %r14b
// 96: 89 da                         movl    %ebx, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 41 84 c6                      testb   %al, %r14b
// bb: 0f 84 34 01 00 00             je      0x1f5 <_JIT_ENTRY+0x1f5>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e3: 4c 89 e2                      movq    %r12, %rdx
// e6: ff d0                         callq   *%rax
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 85 c0                         testl   %eax, %eax
// ee: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// f3: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// f8: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// fd: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 102: 78 16                         js      0x11a <_JIT_ENTRY+0x11a>
// 104: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000106:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10e: ff d0                         callq   *%rax
// 110: 49 ff 0c 24                   decq    (%r12)
// 114: 0f 84 5f 01 00 00             je      0x279 <_JIT_ENTRY+0x279>
// 11a: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 11e: 4d 85 f6                      testq   %r14, %r14
// 121: 0f 84 6e 01 00 00             je      0x295 <_JIT_ENTRY+0x295>
// 127: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12b: 49 8d 1c cf                   leaq    (%r15,%rcx,8), %rbx
// 12f: 4c 89 30                      movq    %r14, (%rax)
// 132: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 136: 48 8b 00                      movq    (%rax), %rax
// 139: 84 c0                         testb   %al, %al
// 13b: 74 17                         je      0x154 <_JIT_ENTRY+0x154>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_HandlePending
// 147: 48 89 ef                      movq    %rbp, %rdi
// 14a: ff d0                         callq   *%rax
// 14c: 85 c0                         testl   %eax, %eax
// 14e: 0f 85 66 01 00 00             jne     0x2ba <_JIT_ENTRY+0x2ba>
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _JIT_OPARG
// 15e: 0f b7 c0                      movzwl  %ax, %eax
// 161: 49 8b 44 c5 48                movq    0x48(%r13,%rax,8), %rax
// 166: 4c 8b 70 10                   movq    0x10(%rax), %r14
// 16a: 4d 85 f6                      testq   %r14, %r14
// 16d: 0f 84 27 01 00 00             je      0x29a <_JIT_ENTRY+0x29a>
// 173: 41 8b 06                      movl    (%r14), %eax
// 176: ff c0                         incl    %eax
// 178: 74 0f                         je      0x189 <_JIT_ENTRY+0x189>
// 17a: 41 89 06                      movl    %eax, (%r14)
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 187: ff d0                         callq   *%rax
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _JIT_OPARG
// 193: f7 d0                         notl    %eax
// 195: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 19a: 48 98                         cltq
// 19c: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1a0: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 1a4: 48 83 c6 08                   addq    $0x8, %rsi
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _JIT_CONTINUE
// 1b2: 4c 89 ef                      movq    %r13, %rdi
// 1b5: 48 89 ea                      movq    %rbp, %rdx
// 1b8: 48 83 c4 28                   addq    $0x28, %rsp
// 1bc: 5b                            popq    %rbx
// 1bd: 41 5c                         popq    %r12
// 1bf: 41 5d                         popq    %r13
// 1c1: 41 5e                         popq    %r14
// 1c3: 41 5f                         popq    %r15
// 1c5: 5d                            popq    %rbp
// 1c6: ff e0                         jmpq    *%rax
// 1c8: 49 29 ff                      subq    %rdi, %r15
// 1cb: 49 83 c7 b8                   addq    $-0x48, %r15
// 1cf: 49 c1 ef 03                   shrq    $0x3, %r15
// 1d3: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 1d7: 48 8b 07                      movq    (%rdi), %rax
// 1da: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001dc:  R_X86_64_64  _JIT_TARGET
// 1e4: 89 c9                         movl    %ecx, %ecx
// 1e6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1ea: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f0: e9 d6 00 00 00                jmp     0x2cb <_JIT_ENTRY+0x2cb>
// 1f5: 83 fb 02                      cmpl    $0x2, %ebx
// 1f8: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1fe: 44 0f 43 f3                   cmovael %ebx, %r14d
// 202: 31 db                         xorl    %ebx, %ebx
// 204: eb 16                         jmp     0x21c <_JIT_ENTRY+0x21c>
// 206: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 210: 48 ff c3                      incq    %rbx
// 213: 49 39 de                      cmpq    %rbx, %r14
// 216: 0f 84 a5 fe ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 21c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 221: 49 8b 45 00                   movq    (%r13), %rax
// 225: 48 85 c0                      testq   %rax, %rax
// 228: 7e 06                         jle     0x230 <_JIT_ENTRY+0x230>
// 22a: 85 c0                         testl   %eax, %eax
// 22c: 78 e2                         js      0x210 <_JIT_ENTRY+0x210>
// 22e: eb 26                         jmp     0x256 <_JIT_ENTRY+0x256>
// 230: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000232:  R_X86_64_64  .rodata.str1.1
// 23a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 23f: 4c 89 ea                      movq    %r13, %rdx
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _Py_NegativeRefcount
// 24c: ff d0                         callq   *%rax
// 24e: 49 8b 45 00                   movq    (%r13), %rax
// 252: 85 c0                         testl   %eax, %eax
// 254: 78 ba                         js      0x210 <_JIT_ENTRY+0x210>
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 260: ff d0                         callq   *%rax
// 262: 49 ff 4d 00                   decq    (%r13)
// 266: 75 a8                         jne     0x210 <_JIT_ENTRY+0x210>
// 268: 4c 89 ef                      movq    %r13, %rdi
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _Py_Dealloc
// 275: ff d0                         callq   *%rax
// 277: eb 97                         jmp     0x210 <_JIT_ENTRY+0x210>
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_Dealloc
// 283: 4c 89 e7                      movq    %r12, %rdi
// 286: ff d0                         callq   *%rax
// 288: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 28c: 4d 85 f6                      testq   %r14, %r14
// 28f: 0f 85 92 fe ff ff             jne     0x127 <_JIT_ENTRY+0x127>
// 295: 48 89 c3                      movq    %rax, %rbx
// 298: eb 20                         jmp     0x2ba <_JIT_ENTRY+0x2ba>
// 29a: 49 8b 75 00                   movq    (%r13), %rsi
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  _JIT_OPARG
// 2a8: 0f b7 d0                      movzwl  %ax, %edx
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _PyEval_FormatExcUnbound
// 2b5: 48 89 ef                      movq    %rbp, %rdi
// 2b8: ff d0                         callq   *%rax
// 2ba: 4c 29 eb                      subq    %r13, %rbx
// 2bd: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2c1: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2c5: 41 89 5d 40                   movl    %ebx, 0x40(%r13)
// 2c9: 31 c0                         xorl    %eax, %eax
// 2cb: 48 83 c4 28                   addq    $0x28, %rsp
// 2cf: 5b                            popq    %rbx
// 2d0: 41 5c                         popq    %r12
// 2d2: 41 5d                         popq    %r13
// 2d4: 41 5e                         popq    %r14
// 2d6: 41 5f                         popq    %r15
// 2d8: 5d                            popq    %rbp
// 2d9: c3                            retq
// 2da: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_DEREF_code_body[731] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x61, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0x34, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x5f, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xdf, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x6e, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x1c, 0xcf, 0x4c, 0x89, 0x30, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x66, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x44, 0xc5, 0x48, 0x4c, 0x8b, 0x70, 0x10, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x27, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xd6, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x16, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0xa5, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x4d, 0x85, 0xf6, 0x0f, 0x85, 0x92, 0xfe, 0xff, 0xff, 0x48, 0x89, 0xc3, 0xeb, 0x20, 0x49, 0x8b, 0x75, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_DEREF_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_DEREF_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_FAST
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_FAST.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 79 01                   leal    0x1(%r9), %r15d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 f9                   cmovel  %r9d, %r15d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 14 24                   movq    %r10, (%rsp)
// 79: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 7e: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 83: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 fa                      movl    %r15d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c6 00 00 00             jle     0x187 <_JIT_ENTRY+0x187>
// c1: 85 c0                         testl   %eax, %eax
// c3: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// c8: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// cd: 0f 89 e4 00 00 00             jns     0x1b7 <_JIT_ENTRY+0x1b7>
// d3: e9 00 01 00 00                jmp     0x1d8 <_JIT_ENTRY+0x1d8>
// d8: 49 29 fe                      subq    %rdi, %r14
// db: 49 83 c6 b8                   addq    $-0x48, %r14
// df: 49 c1 ee 03                   shrq    $0x3, %r14
// e3: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 20 01 00 00                jmp     0x225 <_JIT_ENTRY+0x225>
// 105: 41 83 ff 02                   cmpl    $0x2, %r15d
// 109: bb 01 00 00 00                movl    $0x1, %ebx
// 10e: 41 0f 43 df                   cmovael %r15d, %ebx
// 112: 45 31 ed                      xorl    %r13d, %r13d
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 49 ff c5                      incq    %r13
// 123: 4c 39 eb                      cmpq    %r13, %rbx
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4e 8b 7c ed 00                movq    (%rbp,%r13,8), %r15
// 12d: 49 8b 07                      movq    (%r15), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7e 0b                         jle     0x140 <_JIT_ENTRY+0x140>
// 135: 85 c0                         testl   %eax, %eax
// 137: 78 e7                         js      0x120 <_JIT_ENTRY+0x120>
// 139: eb 2a                         jmp     0x165 <_JIT_ENTRY+0x165>
// 13b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 fa                      movq    %r15, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 07                      movq    (%r15), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 bb                         js      0x120 <_JIT_ENTRY+0x120>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0f                      decq    (%r15)
// 174: 75 aa                         jne     0x120 <_JIT_ENTRY+0x120>
// 176: 4c 89 ff                      movq    %r15, %rdi
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: ff d0                         callq   *%rax
// 185: eb 99                         jmp     0x120 <_JIT_ENTRY+0x120>
// 187: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000189:  R_X86_64_64  .rodata.str1.1
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _Py_NegativeRefcount
// 19b: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a0: 4c 89 e2                      movq    %r12, %rdx
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 8b 04 24                   movq    (%r12), %rax
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 1b0: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b5: 78 21                         js      0x1d8 <_JIT_ENTRY+0x1d8>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c1: ff d0                         callq   *%rax
// 1c3: 49 ff 0c 24                   decq    (%r12)
// 1c7: 75 0f                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_Dealloc
// 1d3: 4c 89 e7                      movq    %r12, %rdi
// 1d6: ff d0                         callq   *%rax
// 1d8: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 1dc: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1e1: 48 85 c9                      testq   %rcx, %rcx
// 1e4: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 1e9: 74 29                         je      0x214 <_JIT_ENTRY+0x214>
// 1eb: 48 89 08                      movq    %rcx, (%rax)
// 1ee: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1f2: 48 8b 00                      movq    (%rax), %rax
// 1f5: 84 c0                         testb   %al, %al
// 1f7: 74 3b                         je      0x234 <_JIT_ENTRY+0x234>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_HandlePending
// 203: 4c 89 ef                      movq    %r13, %rdi
// 206: ff d0                         callq   *%rax
// 208: 85 c0                         testl   %eax, %eax
// 20a: 74 28                         je      0x234 <_JIT_ENTRY+0x234>
// 20c: 48 8b 04 24                   movq    (%rsp), %rax
// 210: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 214: 4c 29 f8                      subq    %r15, %rax
// 217: 48 83 c0 b8                   addq    $-0x48, %rax
// 21b: 48 c1 e8 03                   shrq    $0x3, %rax
// 21f: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 223: 31 c0                         xorl    %eax, %eax
// 225: 48 83 c4 28                   addq    $0x28, %rsp
// 229: 5b                            popq    %rbx
// 22a: 41 5c                         popq    %r12
// 22c: 41 5d                         popq    %r13
// 22e: 41 5e                         popq    %r14
// 230: 41 5f                         popq    %r15
// 232: 5d                            popq    %rbp
// 233: c3                            retq
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _JIT_OPARG
// 23e: 0f b7 c0                      movzwl  %ax, %eax
// 241: 49 8b 5c c7 48                movq    0x48(%r15,%rax,8), %rbx
// 246: 8b 03                         movl    (%rbx), %eax
// 248: ff c0                         incl    %eax
// 24a: 74 0e                         je      0x25a <_JIT_ENTRY+0x25a>
// 24c: 89 03                         movl    %eax, (%rbx)
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 258: ff d0                         callq   *%rax
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  _JIT_OPARG
// 264: f7 d0                         notl    %eax
// 266: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 26b: 48 98                         cltq
// 26d: 49 89 1c c6                   movq    %rbx, (%r14,%rax,8)
// 271: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 275: 48 83 c6 08                   addq    $0x8, %rsi
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _JIT_CONTINUE
// 283: 4c 89 ff                      movq    %r15, %rdi
// 286: 4c 89 ea                      movq    %r13, %rdx
// 289: 48 83 c4 28                   addq    $0x28, %rsp
// 28d: 5b                            popq    %rbx
// 28e: 41 5c                         popq    %r12
// 290: 41 5d                         popq    %r13
// 292: 41 5e                         popq    %r14
// 294: 41 5f                         popq    %r15
// 296: 5d                            popq    %rbp
// 297: ff e0                         jmpq    *%rax
// 299: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_FAST_code_body[666] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x79, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x89, 0xe4, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x20, 0x01, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdf, 0x45, 0x31, 0xed, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xeb, 0x74, 0x8c, 0x4e, 0x8b, 0x7c, 0xed, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x0b, 0x85, 0xc0, 0x78, 0xe7, 0xeb, 0x2a, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x74, 0x29, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x28, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x5c, 0xc7, 0x48, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x1c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_FAST_code_holes[17] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_FAST_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_FAST_AND_CLEAR
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_FAST_AND_CLEAR.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 79 01                   leal    0x1(%r9), %r15d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 f9                   cmovel  %r9d, %r15d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 14 24                   movq    %r10, (%rsp)
// 79: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 7e: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 83: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 fa                      movl    %r15d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c6 00 00 00             jle     0x187 <_JIT_ENTRY+0x187>
// c1: 85 c0                         testl   %eax, %eax
// c3: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// c8: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// cd: 0f 89 e4 00 00 00             jns     0x1b7 <_JIT_ENTRY+0x1b7>
// d3: e9 00 01 00 00                jmp     0x1d8 <_JIT_ENTRY+0x1d8>
// d8: 49 29 fe                      subq    %rdi, %r14
// db: 49 83 c6 b8                   addq    $-0x48, %r14
// df: 49 c1 ee 03                   shrq    $0x3, %r14
// e3: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 1f 01 00 00                jmp     0x224 <_JIT_ENTRY+0x224>
// 105: 41 83 ff 02                   cmpl    $0x2, %r15d
// 109: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 10f: 45 0f 43 ef                   cmovael %r15d, %r13d
// 113: 31 db                         xorl    %ebx, %ebx
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 48 ff c3                      incq    %rbx
// 123: 49 39 dd                      cmpq    %rbx, %r13
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4c 8b 7c dd 00                movq    (%rbp,%rbx,8), %r15
// 12d: 49 8b 07                      movq    (%r15), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7e 0b                         jle     0x140 <_JIT_ENTRY+0x140>
// 135: 85 c0                         testl   %eax, %eax
// 137: 78 e7                         js      0x120 <_JIT_ENTRY+0x120>
// 139: eb 2a                         jmp     0x165 <_JIT_ENTRY+0x165>
// 13b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 fa                      movq    %r15, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 07                      movq    (%r15), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 bb                         js      0x120 <_JIT_ENTRY+0x120>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0f                      decq    (%r15)
// 174: 75 aa                         jne     0x120 <_JIT_ENTRY+0x120>
// 176: 4c 89 ff                      movq    %r15, %rdi
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: ff d0                         callq   *%rax
// 185: eb 99                         jmp     0x120 <_JIT_ENTRY+0x120>
// 187: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000189:  R_X86_64_64  .rodata.str1.1
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _Py_NegativeRefcount
// 19b: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a0: 4c 89 e2                      movq    %r12, %rdx
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 8b 04 24                   movq    (%r12), %rax
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 1b0: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 1b5: 78 21                         js      0x1d8 <_JIT_ENTRY+0x1d8>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c1: ff d0                         callq   *%rax
// 1c3: 49 ff 0c 24                   decq    (%r12)
// 1c7: 75 0f                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_Dealloc
// 1d3: 4c 89 e7                      movq    %r12, %rdi
// 1d6: ff d0                         callq   *%rax
// 1d8: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1dd: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1e1: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1e6: 48 85 c9                      testq   %rcx, %rcx
// 1e9: 74 29                         je      0x214 <_JIT_ENTRY+0x214>
// 1eb: 48 89 08                      movq    %rcx, (%rax)
// 1ee: 49 8b 47 10                   movq    0x10(%r15), %rax
// 1f2: 48 8b 00                      movq    (%rax), %rax
// 1f5: 84 c0                         testb   %al, %al
// 1f7: 74 3a                         je      0x233 <_JIT_ENTRY+0x233>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_HandlePending
// 203: 4c 89 ff                      movq    %r15, %rdi
// 206: ff d0                         callq   *%rax
// 208: 85 c0                         testl   %eax, %eax
// 20a: 74 27                         je      0x233 <_JIT_ENTRY+0x233>
// 20c: 48 8b 04 24                   movq    (%rsp), %rax
// 210: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 214: 48 29 d8                      subq    %rbx, %rax
// 217: 48 83 c0 b8                   addq    $-0x48, %rax
// 21b: 48 c1 e8 03                   shrq    $0x3, %rax
// 21f: 89 43 40                      movl    %eax, 0x40(%rbx)
// 222: 31 c0                         xorl    %eax, %eax
// 224: 48 83 c4 28                   addq    $0x28, %rsp
// 228: 5b                            popq    %rbx
// 229: 41 5c                         popq    %r12
// 22b: 41 5d                         popq    %r13
// 22d: 41 5e                         popq    %r14
// 22f: 41 5f                         popq    %r15
// 231: 5d                            popq    %rbp
// 232: c3                            retq
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _JIT_OPARG
// 23d: 0f b7 c8                      movzwl  %ax, %ecx
// 240: 48 8b 54 cb 48                movq    0x48(%rbx,%rcx,8), %rdx
// 245: 48 c7 44 cb 48 00 00 00 00    movq    $0x0, 0x48(%rbx,%rcx,8)
// 24e: f7 d0                         notl    %eax
// 250: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 255: 48 98                         cltq
// 257: 49 89 14 c6                   movq    %rdx, (%r14,%rax,8)
// 25b: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 25f: 48 83 c6 08                   addq    $0x8, %rsi
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _JIT_CONTINUE
// 26d: 48 89 df                      movq    %rbx, %rdi
// 270: 4c 89 fa                      movq    %r15, %rdx
// 273: 48 83 c4 28                   addq    $0x28, %rsp
// 277: 5b                            popq    %rbx
// 278: 41 5c                         popq    %r12
// 27a: 41 5d                         popq    %r13
// 27c: 41 5e                         popq    %r14
// 27e: 41 5f                         popq    %r15
// 280: 5d                            popq    %rbp
// 281: ff e0                         jmpq    *%rax
// 283: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_FAST_AND_CLEAR_code_body[644] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x79, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x0f, 0x89, 0xe4, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x1f, 0x01, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xef, 0x31, 0xdb, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x74, 0x8c, 0x4c, 0x8b, 0x7c, 0xdd, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x0b, 0x85, 0xc0, 0x78, 0xe7, 0xeb, 0x2a, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x29, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x27, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0x8b, 0x54, 0xcb, 0x48, 0x48, 0xc7, 0x44, 0xcb, 0x48, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x14, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_FAST_AND_CLEAR_code_holes[15] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_FAST_AND_CLEAR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_FAST_AND_CLEAR_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_FAST_CHECK
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_FAST_CHECK.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 5d 01 00 00             je      0x1c4 <_JIT_ENTRY+0x1c4>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 4c 01 00 00             je      0x1c4 <_JIT_ENTRY+0x1c4>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 41 0f 94 c6                   sete    %r14b
// 96: 89 da                         movl    %ebx, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 41 84 c6                      testb   %al, %r14b
// bb: 0f 84 30 01 00 00             je      0x1f1 <_JIT_ENTRY+0x1f1>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e3: 4c 89 e2                      movq    %r12, %rdx
// e6: ff d0                         callq   *%rax
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 85 c0                         testl   %eax, %eax
// ee: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// f3: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// f8: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// fd: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 102: 78 16                         js      0x11a <_JIT_ENTRY+0x11a>
// 104: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000106:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10e: ff d0                         callq   *%rax
// 110: 49 ff 0c 24                   decq    (%r12)
// 114: 0f 84 5f 01 00 00             je      0x279 <_JIT_ENTRY+0x279>
// 11a: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 11e: 4d 85 f6                      testq   %r14, %r14
// 121: 0f 84 6e 01 00 00             je      0x295 <_JIT_ENTRY+0x295>
// 127: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12b: 49 8d 1c cf                   leaq    (%r15,%rcx,8), %rbx
// 12f: 4c 89 30                      movq    %r14, (%rax)
// 132: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 136: 48 8b 00                      movq    (%rax), %rax
// 139: 84 c0                         testb   %al, %al
// 13b: 74 17                         je      0x154 <_JIT_ENTRY+0x154>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_HandlePending
// 147: 48 89 ef                      movq    %rbp, %rdi
// 14a: ff d0                         callq   *%rax
// 14c: 85 c0                         testl   %eax, %eax
// 14e: 0f 85 94 01 00 00             jne     0x2e8 <_JIT_ENTRY+0x2e8>
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _JIT_OPARG
// 15e: 0f b7 c0                      movzwl  %ax, %eax
// 161: 4d 8b 74 c5 48                movq    0x48(%r13,%rax,8), %r14
// 166: 4d 85 f6                      testq   %r14, %r14
// 169: 0f 84 2b 01 00 00             je      0x29a <_JIT_ENTRY+0x29a>
// 16f: 41 8b 06                      movl    (%r14), %eax
// 172: ff c0                         incl    %eax
// 174: 74 0f                         je      0x185 <_JIT_ENTRY+0x185>
// 176: 41 89 06                      movl    %eax, (%r14)
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 183: ff d0                         callq   *%rax
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _JIT_OPARG
// 18f: f7 d0                         notl    %eax
// 191: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 196: 48 98                         cltq
// 198: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 19c: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 1a0: 48 83 c6 08                   addq    $0x8, %rsi
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _JIT_CONTINUE
// 1ae: 4c 89 ef                      movq    %r13, %rdi
// 1b1: 48 89 ea                      movq    %rbp, %rdx
// 1b4: 48 83 c4 28                   addq    $0x28, %rsp
// 1b8: 5b                            popq    %rbx
// 1b9: 41 5c                         popq    %r12
// 1bb: 41 5d                         popq    %r13
// 1bd: 41 5e                         popq    %r14
// 1bf: 41 5f                         popq    %r15
// 1c1: 5d                            popq    %rbp
// 1c2: ff e0                         jmpq    *%rax
// 1c4: 49 29 ff                      subq    %rdi, %r15
// 1c7: 49 83 c7 b8                   addq    $-0x48, %r15
// 1cb: 49 c1 ef 03                   shrq    $0x3, %r15
// 1cf: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 1d3: 48 8b 07                      movq    (%rdi), %rax
// 1d6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d8:  R_X86_64_64  _JIT_TARGET
// 1e0: 89 c9                         movl    %ecx, %ecx
// 1e2: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1e6: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ec: e9 08 01 00 00                jmp     0x2f9 <_JIT_ENTRY+0x2f9>
// 1f1: 83 fb 02                      cmpl    $0x2, %ebx
// 1f4: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1fa: 44 0f 43 f3                   cmovael %ebx, %r14d
// 1fe: 31 db                         xorl    %ebx, %ebx
// 200: eb 1a                         jmp     0x21c <_JIT_ENTRY+0x21c>
// 202: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 210: 48 ff c3                      incq    %rbx
// 213: 49 39 de                      cmpq    %rbx, %r14
// 216: 0f 84 a5 fe ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 21c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 221: 49 8b 45 00                   movq    (%r13), %rax
// 225: 48 85 c0                      testq   %rax, %rax
// 228: 7e 06                         jle     0x230 <_JIT_ENTRY+0x230>
// 22a: 85 c0                         testl   %eax, %eax
// 22c: 78 e2                         js      0x210 <_JIT_ENTRY+0x210>
// 22e: eb 26                         jmp     0x256 <_JIT_ENTRY+0x256>
// 230: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000232:  R_X86_64_64  .rodata.str1.1
// 23a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 23f: 4c 89 ea                      movq    %r13, %rdx
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _Py_NegativeRefcount
// 24c: ff d0                         callq   *%rax
// 24e: 49 8b 45 00                   movq    (%r13), %rax
// 252: 85 c0                         testl   %eax, %eax
// 254: 78 ba                         js      0x210 <_JIT_ENTRY+0x210>
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 260: ff d0                         callq   *%rax
// 262: 49 ff 4d 00                   decq    (%r13)
// 266: 75 a8                         jne     0x210 <_JIT_ENTRY+0x210>
// 268: 4c 89 ef                      movq    %r13, %rdi
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _Py_Dealloc
// 275: ff d0                         callq   *%rax
// 277: eb 97                         jmp     0x210 <_JIT_ENTRY+0x210>
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_Dealloc
// 283: 4c 89 e7                      movq    %r12, %rdi
// 286: ff d0                         callq   *%rax
// 288: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 28c: 4d 85 f6                      testq   %r14, %r14
// 28f: 0f 85 92 fe ff ff             jne     0x127 <_JIT_ENTRY+0x127>
// 295: 48 89 c3                      movq    %rax, %rbx
// 298: eb 4e                         jmp     0x2e8 <_JIT_ENTRY+0x2e8>
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  PyExc_UnboundLocalError
// 2a4: 4c 8b 30                      movq    (%rax), %r14
// 2a7: 49 8b 45 00                   movq    (%r13), %rax
// 2ab: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _JIT_OPARG
// 2b9: 0f b7 f0                      movzwl  %ax, %esi
// 2bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002be:  R_X86_64_64  PyTuple_GetItem
// 2c6: ff d0                         callq   *%rax
// 2c8: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002ca:  R_X86_64_64  .rodata.str1.1+0x39
// 2d2: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002d4:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 2dc: 48 89 ef                      movq    %rbp, %rdi
// 2df: 4c 89 f6                      movq    %r14, %rsi
// 2e2: 48 89 c1                      movq    %rax, %rcx
// 2e5: 41 ff d0                      callq   *%r8
// 2e8: 4c 29 eb                      subq    %r13, %rbx
// 2eb: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2ef: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2f3: 41 89 5d 40                   movl    %ebx, 0x40(%r13)
// 2f7: 31 c0                         xorl    %eax, %eax
// 2f9: 48 83 c4 28                   addq    $0x28, %rsp
// 2fd: 5b                            popq    %rbx
// 2fe: 41 5c                         popq    %r12
// 300: 41 5d                         popq    %r13
// 302: 41 5e                         popq    %r14
// 304: 41 5f                         popq    %r15
// 306: 5d                            popq    %rbp
// 307: c3                            retq
// 308: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_FAST_CHECK_code_body[777] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x5d, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x4c, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0x30, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x5f, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xdf, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x6e, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x1c, 0xcf, 0x4c, 0x89, 0x30, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x94, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x74, 0xc5, 0x48, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x2b, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x08, 0x01, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x1a, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0xa5, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x4d, 0x85, 0xf6, 0x0f, 0x85, 0x92, 0xfe, 0xff, 0xff, 0x48, 0x89, 0xc3, 0xeb, 0x4e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x30, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0x4c, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_FAST_CHECK_code_holes[22] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot access local variable '%s' where it is not associated with a value\x00"
// 83: 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_FAST_CHECK_data_body[137] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_FAST_CHECK_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_FROM_DICT_OR_DEREF
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_FROM_DICT_OR_DEREF.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 cf 01 00 00             je      0x236 <_JIT_ENTRY+0x236>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 be 01 00 00             je      0x236 <_JIT_ENTRY+0x236>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 82: 48 89 54 24 28                movq    %rdx, 0x28(%rsp)
// 87: 48 89 7c 24 30                movq    %rdi, 0x30(%rsp)
// 8c: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 90: 48 85 c0                      testq   %rax, %rax
// 93: 0f 94 c3                      sete    %bl
// 96: 44 89 ea                      movl    %r13d, %edx
// 99: 4c 89 e7                      movq    %r12, %rdi
// 9c: 48 89 ee                      movq    %rbp, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: 41 ff d0                      callq   *%r8
// a4: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _JIT_OPARG
// b3: 66 85 c0                      testw   %ax, %ax
// b6: 0f 94 c0                      sete    %al
// b9: 84 c3                         testb   %al, %bl
// bb: 0f 84 a2 01 00 00             je      0x263 <_JIT_ENTRY+0x263>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e3: 4c 89 e2                      movq    %r12, %rdx
// e6: ff d0                         callq   *%rax
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 85 c0                         testl   %eax, %eax
// ee: 48 8b 5c 24 30                movq    0x30(%rsp), %rbx
// f3: 4c 8b 74 24 28                movq    0x28(%rsp), %r14
// f8: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 0c 24                   decq    (%r12)
// 10f: 0f 84 d4 01 00 00             je      0x2e9 <_JIT_ENTRY+0x2e9>
// 115: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 11a: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 11e: 4d 85 ed                      testq   %r13, %r13
// 121: 0f 84 e3 01 00 00             je      0x30a <_JIT_ENTRY+0x30a>
// 127: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 12c: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 130: 4c 89 28                      movq    %r13, (%rax)
// 133: 49 8b 46 10                   movq    0x10(%r14), %rax
// 137: 48 8b 00                      movq    (%rax), %rax
// 13a: 84 c0                         testb   %al, %al
// 13c: 74 17                         je      0x155 <_JIT_ENTRY+0x155>
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _Py_HandlePending
// 148: 4c 89 f7                      movq    %r14, %rdi
// 14b: ff d0                         callq   *%rax
// 14d: 85 c0                         testl   %eax, %eax
// 14f: 0f 85 b8 01 00 00             jne     0x30d <_JIT_ENTRY+0x30d>
// 155: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000157:  R_X86_64_64  _JIT_OPARG
// 15f: 0f b7 c8                      movzwl  %ax, %ecx
// 162: f7 d0                         notl    %eax
// 164: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 169: 48 98                         cltq
// 16b: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 170: 48 8b 03                      movq    (%rbx), %rax
// 173: 48 8b 40 60                   movq    0x60(%rax), %rax
// 177: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  PyMapping_GetOptionalItem
// 186: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 18b: 4c 89 ef                      movq    %r13, %rdi
// 18e: ff d0                         callq   *%rax
// 190: 85 c0                         testl   %eax, %eax
// 192: 0f 88 75 01 00 00             js      0x30d <_JIT_ENTRY+0x30d>
// 198: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 19e: 0f 84 89 01 00 00             je      0x32d <_JIT_ENTRY+0x32d>
// 1a4: 49 8b 45 00                   movq    (%r13), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 7f 22                         jg      0x1cf <_JIT_ENTRY+0x1cf>
// 1ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001af:  R_X86_64_64  .rodata.str1.1
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_NegativeRefcount
// 1c1: be dd 04 00 00                movl    $0x4dd, %esi            # imm = 0x4DD
// 1c6: 4c 89 ea                      movq    %r13, %rdx
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 8b 45 00                   movq    (%r13), %rax
// 1cf: 85 c0                         testl   %eax, %eax
// 1d1: 78 21                         js      0x1f4 <_JIT_ENTRY+0x1f4>
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1dd: ff d0                         callq   *%rax
// 1df: 49 ff 4d 00                   decq    (%r13)
// 1e3: 75 0f                         jne     0x1f4 <_JIT_ENTRY+0x1f4>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_Dealloc
// 1ef: 4c 89 ef                      movq    %r13, %rdi
// 1f2: ff d0                         callq   *%rax
// 1f4: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1f9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001fb:  R_X86_64_64  _JIT_OPARG
// 203: f7 d1                         notl    %ecx
// 205: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 20b: 48 63 c9                      movslq  %ecx, %rcx
// 20e: 49 89 44 cf f8                movq    %rax, -0x8(%r15,%rcx,8)
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _JIT_CONTINUE
// 21d: 48 89 df                      movq    %rbx, %rdi
// 220: 4c 89 e6                      movq    %r12, %rsi
// 223: 4c 89 f2                      movq    %r14, %rdx
// 226: 48 83 c4 38                   addq    $0x38, %rsp
// 22a: 5b                            popq    %rbx
// 22b: 41 5c                         popq    %r12
// 22d: 41 5d                         popq    %r13
// 22f: 41 5e                         popq    %r14
// 231: 41 5f                         popq    %r15
// 233: 5d                            popq    %rbp
// 234: ff e0                         jmpq    *%rax
// 236: 49 29 ff                      subq    %rdi, %r15
// 239: 49 83 c7 b8                   addq    $-0x48, %r15
// 23d: 49 c1 ef 03                   shrq    $0x3, %r15
// 241: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 245: 48 8b 07                      movq    (%rdi), %rax
// 248: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024a:  R_X86_64_64  _JIT_TARGET
// 252: 89 c9                         movl    %ecx, %ecx
// 254: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 258: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 25e: e9 bb 00 00 00                jmp     0x31e <_JIT_ENTRY+0x31e>
// 263: 41 83 fd 02                   cmpl    $0x2, %r13d
// 267: 41 be 01 00 00 00             movl    $0x1, %r14d
// 26d: 45 0f 43 f5                   cmovael %r13d, %r14d
// 271: 31 db                         xorl    %ebx, %ebx
// 273: eb 17                         jmp     0x28c <_JIT_ENTRY+0x28c>
// 275: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 280: 48 ff c3                      incq    %rbx
// 283: 49 39 de                      cmpq    %rbx, %r14
// 286: 0f 84 35 fe ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 28c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 291: 49 8b 45 00                   movq    (%r13), %rax
// 295: 48 85 c0                      testq   %rax, %rax
// 298: 7e 06                         jle     0x2a0 <_JIT_ENTRY+0x2a0>
// 29a: 85 c0                         testl   %eax, %eax
// 29c: 78 e2                         js      0x280 <_JIT_ENTRY+0x280>
// 29e: eb 26                         jmp     0x2c6 <_JIT_ENTRY+0x2c6>
// 2a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a2:  R_X86_64_64  .rodata.str1.1
// 2aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 2af: 4c 89 ea                      movq    %r13, %rdx
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_NegativeRefcount
// 2bc: ff d0                         callq   *%rax
// 2be: 49 8b 45 00                   movq    (%r13), %rax
// 2c2: 85 c0                         testl   %eax, %eax
// 2c4: 78 ba                         js      0x280 <_JIT_ENTRY+0x280>
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d0: ff d0                         callq   *%rax
// 2d2: 49 ff 4d 00                   decq    (%r13)
// 2d6: 75 a8                         jne     0x280 <_JIT_ENTRY+0x280>
// 2d8: 4c 89 ef                      movq    %r13, %rdi
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _Py_Dealloc
// 2e5: ff d0                         callq   *%rax
// 2e7: eb 97                         jmp     0x280 <_JIT_ENTRY+0x280>
// 2e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002eb:  R_X86_64_64  _Py_Dealloc
// 2f3: 4c 89 e7                      movq    %r12, %rdi
// 2f6: ff d0                         callq   *%rax
// 2f8: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 2fd: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 301: 4d 85 ed                      testq   %r13, %r13
// 304: 0f 85 1d fe ff ff             jne     0x127 <_JIT_ENTRY+0x127>
// 30a: 49 89 c4                      movq    %rax, %r12
// 30d: 49 29 dc                      subq    %rbx, %r12
// 310: 49 83 c4 b8                   addq    $-0x48, %r12
// 314: 49 c1 ec 03                   shrq    $0x3, %r12
// 318: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 31c: 31 c0                         xorl    %eax, %eax
// 31e: 48 83 c4 38                   addq    $0x38, %rsp
// 322: 5b                            popq    %rbx
// 323: 41 5c                         popq    %r12
// 325: 41 5d                         popq    %r13
// 327: 41 5e                         popq    %r14
// 329: 41 5f                         popq    %r15
// 32b: 5d                            popq    %rbp
// 32c: c3                            retq
// 32d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032f:  R_X86_64_64  _JIT_OPARG
// 337: 0f b7 c0                      movzwl  %ax, %eax
// 33a: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 33f: 48 8b 40 10                   movq    0x10(%rax), %rax
// 343: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 348: 48 85 c0                      testq   %rax, %rax
// 34b: 74 1d                         je      0x36a <_JIT_ENTRY+0x36a>
// 34d: 8b 08                         movl    (%rax), %ecx
// 34f: ff c1                         incl    %ecx
// 351: 0f 84 4d fe ff ff             je      0x1a4 <_JIT_ENTRY+0x1a4>
// 357: 89 08                         movl    %ecx, (%rax)
// 359: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 363: ff d0                         callq   *%rax
// 365: e9 3a fe ff ff                jmp     0x1a4 <_JIT_ENTRY+0x1a4>
// 36a: 48 8b 33                      movq    (%rbx), %rsi
// 36d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036f:  R_X86_64_64  _JIT_OPARG
// 377: 0f b7 d0                      movzwl  %ax, %edx
// 37a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037c:  R_X86_64_64  _PyEval_FormatExcUnbound
// 384: 4c 89 f7                      movq    %r14, %rdi
// 387: ff d0                         callq   *%rax
// 389: eb 82                         jmp     0x30d <_JIT_ENTRY+0x30d>
// 38b: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_FROM_DICT_OR_DEREF_code_body[908] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xcf, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xbe, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x28, 0x48, 0x89, 0x7c, 0x24, 0x30, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa2, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x4c, 0x8b, 0x74, 0x24, 0x28, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xd4, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xe3, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xb8, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x60, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x75, 0x01, 0x00, 0x00, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x84, 0x89, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x44, 0xcf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xbb, 0x00, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x17, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x35, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x85, 0x1d, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xc4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x1d, 0x8b, 0x08, 0xff, 0xc1, 0x0f, 0x84, 0x4d, 0xfe, 0xff, 0xff, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x3a, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0xeb, 0x82};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_FROM_DICT_OR_DEREF_code_holes[25] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x32f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x35b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x36f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x37c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_FROM_DICT_OR_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_FROM_DICT_OR_DEREF_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_FROM_DICT_OR_GLOBALS
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_FROM_DICT_OR_GLOBALS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 d5 01 00 00             je      0x23c <_JIT_ENTRY+0x23c>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 c4 01 00 00             je      0x23c <_JIT_ENTRY+0x23c>
// 78: 4c 89 4c 24 28                movq    %r9, 0x28(%rsp)
// 7d: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 82: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 87: 48 89 7c 24 30                movq    %rdi, 0x30(%rsp)
// 8c: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 90: 48 85 c0                      testq   %rax, %rax
// 93: 41 0f 94 c6                   sete    %r14b
// 97: 89 da                         movl    %ebx, %edx
// 99: 4c 89 e7                      movq    %r12, %rdi
// 9c: 48 89 ee                      movq    %rbp, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: 41 ff d0                      callq   *%r8
// a4: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _JIT_OPARG
// b3: 66 85 c0                      testw   %ax, %ax
// b6: 0f 94 c0                      sete    %al
// b9: 41 84 c6                      testb   %al, %r14b
// bc: 0f 84 a7 01 00 00             je      0x269 <_JIT_ENTRY+0x269>
// c2: 49 8b 04 24                   movq    (%r12), %rax
// c6: 48 85 c0                      testq   %rax, %rax
// c9: 7f 22                         jg      0xed <_JIT_ENTRY+0xed>
// cb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cd:  R_X86_64_64  .rodata.str1.1
// d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d7:  R_X86_64_64  _Py_NegativeRefcount
// df: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e4: 4c 89 e2                      movq    %r12, %rdx
// e7: ff d0                         callq   *%rax
// e9: 49 8b 04 24                   movq    (%r12), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 4c 8b 74 24 30                movq    0x30(%rsp), %r14
// f4: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// f9: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// fe: 78 16                         js      0x116 <_JIT_ENTRY+0x116>
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10a: ff d0                         callq   *%rax
// 10c: 49 ff 0c 24                   decq    (%r12)
// 110: 0f 84 d3 01 00 00             je      0x2e9 <_JIT_ENTRY+0x2e9>
// 116: 48 8b 44 24 28                movq    0x28(%rsp), %rax
// 11b: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 11f: 4d 85 ed                      testq   %r13, %r13
// 122: 0f 84 e2 01 00 00             je      0x30a <_JIT_ENTRY+0x30a>
// 128: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 12d: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 131: 4c 89 28                      movq    %r13, (%rax)
// 134: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 138: 48 8b 00                      movq    (%rax), %rax
// 13b: 84 c0                         testb   %al, %al
// 13d: 74 17                         je      0x156 <_JIT_ENTRY+0x156>
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  _Py_HandlePending
// 149: 48 89 df                      movq    %rbx, %rdi
// 14c: ff d0                         callq   *%rax
// 14e: 85 c0                         testl   %eax, %eax
// 150: 0f 85 b7 01 00 00             jne     0x30d <_JIT_ENTRY+0x30d>
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _JIT_OPARG
// 160: 0f b7 c8                      movzwl  %ax, %ecx
// 163: f7 d0                         notl    %eax
// 165: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 16a: 48 98                         cltq
// 16c: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 171: 49 8b 06                      movq    (%r14), %rax
// 174: 48 8b 40 20                   movq    0x20(%rax), %rax
// 178: 48 8b 6c c8 18                movq    0x18(%rax,%rcx,8), %rbp
// 17d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000017f:  R_X86_64_64  PyMapping_GetOptionalItem
// 187: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 18c: 4c 89 ef                      movq    %r13, %rdi
// 18f: 48 89 ee                      movq    %rbp, %rsi
// 192: ff d3                         callq   *%rbx
// 194: 85 c0                         testl   %eax, %eax
// 196: 0f 88 71 01 00 00             js      0x30d <_JIT_ENTRY+0x30d>
// 19c: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 1a2: 0f 84 85 01 00 00             je      0x32d <_JIT_ENTRY+0x32d>
// 1a8: 49 8b 45 00                   movq    (%r13), %rax
// 1ac: 48 85 c0                      testq   %rax, %rax
// 1af: 7f 22                         jg      0x1d3 <_JIT_ENTRY+0x1d3>
// 1b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b3:  R_X86_64_64  .rodata.str1.1
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _Py_NegativeRefcount
// 1c5: be 1b 04 00 00                movl    $0x41b, %esi            # imm = 0x41B
// 1ca: 4c 89 ea                      movq    %r13, %rdx
// 1cd: ff d0                         callq   *%rax
// 1cf: 49 8b 45 00                   movq    (%r13), %rax
// 1d3: 85 c0                         testl   %eax, %eax
// 1d5: 78 21                         js      0x1f8 <_JIT_ENTRY+0x1f8>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e1: ff d0                         callq   *%rax
// 1e3: 49 ff 4d 00                   decq    (%r13)
// 1e7: 75 0f                         jne     0x1f8 <_JIT_ENTRY+0x1f8>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _Py_Dealloc
// 1f3: 4c 89 ef                      movq    %r13, %rdi
// 1f6: ff d0                         callq   *%rax
// 1f8: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1fd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ff:  R_X86_64_64  _JIT_OPARG
// 207: f7 d1                         notl    %ecx
// 209: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 20f: 48 63 c9                      movslq  %ecx, %rcx
// 212: 49 89 44 cf f8                movq    %rax, -0x8(%r15,%rcx,8)
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _JIT_CONTINUE
// 221: 4c 89 f7                      movq    %r14, %rdi
// 224: 4c 89 e6                      movq    %r12, %rsi
// 227: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 22c: 48 83 c4 38                   addq    $0x38, %rsp
// 230: 5b                            popq    %rbx
// 231: 41 5c                         popq    %r12
// 233: 41 5d                         popq    %r13
// 235: 41 5e                         popq    %r14
// 237: 41 5f                         popq    %r15
// 239: 5d                            popq    %rbp
// 23a: ff e0                         jmpq    *%rax
// 23c: 49 29 ff                      subq    %rdi, %r15
// 23f: 49 83 c7 b8                   addq    $-0x48, %r15
// 243: 49 c1 ef 03                   shrq    $0x3, %r15
// 247: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 24b: 48 8b 07                      movq    (%rdi), %rax
// 24e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000250:  R_X86_64_64  _JIT_TARGET
// 258: 89 c9                         movl    %ecx, %ecx
// 25a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 25e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 264: e9 b5 00 00 00                jmp     0x31e <_JIT_ENTRY+0x31e>
// 269: 83 fb 02                      cmpl    $0x2, %ebx
// 26c: 41 be 01 00 00 00             movl    $0x1, %r14d
// 272: 44 0f 43 f3                   cmovael %ebx, %r14d
// 276: 31 db                         xorl    %ebx, %ebx
// 278: eb 12                         jmp     0x28c <_JIT_ENTRY+0x28c>
// 27a: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// 280: 48 ff c3                      incq    %rbx
// 283: 49 39 de                      cmpq    %rbx, %r14
// 286: 0f 84 36 fe ff ff             je      0xc2 <_JIT_ENTRY+0xc2>
// 28c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 291: 49 8b 45 00                   movq    (%r13), %rax
// 295: 48 85 c0                      testq   %rax, %rax
// 298: 7e 06                         jle     0x2a0 <_JIT_ENTRY+0x2a0>
// 29a: 85 c0                         testl   %eax, %eax
// 29c: 78 e2                         js      0x280 <_JIT_ENTRY+0x280>
// 29e: eb 26                         jmp     0x2c6 <_JIT_ENTRY+0x2c6>
// 2a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a2:  R_X86_64_64  .rodata.str1.1
// 2aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 2af: 4c 89 ea                      movq    %r13, %rdx
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_NegativeRefcount
// 2bc: ff d0                         callq   *%rax
// 2be: 49 8b 45 00                   movq    (%r13), %rax
// 2c2: 85 c0                         testl   %eax, %eax
// 2c4: 78 ba                         js      0x280 <_JIT_ENTRY+0x280>
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d0: ff d0                         callq   *%rax
// 2d2: 49 ff 4d 00                   decq    (%r13)
// 2d6: 75 a8                         jne     0x280 <_JIT_ENTRY+0x280>
// 2d8: 4c 89 ef                      movq    %r13, %rdi
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _Py_Dealloc
// 2e5: ff d0                         callq   *%rax
// 2e7: eb 97                         jmp     0x280 <_JIT_ENTRY+0x280>
// 2e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002eb:  R_X86_64_64  _Py_Dealloc
// 2f3: 4c 89 e7                      movq    %r12, %rdi
// 2f6: ff d0                         callq   *%rax
// 2f8: 48 8b 44 24 28                movq    0x28(%rsp), %rax
// 2fd: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 301: 4d 85 ed                      testq   %r13, %r13
// 304: 0f 85 1e fe ff ff             jne     0x128 <_JIT_ENTRY+0x128>
// 30a: 49 89 c4                      movq    %rax, %r12
// 30d: 4d 29 f4                      subq    %r14, %r12
// 310: 49 83 c4 b8                   addq    $-0x48, %r12
// 314: 49 c1 ec 03                   shrq    $0x3, %r12
// 318: 45 89 66 40                   movl    %r12d, 0x40(%r14)
// 31c: 31 c0                         xorl    %eax, %eax
// 31e: 48 83 c4 38                   addq    $0x38, %rsp
// 322: 5b                            popq    %rbx
// 323: 41 5c                         popq    %r12
// 325: 41 5d                         popq    %r13
// 327: 41 5e                         popq    %r14
// 329: 41 5f                         popq    %r15
// 32b: 5d                            popq    %rbp
// 32c: c3                            retq
// 32d: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// 331: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000333:  R_X86_64_64  PyDict_GetItemRef
// 33b: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 340: 48 89 ee                      movq    %rbp, %rsi
// 343: ff d0                         callq   *%rax
// 345: 85 c0                         testl   %eax, %eax
// 347: 78 c4                         js      0x30d <_JIT_ENTRY+0x30d>
// 349: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 34f: 0f 85 53 fe ff ff             jne     0x1a8 <_JIT_ENTRY+0x1a8>
// 355: 49 8b 7e 20                   movq    0x20(%r14), %rdi
// 359: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 35e: 48 89 ee                      movq    %rbp, %rsi
// 361: ff d3                         callq   *%rbx
// 363: 85 c0                         testl   %eax, %eax
// 365: 78 a6                         js      0x30d <_JIT_ENTRY+0x30d>
// 367: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 36d: 0f 85 35 fe ff ff             jne     0x1a8 <_JIT_ENTRY+0x1a8>
// 373: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000375:  R_X86_64_64  PyExc_NameError
// 37d: 48 8b 30                      movq    (%rax), %rsi
// 380: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000382:  R_X86_64_64  .rodata.str1.1+0x39
// 38a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038c:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 394: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 399: 48 89 e9                      movq    %rbp, %rcx
// 39c: ff d0                         callq   *%rax
// 39e: e9 6a ff ff ff                jmp     0x30d <_JIT_ENTRY+0x30d>
// 3a3: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_FROM_DICT_OR_GLOBALS_code_body[932] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xd5, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xc4, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x28, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x30, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xa7, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x30, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xd3, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x28, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xe2, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xb7, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x6c, 0xc8, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd3, 0x85, 0xc0, 0x0f, 0x88, 0x71, 0x01, 0x00, 0x00, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x84, 0x85, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x44, 0xcf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xb5, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x12, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x36, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x28, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x85, 0x1e, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xc4, 0x4d, 0x29, 0xf4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x66, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xc4, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x85, 0x53, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x7e, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x89, 0xee, 0xff, 0xd3, 0x85, 0xc0, 0x78, 0xa6, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x85, 0x35, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x89, 0xe9, 0xff, 0xd0, 0xe9, 0x6a, 0xff, 0xff, 0xff};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_FROM_DICT_OR_GLOBALS_code_holes[25] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x333, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x375, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x382, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x38c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_FROM_DICT_OR_GLOBALS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_FROM_DICT_OR_GLOBALS_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_GLOBAL
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_GLOBAL.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 be 01 00 00             je      0x225 <_JIT_ENTRY+0x225>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 ad 01 00 00             je      0x225 <_JIT_ENTRY+0x225>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 82: 48 89 54 24 28                movq    %rdx, 0x28(%rsp)
// 87: 48 89 7c 24 30                movq    %rdi, 0x30(%rsp)
// 8c: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 90: 48 85 c0                      testq   %rax, %rax
// 93: 41 0f 94 c6                   sete    %r14b
// 97: 89 da                         movl    %ebx, %edx
// 99: 4c 89 e7                      movq    %r12, %rdi
// 9c: 48 89 ee                      movq    %rbp, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: 41 ff d0                      callq   *%r8
// a4: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _JIT_OPARG
// b3: 66 85 c0                      testw   %ax, %ax
// b6: 0f 94 c0                      sete    %al
// b9: 41 84 c6                      testb   %al, %r14b
// bc: 0f 84 90 01 00 00             je      0x252 <_JIT_ENTRY+0x252>
// c2: 49 8b 04 24                   movq    (%r12), %rax
// c6: 48 85 c0                      testq   %rax, %rax
// c9: 7f 22                         jg      0xed <_JIT_ENTRY+0xed>
// cb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cd:  R_X86_64_64  .rodata.str1.1
// d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d7:  R_X86_64_64  _Py_NegativeRefcount
// df: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e4: 4c 89 e2                      movq    %r12, %rdx
// e7: ff d0                         callq   *%rax
// e9: 49 8b 04 24                   movq    (%r12), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 4c 8b 6c 24 30                movq    0x30(%rsp), %r13
// f4: 48 8b 6c 24 28                movq    0x28(%rsp), %rbp
// f9: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// fe: 78 16                         js      0x116 <_JIT_ENTRY+0x116>
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10a: ff d0                         callq   *%rax
// 10c: 49 ff 0c 24                   decq    (%r12)
// 110: 0f 84 c3 01 00 00             je      0x2d9 <_JIT_ENTRY+0x2d9>
// 116: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 11a: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 11f: 48 85 d2                      testq   %rdx, %rdx
// 122: 0f 84 d2 01 00 00             je      0x2fa <_JIT_ENTRY+0x2fa>
// 128: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 12d: 4d 8d 34 cf                   leaq    (%r15,%rcx,8), %r14
// 131: 48 89 10                      movq    %rdx, (%rax)
// 134: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 138: 48 8b 00                      movq    (%rax), %rax
// 13b: 84 c0                         testb   %al, %al
// 13d: 74 17                         je      0x156 <_JIT_ENTRY+0x156>
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  _Py_HandlePending
// 149: 48 89 ef                      movq    %rbp, %rdi
// 14c: ff d0                         callq   *%rax
// 14e: 85 c0                         testl   %eax, %eax
// 150: 0f 85 a7 01 00 00             jne     0x2fd <_JIT_ENTRY+0x2fd>
// 156: 49 8b 45 00                   movq    (%r13), %rax
// 15a: 49 8b 7d 18                   movq    0x18(%r13), %rdi
// 15e: 48 8b 40 20                   movq    0x20(%rax), %rax
// 162: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000164:  R_X86_64_64  _JIT_OPARG
// 16c: 81 e1 fe ff 00 00             andl    $0xfffe, %ecx           # imm = 0xFFFE
// 172: 4c 8b 64 88 18                movq    0x18(%rax,%rcx,4), %r12
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  PyDict_Type
// 181: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 185: 75 0e                         jne     0x195 <_JIT_ENTRY+0x195>
// 187: 49 8b 75 20                   movq    0x20(%r13), %rsi
// 18b: 48 39 46 08                   cmpq    %rax, 0x8(%rsi)
// 18f: 0f 84 aa 01 00 00             je      0x33f <_JIT_ENTRY+0x33f>
// 195: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000197:  R_X86_64_64  PyMapping_GetOptionalItem
// 19f: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1a4: 4c 89 e6                      movq    %r12, %rsi
// 1a7: ff d3                         callq   *%rbx
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 0f 88 4c 01 00 00             js      0x2fd <_JIT_ENTRY+0x2fd>
// 1b1: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1b6: 48 85 c0                      testq   %rax, %rax
// 1b9: 0f 84 5e 01 00 00             je      0x31d <_JIT_ENTRY+0x31d>
// 1bf: 49 89 06                      movq    %rax, (%r14)
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _JIT_OPARG
// 1cc: a8 01                         testb   $0x1, %al
// 1ce: 74 12                         je      0x1e2 <_JIT_ENTRY+0x1e2>
// 1d0: f7 d0                         notl    %eax
// 1d2: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1d7: 48 98                         cltq
// 1d9: 49 c7 44 c7 08 00 00 00 00    movq    $0x0, 0x8(%r15,%rax,8)
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _JIT_OPARG
// 1ec: 89 c1                         movl    %eax, %ecx
// 1ee: f7 d1                         notl    %ecx
// 1f0: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1f6: 48 63 c9                      movslq  %ecx, %rcx
// 1f9: 83 e0 01                      andl    $0x1, %eax
// 1fc: ff c0                         incl    %eax
// 1fe: 48 01 c8                      addq    %rcx, %rax
// 201: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _JIT_CONTINUE
// 20f: 4c 89 ef                      movq    %r13, %rdi
// 212: 48 89 ea                      movq    %rbp, %rdx
// 215: 48 83 c4 38                   addq    $0x38, %rsp
// 219: 5b                            popq    %rbx
// 21a: 41 5c                         popq    %r12
// 21c: 41 5d                         popq    %r13
// 21e: 41 5e                         popq    %r14
// 220: 41 5f                         popq    %r15
// 222: 5d                            popq    %rbp
// 223: ff e0                         jmpq    *%rax
// 225: 49 29 ff                      subq    %rdi, %r15
// 228: 49 83 c7 b8                   addq    $-0x48, %r15
// 22c: 49 c1 ef 03                   shrq    $0x3, %r15
// 230: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 234: 48 8b 07                      movq    (%rdi), %rax
// 237: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000239:  R_X86_64_64  _JIT_TARGET
// 241: 89 c9                         movl    %ecx, %ecx
// 243: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 247: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 24d: e9 bc 00 00 00                jmp     0x30e <_JIT_ENTRY+0x30e>
// 252: 83 fb 02                      cmpl    $0x2, %ebx
// 255: 41 be 01 00 00 00             movl    $0x1, %r14d
// 25b: 44 0f 43 f3                   cmovael %ebx, %r14d
// 25f: 31 db                         xorl    %ebx, %ebx
// 261: eb 19                         jmp     0x27c <_JIT_ENTRY+0x27c>
// 263: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 270: 48 ff c3                      incq    %rbx
// 273: 49 39 de                      cmpq    %rbx, %r14
// 276: 0f 84 46 fe ff ff             je      0xc2 <_JIT_ENTRY+0xc2>
// 27c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 281: 49 8b 45 00                   movq    (%r13), %rax
// 285: 48 85 c0                      testq   %rax, %rax
// 288: 7e 06                         jle     0x290 <_JIT_ENTRY+0x290>
// 28a: 85 c0                         testl   %eax, %eax
// 28c: 78 e2                         js      0x270 <_JIT_ENTRY+0x270>
// 28e: eb 26                         jmp     0x2b6 <_JIT_ENTRY+0x2b6>
// 290: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000292:  R_X86_64_64  .rodata.str1.1
// 29a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 29f: 4c 89 ea                      movq    %r13, %rdx
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _Py_NegativeRefcount
// 2ac: ff d0                         callq   *%rax
// 2ae: 49 8b 45 00                   movq    (%r13), %rax
// 2b2: 85 c0                         testl   %eax, %eax
// 2b4: 78 ba                         js      0x270 <_JIT_ENTRY+0x270>
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c0: ff d0                         callq   *%rax
// 2c2: 49 ff 4d 00                   decq    (%r13)
// 2c6: 75 a8                         jne     0x270 <_JIT_ENTRY+0x270>
// 2c8: 4c 89 ef                      movq    %r13, %rdi
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _Py_Dealloc
// 2d5: ff d0                         callq   *%rax
// 2d7: eb 97                         jmp     0x270 <_JIT_ENTRY+0x270>
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  _Py_Dealloc
// 2e3: 4c 89 e7                      movq    %r12, %rdi
// 2e6: ff d0                         callq   *%rax
// 2e8: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 2ec: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 2f1: 48 85 d2                      testq   %rdx, %rdx
// 2f4: 0f 85 2e fe ff ff             jne     0x128 <_JIT_ENTRY+0x128>
// 2fa: 49 89 c6                      movq    %rax, %r14
// 2fd: 4d 29 ee                      subq    %r13, %r14
// 300: 49 83 c6 b8                   addq    $-0x48, %r14
// 304: 49 c1 ee 03                   shrq    $0x3, %r14
// 308: 45 89 75 40                   movl    %r14d, 0x40(%r13)
// 30c: 31 c0                         xorl    %eax, %eax
// 30e: 48 83 c4 38                   addq    $0x38, %rsp
// 312: 5b                            popq    %rbx
// 313: 41 5c                         popq    %r12
// 315: 41 5d                         popq    %r13
// 317: 41 5e                         popq    %r14
// 319: 41 5f                         popq    %r15
// 31b: 5d                            popq    %rbp
// 31c: c3                            retq
// 31d: 49 8b 7d 20                   movq    0x20(%r13), %rdi
// 321: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 326: 4c 89 e6                      movq    %r12, %rsi
// 329: ff d3                         callq   *%rbx
// 32b: 85 c0                         testl   %eax, %eax
// 32d: 78 ce                         js      0x2fd <_JIT_ENTRY+0x2fd>
// 32f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 334: 48 85 c0                      testq   %rax, %rax
// 337: 0f 85 82 fe ff ff             jne     0x1bf <_JIT_ENTRY+0x1bf>
// 33d: eb 4f                         jmp     0x38e <_JIT_ENTRY+0x38e>
// 33f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000341:  R_X86_64_64  _PyDict_LoadGlobal
// 349: 4c 89 e2                      movq    %r12, %rdx
// 34c: ff d0                         callq   *%rax
// 34e: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 353: 48 85 c0                      testq   %rax, %rax
// 356: 74 22                         je      0x37a <_JIT_ENTRY+0x37a>
// 358: 8b 08                         movl    (%rax), %ecx
// 35a: ff c1                         incl    %ecx
// 35c: 0f 84 5d fe ff ff             je      0x1bf <_JIT_ENTRY+0x1bf>
// 362: 89 08                         movl    %ecx, (%rax)
// 364: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000366:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 36e: ff d0                         callq   *%rax
// 370: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 375: e9 45 fe ff ff                jmp     0x1bf <_JIT_ENTRY+0x1bf>
// 37a: 48 8b 45 68                   movq    0x68(%rbp), %rax
// 37e: 48 85 c0                      testq   %rax, %rax
// 381: 74 0b                         je      0x38e <_JIT_ENTRY+0x38e>
// 383: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 388: 0f 85 6f ff ff ff             jne     0x2fd <_JIT_ENTRY+0x2fd>
// 38e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000390:  R_X86_64_64  PyExc_NameError
// 398: 48 8b 30                      movq    (%rax), %rsi
// 39b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000039d:  R_X86_64_64  .rodata.str1.1+0x39
// 3a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a7:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 3af: 48 89 ef                      movq    %rbp, %rdi
// 3b2: 4c 89 e1                      movq    %r12, %rcx
// 3b5: ff d0                         callq   *%rax
// 3b7: e9 41 ff ff ff                jmp     0x2fd <_JIT_ENTRY+0x2fd>
// 3bc: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_GLOBAL_code_body[957] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xbe, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xad, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x28, 0x48, 0x89, 0x7c, 0x24, 0x30, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0x90, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x30, 0x48, 0x8b, 0x6c, 0x24, 0x28, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xc3, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xd2, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x34, 0xcf, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xa7, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8b, 0x7d, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfe, 0xff, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x88, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x75, 0x0e, 0x49, 0x8b, 0x75, 0x20, 0x48, 0x39, 0x46, 0x08, 0x0f, 0x84, 0xaa, 0x01, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd3, 0x85, 0xc0, 0x0f, 0x88, 0x4c, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x5e, 0x01, 0x00, 0x00, 0x49, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x12, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0xc7, 0x44, 0xc7, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xbc, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x46, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x0f, 0x85, 0x2e, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xc6, 0x4d, 0x29, 0xee, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x75, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x7d, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd3, 0x85, 0xc0, 0x78, 0xce, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x82, 0xfe, 0xff, 0xff, 0xeb, 0x4f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x22, 0x8b, 0x08, 0xff, 0xc1, 0x0f, 0x84, 0x5d, 0xfe, 0xff, 0xff, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0xe9, 0x45, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x45, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x0b, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x85, 0x6f, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0x41, 0xff, 0xff, 0xff};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_GLOBAL_code_holes[24] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x341, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_LoadGlobal, 0x0},
    {0x366, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x390, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x39d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x3a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_GLOBAL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_GLOBAL_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_GLOBAL_BUILTINS
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_GLOBAL_BUILTINS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 fd                      movq    %rdi, %r13
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 63 02 00 00             je      0x2cd <_JIT_ENTRY+0x2cd>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 52 02 00 00             je      0x2cd <_JIT_ENTRY+0x2cd>
// 7b: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 80: 4c 89 0c 24                   movq    %r9, (%rsp)
// 84: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 89: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 8e: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 41 0f 94 c7                   sete    %r15b
// 99: 89 da                         movl    %ebx, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 9f 00 00 00             je      0x163 <_JIT_ENTRY+0x163>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// d0: 7f 22                         jg      0xf4 <_JIT_ENTRY+0xf4>
// d2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d4:  R_X86_64_64  .rodata.str1.1
// dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000de:  R_X86_64_64  _Py_NegativeRefcount
// e6: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// eb: 4c 89 e2                      movq    %r12, %rdx
// ee: ff d0                         callq   *%rax
// f0: 49 8b 04 24                   movq    (%r12), %rax
// f4: 85 c0                         testl   %eax, %eax
// f6: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// fb: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 100: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 105: 78 16                         js      0x11d <_JIT_ENTRY+0x11d>
// 107: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000109:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 111: ff d0                         callq   *%rax
// 113: 49 ff 0c 24                   decq    (%r12)
// 117: 0f 84 7e 01 00 00             je      0x29b <_JIT_ENTRY+0x29b>
// 11d: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 121: 4d 85 ff                      testq   %r15, %r15
// 124: 0f 84 8d 01 00 00             je      0x2b7 <_JIT_ENTRY+0x2b7>
// 12a: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12e: 49 8d 1c ce                   leaq    (%r14,%rcx,8), %rbx
// 132: 4c 89 38                      movq    %r15, (%rax)
// 135: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 139: 48 8b 00                      movq    (%rax), %rax
// 13c: 84 c0                         testb   %al, %al
// 13e: 0f 84 a5 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_HandlePending
// 14e: 48 89 ef                      movq    %rbp, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 84 8e 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 15b: 48 89 d8                      movq    %rbx, %rax
// 15e: e9 54 01 00 00                jmp     0x2b7 <_JIT_ENTRY+0x2b7>
// 163: 83 fb 02                      cmpl    $0x2, %ebx
// 166: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 16c: 44 0f 43 fb                   cmovael %ebx, %r15d
// 170: 31 db                         xorl    %ebx, %ebx
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 48 ff c3                      incq    %rbx
// 183: 49 39 df                      cmpq    %rbx, %r15
// 186: 0f 84 38 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 18c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 191: 49 8b 45 00                   movq    (%r13), %rax
// 195: 48 85 c0                      testq   %rax, %rax
// 198: 7e 06                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 78 e2                         js      0x180 <_JIT_ENTRY+0x180>
// 19e: eb 26                         jmp     0x1c6 <_JIT_ENTRY+0x1c6>
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 ea                      movq    %r13, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 45 00                   movq    (%r13), %rax
// 1c2: 85 c0                         testl   %eax, %eax
// 1c4: 78 ba                         js      0x180 <_JIT_ENTRY+0x180>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d0: ff d0                         callq   *%rax
// 1d2: 49 ff 4d 00                   decq    (%r13)
// 1d6: 75 a8                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d8: 4c 89 ef                      movq    %r13, %rdi
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_Dealloc
// 1e5: ff d0                         callq   *%rax
// 1e7: eb 97                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e9: 49 8b 45 20                   movq    0x20(%r13), %rax
// 1ed: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1f1: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 1f5: ba 01 00 00 00                movl    $0x1, %edx
// 1fa: 48 d3 e2                      shlq    %cl, %rdx
// 1fd: 48 01 c2                      addq    %rax, %rdx
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _JIT_OPERAND
// 20a: 0f b7 c0                      movzwl  %ax, %eax
// 20d: 48 c1 e0 04                   shlq    $0x4, %rax
// 211: 4c 8b 7c 10 28                movq    0x28(%rax,%rdx), %r15
// 216: 4d 85 ff                      testq   %r15, %r15
// 219: 0f 84 ab 00 00 00             je      0x2ca <_JIT_ENTRY+0x2ca>
// 21f: 41 8b 07                      movl    (%r15), %eax
// 222: ff c0                         incl    %eax
// 224: 74 0f                         je      0x235 <_JIT_ENTRY+0x235>
// 226: 41 89 07                      movl    %eax, (%r15)
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 233: ff d0                         callq   *%rax
// 235: 4c 89 3b                      movq    %r15, (%rbx)
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _JIT_OPARG
// 242: a8 01                         testb   $0x1, %al
// 244: 74 12                         je      0x258 <_JIT_ENTRY+0x258>
// 246: f7 d0                         notl    %eax
// 248: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24d: 48 98                         cltq
// 24f: 49 c7 44 c6 08 00 00 00 00    movq    $0x0, 0x8(%r14,%rax,8)
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _JIT_OPARG
// 262: 89 c1                         movl    %eax, %ecx
// 264: f7 d1                         notl    %ecx
// 266: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 26c: 48 63 c9                      movslq  %ecx, %rcx
// 26f: 83 e0 01                      andl    $0x1, %eax
// 272: ff c0                         incl    %eax
// 274: 48 01 c8                      addq    %rcx, %rax
// 277: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _JIT_CONTINUE
// 285: 4c 89 ef                      movq    %r13, %rdi
// 288: 48 89 ea                      movq    %rbp, %rdx
// 28b: 48 83 c4 28                   addq    $0x28, %rsp
// 28f: 5b                            popq    %rbx
// 290: 41 5c                         popq    %r12
// 292: 41 5d                         popq    %r13
// 294: 41 5e                         popq    %r14
// 296: 41 5f                         popq    %r15
// 298: 5d                            popq    %rbp
// 299: ff e0                         jmpq    *%rax
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_Dealloc
// 2a5: 4c 89 e7                      movq    %r12, %rdi
// 2a8: ff d0                         callq   *%rax
// 2aa: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 2ae: 4d 85 ff                      testq   %r15, %r15
// 2b1: 0f 85 73 fe ff ff             jne     0x12a <_JIT_ENTRY+0x12a>
// 2b7: 4c 29 e8                      subq    %r13, %rax
// 2ba: 48 83 c0 b8                   addq    $-0x48, %rax
// 2be: 48 c1 e8 03                   shrq    $0x3, %rax
// 2c2: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 2c6: 31 c0                         xorl    %eax, %eax
// 2c8: eb 2c                         jmp     0x2f6 <_JIT_ENTRY+0x2f6>
// 2ca: 49 89 de                      movq    %rbx, %r14
// 2cd: 4d 29 ee                      subq    %r13, %r14
// 2d0: 49 83 c6 b8                   addq    $-0x48, %r14
// 2d4: 49 c1 ee 03                   shrq    $0x3, %r14
// 2d8: 45 89 75 40                   movl    %r14d, 0x40(%r13)
// 2dc: 49 8b 45 00                   movq    (%r13), %rax
// 2e0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002e2:  R_X86_64_64  _JIT_TARGET
// 2ea: 89 c9                         movl    %ecx, %ecx
// 2ec: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2f0: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2f6: 48 83 c4 28                   addq    $0x28, %rsp
// 2fa: 5b                            popq    %rbx
// 2fb: 41 5c                         popq    %r12
// 2fd: 41 5d                         popq    %r13
// 2ff: 41 5e                         popq    %r14
// 301: 41 5f                         popq    %r15
// 303: 5d                            popq    %rbp
// 304: c3                            retq
// 305: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_GLOBAL_BUILTINS_code_body[774] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x63, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x52, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x7e, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xde, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x8d, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x1c, 0xce, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8e, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0xe9, 0x54, 0x01, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfb, 0x31, 0xdb, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x8b, 0x45, 0x20, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x7c, 0x10, 0x28, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0xab, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x12, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0xc7, 0x44, 0xc6, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x4d, 0x85, 0xff, 0x0f, 0x85, 0x73, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xeb, 0x2c, 0x49, 0x89, 0xde, 0x4d, 0x29, 0xee, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x75, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_GLOBAL_BUILTINS_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_GLOBAL_BUILTINS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_GLOBAL_BUILTINS_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_GLOBAL_MODULE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_GLOBAL_MODULE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 fd                      movq    %rdi, %r13
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 63 02 00 00             je      0x2cd <_JIT_ENTRY+0x2cd>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 52 02 00 00             je      0x2cd <_JIT_ENTRY+0x2cd>
// 7b: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 80: 4c 89 0c 24                   movq    %r9, (%rsp)
// 84: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 89: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 8e: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 41 0f 94 c7                   sete    %r15b
// 99: 89 da                         movl    %ebx, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 9f 00 00 00             je      0x163 <_JIT_ENTRY+0x163>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// d0: 7f 22                         jg      0xf4 <_JIT_ENTRY+0xf4>
// d2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d4:  R_X86_64_64  .rodata.str1.1
// dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000de:  R_X86_64_64  _Py_NegativeRefcount
// e6: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// eb: 4c 89 e2                      movq    %r12, %rdx
// ee: ff d0                         callq   *%rax
// f0: 49 8b 04 24                   movq    (%r12), %rax
// f4: 85 c0                         testl   %eax, %eax
// f6: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// fb: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 100: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 105: 78 16                         js      0x11d <_JIT_ENTRY+0x11d>
// 107: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000109:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 111: ff d0                         callq   *%rax
// 113: 49 ff 0c 24                   decq    (%r12)
// 117: 0f 84 7e 01 00 00             je      0x29b <_JIT_ENTRY+0x29b>
// 11d: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 121: 4d 85 ff                      testq   %r15, %r15
// 124: 0f 84 8d 01 00 00             je      0x2b7 <_JIT_ENTRY+0x2b7>
// 12a: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12e: 49 8d 1c ce                   leaq    (%r14,%rcx,8), %rbx
// 132: 4c 89 38                      movq    %r15, (%rax)
// 135: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 139: 48 8b 00                      movq    (%rax), %rax
// 13c: 84 c0                         testb   %al, %al
// 13e: 0f 84 a5 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_HandlePending
// 14e: 48 89 ef                      movq    %rbp, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 84 8e 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 15b: 48 89 d8                      movq    %rbx, %rax
// 15e: e9 54 01 00 00                jmp     0x2b7 <_JIT_ENTRY+0x2b7>
// 163: 83 fb 02                      cmpl    $0x2, %ebx
// 166: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 16c: 44 0f 43 fb                   cmovael %ebx, %r15d
// 170: 31 db                         xorl    %ebx, %ebx
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 48 ff c3                      incq    %rbx
// 183: 49 39 df                      cmpq    %rbx, %r15
// 186: 0f 84 38 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 18c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 191: 49 8b 45 00                   movq    (%r13), %rax
// 195: 48 85 c0                      testq   %rax, %rax
// 198: 7e 06                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 78 e2                         js      0x180 <_JIT_ENTRY+0x180>
// 19e: eb 26                         jmp     0x1c6 <_JIT_ENTRY+0x1c6>
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 ea                      movq    %r13, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 45 00                   movq    (%r13), %rax
// 1c2: 85 c0                         testl   %eax, %eax
// 1c4: 78 ba                         js      0x180 <_JIT_ENTRY+0x180>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d0: ff d0                         callq   *%rax
// 1d2: 49 ff 4d 00                   decq    (%r13)
// 1d6: 75 a8                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d8: 4c 89 ef                      movq    %r13, %rdi
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_Dealloc
// 1e5: ff d0                         callq   *%rax
// 1e7: eb 97                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e9: 49 8b 45 18                   movq    0x18(%r13), %rax
// 1ed: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1f1: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 1f5: ba 01 00 00 00                movl    $0x1, %edx
// 1fa: 48 d3 e2                      shlq    %cl, %rdx
// 1fd: 48 01 c2                      addq    %rax, %rdx
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _JIT_OPERAND
// 20a: 0f b7 c0                      movzwl  %ax, %eax
// 20d: 48 c1 e0 04                   shlq    $0x4, %rax
// 211: 4c 8b 7c 10 28                movq    0x28(%rax,%rdx), %r15
// 216: 4d 85 ff                      testq   %r15, %r15
// 219: 0f 84 ab 00 00 00             je      0x2ca <_JIT_ENTRY+0x2ca>
// 21f: 41 8b 07                      movl    (%r15), %eax
// 222: ff c0                         incl    %eax
// 224: 74 0f                         je      0x235 <_JIT_ENTRY+0x235>
// 226: 41 89 07                      movl    %eax, (%r15)
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 233: ff d0                         callq   *%rax
// 235: 4c 89 3b                      movq    %r15, (%rbx)
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _JIT_OPARG
// 242: a8 01                         testb   $0x1, %al
// 244: 74 12                         je      0x258 <_JIT_ENTRY+0x258>
// 246: f7 d0                         notl    %eax
// 248: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24d: 48 98                         cltq
// 24f: 49 c7 44 c6 08 00 00 00 00    movq    $0x0, 0x8(%r14,%rax,8)
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _JIT_OPARG
// 262: 89 c1                         movl    %eax, %ecx
// 264: f7 d1                         notl    %ecx
// 266: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 26c: 48 63 c9                      movslq  %ecx, %rcx
// 26f: 83 e0 01                      andl    $0x1, %eax
// 272: ff c0                         incl    %eax
// 274: 48 01 c8                      addq    %rcx, %rax
// 277: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _JIT_CONTINUE
// 285: 4c 89 ef                      movq    %r13, %rdi
// 288: 48 89 ea                      movq    %rbp, %rdx
// 28b: 48 83 c4 28                   addq    $0x28, %rsp
// 28f: 5b                            popq    %rbx
// 290: 41 5c                         popq    %r12
// 292: 41 5d                         popq    %r13
// 294: 41 5e                         popq    %r14
// 296: 41 5f                         popq    %r15
// 298: 5d                            popq    %rbp
// 299: ff e0                         jmpq    *%rax
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_Dealloc
// 2a5: 4c 89 e7                      movq    %r12, %rdi
// 2a8: ff d0                         callq   *%rax
// 2aa: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 2ae: 4d 85 ff                      testq   %r15, %r15
// 2b1: 0f 85 73 fe ff ff             jne     0x12a <_JIT_ENTRY+0x12a>
// 2b7: 4c 29 e8                      subq    %r13, %rax
// 2ba: 48 83 c0 b8                   addq    $-0x48, %rax
// 2be: 48 c1 e8 03                   shrq    $0x3, %rax
// 2c2: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 2c6: 31 c0                         xorl    %eax, %eax
// 2c8: eb 2c                         jmp     0x2f6 <_JIT_ENTRY+0x2f6>
// 2ca: 49 89 de                      movq    %rbx, %r14
// 2cd: 4d 29 ee                      subq    %r13, %r14
// 2d0: 49 83 c6 b8                   addq    $-0x48, %r14
// 2d4: 49 c1 ee 03                   shrq    $0x3, %r14
// 2d8: 45 89 75 40                   movl    %r14d, 0x40(%r13)
// 2dc: 49 8b 45 00                   movq    (%r13), %rax
// 2e0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002e2:  R_X86_64_64  _JIT_TARGET
// 2ea: 89 c9                         movl    %ecx, %ecx
// 2ec: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2f0: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2f6: 48 83 c4 28                   addq    $0x28, %rsp
// 2fa: 5b                            popq    %rbx
// 2fb: 41 5c                         popq    %r12
// 2fd: 41 5d                         popq    %r13
// 2ff: 41 5e                         popq    %r14
// 301: 41 5f                         popq    %r15
// 303: 5d                            popq    %rbp
// 304: c3                            retq
// 305: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_GLOBAL_MODULE_code_body[774] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x63, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x52, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x7e, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xde, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x8d, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x1c, 0xce, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8e, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0xe9, 0x54, 0x01, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfb, 0x31, 0xdb, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x8b, 0x45, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x7c, 0x10, 0x28, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0xab, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x12, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0xc7, 0x44, 0xc6, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x4d, 0x85, 0xff, 0x0f, 0x85, 0x73, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xeb, 0x2c, 0x49, 0x89, 0xde, 0x4d, 0x29, 0xee, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x75, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_GLOBAL_MODULE_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_GLOBAL_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_GLOBAL_MODULE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_LOCALS
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_LOCALS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 71 01                   leal    0x1(%r9), %r14d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 f1                   cmovel  %r9d, %r14d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 4e 01 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 3d 01 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 f2                      movl    %r14d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 22 01 00 00             je      0x1e2 <_JIT_ENTRY+0x1e2>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// f2: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// f7: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// fc: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 101: 78 16                         js      0x119 <_JIT_ENTRY+0x119>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10d: ff d0                         callq   *%rax
// 10f: 49 ff 0c 24                   decq    (%r12)
// 113: 0f 84 50 01 00 00             je      0x269 <_JIT_ENTRY+0x269>
// 119: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 11d: 4d 85 f6                      testq   %r14, %r14
// 120: 0f 84 5f 01 00 00             je      0x285 <_JIT_ENTRY+0x285>
// 126: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12a: 49 8d 1c cf                   leaq    (%r15,%rcx,8), %rbx
// 12e: 4c 89 30                      movq    %r14, (%rax)
// 131: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 74 17                         je      0x153 <_JIT_ENTRY+0x153>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_HandlePending
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 85 c0                         testl   %eax, %eax
// 14d: 0f 85 5d 01 00 00             jne     0x2b0 <_JIT_ENTRY+0x2b0>
// 153: 4d 8b 75 28                   movq    0x28(%r13), %r14
// 157: 4d 85 f6                      testq   %r14, %r14
// 15a: 0f 84 2a 01 00 00             je      0x28a <_JIT_ENTRY+0x28a>
// 160: 41 8b 06                      movl    (%r14), %eax
// 163: ff c0                         incl    %eax
// 165: 74 0f                         je      0x176 <_JIT_ENTRY+0x176>
// 167: 41 89 06                      movl    %eax, (%r14)
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 174: ff d0                         callq   *%rax
// 176: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000178:  R_X86_64_64  _JIT_OPARG
// 180: f7 d0                         notl    %eax
// 182: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 187: 48 98                         cltq
// 189: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 18d: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 191: 48 83 c6 08                   addq    $0x8, %rsi
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _JIT_CONTINUE
// 19f: 4c 89 ef                      movq    %r13, %rdi
// 1a2: 48 89 ea                      movq    %rbp, %rdx
// 1a5: 48 83 c4 28                   addq    $0x28, %rsp
// 1a9: 5b                            popq    %rbx
// 1aa: 41 5c                         popq    %r12
// 1ac: 41 5d                         popq    %r13
// 1ae: 41 5e                         popq    %r14
// 1b0: 41 5f                         popq    %r15
// 1b2: 5d                            popq    %rbp
// 1b3: ff e0                         jmpq    *%rax
// 1b5: 49 29 ff                      subq    %rdi, %r15
// 1b8: 49 83 c7 b8                   addq    $-0x48, %r15
// 1bc: 49 c1 ef 03                   shrq    $0x3, %r15
// 1c0: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 1c4: 48 8b 07                      movq    (%rdi), %rax
// 1c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c9:  R_X86_64_64  _JIT_TARGET
// 1d1: 89 c9                         movl    %ecx, %ecx
// 1d3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1d7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1dd: e9 df 00 00 00                jmp     0x2c1 <_JIT_ENTRY+0x2c1>
// 1e2: 41 83 fe 02                   cmpl    $0x2, %r14d
// 1e6: bb 01 00 00 00                movl    $0x1, %ebx
// 1eb: 41 0f 43 de                   cmovael %r14d, %ebx
// 1ef: 45 31 f6                      xorl    %r14d, %r14d
// 1f2: eb 18                         jmp     0x20c <_JIT_ENTRY+0x20c>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 49 ff c6                      incq    %r14
// 203: 4c 39 f3                      cmpq    %r14, %rbx
// 206: 0f 84 b4 fe ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 20c: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 211: 49 8b 45 00                   movq    (%r13), %rax
// 215: 48 85 c0                      testq   %rax, %rax
// 218: 7e 06                         jle     0x220 <_JIT_ENTRY+0x220>
// 21a: 85 c0                         testl   %eax, %eax
// 21c: 78 e2                         js      0x200 <_JIT_ENTRY+0x200>
// 21e: eb 26                         jmp     0x246 <_JIT_ENTRY+0x246>
// 220: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000222:  R_X86_64_64  .rodata.str1.1
// 22a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 22f: 4c 89 ea                      movq    %r13, %rdx
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_NegativeRefcount
// 23c: ff d0                         callq   *%rax
// 23e: 49 8b 45 00                   movq    (%r13), %rax
// 242: 85 c0                         testl   %eax, %eax
// 244: 78 ba                         js      0x200 <_JIT_ENTRY+0x200>
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 250: ff d0                         callq   *%rax
// 252: 49 ff 4d 00                   decq    (%r13)
// 256: 75 a8                         jne     0x200 <_JIT_ENTRY+0x200>
// 258: 4c 89 ef                      movq    %r13, %rdi
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_Dealloc
// 265: ff d0                         callq   *%rax
// 267: eb 97                         jmp     0x200 <_JIT_ENTRY+0x200>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_Dealloc
// 273: 4c 89 e7                      movq    %r12, %rdi
// 276: ff d0                         callq   *%rax
// 278: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 27c: 4d 85 f6                      testq   %r14, %r14
// 27f: 0f 85 a1 fe ff ff             jne     0x126 <_JIT_ENTRY+0x126>
// 285: 48 89 c3                      movq    %rax, %rbx
// 288: eb 26                         jmp     0x2b0 <_JIT_ENTRY+0x2b0>
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  PyExc_SystemError
// 294: 48 8b 30                      movq    (%rax), %rsi
// 297: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000299:  R_X86_64_64  .rodata.str1.1+0x39
// 2a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a3:  R_X86_64_64  _PyErr_SetString
// 2ab: 48 89 ef                      movq    %rbp, %rdi
// 2ae: ff d0                         callq   *%rax
// 2b0: 4c 29 eb                      subq    %r13, %rbx
// 2b3: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2b7: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2bb: 41 89 5d 40                   movl    %ebx, 0x40(%r13)
// 2bf: 31 c0                         xorl    %eax, %eax
// 2c1: 48 83 c4 28                   addq    $0x28, %rsp
// 2c5: 5b                            popq    %rbx
// 2c6: 41 5c                         popq    %r12
// 2c8: 41 5d                         popq    %r13
// 2ca: 41 5e                         popq    %r14
// 2cc: 41 5f                         popq    %r15
// 2ce: 5d                            popq    %rbp
// 2cf: c3                            retq
// 2d0: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_LOCALS_code_body[721] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x71, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf1, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x4e, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x3d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xf2, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x22, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xdf, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x5f, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x1c, 0xcf, 0x4c, 0x89, 0x30, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x5d, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x75, 0x28, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x2a, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xdf, 0x00, 0x00, 0x00, 0x41, 0x83, 0xfe, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xde, 0x45, 0x31, 0xf6, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf3, 0x0f, 0x84, 0xb4, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x4d, 0x85, 0xf6, 0x0f, 0x85, 0xa1, 0xfe, 0xff, 0xff, 0x48, 0x89, 0xc3, 0xeb, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_LOCALS_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found\x00'
// 49: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_LOCALS_data_body[81] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_LOCALS_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_NAME
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_NAME.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 81 01 00 00             je      0x1e8 <_JIT_ENTRY+0x1e8>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 70 01 00 00             je      0x1e8 <_JIT_ENTRY+0x1e8>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 82: 48 89 54 24 28                movq    %rdx, 0x28(%rsp)
// 87: 48 89 7c 24 30                movq    %rdi, 0x30(%rsp)
// 8c: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 90: 48 85 c0                      testq   %rax, %rax
// 93: 0f 94 c3                      sete    %bl
// 96: 44 89 ea                      movl    %r13d, %edx
// 99: 4c 89 e7                      movq    %r12, %rdi
// 9c: 48 89 ee                      movq    %rbp, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: 41 ff d0                      callq   *%r8
// a4: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _JIT_OPARG
// b3: 66 85 c0                      testw   %ax, %ax
// b6: 0f 94 c0                      sete    %al
// b9: 84 c3                         testb   %al, %bl
// bb: 0f 84 54 01 00 00             je      0x215 <_JIT_ENTRY+0x215>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e3: 4c 89 e2                      movq    %r12, %rdx
// e6: ff d0                         callq   *%rax
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 85 c0                         testl   %eax, %eax
// ee: 4c 8b 6c 24 30                movq    0x30(%rsp), %r13
// f3: 48 8b 6c 24 28                movq    0x28(%rsp), %rbp
// f8: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// fd: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 102: 78 16                         js      0x11a <_JIT_ENTRY+0x11a>
// 104: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000106:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10e: ff d0                         callq   *%rax
// 110: 49 ff 0c 24                   decq    (%r12)
// 114: 0f 84 7f 01 00 00             je      0x299 <_JIT_ENTRY+0x299>
// 11a: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 11e: 4d 85 f6                      testq   %r14, %r14
// 121: 0f 84 8e 01 00 00             je      0x2b5 <_JIT_ENTRY+0x2b5>
// 127: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 12c: 49 8d 1c cf                   leaq    (%r15,%rcx,8), %rbx
// 130: 4c 89 30                      movq    %r14, (%rax)
// 133: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 137: 48 8b 00                      movq    (%rax), %rax
// 13a: 84 c0                         testb   %al, %al
// 13c: 74 17                         je      0x155 <_JIT_ENTRY+0x155>
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _Py_HandlePending
// 148: 48 89 ef                      movq    %rbp, %rdi
// 14b: ff d0                         callq   *%rax
// 14d: 85 c0                         testl   %eax, %eax
// 14f: 0f 85 8b 01 00 00             jne     0x2e0 <_JIT_ENTRY+0x2e0>
// 155: 49 8b 7d 28                   movq    0x28(%r13), %rdi
// 159: 48 85 ff                      testq   %rdi, %rdi
// 15c: 0f 84 58 01 00 00             je      0x2ba <_JIT_ENTRY+0x2ba>
// 162: 49 8b 45 00                   movq    (%r13), %rax
// 166: 48 8b 40 20                   movq    0x20(%rax), %rax
// 16a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000016c:  R_X86_64_64  _JIT_OPARG
// 174: 0f b7 c9                      movzwl  %cx, %ecx
// 177: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 17c: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000017e:  R_X86_64_64  PyMapping_GetOptionalItem
// 186: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 18b: 4c 89 e6                      movq    %r12, %rsi
// 18e: 41 ff d6                      callq   *%r14
// 191: 85 c0                         testl   %eax, %eax
// 193: 0f 88 47 01 00 00             js      0x2e0 <_JIT_ENTRY+0x2e0>
// 199: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 19e: 48 85 c0                      testq   %rax, %rax
// 1a1: 0f 84 59 01 00 00             je      0x300 <_JIT_ENTRY+0x300>
// 1a7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a9:  R_X86_64_64  _JIT_OPARG
// 1b1: f7 d1                         notl    %ecx
// 1b3: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1b9: 48 63 c9                      movslq  %ecx, %rcx
// 1bc: 49 89 04 cf                   movq    %rax, (%r15,%rcx,8)
// 1c0: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// 1c4: 48 83 c6 08                   addq    $0x8, %rsi
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _JIT_CONTINUE
// 1d2: 4c 89 ef                      movq    %r13, %rdi
// 1d5: 48 89 ea                      movq    %rbp, %rdx
// 1d8: 48 83 c4 38                   addq    $0x38, %rsp
// 1dc: 5b                            popq    %rbx
// 1dd: 41 5c                         popq    %r12
// 1df: 41 5d                         popq    %r13
// 1e1: 41 5e                         popq    %r14
// 1e3: 41 5f                         popq    %r15
// 1e5: 5d                            popq    %rbp
// 1e6: ff e0                         jmpq    *%rax
// 1e8: 49 29 ff                      subq    %rdi, %r15
// 1eb: 49 83 c7 b8                   addq    $-0x48, %r15
// 1ef: 49 c1 ef 03                   shrq    $0x3, %r15
// 1f3: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 1f7: 48 8b 07                      movq    (%rdi), %rax
// 1fa: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001fc:  R_X86_64_64  _JIT_TARGET
// 204: 89 c9                         movl    %ecx, %ecx
// 206: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 20a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 210: e9 dc 00 00 00                jmp     0x2f1 <_JIT_ENTRY+0x2f1>
// 215: 41 83 fd 02                   cmpl    $0x2, %r13d
// 219: 41 be 01 00 00 00             movl    $0x1, %r14d
// 21f: 45 0f 43 f5                   cmovael %r13d, %r14d
// 223: 31 db                         xorl    %ebx, %ebx
// 225: eb 15                         jmp     0x23c <_JIT_ENTRY+0x23c>
// 227: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 230: 48 ff c3                      incq    %rbx
// 233: 49 39 de                      cmpq    %rbx, %r14
// 236: 0f 84 85 fe ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 23c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 241: 49 8b 45 00                   movq    (%r13), %rax
// 245: 48 85 c0                      testq   %rax, %rax
// 248: 7e 06                         jle     0x250 <_JIT_ENTRY+0x250>
// 24a: 85 c0                         testl   %eax, %eax
// 24c: 78 e2                         js      0x230 <_JIT_ENTRY+0x230>
// 24e: eb 26                         jmp     0x276 <_JIT_ENTRY+0x276>
// 250: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000252:  R_X86_64_64  .rodata.str1.1
// 25a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 25f: 4c 89 ea                      movq    %r13, %rdx
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_NegativeRefcount
// 26c: ff d0                         callq   *%rax
// 26e: 49 8b 45 00                   movq    (%r13), %rax
// 272: 85 c0                         testl   %eax, %eax
// 274: 78 ba                         js      0x230 <_JIT_ENTRY+0x230>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 280: ff d0                         callq   *%rax
// 282: 49 ff 4d 00                   decq    (%r13)
// 286: 75 a8                         jne     0x230 <_JIT_ENTRY+0x230>
// 288: 4c 89 ef                      movq    %r13, %rdi
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_Dealloc
// 295: ff d0                         callq   *%rax
// 297: eb 97                         jmp     0x230 <_JIT_ENTRY+0x230>
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _Py_Dealloc
// 2a3: 4c 89 e7                      movq    %r12, %rdi
// 2a6: ff d0                         callq   *%rax
// 2a8: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 2ac: 4d 85 f6                      testq   %r14, %r14
// 2af: 0f 85 72 fe ff ff             jne     0x127 <_JIT_ENTRY+0x127>
// 2b5: 48 89 c3                      movq    %rax, %rbx
// 2b8: eb 26                         jmp     0x2e0 <_JIT_ENTRY+0x2e0>
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  PyExc_SystemError
// 2c4: 48 8b 30                      movq    (%rax), %rsi
// 2c7: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002c9:  R_X86_64_64  .rodata.str1.1+0x56
// 2d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d3:  R_X86_64_64  _PyErr_SetString
// 2db: 48 89 ef                      movq    %rbp, %rdi
// 2de: ff d0                         callq   *%rax
// 2e0: 4c 29 eb                      subq    %r13, %rbx
// 2e3: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2e7: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2eb: 41 89 5d 40                   movl    %ebx, 0x40(%r13)
// 2ef: 31 c0                         xorl    %eax, %eax
// 2f1: 48 83 c4 38                   addq    $0x38, %rsp
// 2f5: 5b                            popq    %rbx
// 2f6: 41 5c                         popq    %r12
// 2f8: 41 5d                         popq    %r13
// 2fa: 41 5e                         popq    %r14
// 2fc: 41 5f                         popq    %r15
// 2fe: 5d                            popq    %rbp
// 2ff: c3                            retq
// 300: 49 8b 7d 18                   movq    0x18(%r13), %rdi
// 304: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000306:  R_X86_64_64  PyDict_GetItemRef
// 30e: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 313: 4c 89 e6                      movq    %r12, %rsi
// 316: ff d0                         callq   *%rax
// 318: 85 c0                         testl   %eax, %eax
// 31a: 78 c4                         js      0x2e0 <_JIT_ENTRY+0x2e0>
// 31c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 321: 48 85 c0                      testq   %rax, %rax
// 324: 0f 85 7d fe ff ff             jne     0x1a7 <_JIT_ENTRY+0x1a7>
// 32a: 49 8b 7d 20                   movq    0x20(%r13), %rdi
// 32e: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 333: 4c 89 e6                      movq    %r12, %rsi
// 336: 41 ff d6                      callq   *%r14
// 339: 85 c0                         testl   %eax, %eax
// 33b: 78 a3                         js      0x2e0 <_JIT_ENTRY+0x2e0>
// 33d: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 342: 48 85 c0                      testq   %rax, %rax
// 345: 0f 85 5c fe ff ff             jne     0x1a7 <_JIT_ENTRY+0x1a7>
// 34b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034d:  R_X86_64_64  PyExc_NameError
// 355: 48 8b 30                      movq    (%rax), %rsi
// 358: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000035a:  R_X86_64_64  .rodata.str1.1+0x39
// 362: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000364:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 36c: 48 89 ef                      movq    %rbp, %rdi
// 36f: 4c 89 e1                      movq    %r12, %rcx
// 372: ff d0                         callq   *%rax
// 374: e9 67 ff ff ff                jmp     0x2e0 <_JIT_ENTRY+0x2e0>
// 379: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_NAME_code_body[890] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x81, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x70, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x28, 0x48, 0x89, 0x7c, 0x24, 0x30, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x54, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x30, 0x48, 0x8b, 0x6c, 0x24, 0x28, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x7f, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xdf, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x8e, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x49, 0x8d, 0x1c, 0xcf, 0x4c, 0x89, 0x30, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x8b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x7d, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x58, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd6, 0x85, 0xc0, 0x0f, 0x88, 0x47, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x59, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xcf, 0x49, 0x8d, 0x34, 0xcf, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xdc, 0x00, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x85, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x4d, 0x85, 0xf6, 0x0f, 0x85, 0x72, 0xfe, 0xff, 0xff, 0x48, 0x89, 0xc3, 0xeb, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x7d, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xc4, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x7d, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x7d, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd6, 0x85, 0xc0, 0x78, 0xa3, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x5c, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0x67, 0xff, 0xff, 0xff};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_NAME_code_holes[24] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x56},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x306, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x34d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x35a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x364, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00no locals found\x00"
// 66: 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_NAME_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_NAME_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_SUPER_ATTR_ATTR
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_SUPER_ATTR_ATTR.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 ff                      movq    %rdi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c1                   movzwl  %cx, %r8d
// 1f: 44 89 c0                      movl    %r8d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: 41 b9 fe ff ff ff             movl    $0xfffffffe, %r9d       # imm = 0xFFFFFFFE
// 31: 45 29 c1                      subl    %r8d, %r9d
// 34: 45 8d 70 01                   leal    0x1(%r8), %r14d
// 38: 0f b7 c9                      movzwl  %cx, %ecx
// 3b: 48 89 cf                      movq    %rcx, %rdi
// 3e: 48 f7 df                      negq    %rdi
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 45 0f 44 f0                   cmovel  %r8d, %r14d
// 48: 4d 63 c9                      movslq  %r9d, %r9
// 4b: 48 f7 d1                      notq    %rcx
// 4e: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 52: 4e 8b 24 ce                   movq    (%rsi,%r9,8), %r12
// 56: 49 8b 7c 24 08                movq    0x8(%r12), %rdi
// 5b: f6 87 ab 00 00 00 80          testb   $-0x80, 0xab(%rdi)
// 62: 0f 84 27 01 00 00             je      0x18f <_JIT_ENTRY+0x18f>
// 68: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 70: 4d 85 c0                      testq   %r8, %r8
// 73: 0f 84 16 01 00 00             je      0x18f <_JIT_ENTRY+0x18f>
// 79: 4c 89 4c 24 08                movq    %r9, 0x8(%rsp)
// 7e: 4c 89 54 24 20                movq    %r10, 0x20(%rsp)
// 83: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 88: 4c 89 7c 24 30                movq    %r15, 0x30(%rsp)
// 8d: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 92: 48 8d 2c ce                   leaq    (%rsi,%rcx,8), %rbp
// 96: 48 85 c0                      testq   %rax, %rax
// 99: 0f 94 c3                      sete    %bl
// 9c: 44 89 f2                      movl    %r14d, %edx
// 9f: 4c 89 e7                      movq    %r12, %rdi
// a2: 48 89 ee                      movq    %rbp, %rsi
// a5: 31 c9                         xorl    %ecx, %ecx
// a7: 41 ff d0                      callq   *%r8
// aa: 48 89 44 24 28                movq    %rax, 0x28(%rsp)
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  _JIT_OPARG
// b9: 66 85 c0                      testw   %ax, %ax
// bc: 0f 94 c0                      sete    %al
// bf: 84 c3                         testb   %al, %bl
// c1: 0f 84 02 01 00 00             je      0x1c9 <_JIT_ENTRY+0x1c9>
// c7: 49 8b 04 24                   movq    (%r12), %rax
// cb: 48 85 c0                      testq   %rax, %rax
// ce: 7f 22                         jg      0xf2 <_JIT_ENTRY+0xf2>
// d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d2:  R_X86_64_64  .rodata.str1.1
// da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dc:  R_X86_64_64  _Py_NegativeRefcount
// e4: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e9: 4c 89 e2                      movq    %r12, %rdx
// ec: ff d0                         callq   *%rax
// ee: 49 8b 04 24                   movq    (%r12), %rax
// f2: 85 c0                         testl   %eax, %eax
// f4: 4c 8b 7c 24 30                movq    0x30(%rsp), %r15
// f9: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// fe: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 103: 78 21                         js      0x126 <_JIT_ENTRY+0x126>
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10f: ff d0                         callq   *%rax
// 111: 49 ff 0c 24                   decq    (%r12)
// 115: 75 0f                         jne     0x126 <_JIT_ENTRY+0x126>
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_Dealloc
// 121: 4c 89 e7                      movq    %r12, %rdi
// 124: ff d0                         callq   *%rax
// 126: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 12b: 48 8d 04 c5 00 00 00 00       leaq    (,%rax,8), %rax
// 133: 48 01 e8                      addq    %rbp, %rax
// 136: 48 8b 54 24 28                movq    0x28(%rsp), %rdx
// 13b: 48 85 d2                      testq   %rdx, %rdx
// 13e: 74 3c                         je      0x17c <_JIT_ENTRY+0x17c>
// 140: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 145: 4c 8d 34 cd 00 00 00 00       leaq    (,%rcx,8), %r14
// 14d: 49 01 ee                      addq    %rbp, %r14
// 150: 48 89 10                      movq    %rdx, (%rax)
// 153: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 157: 48 8b 00                      movq    (%rax), %rax
// 15a: 84 c0                         testb   %al, %al
// 15c: 0f 84 ed 00 00 00             je      0x24f <_JIT_ENTRY+0x24f>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_HandlePending
// 16c: 48 89 df                      movq    %rbx, %rdi
// 16f: ff d0                         callq   *%rax
// 171: 85 c0                         testl   %eax, %eax
// 173: 0f 84 d6 00 00 00             je      0x24f <_JIT_ENTRY+0x24f>
// 179: 4c 89 f0                      movq    %r14, %rax
// 17c: 4c 29 f8                      subq    %r15, %rax
// 17f: 48 83 c0 b8                   addq    $-0x48, %rax
// 183: 48 c1 e8 03                   shrq    $0x3, %rax
// 187: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 18b: 31 c0                         xorl    %eax, %eax
// 18d: eb 2b                         jmp     0x1ba <_JIT_ENTRY+0x1ba>
// 18f: 49 89 f6                      movq    %rsi, %r14
// 192: 4d 29 fe                      subq    %r15, %r14
// 195: 49 83 c6 b8                   addq    $-0x48, %r14
// 199: 49 c1 ee 03                   shrq    $0x3, %r14
// 19d: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 1a1: 49 8b 07                      movq    (%r15), %rax
// 1a4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a6:  R_X86_64_64  _JIT_TARGET
// 1ae: 89 c9                         movl    %ecx, %ecx
// 1b0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ba: 48 83 c4 38                   addq    $0x38, %rsp
// 1be: 5b                            popq    %rbx
// 1bf: 41 5c                         popq    %r12
// 1c1: 41 5d                         popq    %r13
// 1c3: 41 5e                         popq    %r14
// 1c5: 41 5f                         popq    %r15
// 1c7: 5d                            popq    %rbp
// 1c8: c3                            retq
// 1c9: 41 83 fe 02                   cmpl    $0x2, %r14d
// 1cd: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1d3: 45 0f 43 fe                   cmovael %r14d, %r15d
// 1d7: 45 31 f6                      xorl    %r14d, %r14d
// 1da: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001dc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e4: eb 16                         jmp     0x1fc <_JIT_ENTRY+0x1fc>
// 1e6: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 1f0: 49 ff c6                      incq    %r14
// 1f3: 4d 39 f7                      cmpq    %r14, %r15
// 1f6: 0f 84 cb fe ff ff             je      0xc7 <_JIT_ENTRY+0xc7>
// 1fc: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 201: 49 8b 45 00                   movq    (%r13), %rax
// 205: 48 85 c0                      testq   %rax, %rax
// 208: 7e 06                         jle     0x210 <_JIT_ENTRY+0x210>
// 20a: 85 c0                         testl   %eax, %eax
// 20c: 78 e2                         js      0x1f0 <_JIT_ENTRY+0x1f0>
// 20e: eb 26                         jmp     0x236 <_JIT_ENTRY+0x236>
// 210: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000212:  R_X86_64_64  .rodata.str1.1
// 21a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 21f: 4c 89 ea                      movq    %r13, %rdx
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_NegativeRefcount
// 22c: ff d0                         callq   *%rax
// 22e: 49 8b 45 00                   movq    (%r13), %rax
// 232: 85 c0                         testl   %eax, %eax
// 234: 78 ba                         js      0x1f0 <_JIT_ENTRY+0x1f0>
// 236: ff d3                         callq   *%rbx
// 238: 49 ff 4d 00                   decq    (%r13)
// 23c: 75 b2                         jne     0x1f0 <_JIT_ENTRY+0x1f0>
// 23e: 4c 89 ef                      movq    %r13, %rdi
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _Py_Dealloc
// 24b: ff d0                         callq   *%rax
// 24d: eb a1                         jmp     0x1f0 <_JIT_ENTRY+0x1f0>
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _JIT_OPARG
// 259: f7 d0                         notl    %eax
// 25b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 260: 48 63 d8                      movslq  %eax, %rbx
// 263: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000265:  R_X86_64_64  PySuper_Type
// 26d: 4c 39 6c dd e8                cmpq    %r13, -0x18(%rbp,%rbx,8)
// 272: 0f 85 1a ff ff ff             jne     0x192 <_JIT_ENTRY+0x192>
// 278: 48 89 e9                      movq    %rbp, %rcx
// 27b: 48 8b 6c dd f0                movq    -0x10(%rbp,%rbx,8), %rbp
// 280: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 284: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 28b: 0f 84 01 ff ff ff             je      0x192 <_JIT_ENTRY+0x192>
// 291: 4c 8b 64 d9 f8                movq    -0x8(%rcx,%rbx,8), %r12
// 296: 49 8b 07                      movq    (%r15), %rax
// 299: 48 8b 40 20                   movq    0x20(%rax), %rax
// 29d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000029f:  R_X86_64_64  _JIT_OPARG
// 2a7: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 2ad: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _PySuper_Lookup
// 2bc: 48 89 ef                      movq    %rbp, %rdi
// 2bf: 4c 89 e6                      movq    %r12, %rsi
// 2c2: 31 c9                         xorl    %ecx, %ecx
// 2c4: ff d0                         callq   *%rax
// 2c6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 2cb: 49 8b 45 00                   movq    (%r13), %rax
// 2cf: 48 85 c0                      testq   %rax, %rax
// 2d2: 7f 22                         jg      0x2f6 <_JIT_ENTRY+0x2f6>
// 2d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d6:  R_X86_64_64  .rodata.str1.1
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _Py_NegativeRefcount
// 2e8: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 2ed: 4c 89 ea                      movq    %r13, %rdx
// 2f0: ff d0                         callq   *%rax
// 2f2: 49 8b 45 00                   movq    (%r13), %rax
// 2f6: 85 c0                         testl   %eax, %eax
// 2f8: 78 28                         js      0x322 <_JIT_ENTRY+0x322>
// 2fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 304: ff d0                         callq   *%rax
// 306: 49 ff 4d 00                   decq    (%r13)
// 30a: 75 16                         jne     0x322 <_JIT_ENTRY+0x322>
// 30c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000030e:  R_X86_64_64  PySuper_Type
// 316: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000318:  R_X86_64_64  _Py_Dealloc
// 320: ff d0                         callq   *%rax
// 322: 48 8b 45 00                   movq    (%rbp), %rax
// 326: 48 85 c0                      testq   %rax, %rax
// 329: 7f 22                         jg      0x34d <_JIT_ENTRY+0x34d>
// 32b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000032d:  R_X86_64_64  .rodata.str1.1
// 335: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000337:  R_X86_64_64  _Py_NegativeRefcount
// 33f: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 344: 48 89 ea                      movq    %rbp, %rdx
// 347: ff d0                         callq   *%rax
// 349: 48 8b 45 00                   movq    (%rbp), %rax
// 34d: 85 c0                         testl   %eax, %eax
// 34f: 78 21                         js      0x372 <_JIT_ENTRY+0x372>
// 351: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000353:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 35b: ff d0                         callq   *%rax
// 35d: 48 ff 4d 00                   decq    (%rbp)
// 361: 75 0f                         jne     0x372 <_JIT_ENTRY+0x372>
// 363: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000365:  R_X86_64_64  _Py_Dealloc
// 36d: 48 89 ef                      movq    %rbp, %rdi
// 370: ff d0                         callq   *%rax
// 372: 49 8b 04 24                   movq    (%r12), %rax
// 376: 48 85 c0                      testq   %rax, %rax
// 379: 7f 22                         jg      0x39d <_JIT_ENTRY+0x39d>
// 37b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000037d:  R_X86_64_64  .rodata.str1.1
// 385: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000387:  R_X86_64_64  _Py_NegativeRefcount
// 38f: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 394: 4c 89 e2                      movq    %r12, %rdx
// 397: ff d0                         callq   *%rax
// 399: 49 8b 04 24                   movq    (%r12), %rax
// 39d: 85 c0                         testl   %eax, %eax
// 39f: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 3a4: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 3a9: 78 21                         js      0x3cc <_JIT_ENTRY+0x3cc>
// 3ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3b5: ff d0                         callq   *%rax
// 3b7: 49 ff 0c 24                   decq    (%r12)
// 3bb: 75 0f                         jne     0x3cc <_JIT_ENTRY+0x3cc>
// 3bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bf:  R_X86_64_64  _Py_Dealloc
// 3c7: 4c 89 e7                      movq    %r12, %rdi
// 3ca: ff d0                         callq   *%rax
// 3cc: 48 8d 04 dd e8 ff ff ff       leaq    -0x18(,%rbx,8), %rax
// 3d4: 4c 01 e8                      addq    %r13, %rax
// 3d7: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 3dc: 48 85 c9                      testq   %rcx, %rcx
// 3df: 0f 84 97 fd ff ff             je      0x17c <_JIT_ENTRY+0x17c>
// 3e5: 48 8d 34 dd f0 ff ff ff       leaq    -0x10(,%rbx,8), %rsi
// 3ed: 4c 01 ee                      addq    %r13, %rsi
// 3f0: 48 89 08                      movq    %rcx, (%rax)
// 3f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f5:  R_X86_64_64  _JIT_CONTINUE
// 3fd: 4c 89 ff                      movq    %r15, %rdi
// 400: 4c 89 f2                      movq    %r14, %rdx
// 403: 48 83 c4 38                   addq    $0x38, %rsp
// 407: 5b                            popq    %rbx
// 408: 41 5c                         popq    %r12
// 40a: 41 5d                         popq    %r13
// 40c: 41 5e                         popq    %r14
// 40e: 41 5f                         popq    %r15
// 410: 5d                            popq    %rbp
// 411: ff e0                         jmpq    *%rax
// 413: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_SUPER_ATTR_ATTR_code_body[1044] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0x41, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x45, 0x29, 0xc1, 0x45, 0x8d, 0x70, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf0, 0x4d, 0x63, 0xc9, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4e, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x7c, 0x24, 0x08, 0xf6, 0x87, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x27, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x16, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0x54, 0x24, 0x20, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x30, 0x48, 0x89, 0x74, 0x24, 0x10, 0x48, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xf2, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x02, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x30, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8d, 0x04, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xe8, 0x48, 0x8b, 0x54, 0x24, 0x28, 0x48, 0x85, 0xd2, 0x74, 0x3c, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x4c, 0x8d, 0x34, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xee, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xd6, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x49, 0x89, 0xf6, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfe, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfe, 0x45, 0x31, 0xf6, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc6, 0x4d, 0x39, 0xf7, 0x0f, 0x84, 0xcb, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0xff, 0xd3, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xb2, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xa1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6c, 0xdd, 0xe8, 0x0f, 0x85, 0x1a, 0xff, 0xff, 0xff, 0x48, 0x89, 0xe9, 0x48, 0x8b, 0x6c, 0xdd, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x01, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x64, 0xd9, 0xf8, 0x49, 0x8b, 0x07, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8d, 0x04, 0xdd, 0xe8, 0xff, 0xff, 0xff, 0x4c, 0x01, 0xe8, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x97, 0xfd, 0xff, 0xff, 0x48, 0x8d, 0x34, 0xdd, 0xf0, 0xff, 0xff, 0xff, 0x4c, 0x01, 0xee, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_SUPER_ATTR_ATTR_code_holes[31] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x30e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x318, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x32d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x337, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x353, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x365, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x37d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x387, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3f5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_SUPER_ATTR_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_SUPER_ATTR_ATTR_data_holes[1];

// _CALL_BUILTIN_CLASSplus_LOAD_SUPER_ATTR_METHOD
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_LOAD_SUPER_ATTR_METHOD.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 45 8d 78 01                   leal    0x1(%r8), %r15d
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 45 0f 44 f8                   cmovel  %r8d, %r15d
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4e 8b 24 d3                   movq    (%rbx,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 d0 01 00 00             je      0x23a <_JIT_ENTRY+0x23a>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 bf 01 00 00             je      0x23a <_JIT_ENTRY+0x23a>
// 7b: 4c 89 54 24 28                movq    %r10, 0x28(%rsp)
// 80: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 85: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 8a: 4c 89 74 24 30                movq    %r14, 0x30(%rsp)
// 8f: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 94: 48 8d 2c cb                   leaq    (%rbx,%rcx,8), %rbp
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 0f 94 c3                      sete    %bl
// 9e: 44 89 fa                      movl    %r15d, %edx
// a1: 4c 89 e7                      movq    %r12, %rdi
// a4: 48 89 ee                      movq    %rbp, %rsi
// a7: 31 c9                         xorl    %ecx, %ecx
// a9: 41 ff d0                      callq   *%r8
// ac: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _JIT_OPARG
// bb: 66 85 c0                      testw   %ax, %ax
// be: 0f 94 c0                      sete    %al
// c1: 84 c3                         testb   %al, %bl
// c3: 0f 84 b3 00 00 00             je      0x17c <_JIT_ENTRY+0x17c>
// c9: 49 8b 04 24                   movq    (%r12), %rax
// cd: 48 85 c0                      testq   %rax, %rax
// d0: 7f 22                         jg      0xf4 <_JIT_ENTRY+0xf4>
// d2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d4:  R_X86_64_64  .rodata.str1.1
// dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000de:  R_X86_64_64  _Py_NegativeRefcount
// e6: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// eb: 4c 89 e2                      movq    %r12, %rdx
// ee: ff d0                         callq   *%rax
// f0: 49 8b 04 24                   movq    (%r12), %rax
// f4: 85 c0                         testl   %eax, %eax
// f6: 4c 8b 74 24 30                movq    0x30(%rsp), %r14
// fb: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 100: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 105: 48 8b 5c 24 28                movq    0x28(%rsp), %rbx
// 10a: 78 16                         js      0x122 <_JIT_ENTRY+0x122>
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 116: ff d0                         callq   *%rax
// 118: 49 ff 0c 24                   decq    (%r12)
// 11c: 0f 84 45 01 00 00             je      0x267 <_JIT_ENTRY+0x267>
// 122: 48 8d 04 dd 00 00 00 00       leaq    (,%rbx,8), %rax
// 12a: 48 01 e8                      addq    %rbp, %rax
// 12d: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 132: 48 85 d2                      testq   %rdx, %rdx
// 135: 0f 84 34 03 00 00             je      0x46f <_JIT_ENTRY+0x46f>
// 13b: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 140: 48 8d 1c cd 00 00 00 00       leaq    (,%rcx,8), %rbx
// 148: 48 01 eb                      addq    %rbp, %rbx
// 14b: 48 89 10                      movq    %rdx, (%rax)
// 14e: 49 8b 47 10                   movq    0x10(%r15), %rax
// 152: 48 8b 00                      movq    (%rax), %rax
// 155: 84 c0                         testb   %al, %al
// 157: 0f 84 a3 00 00 00             je      0x200 <_JIT_ENTRY+0x200>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_HandlePending
// 167: 4c 89 ff                      movq    %r15, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 85 c0                         testl   %eax, %eax
// 16e: 0f 84 8c 00 00 00             je      0x200 <_JIT_ENTRY+0x200>
// 174: 48 89 d8                      movq    %rbx, %rax
// 177: e9 f3 02 00 00                jmp     0x46f <_JIT_ENTRY+0x46f>
// 17c: 41 83 ff 02                   cmpl    $0x2, %r15d
// 180: bb 01 00 00 00                movl    $0x1, %ebx
// 185: 41 0f 43 df                   cmovael %r15d, %ebx
// 189: 45 31 ff                      xorl    %r15d, %r15d
// 18c: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000018e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 196: eb 14                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 198: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 1a0: 49 ff c7                      incq    %r15
// 1a3: 4c 39 fb                      cmpq    %r15, %rbx
// 1a6: 0f 84 1d ff ff ff             je      0xc9 <_JIT_ENTRY+0xc9>
// 1ac: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 41 ff d6                      callq   *%r14
// 1e9: 49 ff 4d 00                   decq    (%r13)
// 1ed: 75 b1                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1ef: 4c 89 ef                      movq    %r13, %rdi
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_Dealloc
// 1fc: ff d0                         callq   *%rax
// 1fe: eb a0                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _JIT_OPARG
// 20a: f7 d0                         notl    %eax
// 20c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 211: 4c 63 f8                      movslq  %eax, %r15
// 214: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000216:  R_X86_64_64  PySuper_Type
// 21e: 4e 39 6c fd e8                cmpq    %r13, -0x18(%rbp,%r15,8)
// 223: 75 15                         jne     0x23a <_JIT_ENTRY+0x23a>
// 225: 48 89 e9                      movq    %rbp, %rcx
// 228: 4a 8b 6c fd f0                movq    -0x10(%rbp,%r15,8), %rbp
// 22d: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 231: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 238: 75 5a                         jne     0x294 <_JIT_ENTRY+0x294>
// 23a: 4c 29 f3                      subq    %r14, %rbx
// 23d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 241: 48 c1 eb 03                   shrq    $0x3, %rbx
// 245: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 249: 49 8b 06                      movq    (%r14), %rax
// 24c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024e:  R_X86_64_64  _JIT_TARGET
// 256: 89 c9                         movl    %ecx, %ecx
// 258: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 25c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 262: e9 19 02 00 00                jmp     0x480 <_JIT_ENTRY+0x480>
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _Py_Dealloc
// 271: 4c 89 e7                      movq    %r12, %rdi
// 274: ff d0                         callq   *%rax
// 276: 48 8d 04 dd 00 00 00 00       leaq    (,%rbx,8), %rax
// 27e: 48 01 e8                      addq    %rbp, %rax
// 281: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 286: 48 85 d2                      testq   %rdx, %rdx
// 289: 0f 85 ac fe ff ff             jne     0x13b <_JIT_ENTRY+0x13b>
// 28f: e9 db 01 00 00                jmp     0x46f <_JIT_ENTRY+0x46f>
// 294: 4e 8b 64 f9 f8                movq    -0x8(%rcx,%r15,8), %r12
// 299: 49 8b 06                      movq    (%r14), %rax
// 29c: 48 8b 40 20                   movq    0x20(%rax), %rax
// 2a0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002a2:  R_X86_64_64  _JIT_OPARG
// 2aa: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 2b0: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 2b5: c7 44 24 04 00 00 00 00       movl    $0x0, 0x4(%rsp)
// 2bd: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 2c2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002c4:  R_X86_64_64  PyObject_GenericGetAttr
// 2cc: 31 f6                         xorl    %esi, %esi
// 2ce: 48 39 88 90 00 00 00          cmpq    %rcx, 0x90(%rax)
// 2d5: 48 8d 4c 24 04                leaq    0x4(%rsp), %rcx
// 2da: 48 0f 45 ce                   cmovneq %rsi, %rcx
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _PySuper_Lookup
// 2e8: 48 89 ef                      movq    %rbp, %rdi
// 2eb: 4c 89 e6                      movq    %r12, %rsi
// 2ee: ff d0                         callq   *%rax
// 2f0: 48 89 c3                      movq    %rax, %rbx
// 2f3: 49 8b 45 00                   movq    (%r13), %rax
// 2f7: 48 85 c0                      testq   %rax, %rax
// 2fa: 7f 22                         jg      0x31e <_JIT_ENTRY+0x31e>
// 2fc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002fe:  R_X86_64_64  .rodata.str1.1
// 306: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000308:  R_X86_64_64  _Py_NegativeRefcount
// 310: be 18 06 00 00                movl    $0x618, %esi            # imm = 0x618
// 315: 4c 89 ea                      movq    %r13, %rdx
// 318: ff d0                         callq   *%rax
// 31a: 49 8b 45 00                   movq    (%r13), %rax
// 31e: 85 c0                         testl   %eax, %eax
// 320: 78 28                         js      0x34a <_JIT_ENTRY+0x34a>
// 322: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000324:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 32c: ff d0                         callq   *%rax
// 32e: 49 ff 4d 00                   decq    (%r13)
// 332: 75 16                         jne     0x34a <_JIT_ENTRY+0x34a>
// 334: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000336:  R_X86_64_64  PySuper_Type
// 33e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000340:  R_X86_64_64  _Py_Dealloc
// 348: ff d0                         callq   *%rax
// 34a: 48 8b 45 00                   movq    (%rbp), %rax
// 34e: 48 85 c0                      testq   %rax, %rax
// 351: 7f 22                         jg      0x375 <_JIT_ENTRY+0x375>
// 353: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000355:  R_X86_64_64  .rodata.str1.1
// 35d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035f:  R_X86_64_64  _Py_NegativeRefcount
// 367: be 19 06 00 00                movl    $0x619, %esi            # imm = 0x619
// 36c: 48 89 ea                      movq    %rbp, %rdx
// 36f: ff d0                         callq   *%rax
// 371: 48 8b 45 00                   movq    (%rbp), %rax
// 375: 85 c0                         testl   %eax, %eax
// 377: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 37c: 78 21                         js      0x39f <_JIT_ENTRY+0x39f>
// 37e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000380:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 388: ff d0                         callq   *%rax
// 38a: 48 ff 4d 00                   decq    (%rbp)
// 38e: 75 0f                         jne     0x39f <_JIT_ENTRY+0x39f>
// 390: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000392:  R_X86_64_64  _Py_Dealloc
// 39a: 48 89 ef                      movq    %rbp, %rdi
// 39d: ff d0                         callq   *%rax
// 39f: 48 85 db                      testq   %rbx, %rbx
// 3a2: 74 6e                         je      0x412 <_JIT_ENTRY+0x412>
// 3a4: 48 89 dd                      movq    %rbx, %rbp
// 3a7: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 3ac: 4e 8d 3c fb                   leaq    (%rbx,%r15,8), %r15
// 3b0: 49 83 c7 f8                   addq    $-0x8, %r15
// 3b4: 83 7c 24 04 00                cmpl    $0x0, 0x4(%rsp)
// 3b9: 75 17                         jne     0x3d2 <_JIT_ENTRY+0x3d2>
// 3bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bd:  R_X86_64_64  .text+0x490
// 3c5: bf 21 06 00 00                movl    $0x621, %edi            # imm = 0x621
// 3ca: 4c 89 e6                      movq    %r12, %rsi
// 3cd: ff d0                         callq   *%rax
// 3cf: 45 31 e4                      xorl    %r12d, %r12d
// 3d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d4:  R_X86_64_64  _JIT_OPARG
// 3dc: f7 d0                         notl    %eax
// 3de: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 3e3: 48 98                         cltq
// 3e5: 48 89 6c c3 e8                movq    %rbp, -0x18(%rbx,%rax,8)
// 3ea: 4c 89 64 c3 f0                movq    %r12, -0x10(%rbx,%rax,8)
// 3ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f1:  R_X86_64_64  _JIT_CONTINUE
// 3f9: 4c 89 f7                      movq    %r14, %rdi
// 3fc: 4c 89 fe                      movq    %r15, %rsi
// 3ff: 4c 89 ea                      movq    %r13, %rdx
// 402: 48 83 c4 38                   addq    $0x38, %rsp
// 406: 5b                            popq    %rbx
// 407: 41 5c                         popq    %r12
// 409: 41 5d                         popq    %r13
// 40b: 41 5e                         popq    %r14
// 40d: 41 5f                         popq    %r15
// 40f: 5d                            popq    %rbp
// 410: ff e0                         jmpq    *%rax
// 412: 49 8b 04 24                   movq    (%r12), %rax
// 416: 48 85 c0                      testq   %rax, %rax
// 419: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 41e: 7f 22                         jg      0x442 <_JIT_ENTRY+0x442>
// 420: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000422:  R_X86_64_64  .rodata.str1.1
// 42a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000042c:  R_X86_64_64  _Py_NegativeRefcount
// 434: be 1b 06 00 00                movl    $0x61b, %esi            # imm = 0x61B
// 439: 4c 89 e2                      movq    %r12, %rdx
// 43c: ff d0                         callq   *%rax
// 43e: 49 8b 04 24                   movq    (%r12), %rax
// 442: 85 c0                         testl   %eax, %eax
// 444: 78 21                         js      0x467 <_JIT_ENTRY+0x467>
// 446: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000448:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 450: ff d0                         callq   *%rax
// 452: 49 ff 0c 24                   decq    (%r12)
// 456: 75 0f                         jne     0x467 <_JIT_ENTRY+0x467>
// 458: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000045a:  R_X86_64_64  _Py_Dealloc
// 462: 4c 89 e7                      movq    %r12, %rdi
// 465: ff d0                         callq   *%rax
// 467: 4a 8d 04 fb                   leaq    (%rbx,%r15,8), %rax
// 46b: 48 83 c0 e8                   addq    $-0x18, %rax
// 46f: 4c 29 f0                      subq    %r14, %rax
// 472: 48 83 c0 b8                   addq    $-0x48, %rax
// 476: 48 c1 e8 03                   shrq    $0x3, %rax
// 47a: 41 89 46 40                   movl    %eax, 0x40(%r14)
// 47e: 31 c0                         xorl    %eax, %eax
// 480: 48 83 c4 38                   addq    $0x38, %rsp
// 484: 5b                            popq    %rbx
// 485: 41 5c                         popq    %r12
// 487: 41 5d                         popq    %r13
// 489: 41 5e                         popq    %r14
// 48b: 41 5f                         popq    %r15
// 48d: 5d                            popq    %rbp
// 48e: c3                            retq
// 48f: 90                            nop
// 
// 0000000000000490 <Py_DECREF>:
// 490: 53                            pushq   %rbx
// 491: 48 89 f3                      movq    %rsi, %rbx
// 494: 48 8b 06                      movq    (%rsi), %rax
// 497: 48 85 c0                      testq   %rax, %rax
// 49a: 7e 06                         jle     0x4a2 <Py_DECREF+0x12>
// 49c: 85 c0                         testl   %eax, %eax
// 49e: 79 24                         jns     0x4c4 <Py_DECREF+0x34>
// 4a0: eb 33                         jmp     0x4d5 <Py_DECREF+0x45>
// 4a2: 89 fe                         movl    %edi, %esi
// 4a4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000004a6:  R_X86_64_64  .rodata.str1.1
// 4ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004b0:  R_X86_64_64  _Py_NegativeRefcount
// 4b8: 48 89 da                      movq    %rbx, %rdx
// 4bb: ff d0                         callq   *%rax
// 4bd: 48 8b 03                      movq    (%rbx), %rax
// 4c0: 85 c0                         testl   %eax, %eax
// 4c2: 78 11                         js      0x4d5 <Py_DECREF+0x45>
// 4c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004c6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4ce: ff d0                         callq   *%rax
// 4d0: 48 ff 0b                      decq    (%rbx)
// 4d3: 74 02                         je      0x4d7 <Py_DECREF+0x47>
// 4d5: 5b                            popq    %rbx
// 4d6: c3                            retq
// 4d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004d9:  R_X86_64_64  _Py_Dealloc
// 4e1: 48 89 df                      movq    %rbx, %rdi
// 4e4: 5b                            popq    %rbx
// 4e5: ff e0                         jmpq    *%rax
// 4e7: 
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_SUPER_ATTR_METHOD_code_body[1256] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x45, 0x8d, 0x78, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4e, 0x8b, 0x24, 0xd3, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xd0, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xbf, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x28, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x74, 0x24, 0x30, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0x8d, 0x2c, 0xcb, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x30, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x5c, 0x24, 0x28, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x45, 0x01, 0x00, 0x00, 0x48, 0x8d, 0x04, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xe8, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x34, 0x03, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x8d, 0x1c, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xeb, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0xe9, 0xf3, 0x02, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdf, 0x45, 0x31, 0xff, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0x1d, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x41, 0xff, 0xd6, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xb1, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xa0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x39, 0x6c, 0xfd, 0xe8, 0x75, 0x15, 0x48, 0x89, 0xe9, 0x4a, 0x8b, 0x6c, 0xfd, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x5a, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x19, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8d, 0x04, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xe8, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x85, 0xac, 0xfe, 0xff, 0xff, 0xe9, 0xdb, 0x01, 0x00, 0x00, 0x4e, 0x8b, 0x64, 0xf9, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0xc7, 0x44, 0x24, 0x04, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x48, 0x39, 0x88, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x4c, 0x24, 0x04, 0x48, 0x0f, 0x45, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x19, 0x06, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xdb, 0x74, 0x6e, 0x48, 0x89, 0xdd, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4e, 0x8d, 0x3c, 0xfb, 0x49, 0x83, 0xc7, 0xf8, 0x83, 0x7c, 0x24, 0x04, 0x00, 0x75, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x21, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x45, 0x31, 0xe4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x89, 0x6c, 0xc3, 0xe8, 0x4c, 0x89, 0x64, 0xc3, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4a, 0x8d, 0x04, 0xfb, 0x48, 0x83, 0xc0, 0xe8, 0x4c, 0x29, 0xf0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x46, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x90, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_SUPER_ATTR_METHOD_code_holes[38] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GenericGetAttr, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x2fe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x308, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x324, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x336, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x340, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x355, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x35f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x380, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x392, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3bd, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x490},
    {0x3d4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3f1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x422, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x42c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x448, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x45a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x4a6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x4b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x4c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x4d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_LOAD_SUPER_ATTR_METHOD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_LOAD_SUPER_ATTR_METHOD_data_holes[1];

// _CALL_BUILTIN_CLASSplus_MAKE_CELL
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_MAKE_CELL.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 9f 01 00 00             je      0x206 <_JIT_ENTRY+0x206>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 8e 01 00 00             je      0x206 <_JIT_ENTRY+0x206>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 73 01 00 00             je      0x233 <_JIT_ENTRY+0x233>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f2: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// f7: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// fc: 78 16                         js      0x114 <_JIT_ENTRY+0x114>
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 108: ff d0                         callq   *%rax
// 10a: 49 ff 0c 24                   decq    (%r12)
// 10e: 0f 84 c7 01 00 00             je      0x2db <_JIT_ENTRY+0x2db>
// 114: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 119: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 11d: 4d 85 f6                      testq   %r14, %r14
// 120: 0f 84 96 01 00 00             je      0x2bc <_JIT_ENTRY+0x2bc>
// 126: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12a: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 12e: 4c 89 30                      movq    %r14, (%rax)
// 131: 49 8b 45 10                   movq    0x10(%r13), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 74 17                         je      0x153 <_JIT_ENTRY+0x153>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_HandlePending
// 146: 4c 89 ef                      movq    %r13, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 85 c0                         testl   %eax, %eax
// 14d: 0f 85 66 01 00 00             jne     0x2b9 <_JIT_ENTRY+0x2b9>
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _JIT_OPARG
// 15d: 0f b7 c0                      movzwl  %ax, %eax
// 160: 48 8b 7c c3 48                movq    0x48(%rbx,%rax,8), %rdi
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  PyCell_New
// 16f: ff d0                         callq   *%rax
// 171: 48 85 c0                      testq   %rax, %rax
// 174: 0f 84 3f 01 00 00             je      0x2b9 <_JIT_ENTRY+0x2b9>
// 17a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017c:  R_X86_64_64  _JIT_OPARG
// 184: 0f b7 c9                      movzwl  %cx, %ecx
// 187: 4c 8b 74 cb 48                movq    0x48(%rbx,%rcx,8), %r14
// 18c: 48 89 44 cb 48                movq    %rax, 0x48(%rbx,%rcx,8)
// 191: 4d 85 f6                      testq   %r14, %r14
// 194: 74 4d                         je      0x1e3 <_JIT_ENTRY+0x1e3>
// 196: 49 8b 06                      movq    (%r14), %rax
// 199: 48 85 c0                      testq   %rax, %rax
// 19c: 7f 21                         jg      0x1bf <_JIT_ENTRY+0x1bf>
// 19e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a0:  R_X86_64_64  .rodata.str1.1+0x39
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _Py_NegativeRefcount
// 1b2: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 1b7: 4c 89 f2                      movq    %r14, %rdx
// 1ba: ff d0                         callq   *%rax
// 1bc: 49 8b 06                      movq    (%r14), %rax
// 1bf: 85 c0                         testl   %eax, %eax
// 1c1: 78 20                         js      0x1e3 <_JIT_ENTRY+0x1e3>
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cd: ff d0                         callq   *%rax
// 1cf: 49 ff 0e                      decq    (%r14)
// 1d2: 75 0f                         jne     0x1e3 <_JIT_ENTRY+0x1e3>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _Py_Dealloc
// 1de: 4c 89 f7                      movq    %r14, %rdi
// 1e1: ff d0                         callq   *%rax
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _JIT_CONTINUE
// 1ed: 48 89 df                      movq    %rbx, %rdi
// 1f0: 4c 89 fe                      movq    %r15, %rsi
// 1f3: 4c 89 ea                      movq    %r13, %rdx
// 1f6: 48 83 c4 28                   addq    $0x28, %rsp
// 1fa: 5b                            popq    %rbx
// 1fb: 41 5c                         popq    %r12
// 1fd: 41 5d                         popq    %r13
// 1ff: 41 5e                         popq    %r14
// 201: 41 5f                         popq    %r15
// 203: 5d                            popq    %rbp
// 204: ff e0                         jmpq    *%rax
// 206: 49 29 ff                      subq    %rdi, %r15
// 209: 49 83 c7 b8                   addq    $-0x48, %r15
// 20d: 49 c1 ef 03                   shrq    $0x3, %r15
// 211: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 215: 48 8b 07                      movq    (%rdi), %rax
// 218: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021a:  R_X86_64_64  _JIT_TARGET
// 222: 89 c9                         movl    %ecx, %ecx
// 224: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 228: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 22e: e9 99 00 00 00                jmp     0x2cc <_JIT_ENTRY+0x2cc>
// 233: 41 83 fd 02                   cmpl    $0x2, %r13d
// 237: 41 be 01 00 00 00             movl    $0x1, %r14d
// 23d: 45 0f 43 f5                   cmovael %r13d, %r14d
// 241: 31 db                         xorl    %ebx, %ebx
// 243: eb 17                         jmp     0x25c <_JIT_ENTRY+0x25c>
// 245: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 250: 48 ff c3                      incq    %rbx
// 253: 49 39 de                      cmpq    %rbx, %r14
// 256: 0f 84 64 fe ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 25c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 261: 49 8b 45 00                   movq    (%r13), %rax
// 265: 48 85 c0                      testq   %rax, %rax
// 268: 7e 06                         jle     0x270 <_JIT_ENTRY+0x270>
// 26a: 85 c0                         testl   %eax, %eax
// 26c: 78 e2                         js      0x250 <_JIT_ENTRY+0x250>
// 26e: eb 26                         jmp     0x296 <_JIT_ENTRY+0x296>
// 270: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000272:  R_X86_64_64  .rodata.str1.1
// 27a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 27f: 4c 89 ea                      movq    %r13, %rdx
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_NegativeRefcount
// 28c: ff d0                         callq   *%rax
// 28e: 49 8b 45 00                   movq    (%r13), %rax
// 292: 85 c0                         testl   %eax, %eax
// 294: 78 ba                         js      0x250 <_JIT_ENTRY+0x250>
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a0: ff d0                         callq   *%rax
// 2a2: 49 ff 4d 00                   decq    (%r13)
// 2a6: 75 a8                         jne     0x250 <_JIT_ENTRY+0x250>
// 2a8: 4c 89 ef                      movq    %r13, %rdi
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_Dealloc
// 2b5: ff d0                         callq   *%rax
// 2b7: eb 97                         jmp     0x250 <_JIT_ENTRY+0x250>
// 2b9: 4c 89 f8                      movq    %r15, %rax
// 2bc: 48 29 d8                      subq    %rbx, %rax
// 2bf: 48 83 c0 b8                   addq    $-0x48, %rax
// 2c3: 48 c1 e8 03                   shrq    $0x3, %rax
// 2c7: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2ca: 31 c0                         xorl    %eax, %eax
// 2cc: 48 83 c4 28                   addq    $0x28, %rsp
// 2d0: 5b                            popq    %rbx
// 2d1: 41 5c                         popq    %r12
// 2d3: 41 5d                         popq    %r13
// 2d5: 41 5e                         popq    %r14
// 2d7: 41 5f                         popq    %r15
// 2d9: 5d                            popq    %rbp
// 2da: c3                            retq
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _Py_Dealloc
// 2e5: 4c 89 e7                      movq    %r12, %rdi
// 2e8: ff d0                         callq   *%rax
// 2ea: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2ef: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 2f3: 4d 85 f6                      testq   %r14, %r14
// 2f6: 0f 85 2a fe ff ff             jne     0x126 <_JIT_ENTRY+0x126>
// 2fc: eb be                         jmp     0x2bc <_JIT_ENTRY+0x2bc>
// 2fe: 
static const unsigned char _CALL_BUILTIN_CLASSplus_MAKE_CELL_code_body[767] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x9f, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x8e, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x73, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xc7, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x96, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xcf, 0x4c, 0x89, 0x30, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x66, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x7c, 0xc3, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x3f, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x74, 0xcb, 0x48, 0x48, 0x89, 0x44, 0xcb, 0x48, 0x4d, 0x85, 0xf6, 0x74, 0x4d, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x99, 0x00, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x17, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x64, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xf6, 0x0f, 0x85, 0x2a, 0xfe, 0xff, 0xff, 0xeb, 0xbe};
static const Hole _CALL_BUILTIN_CLASSplus_MAKE_CELL_code_holes[21] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCell_New, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_MAKE_CELL_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_MAKE_CELL_data_holes[1];

// _CALL_BUILTIN_CLASSplus_MAKE_FUNCTION
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_MAKE_FUNCTION.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 c0 01 00 00             je      0x227 <_JIT_ENTRY+0x227>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 af 01 00 00             je      0x227 <_JIT_ENTRY+0x227>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 94 01 00 00             je      0x254 <_JIT_ENTRY+0x254>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f2: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// f7: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// fc: 78 16                         js      0x114 <_JIT_ENTRY+0x114>
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 108: ff d0                         callq   *%rax
// 10a: 49 ff 0c 24                   decq    (%r12)
// 10e: 0f 84 e7 01 00 00             je      0x2fb <_JIT_ENTRY+0x2fb>
// 114: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 119: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 11d: 4d 85 ed                      testq   %r13, %r13
// 120: 0f 84 b6 01 00 00             je      0x2dc <_JIT_ENTRY+0x2dc>
// 126: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12a: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 12e: 4c 89 28                      movq    %r13, (%rax)
// 131: 49 8b 47 10                   movq    0x10(%r15), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 74 17                         je      0x153 <_JIT_ENTRY+0x153>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_HandlePending
// 146: 4c 89 ff                      movq    %r15, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 85 c0                         testl   %eax, %eax
// 14d: 0f 85 86 01 00 00             jne     0x2d9 <_JIT_ENTRY+0x2d9>
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _JIT_OPARG
// 15d: f7 d0                         notl    %eax
// 15f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 164: 48 98                         cltq
// 166: 49 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %rbp
// 16b: 48 8b 73 18                   movq    0x18(%rbx), %rsi
// 16f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000171:  R_X86_64_64  PyFunction_New
// 179: 48 89 ef                      movq    %rbp, %rdi
// 17c: ff d0                         callq   *%rax
// 17e: 49 89 c5                      movq    %rax, %r13
// 181: 48 8b 45 00                   movq    (%rbp), %rax
// 185: 48 85 c0                      testq   %rax, %rax
// 188: 7f 22                         jg      0x1ac <_JIT_ENTRY+0x1ac>
// 18a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018c:  R_X86_64_64  .rodata.str1.1
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_NegativeRefcount
// 19e: be 4e 0c 00 00                movl    $0xc4e, %esi            # imm = 0xC4E
// 1a3: 48 89 ea                      movq    %rbp, %rdx
// 1a6: ff d0                         callq   *%rax
// 1a8: 48 8b 45 00                   movq    (%rbp), %rax
// 1ac: 85 c0                         testl   %eax, %eax
// 1ae: 78 21                         js      0x1d1 <_JIT_ENTRY+0x1d1>
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ba: ff d0                         callq   *%rax
// 1bc: 48 ff 4d 00                   decq    (%rbp)
// 1c0: 75 0f                         jne     0x1d1 <_JIT_ENTRY+0x1d1>
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _Py_Dealloc
// 1cc: 48 89 ef                      movq    %rbp, %rdi
// 1cf: ff d0                         callq   *%rax
// 1d1: 4d 85 ed                      testq   %r13, %r13
// 1d4: 0f 84 ff 00 00 00             je      0x2d9 <_JIT_ENTRY+0x2d9>
// 1da: 8b 75 5c                      movl    0x5c(%rbp), %esi
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _PyFunction_SetVersion
// 1e7: 4c 89 ef                      movq    %r13, %rdi
// 1ea: ff d0                         callq   *%rax
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _JIT_OPARG
// 1f6: f7 d0                         notl    %eax
// 1f8: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1fd: 48 98                         cltq
// 1ff: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _JIT_CONTINUE
// 20e: 48 89 df                      movq    %rbx, %rdi
// 211: 4c 89 e6                      movq    %r12, %rsi
// 214: 4c 89 fa                      movq    %r15, %rdx
// 217: 48 83 c4 28                   addq    $0x28, %rsp
// 21b: 5b                            popq    %rbx
// 21c: 41 5c                         popq    %r12
// 21e: 41 5d                         popq    %r13
// 220: 41 5e                         popq    %r14
// 222: 41 5f                         popq    %r15
// 224: 5d                            popq    %rbp
// 225: ff e0                         jmpq    *%rax
// 227: 49 29 fe                      subq    %rdi, %r14
// 22a: 49 83 c6 b8                   addq    $-0x48, %r14
// 22e: 49 c1 ee 03                   shrq    $0x3, %r14
// 232: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 236: 48 8b 07                      movq    (%rdi), %rax
// 239: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023b:  R_X86_64_64  _JIT_TARGET
// 243: 89 c9                         movl    %ecx, %ecx
// 245: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 249: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 24f: e9 98 00 00 00                jmp     0x2ec <_JIT_ENTRY+0x2ec>
// 254: 41 83 fd 02                   cmpl    $0x2, %r13d
// 258: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 25e: 45 0f 43 fd                   cmovael %r13d, %r15d
// 262: 31 db                         xorl    %ebx, %ebx
// 264: eb 16                         jmp     0x27c <_JIT_ENTRY+0x27c>
// 266: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 270: 48 ff c3                      incq    %rbx
// 273: 49 39 df                      cmpq    %rbx, %r15
// 276: 0f 84 44 fe ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 27c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 281: 49 8b 45 00                   movq    (%r13), %rax
// 285: 48 85 c0                      testq   %rax, %rax
// 288: 7e 06                         jle     0x290 <_JIT_ENTRY+0x290>
// 28a: 85 c0                         testl   %eax, %eax
// 28c: 78 e2                         js      0x270 <_JIT_ENTRY+0x270>
// 28e: eb 26                         jmp     0x2b6 <_JIT_ENTRY+0x2b6>
// 290: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000292:  R_X86_64_64  .rodata.str1.1
// 29a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 29f: 4c 89 ea                      movq    %r13, %rdx
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _Py_NegativeRefcount
// 2ac: ff d0                         callq   *%rax
// 2ae: 49 8b 45 00                   movq    (%r13), %rax
// 2b2: 85 c0                         testl   %eax, %eax
// 2b4: 78 ba                         js      0x270 <_JIT_ENTRY+0x270>
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c0: ff d0                         callq   *%rax
// 2c2: 49 ff 4d 00                   decq    (%r13)
// 2c6: 75 a8                         jne     0x270 <_JIT_ENTRY+0x270>
// 2c8: 4c 89 ef                      movq    %r13, %rdi
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _Py_Dealloc
// 2d5: ff d0                         callq   *%rax
// 2d7: eb 97                         jmp     0x270 <_JIT_ENTRY+0x270>
// 2d9: 4c 89 e0                      movq    %r12, %rax
// 2dc: 48 29 d8                      subq    %rbx, %rax
// 2df: 48 83 c0 b8                   addq    $-0x48, %rax
// 2e3: 48 c1 e8 03                   shrq    $0x3, %rax
// 2e7: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2ea: 31 c0                         xorl    %eax, %eax
// 2ec: 48 83 c4 28                   addq    $0x28, %rsp
// 2f0: 5b                            popq    %rbx
// 2f1: 41 5c                         popq    %r12
// 2f3: 41 5d                         popq    %r13
// 2f5: 41 5e                         popq    %r14
// 2f7: 41 5f                         popq    %r15
// 2f9: 5d                            popq    %rbp
// 2fa: c3                            retq
// 2fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fd:  R_X86_64_64  _Py_Dealloc
// 305: 4c 89 e7                      movq    %r12, %rdi
// 308: ff d0                         callq   *%rax
// 30a: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 30f: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 313: 4d 85 ed                      testq   %r13, %r13
// 316: 0f 85 0a fe ff ff             jne     0x126 <_JIT_ENTRY+0x126>
// 31c: eb be                         jmp     0x2dc <_JIT_ENTRY+0x2dc>
// 31e: 
static const unsigned char _CALL_BUILTIN_CLASSplus_MAKE_FUNCTION_code_body[799] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xc0, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xaf, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x94, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xe7, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xb6, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x86, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x6c, 0xc6, 0xf8, 0x48, 0x8b, 0x73, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4e, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xff, 0x00, 0x00, 0x00, 0x8b, 0x75, 0x5c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x98, 0x00, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x16, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x44, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x0f, 0x85, 0x0a, 0xfe, 0xff, 0xff, 0xeb, 0xbe};
static const Hole _CALL_BUILTIN_CLASSplus_MAKE_FUNCTION_code_holes[22] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_New, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFunction_SetVersion, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_MAKE_FUNCTION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_MAKE_FUNCTION_data_holes[1];

// _CALL_BUILTIN_CLASSplus_MAP_ADD
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_MAP_ADD.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 14 24                   movq    %r10, (%rsp)
// 79: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 7e: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 83: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 ea                      movl    %r13d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c8 00 00 00             jle     0x189 <_JIT_ENTRY+0x189>
// c1: 85 c0                         testl   %eax, %eax
// c3: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// c8: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// cd: 0f 89 e6 00 00 00             jns     0x1b9 <_JIT_ENTRY+0x1b9>
// d3: e9 02 01 00 00                jmp     0x1da <_JIT_ENTRY+0x1da>
// d8: 49 29 ff                      subq    %rdi, %r15
// db: 49 83 c7 b8                   addq    $-0x48, %r15
// df: 49 c1 ef 03                   shrq    $0x3, %r15
// e3: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 71 01 00 00                jmp     0x276 <_JIT_ENTRY+0x276>
// 105: 41 83 fd 02                   cmpl    $0x2, %r13d
// 109: 41 be 01 00 00 00             movl    $0x1, %r14d
// 10f: 45 0f 43 f5                   cmovael %r13d, %r14d
// 113: 31 db                         xorl    %ebx, %ebx
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 48 ff c3                      incq    %rbx
// 123: 49 39 de                      cmpq    %rbx, %r14
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 12d: 49 8b 45 00                   movq    (%r13), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 0a                         jle     0x140 <_JIT_ENTRY+0x140>
// 136: 85 c0                         testl   %eax, %eax
// 138: 78 e6                         js      0x120 <_JIT_ENTRY+0x120>
// 13a: eb 2a                         jmp     0x166 <_JIT_ENTRY+0x166>
// 13c: 0f 1f 40 00                   nopl    (%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 ea                      movq    %r13, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 78 ba                         js      0x120 <_JIT_ENTRY+0x120>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 4d 00                   decq    (%r13)
// 176: 75 a8                         jne     0x120 <_JIT_ENTRY+0x120>
// 178: 4c 89 ef                      movq    %r13, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: eb 97                         jmp     0x120 <_JIT_ENTRY+0x120>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 1b2: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b7: 78 21                         js      0x1da <_JIT_ENTRY+0x1da>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c3: ff d0                         callq   *%rax
// 1c5: 49 ff 0c 24                   decq    (%r12)
// 1c9: 75 0f                         jne     0x1da <_JIT_ENTRY+0x1da>
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _Py_Dealloc
// 1d5: 4c 89 e7                      movq    %r12, %rdi
// 1d8: ff d0                         callq   *%rax
// 1da: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 1de: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1e3: 48 85 d2                      testq   %rdx, %rdx
// 1e6: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 1eb: 74 78                         je      0x265 <_JIT_ENTRY+0x265>
// 1ed: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1f1: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 1f5: 48 89 10                      movq    %rdx, (%rax)
// 1f8: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1fc: 48 8b 00                      movq    (%rax), %rax
// 1ff: 84 c0                         testb   %al, %al
// 201: 74 13                         je      0x216 <_JIT_ENTRY+0x216>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _Py_HandlePending
// 20d: 4c 89 ef                      movq    %r13, %rdi
// 210: ff d0                         callq   *%rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 75 4c                         jne     0x262 <_JIT_ENTRY+0x262>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _JIT_OPARG
// 220: 0f b7 c0                      movzwl  %ax, %eax
// 223: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 228: 29 c1                         subl    %eax, %ecx
// 22a: f7 d0                         notl    %eax
// 22c: 48 98                         cltq
// 22e: 49 8b 74 c7 f0                movq    -0x10(%r15,%rax,8), %rsi
// 233: 49 8b 54 c7 f8                movq    -0x8(%r15,%rax,8), %rdx
// 238: 49 8d 1c c7                   leaq    (%r15,%rax,8), %rbx
// 23c: 48 83 c3 f0                   addq    $-0x10, %rbx
// 240: 48 63 c9                      movslq  %ecx, %rcx
// 243: 48 01 c1                      addq    %rax, %rcx
// 246: 49 8b 3c cf                   movq    (%r15,%rcx,8), %rdi
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _PyDict_SetItem_Take2
// 254: ff d0                         callq   *%rax
// 256: 85 c0                         testl   %eax, %eax
// 258: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 25c: 74 27                         je      0x285 <_JIT_ENTRY+0x285>
// 25e: 49 83 c4 f0                   addq    $-0x10, %r12
// 262: 4c 89 e0                      movq    %r12, %rax
// 265: 4c 29 f0                      subq    %r14, %rax
// 268: 48 83 c0 b8                   addq    $-0x48, %rax
// 26c: 48 c1 e8 03                   shrq    $0x3, %rax
// 270: 41 89 46 40                   movl    %eax, 0x40(%r14)
// 274: 31 c0                         xorl    %eax, %eax
// 276: 48 83 c4 28                   addq    $0x28, %rsp
// 27a: 5b                            popq    %rbx
// 27b: 41 5c                         popq    %r12
// 27d: 41 5d                         popq    %r13
// 27f: 41 5e                         popq    %r14
// 281: 41 5f                         popq    %r15
// 283: 5d                            popq    %rbp
// 284: c3                            retq
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _JIT_CONTINUE
// 28f: 4c 89 f7                      movq    %r14, %rdi
// 292: 4c 89 e6                      movq    %r12, %rsi
// 295: 4c 89 ea                      movq    %r13, %rdx
// 298: 48 83 c4 28                   addq    $0x28, %rsp
// 29c: 5b                            popq    %rbx
// 29d: 41 5c                         popq    %r12
// 29f: 41 5d                         popq    %r13
// 2a1: 41 5e                         popq    %r14
// 2a3: 41 5f                         popq    %r15
// 2a5: 5d                            popq    %rbp
// 2a6: ff e0                         jmpq    *%rax
// 2a8: 
static const unsigned char _CALL_BUILTIN_CLASSplus_MAP_ADD_code_body[681] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc8, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x89, 0xe6, 0x00, 0x00, 0x00, 0xe9, 0x02, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x71, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x74, 0x8c, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x85, 0xc0, 0x78, 0xe6, 0xeb, 0x2a, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x74, 0x78, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x4c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x74, 0xc7, 0xf0, 0x49, 0x8b, 0x54, 0xc7, 0xf8, 0x49, 0x8d, 0x1c, 0xc7, 0x48, 0x83, 0xc3, 0xf0, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xc1, 0x49, 0x8b, 0x3c, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x4c, 0x0f, 0x44, 0xe3, 0x74, 0x27, 0x49, 0x83, 0xc4, 0xf0, 0x4c, 0x89, 0xe0, 0x4c, 0x29, 0xf0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x46, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_MAP_ADD_code_holes[16] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_MAP_ADD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_MAP_ADD_data_holes[1];

// _CALL_BUILTIN_CLASSplus_MATCH_CLASS
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_MATCH_CLASS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 0a 01 00 00             je      0x171 <_JIT_ENTRY+0x171>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 f9 00 00 00             je      0x171 <_JIT_ENTRY+0x171>
// 78: 4c 89 0c 24                   movq    %r9, (%rsp)
// 7c: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 81: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 e8 00 00 00             je      0x1a8 <_JIT_ENTRY+0x1a8>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// f2: 48 8b 1c 24                   movq    (%rsp), %rbx
// f6: 78 21                         js      0x119 <_JIT_ENTRY+0x119>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 102: ff d0                         callq   *%rax
// 104: 49 ff 0c 24                   decq    (%r12)
// 108: 75 0f                         jne     0x119 <_JIT_ENTRY+0x119>
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: 4c 89 e7                      movq    %r12, %rdi
// 117: ff d0                         callq   *%rax
// 119: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 11d: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 122: 48 85 c9                      testq   %rcx, %rcx
// 125: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 12a: 74 32                         je      0x15e <_JIT_ENTRY+0x15e>
// 12c: 48 89 08                      movq    %rcx, (%rax)
// 12f: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 84 c0                         testb   %al, %al
// 138: 0f 84 eb 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _Py_HandlePending
// 148: 48 89 ef                      movq    %rbp, %rdi
// 14b: ff d0                         callq   *%rax
// 14d: 85 c0                         testl   %eax, %eax
// 14f: 0f 84 d4 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 155: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 15a: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 15e: 4c 29 f8                      subq    %r15, %rax
// 161: 48 83 c0 b8                   addq    $-0x48, %rax
// 165: 48 c1 e8 03                   shrq    $0x3, %rax
// 169: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 16d: 31 c0                         xorl    %eax, %eax
// 16f: eb 28                         jmp     0x199 <_JIT_ENTRY+0x199>
// 171: 49 29 fe                      subq    %rdi, %r14
// 174: 49 83 c6 b8                   addq    $-0x48, %r14
// 178: 49 c1 ee 03                   shrq    $0x3, %r14
// 17c: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 180: 48 8b 07                      movq    (%rdi), %rax
// 183: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000185:  R_X86_64_64  _JIT_TARGET
// 18d: 89 c9                         movl    %ecx, %ecx
// 18f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 193: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 199: 48 83 c4 28                   addq    $0x28, %rsp
// 19d: 5b                            popq    %rbx
// 19e: 41 5c                         popq    %r12
// 1a0: 41 5d                         popq    %r13
// 1a2: 41 5e                         popq    %r14
// 1a4: 41 5f                         popq    %r15
// 1a6: 5d                            popq    %rbp
// 1a7: c3                            retq
// 1a8: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ac: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1b2: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1b6: 31 db                         xorl    %ebx, %ebx
// 1b8: eb 12                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1ba: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// 1c0: 48 ff c3                      incq    %rbx
// 1c3: 49 39 df                      cmpq    %rbx, %r15
// 1c6: 0f 84 f4 fe ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1cc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: 89 c1                         movl    %eax, %ecx
// 235: f7 d1                         notl    %ecx
// 237: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 23d: 48 63 d9                      movslq  %ecx, %rbx
// 240: 4d 8b 6c de f8                movq    -0x8(%r14,%rbx,8), %r13
// 245: 4d 8b 64 de e8                movq    -0x18(%r14,%rbx,8), %r12
// 24a: 48 89 ef                      movq    %rbp, %rdi
// 24d: 49 8b 6c de f0                movq    -0x10(%r14,%rbx,8), %rbp
// 252: 0f b7 c8                      movzwl  %ax, %ecx
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _PyEval_MatchClass
// 25f: 4c 89 e6                      movq    %r12, %rsi
// 262: 48 89 ea                      movq    %rbp, %rdx
// 265: 4d 89 e8                      movq    %r13, %r8
// 268: ff d0                         callq   *%rax
// 26a: 48 89 04 24                   movq    %rax, (%rsp)
// 26e: 49 8b 04 24                   movq    (%r12), %rax
// 272: 48 85 c0                      testq   %rax, %rax
// 275: 7f 22                         jg      0x299 <_JIT_ENTRY+0x299>
// 277: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000279:  R_X86_64_64  .rodata.str1.1
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  _Py_NegativeRefcount
// 28b: be 10 08 00 00                movl    $0x810, %esi            # imm = 0x810
// 290: 4c 89 e2                      movq    %r12, %rdx
// 293: ff d0                         callq   *%rax
// 295: 49 8b 04 24                   movq    (%r12), %rax
// 299: 85 c0                         testl   %eax, %eax
// 29b: 78 21                         js      0x2be <_JIT_ENTRY+0x2be>
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a7: ff d0                         callq   *%rax
// 2a9: 49 ff 0c 24                   decq    (%r12)
// 2ad: 75 0f                         jne     0x2be <_JIT_ENTRY+0x2be>
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _Py_Dealloc
// 2b9: 4c 89 e7                      movq    %r12, %rdi
// 2bc: ff d0                         callq   *%rax
// 2be: 48 8b 45 00                   movq    (%rbp), %rax
// 2c2: 48 85 c0                      testq   %rax, %rax
// 2c5: 7f 22                         jg      0x2e9 <_JIT_ENTRY+0x2e9>
// 2c7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c9:  R_X86_64_64  .rodata.str1.1
// 2d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d3:  R_X86_64_64  _Py_NegativeRefcount
// 2db: be 11 08 00 00                movl    $0x811, %esi            # imm = 0x811
// 2e0: 48 89 ea                      movq    %rbp, %rdx
// 2e3: ff d0                         callq   *%rax
// 2e5: 48 8b 45 00                   movq    (%rbp), %rax
// 2e9: 85 c0                         testl   %eax, %eax
// 2eb: 78 21                         js      0x30e <_JIT_ENTRY+0x30e>
// 2ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ef:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f7: ff d0                         callq   *%rax
// 2f9: 48 ff 4d 00                   decq    (%rbp)
// 2fd: 75 0f                         jne     0x30e <_JIT_ENTRY+0x30e>
// 2ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000301:  R_X86_64_64  _Py_Dealloc
// 309: 48 89 ef                      movq    %rbp, %rdi
// 30c: ff d0                         callq   *%rax
// 30e: 49 8b 45 00                   movq    (%r13), %rax
// 312: 48 85 c0                      testq   %rax, %rax
// 315: 7f 22                         jg      0x339 <_JIT_ENTRY+0x339>
// 317: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000319:  R_X86_64_64  .rodata.str1.1
// 321: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000323:  R_X86_64_64  _Py_NegativeRefcount
// 32b: be 12 08 00 00                movl    $0x812, %esi            # imm = 0x812
// 330: 4c 89 ea                      movq    %r13, %rdx
// 333: ff d0                         callq   *%rax
// 335: 49 8b 45 00                   movq    (%r13), %rax
// 339: 85 c0                         testl   %eax, %eax
// 33b: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 340: 78 21                         js      0x363 <_JIT_ENTRY+0x363>
// 342: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000344:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 34c: ff d0                         callq   *%rax
// 34e: 49 ff 4d 00                   decq    (%r13)
// 352: 75 0f                         jne     0x363 <_JIT_ENTRY+0x363>
// 354: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000356:  R_X86_64_64  _Py_Dealloc
// 35e: 4c 89 ef                      movq    %r13, %rdi
// 361: ff d0                         callq   *%rax
// 363: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 367: 48 83 c0 e8                   addq    $-0x18, %rax
// 36b: 48 8b 14 24                   movq    (%rsp), %rdx
// 36f: 48 85 d2                      testq   %rdx, %rdx
// 372: 74 2b                         je      0x39f <_JIT_ENTRY+0x39f>
// 374: 49 8d 34 de                   leaq    (%r14,%rbx,8), %rsi
// 378: 48 83 c6 f0                   addq    $-0x10, %rsi
// 37c: 48 89 10                      movq    %rdx, (%rax)
// 37f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000381:  R_X86_64_64  _JIT_CONTINUE
// 389: 4c 89 ff                      movq    %r15, %rdi
// 38c: 4c 89 e2                      movq    %r12, %rdx
// 38f: 48 83 c4 28                   addq    $0x28, %rsp
// 393: 5b                            popq    %rbx
// 394: 41 5c                         popq    %r12
// 396: 41 5d                         popq    %r13
// 398: 41 5e                         popq    %r14
// 39a: 41 5f                         popq    %r15
// 39c: 5d                            popq    %rbp
// 39d: ff e0                         jmpq    *%rax
// 39f: 49 8b 4c 24 68                movq    0x68(%r12), %rcx
// 3a4: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000003a6:  R_X86_64_64  _Py_NoneStruct
// 3ae: 48 85 c9                      testq   %rcx, %rcx
// 3b1: 74 c1                         je      0x374 <_JIT_ENTRY+0x374>
// 3b3: 48 83 79 08 00                cmpq    $0x0, 0x8(%rcx)
// 3b8: 0f 85 a0 fd ff ff             jne     0x15e <_JIT_ENTRY+0x15e>
// 3be: eb b4                         jmp     0x374 <_JIT_ENTRY+0x374>
// 3c0: 
static const unsigned char _CALL_BUILTIN_CLASSplus_MATCH_CLASS_code_body[961] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x0a, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xf9, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x0c, 0x24, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xe8, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x1c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x74, 0x32, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xeb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xd4, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0xeb, 0x28, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x12, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0xf4, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd9, 0x4d, 0x8b, 0x6c, 0xde, 0xf8, 0x4d, 0x8b, 0x64, 0xde, 0xe8, 0x48, 0x89, 0xef, 0x49, 0x8b, 0x6c, 0xde, 0xf0, 0x0f, 0xb7, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x4d, 0x89, 0xe8, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x10, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x08, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x12, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x83, 0xc0, 0xe8, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x74, 0x2b, 0x49, 0x8d, 0x34, 0xde, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x4c, 0x24, 0x68, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc9, 0x74, 0xc1, 0x48, 0x83, 0x79, 0x08, 0x00, 0x0f, 0x85, 0xa0, 0xfd, 0xff, 0xff, 0xeb, 0xb4};
static const Hole _CALL_BUILTIN_CLASSplus_MATCH_CLASS_code_holes[29] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchClass, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x319, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x323, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x344, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x356, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x381, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_MATCH_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_MATCH_CLASS_data_holes[1];

// _CALL_BUILTIN_CLASSplus_MATCH_KEYS
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_MATCH_KEYS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 79 01                   leal    0x1(%r9), %r15d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 f9                   cmovel  %r9d, %r15d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 7a: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 7f: 48 89 3c 24                   movq    %rdi, (%rsp)
// 83: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 fa                      movl    %r15d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c6 00 00 00             jle     0x187 <_JIT_ENTRY+0x187>
// c1: 85 c0                         testl   %eax, %eax
// c3: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// c8: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// cd: 0f 89 e4 00 00 00             jns     0x1b7 <_JIT_ENTRY+0x1b7>
// d3: e9 00 01 00 00                jmp     0x1d8 <_JIT_ENTRY+0x1d8>
// d8: 49 29 fe                      subq    %rdi, %r14
// db: 49 83 c6 b8                   addq    $-0x48, %r14
// df: 49 c1 ee 03                   shrq    $0x3, %r14
// e3: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 99 01 00 00                jmp     0x29e <_JIT_ENTRY+0x29e>
// 105: 41 83 ff 02                   cmpl    $0x2, %r15d
// 109: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 10f: 45 0f 43 ef                   cmovael %r15d, %r13d
// 113: 31 db                         xorl    %ebx, %ebx
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 48 ff c3                      incq    %rbx
// 123: 49 39 dd                      cmpq    %rbx, %r13
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4c 8b 7c dd 00                movq    (%rbp,%rbx,8), %r15
// 12d: 49 8b 07                      movq    (%r15), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7e 0b                         jle     0x140 <_JIT_ENTRY+0x140>
// 135: 85 c0                         testl   %eax, %eax
// 137: 78 e7                         js      0x120 <_JIT_ENTRY+0x120>
// 139: eb 2a                         jmp     0x165 <_JIT_ENTRY+0x165>
// 13b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 fa                      movq    %r15, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 07                      movq    (%r15), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 bb                         js      0x120 <_JIT_ENTRY+0x120>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0f                      decq    (%r15)
// 174: 75 aa                         jne     0x120 <_JIT_ENTRY+0x120>
// 176: 4c 89 ff                      movq    %r15, %rdi
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: ff d0                         callq   *%rax
// 185: eb 99                         jmp     0x120 <_JIT_ENTRY+0x120>
// 187: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000189:  R_X86_64_64  .rodata.str1.1
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _Py_NegativeRefcount
// 19b: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a0: 4c 89 e2                      movq    %r12, %rdx
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 8b 04 24                   movq    (%r12), %rax
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 1b0: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 1b5: 78 21                         js      0x1d8 <_JIT_ENTRY+0x1d8>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c1: ff d0                         callq   *%rax
// 1c3: 49 ff 0c 24                   decq    (%r12)
// 1c7: 75 0f                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_Dealloc
// 1d3: 4c 89 e7                      movq    %r12, %rdi
// 1d6: ff d0                         callq   *%rax
// 1d8: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1dd: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1e1: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1e6: 48 85 c9                      testq   %rcx, %rcx
// 1e9: 0f 84 98 00 00 00             je      0x287 <_JIT_ENTRY+0x287>
// 1ef: 49 8d 1c de                   leaq    (%r14,%rbx,8), %rbx
// 1f3: 48 89 08                      movq    %rcx, (%rax)
// 1f6: 49 8b 47 10                   movq    0x10(%r15), %rax
// 1fa: 48 8b 00                      movq    (%rax), %rax
// 1fd: 84 c0                         testb   %al, %al
// 1ff: 74 13                         je      0x214 <_JIT_ENTRY+0x214>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_HandlePending
// 20b: 4c 89 ff                      movq    %r15, %rdi
// 20e: ff d0                         callq   *%rax
// 210: 85 c0                         testl   %eax, %eax
// 212: 75 76                         jne     0x28a <_JIT_ENTRY+0x28a>
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _JIT_OPARG
// 21e: f7 d0                         notl    %eax
// 220: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 225: 48 98                         cltq
// 227: 49 8b 74 c6 f0                movq    -0x10(%r14,%rax,8), %rsi
// 22c: 49 8b 54 c6 f8                movq    -0x8(%r14,%rax,8), %rdx
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _PyEval_MatchKeys
// 23b: 4c 89 ff                      movq    %r15, %rdi
// 23e: ff d0                         callq   *%rax
// 240: 48 85 c0                      testq   %rax, %rax
// 243: 74 45                         je      0x28a <_JIT_ENTRY+0x28a>
// 245: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000247:  R_X86_64_64  _JIT_OPARG
// 24f: f7 d1                         notl    %ecx
// 251: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 257: 48 63 c9                      movslq  %ecx, %rcx
// 25a: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 25e: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 262: 48 83 c6 08                   addq    $0x8, %rsi
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _JIT_CONTINUE
// 270: 48 8b 3c 24                   movq    (%rsp), %rdi
// 274: 4c 89 fa                      movq    %r15, %rdx
// 277: 48 83 c4 28                   addq    $0x28, %rsp
// 27b: 5b                            popq    %rbx
// 27c: 41 5c                         popq    %r12
// 27e: 41 5d                         popq    %r13
// 280: 41 5e                         popq    %r14
// 282: 41 5f                         popq    %r15
// 284: 5d                            popq    %rbp
// 285: ff e0                         jmpq    *%rax
// 287: 48 89 c3                      movq    %rax, %rbx
// 28a: 48 8b 04 24                   movq    (%rsp), %rax
// 28e: 48 29 c3                      subq    %rax, %rbx
// 291: 48 83 c3 b8                   addq    $-0x48, %rbx
// 295: 48 c1 eb 03                   shrq    $0x3, %rbx
// 299: 89 58 40                      movl    %ebx, 0x40(%rax)
// 29c: 31 c0                         xorl    %eax, %eax
// 29e: 48 83 c4 28                   addq    $0x28, %rsp
// 2a2: 5b                            popq    %rbx
// 2a3: 41 5c                         popq    %r12
// 2a5: 41 5d                         popq    %r13
// 2a7: 41 5e                         popq    %r14
// 2a9: 41 5f                         popq    %r15
// 2ab: 5d                            popq    %rbp
// 2ac: c3                            retq
// 2ad: 
static const unsigned char _CALL_BUILTIN_CLASSplus_MATCH_KEYS_code_body[686] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x79, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x20, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x0f, 0x89, 0xe4, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x99, 0x01, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xef, 0x31, 0xdb, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x74, 0x8c, 0x4c, 0x8b, 0x7c, 0xdd, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x0b, 0x85, 0xc0, 0x78, 0xe7, 0xeb, 0x2a, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x1c, 0xde, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x76, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x74, 0xc6, 0xf0, 0x49, 0x8b, 0x54, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x45, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x89, 0xc3, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x58, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_MATCH_KEYS_code_holes[17] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchKeys, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_MATCH_KEYS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_MATCH_KEYS_data_holes[1];

// _CALL_BUILTIN_CLASSplus_MATCH_MAPPING
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_MATCH_MAPPING.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 79 01                   leal    0x1(%r9), %r15d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 f9                   cmovel  %r9d, %r15d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 14 24                   movq    %r10, (%rsp)
// 79: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 7e: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 83: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 fa                      movl    %r15d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c6 00 00 00             jle     0x187 <_JIT_ENTRY+0x187>
// c1: 85 c0                         testl   %eax, %eax
// c3: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// c8: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// cd: 0f 89 e4 00 00 00             jns     0x1b7 <_JIT_ENTRY+0x1b7>
// d3: e9 00 01 00 00                jmp     0x1d8 <_JIT_ENTRY+0x1d8>
// d8: 49 29 fe                      subq    %rdi, %r14
// db: 49 83 c6 b8                   addq    $-0x48, %r14
// df: 49 c1 ee 03                   shrq    $0x3, %r14
// e3: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 1f 01 00 00                jmp     0x224 <_JIT_ENTRY+0x224>
// 105: 41 83 ff 02                   cmpl    $0x2, %r15d
// 109: bb 01 00 00 00                movl    $0x1, %ebx
// 10e: 41 0f 43 df                   cmovael %r15d, %ebx
// 112: 45 31 ed                      xorl    %r13d, %r13d
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 49 ff c5                      incq    %r13
// 123: 4c 39 eb                      cmpq    %r13, %rbx
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4e 8b 7c ed 00                movq    (%rbp,%r13,8), %r15
// 12d: 49 8b 07                      movq    (%r15), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7e 0b                         jle     0x140 <_JIT_ENTRY+0x140>
// 135: 85 c0                         testl   %eax, %eax
// 137: 78 e7                         js      0x120 <_JIT_ENTRY+0x120>
// 139: eb 2a                         jmp     0x165 <_JIT_ENTRY+0x165>
// 13b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 fa                      movq    %r15, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 07                      movq    (%r15), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 bb                         js      0x120 <_JIT_ENTRY+0x120>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0f                      decq    (%r15)
// 174: 75 aa                         jne     0x120 <_JIT_ENTRY+0x120>
// 176: 4c 89 ff                      movq    %r15, %rdi
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: ff d0                         callq   *%rax
// 185: eb 99                         jmp     0x120 <_JIT_ENTRY+0x120>
// 187: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000189:  R_X86_64_64  .rodata.str1.1
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _Py_NegativeRefcount
// 19b: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a0: 4c 89 e2                      movq    %r12, %rdx
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 8b 04 24                   movq    (%r12), %rax
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 1b0: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 1b5: 78 21                         js      0x1d8 <_JIT_ENTRY+0x1d8>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c1: ff d0                         callq   *%rax
// 1c3: 49 ff 0c 24                   decq    (%r12)
// 1c7: 75 0f                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_Dealloc
// 1d3: 4c 89 e7                      movq    %r12, %rdi
// 1d6: ff d0                         callq   *%rax
// 1d8: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1dd: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1e1: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1e6: 48 85 c9                      testq   %rcx, %rcx
// 1e9: 74 29                         je      0x214 <_JIT_ENTRY+0x214>
// 1eb: 48 89 08                      movq    %rcx, (%rax)
// 1ee: 49 8b 47 10                   movq    0x10(%r15), %rax
// 1f2: 48 8b 00                      movq    (%rax), %rax
// 1f5: 84 c0                         testb   %al, %al
// 1f7: 74 3a                         je      0x233 <_JIT_ENTRY+0x233>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_HandlePending
// 203: 4c 89 ff                      movq    %r15, %rdi
// 206: ff d0                         callq   *%rax
// 208: 85 c0                         testl   %eax, %eax
// 20a: 74 27                         je      0x233 <_JIT_ENTRY+0x233>
// 20c: 48 8b 04 24                   movq    (%rsp), %rax
// 210: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 214: 48 29 d8                      subq    %rbx, %rax
// 217: 48 83 c0 b8                   addq    $-0x48, %rax
// 21b: 48 c1 e8 03                   shrq    $0x3, %rax
// 21f: 89 43 40                      movl    %eax, 0x40(%rbx)
// 222: 31 c0                         xorl    %eax, %eax
// 224: 48 83 c4 28                   addq    $0x28, %rsp
// 228: 5b                            popq    %rbx
// 229: 41 5c                         popq    %r12
// 22b: 41 5d                         popq    %r13
// 22d: 41 5e                         popq    %r14
// 22f: 41 5f                         popq    %r15
// 231: 5d                            popq    %rbp
// 232: c3                            retq
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _JIT_OPARG
// 23d: f7 d0                         notl    %eax
// 23f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 244: 48 98                         cltq
// 246: 49 8b 4c c6 f8                movq    -0x8(%r14,%rax,8), %rcx
// 24b: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 24f: f6 81 a8 00 00 00 40          testb   $0x40, 0xa8(%rcx)
// 256: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000258:  R_X86_64_64  _Py_FalseStruct
// 260: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000262:  R_X86_64_64  _Py_TrueStruct
// 26a: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 26e: 49 89 14 c6                   movq    %rdx, (%r14,%rax,8)
// 272: 49 8d 74 c6 08                leaq    0x8(%r14,%rax,8), %rsi
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _JIT_CONTINUE
// 281: 48 89 df                      movq    %rbx, %rdi
// 284: 4c 89 fa                      movq    %r15, %rdx
// 287: 48 83 c4 28                   addq    $0x28, %rsp
// 28b: 5b                            popq    %rbx
// 28c: 41 5c                         popq    %r12
// 28e: 41 5d                         popq    %r13
// 290: 41 5e                         popq    %r14
// 292: 41 5f                         popq    %r15
// 294: 5d                            popq    %rbp
// 295: ff e0                         jmpq    *%rax
// 297: 
static const unsigned char _CALL_BUILTIN_CLASSplus_MATCH_MAPPING_code_body[664] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x79, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x0f, 0x89, 0xe4, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x1f, 0x01, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdf, 0x45, 0x31, 0xed, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xeb, 0x74, 0x8c, 0x4e, 0x8b, 0x7c, 0xed, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x0b, 0x85, 0xc0, 0x78, 0xe7, 0xeb, 0x2a, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x29, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x27, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc6, 0xf8, 0x48, 0x8b, 0x49, 0x08, 0xf6, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x49, 0x89, 0x14, 0xc6, 0x49, 0x8d, 0x74, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_MATCH_MAPPING_code_holes[17] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_MATCH_MAPPING_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_MATCH_MAPPING_data_holes[1];

// _CALL_BUILTIN_CLASSplus_MATCH_SEQUENCE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_MATCH_SEQUENCE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 79 01                   leal    0x1(%r9), %r15d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 f9                   cmovel  %r9d, %r15d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 14 24                   movq    %r10, (%rsp)
// 79: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 7e: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 83: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 fa                      movl    %r15d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c6 00 00 00             jle     0x187 <_JIT_ENTRY+0x187>
// c1: 85 c0                         testl   %eax, %eax
// c3: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// c8: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// cd: 0f 89 e4 00 00 00             jns     0x1b7 <_JIT_ENTRY+0x1b7>
// d3: e9 00 01 00 00                jmp     0x1d8 <_JIT_ENTRY+0x1d8>
// d8: 49 29 fe                      subq    %rdi, %r14
// db: 49 83 c6 b8                   addq    $-0x48, %r14
// df: 49 c1 ee 03                   shrq    $0x3, %r14
// e3: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 1f 01 00 00                jmp     0x224 <_JIT_ENTRY+0x224>
// 105: 41 83 ff 02                   cmpl    $0x2, %r15d
// 109: bb 01 00 00 00                movl    $0x1, %ebx
// 10e: 41 0f 43 df                   cmovael %r15d, %ebx
// 112: 45 31 ed                      xorl    %r13d, %r13d
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 49 ff c5                      incq    %r13
// 123: 4c 39 eb                      cmpq    %r13, %rbx
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4e 8b 7c ed 00                movq    (%rbp,%r13,8), %r15
// 12d: 49 8b 07                      movq    (%r15), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7e 0b                         jle     0x140 <_JIT_ENTRY+0x140>
// 135: 85 c0                         testl   %eax, %eax
// 137: 78 e7                         js      0x120 <_JIT_ENTRY+0x120>
// 139: eb 2a                         jmp     0x165 <_JIT_ENTRY+0x165>
// 13b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 fa                      movq    %r15, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 07                      movq    (%r15), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 bb                         js      0x120 <_JIT_ENTRY+0x120>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0f                      decq    (%r15)
// 174: 75 aa                         jne     0x120 <_JIT_ENTRY+0x120>
// 176: 4c 89 ff                      movq    %r15, %rdi
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: ff d0                         callq   *%rax
// 185: eb 99                         jmp     0x120 <_JIT_ENTRY+0x120>
// 187: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000189:  R_X86_64_64  .rodata.str1.1
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _Py_NegativeRefcount
// 19b: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a0: 4c 89 e2                      movq    %r12, %rdx
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 8b 04 24                   movq    (%r12), %rax
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 1b0: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 1b5: 78 21                         js      0x1d8 <_JIT_ENTRY+0x1d8>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c1: ff d0                         callq   *%rax
// 1c3: 49 ff 0c 24                   decq    (%r12)
// 1c7: 75 0f                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_Dealloc
// 1d3: 4c 89 e7                      movq    %r12, %rdi
// 1d6: ff d0                         callq   *%rax
// 1d8: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1dd: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1e1: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1e6: 48 85 c9                      testq   %rcx, %rcx
// 1e9: 74 29                         je      0x214 <_JIT_ENTRY+0x214>
// 1eb: 48 89 08                      movq    %rcx, (%rax)
// 1ee: 49 8b 47 10                   movq    0x10(%r15), %rax
// 1f2: 48 8b 00                      movq    (%rax), %rax
// 1f5: 84 c0                         testb   %al, %al
// 1f7: 74 3a                         je      0x233 <_JIT_ENTRY+0x233>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_HandlePending
// 203: 4c 89 ff                      movq    %r15, %rdi
// 206: ff d0                         callq   *%rax
// 208: 85 c0                         testl   %eax, %eax
// 20a: 74 27                         je      0x233 <_JIT_ENTRY+0x233>
// 20c: 48 8b 04 24                   movq    (%rsp), %rax
// 210: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 214: 48 29 d8                      subq    %rbx, %rax
// 217: 48 83 c0 b8                   addq    $-0x48, %rax
// 21b: 48 c1 e8 03                   shrq    $0x3, %rax
// 21f: 89 43 40                      movl    %eax, 0x40(%rbx)
// 222: 31 c0                         xorl    %eax, %eax
// 224: 48 83 c4 28                   addq    $0x28, %rsp
// 228: 5b                            popq    %rbx
// 229: 41 5c                         popq    %r12
// 22b: 41 5d                         popq    %r13
// 22d: 41 5e                         popq    %r14
// 22f: 41 5f                         popq    %r15
// 231: 5d                            popq    %rbp
// 232: c3                            retq
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _JIT_OPARG
// 23d: f7 d0                         notl    %eax
// 23f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 244: 48 98                         cltq
// 246: 49 8b 4c c6 f8                movq    -0x8(%r14,%rax,8), %rcx
// 24b: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 24f: f6 81 a8 00 00 00 20          testb   $0x20, 0xa8(%rcx)
// 256: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000258:  R_X86_64_64  _Py_FalseStruct
// 260: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000262:  R_X86_64_64  _Py_TrueStruct
// 26a: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 26e: 49 89 14 c6                   movq    %rdx, (%r14,%rax,8)
// 272: 49 8d 74 c6 08                leaq    0x8(%r14,%rax,8), %rsi
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _JIT_CONTINUE
// 281: 48 89 df                      movq    %rbx, %rdi
// 284: 4c 89 fa                      movq    %r15, %rdx
// 287: 48 83 c4 28                   addq    $0x28, %rsp
// 28b: 5b                            popq    %rbx
// 28c: 41 5c                         popq    %r12
// 28e: 41 5d                         popq    %r13
// 290: 41 5e                         popq    %r14
// 292: 41 5f                         popq    %r15
// 294: 5d                            popq    %rbp
// 295: ff e0                         jmpq    *%rax
// 297: 
static const unsigned char _CALL_BUILTIN_CLASSplus_MATCH_SEQUENCE_code_body[664] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x79, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x0f, 0x89, 0xe4, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x1f, 0x01, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdf, 0x45, 0x31, 0xed, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xeb, 0x74, 0x8c, 0x4e, 0x8b, 0x7c, 0xed, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x0b, 0x85, 0xc0, 0x78, 0xe7, 0xeb, 0x2a, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x29, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x27, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc6, 0xf8, 0x48, 0x8b, 0x49, 0x08, 0xf6, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x49, 0x89, 0x14, 0xc6, 0x49, 0x8d, 0x74, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_MATCH_SEQUENCE_code_holes[17] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_MATCH_SEQUENCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_MATCH_SEQUENCE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_NOP
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_NOP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 71 01                   leal    0x1(%r9), %r14d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 f1                   cmovel  %r9d, %r14d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 14 24                   movq    %r10, (%rsp)
// 79: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 7e: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 83: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 f2                      movl    %r14d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c6 00 00 00             jle     0x187 <_JIT_ENTRY+0x187>
// c1: 85 c0                         testl   %eax, %eax
// c3: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// c8: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// cd: 0f 89 e4 00 00 00             jns     0x1b7 <_JIT_ENTRY+0x1b7>
// d3: e9 00 01 00 00                jmp     0x1d8 <_JIT_ENTRY+0x1d8>
// d8: 49 29 ff                      subq    %rdi, %r15
// db: 49 83 c7 b8                   addq    $-0x48, %r15
// df: 49 c1 ef 03                   shrq    $0x3, %r15
// e3: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 22 01 00 00                jmp     0x227 <_JIT_ENTRY+0x227>
// 105: 41 83 fe 02                   cmpl    $0x2, %r14d
// 109: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 10f: 45 0f 43 ee                   cmovael %r14d, %r13d
// 113: 31 db                         xorl    %ebx, %ebx
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 48 ff c3                      incq    %rbx
// 123: 49 39 dd                      cmpq    %rbx, %r13
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4c 8b 74 dd 00                movq    (%rbp,%rbx,8), %r14
// 12d: 49 8b 06                      movq    (%r14), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7e 0b                         jle     0x140 <_JIT_ENTRY+0x140>
// 135: 85 c0                         testl   %eax, %eax
// 137: 78 e7                         js      0x120 <_JIT_ENTRY+0x120>
// 139: eb 2a                         jmp     0x165 <_JIT_ENTRY+0x165>
// 13b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 f2                      movq    %r14, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 06                      movq    (%r14), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 bb                         js      0x120 <_JIT_ENTRY+0x120>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0e                      decq    (%r14)
// 174: 75 aa                         jne     0x120 <_JIT_ENTRY+0x120>
// 176: 4c 89 f7                      movq    %r14, %rdi
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: ff d0                         callq   *%rax
// 185: eb 99                         jmp     0x120 <_JIT_ENTRY+0x120>
// 187: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000189:  R_X86_64_64  .rodata.str1.1
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _Py_NegativeRefcount
// 19b: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a0: 4c 89 e2                      movq    %r12, %rdx
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 8b 04 24                   movq    (%r12), %rax
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 1b0: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 1b5: 78 21                         js      0x1d8 <_JIT_ENTRY+0x1d8>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c1: ff d0                         callq   *%rax
// 1c3: 49 ff 0c 24                   decq    (%r12)
// 1c7: 75 0f                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_Dealloc
// 1d3: 4c 89 e7                      movq    %r12, %rdi
// 1d6: ff d0                         callq   *%rax
// 1d8: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1dd: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 1e1: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1e6: 48 85 d2                      testq   %rdx, %rdx
// 1e9: 74 2c                         je      0x217 <_JIT_ENTRY+0x217>
// 1eb: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1ef: 4d 8d 34 cf                   leaq    (%r15,%rcx,8), %r14
// 1f3: 48 89 10                      movq    %rdx, (%rax)
// 1f6: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1fa: 48 8b 00                      movq    (%rax), %rax
// 1fd: 84 c0                         testb   %al, %al
// 1ff: 74 35                         je      0x236 <_JIT_ENTRY+0x236>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_HandlePending
// 20b: 4c 89 ef                      movq    %r13, %rdi
// 20e: ff d0                         callq   *%rax
// 210: 85 c0                         testl   %eax, %eax
// 212: 74 22                         je      0x236 <_JIT_ENTRY+0x236>
// 214: 4c 89 f0                      movq    %r14, %rax
// 217: 48 29 d8                      subq    %rbx, %rax
// 21a: 48 83 c0 b8                   addq    $-0x48, %rax
// 21e: 48 c1 e8 03                   shrq    $0x3, %rax
// 222: 89 43 40                      movl    %eax, 0x40(%rbx)
// 225: 31 c0                         xorl    %eax, %eax
// 227: 48 83 c4 28                   addq    $0x28, %rsp
// 22b: 5b                            popq    %rbx
// 22c: 41 5c                         popq    %r12
// 22e: 41 5d                         popq    %r13
// 230: 41 5e                         popq    %r14
// 232: 41 5f                         popq    %r15
// 234: 5d                            popq    %rbp
// 235: c3                            retq
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _JIT_CONTINUE
// 240: 48 89 df                      movq    %rbx, %rdi
// 243: 4c 89 f6                      movq    %r14, %rsi
// 246: 4c 89 ea                      movq    %r13, %rdx
// 249: 48 83 c4 28                   addq    $0x28, %rsp
// 24d: 5b                            popq    %rbx
// 24e: 41 5c                         popq    %r12
// 250: 41 5d                         popq    %r13
// 252: 41 5e                         popq    %r14
// 254: 41 5f                         popq    %r15
// 256: 5d                            popq    %rbp
// 257: ff e0                         jmpq    *%rax
// 259: 
static const unsigned char _CALL_BUILTIN_CLASSplus_NOP_code_body[602] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x71, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf1, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xf2, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x0f, 0x89, 0xe4, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x22, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfe, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xee, 0x31, 0xdb, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x74, 0x8c, 0x4c, 0x8b, 0x74, 0xdd, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x0b, 0x85, 0xc0, 0x78, 0xe7, 0xeb, 0x2a, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x2c, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x34, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x22, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_NOP_code_holes[14] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_NOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_NOP_data_holes[1];

// _CALL_BUILTIN_CLASSplus_POP_EXCEPT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_POP_EXCEPT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f6 00 00 00             je      0x15d <_JIT_ENTRY+0x15d>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e5 00 00 00             je      0x15d <_JIT_ENTRY+0x15d>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 41 0f 94 c6                   sete    %r14b
// 96: 89 da                         movl    %ebx, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 41 84 c6                      testb   %al, %r14b
// bb: 0f 84 c9 00 00 00             je      0x18a <_JIT_ENTRY+0x18a>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e3: 4c 89 e2                      movq    %r12, %rdx
// e6: ff d0                         callq   *%rax
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 85 c0                         testl   %eax, %eax
// ee: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f3: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// f8: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 0c 24                   decq    (%r12)
// 10f: 0f 84 a6 01 00 00             je      0x2bb <_JIT_ENTRY+0x2bb>
// 115: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 119: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 11e: 48 85 c9                      testq   %rcx, %rcx
// 121: 0f 84 b5 01 00 00             je      0x2dc <_JIT_ENTRY+0x2dc>
// 127: 48 89 08                      movq    %rcx, (%rax)
// 12a: 49 8b 45 10                   movq    0x10(%r13), %rax
// 12e: 48 8b 00                      movq    (%rax), %rax
// 131: 84 c0                         testb   %al, %al
// 133: 0f 84 d0 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_HandlePending
// 143: 4c 89 ef                      movq    %r13, %rdi
// 146: ff d0                         callq   *%rax
// 148: 85 c0                         testl   %eax, %eax
// 14a: 0f 84 b9 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 150: 48 8b 04 24                   movq    (%rsp), %rax
// 154: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 158: e9 7f 01 00 00                jmp     0x2dc <_JIT_ENTRY+0x2dc>
// 15d: 49 29 ff                      subq    %rdi, %r15
// 160: 49 83 c7 b8                   addq    $-0x48, %r15
// 164: 49 c1 ef 03                   shrq    $0x3, %r15
// 168: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 16c: 48 8b 07                      movq    (%rdi), %rax
// 16f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000171:  R_X86_64_64  _JIT_TARGET
// 179: 89 c9                         movl    %ecx, %ecx
// 17b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 17f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 185: e9 62 01 00 00                jmp     0x2ec <_JIT_ENTRY+0x2ec>
// 18a: 83 fb 02                      cmpl    $0x2, %ebx
// 18d: 41 be 01 00 00 00             movl    $0x1, %r14d
// 193: 44 0f 43 f3                   cmovael %ebx, %r14d
// 197: 31 db                         xorl    %ebx, %ebx
// 199: eb 11                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 de                      cmpq    %rbx, %r14
// 1a6: 0f 84 15 ff ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 98                         cltq
// 21c: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 220: 49 83 c4 f8                   addq    $-0x8, %r12
// 224: 49 8b 44 c7 f8                movq    -0x8(%r15,%rax,8), %rax
// 229: 49 8b 4d 70                   movq    0x70(%r13), %rcx
// 22d: 4c 8b 31                      movq    (%rcx), %r14
// 230: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000232:  R_X86_64_64  _Py_NoneStruct
// 23a: 31 f6                         xorl    %esi, %esi
// 23c: 48 39 d0                      cmpq    %rdx, %rax
// 23f: 48 0f 45 f0                   cmovneq %rax, %rsi
// 243: 48 89 31                      movq    %rsi, (%rcx)
// 246: 4d 85 f6                      testq   %r14, %r14
// 249: 74 4d                         je      0x298 <_JIT_ENTRY+0x298>
// 24b: 49 8b 06                      movq    (%r14), %rax
// 24e: 48 85 c0                      testq   %rax, %rax
// 251: 7f 21                         jg      0x274 <_JIT_ENTRY+0x274>
// 253: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000255:  R_X86_64_64  .rodata.str1.1+0x39
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _Py_NegativeRefcount
// 267: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 26c: 4c 89 f2                      movq    %r14, %rdx
// 26f: ff d0                         callq   *%rax
// 271: 49 8b 06                      movq    (%r14), %rax
// 274: 85 c0                         testl   %eax, %eax
// 276: 78 20                         js      0x298 <_JIT_ENTRY+0x298>
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 282: ff d0                         callq   *%rax
// 284: 49 ff 0e                      decq    (%r14)
// 287: 75 0f                         jne     0x298 <_JIT_ENTRY+0x298>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _Py_Dealloc
// 293: 4c 89 f7                      movq    %r14, %rdi
// 296: ff d0                         callq   *%rax
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _JIT_CONTINUE
// 2a2: 48 89 df                      movq    %rbx, %rdi
// 2a5: 4c 89 e6                      movq    %r12, %rsi
// 2a8: 4c 89 ea                      movq    %r13, %rdx
// 2ab: 48 83 c4 28                   addq    $0x28, %rsp
// 2af: 5b                            popq    %rbx
// 2b0: 41 5c                         popq    %r12
// 2b2: 41 5d                         popq    %r13
// 2b4: 41 5e                         popq    %r14
// 2b6: 41 5f                         popq    %r15
// 2b8: 5d                            popq    %rbp
// 2b9: ff e0                         jmpq    *%rax
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _Py_Dealloc
// 2c5: 4c 89 e7                      movq    %r12, %rdi
// 2c8: ff d0                         callq   *%rax
// 2ca: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 2ce: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 2d3: 48 85 c9                      testq   %rcx, %rcx
// 2d6: 0f 85 4b fe ff ff             jne     0x127 <_JIT_ENTRY+0x127>
// 2dc: 48 29 d8                      subq    %rbx, %rax
// 2df: 48 83 c0 b8                   addq    $-0x48, %rax
// 2e3: 48 c1 e8 03                   shrq    $0x3, %rax
// 2e7: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2ea: 31 c0                         xorl    %eax, %eax
// 2ec: 48 83 c4 28                   addq    $0x28, %rsp
// 2f0: 5b                            popq    %rbx
// 2f1: 41 5c                         popq    %r12
// 2f3: 41 5d                         popq    %r13
// 2f5: 41 5e                         popq    %r14
// 2f7: 41 5f                         popq    %r15
// 2f9: 5d                            popq    %rbp
// 2fa: c3                            retq
// 2fb: 
static const unsigned char _CALL_BUILTIN_CLASSplus_POP_EXCEPT_code_body[764] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf6, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe5, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xa6, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb5, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb9, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0xe9, 0x7f, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x62, 0x01, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x15, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x49, 0x8b, 0x44, 0xc7, 0xf8, 0x49, 0x8b, 0x4d, 0x70, 0x4c, 0x8b, 0x31, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x48, 0x39, 0xd0, 0x48, 0x0f, 0x45, 0xf0, 0x48, 0x89, 0x31, 0x4d, 0x85, 0xf6, 0x74, 0x4d, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x85, 0x4b, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_POP_EXCEPT_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_POP_EXCEPT_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_POP_EXCEPT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_POP_FRAME
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_POP_FRAME.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 71 01                   leal    0x1(%r9), %r14d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 f1                   cmovel  %r9d, %r14d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 14 24                   movq    %r10, (%rsp)
// 79: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 7e: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 83: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 f2                      movl    %r14d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c6 00 00 00             jle     0x187 <_JIT_ENTRY+0x187>
// c1: 85 c0                         testl   %eax, %eax
// c3: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// c8: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// cd: 0f 89 e4 00 00 00             jns     0x1b7 <_JIT_ENTRY+0x1b7>
// d3: e9 00 01 00 00                jmp     0x1d8 <_JIT_ENTRY+0x1d8>
// d8: 49 29 ff                      subq    %rdi, %r15
// db: 49 83 c7 b8                   addq    $-0x48, %r15
// df: 49 c1 ef 03                   shrq    $0x3, %r15
// e3: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 21 01 00 00                jmp     0x226 <_JIT_ENTRY+0x226>
// 105: 41 83 fe 02                   cmpl    $0x2, %r14d
// 109: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 10f: 45 0f 43 ee                   cmovael %r14d, %r13d
// 113: 31 db                         xorl    %ebx, %ebx
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 48 ff c3                      incq    %rbx
// 123: 49 39 dd                      cmpq    %rbx, %r13
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4c 8b 74 dd 00                movq    (%rbp,%rbx,8), %r14
// 12d: 49 8b 06                      movq    (%r14), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7e 0b                         jle     0x140 <_JIT_ENTRY+0x140>
// 135: 85 c0                         testl   %eax, %eax
// 137: 78 e7                         js      0x120 <_JIT_ENTRY+0x120>
// 139: eb 2a                         jmp     0x165 <_JIT_ENTRY+0x165>
// 13b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 f2                      movq    %r14, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 06                      movq    (%r14), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 bb                         js      0x120 <_JIT_ENTRY+0x120>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0e                      decq    (%r14)
// 174: 75 aa                         jne     0x120 <_JIT_ENTRY+0x120>
// 176: 4c 89 f7                      movq    %r14, %rdi
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: ff d0                         callq   *%rax
// 185: eb 99                         jmp     0x120 <_JIT_ENTRY+0x120>
// 187: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000189:  R_X86_64_64  .rodata.str1.1
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _Py_NegativeRefcount
// 19b: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a0: 4c 89 e2                      movq    %r12, %rdx
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 8b 04 24                   movq    (%r12), %rax
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 1b0: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b5: 78 21                         js      0x1d8 <_JIT_ENTRY+0x1d8>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c1: ff d0                         callq   *%rax
// 1c3: 49 ff 0c 24                   decq    (%r12)
// 1c7: 75 0f                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_Dealloc
// 1d3: 4c 89 e7                      movq    %r12, %rdi
// 1d6: ff d0                         callq   *%rax
// 1d8: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 1dc: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1e1: 48 85 c9                      testq   %rcx, %rcx
// 1e4: 4c 8b 64 24 20                movq    0x20(%rsp), %r12
// 1e9: 74 29                         je      0x214 <_JIT_ENTRY+0x214>
// 1eb: 48 89 08                      movq    %rcx, (%rax)
// 1ee: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1f2: 48 8b 00                      movq    (%rax), %rax
// 1f5: 84 c0                         testb   %al, %al
// 1f7: 74 3c                         je      0x235 <_JIT_ENTRY+0x235>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_HandlePending
// 203: 4c 89 ef                      movq    %r13, %rdi
// 206: ff d0                         callq   *%rax
// 208: 85 c0                         testl   %eax, %eax
// 20a: 74 29                         je      0x235 <_JIT_ENTRY+0x235>
// 20c: 48 8b 04 24                   movq    (%rsp), %rax
// 210: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 214: 4c 29 e0                      subq    %r12, %rax
// 217: 48 83 c0 b8                   addq    $-0x48, %rax
// 21b: 48 c1 e8 03                   shrq    $0x3, %rax
// 21f: 41 89 44 24 40                movl    %eax, 0x40(%r12)
// 224: 31 c0                         xorl    %eax, %eax
// 226: 48 83 c4 28                   addq    $0x28, %rsp
// 22a: 5b                            popq    %rbx
// 22b: 41 5c                         popq    %r12
// 22d: 41 5d                         popq    %r13
// 22f: 41 5e                         popq    %r14
// 231: 41 5f                         popq    %r15
// 233: 5d                            popq    %rbp
// 234: c3                            retq
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _JIT_OPARG
// 23f: f7 d0                         notl    %eax
// 241: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 246: 48 98                         cltq
// 248: 49 8d 0c c7                   leaq    (%r15,%rax,8), %rcx
// 24c: 48 83 c1 f8                   addq    $-0x8, %rcx
// 250: 49 8b 5c c7 f8                movq    -0x8(%r15,%rax,8), %rbx
// 255: 4c 29 e1                      subq    %r12, %rcx
// 258: 48 83 c1 b8                   addq    $-0x48, %rcx
// 25c: 48 c1 e9 03                   shrq    $0x3, %rcx
// 260: 41 89 4c 24 40                movl    %ecx, 0x40(%r12)
// 265: 41 ff 45 24                   incl    0x24(%r13)
// 269: 4d 8b 74 24 08                movq    0x8(%r12), %r14
// 26e: 4d 89 75 40                   movq    %r14, 0x40(%r13)
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _PyEval_FrameClearAndPop
// 27c: 4c 89 ef                      movq    %r13, %rdi
// 27f: 4c 89 e6                      movq    %r12, %rsi
// 282: ff d0                         callq   *%rax
// 284: 49 63 46 40                   movslq  0x40(%r14), %rax
// 288: 49 89 5c c6 48                movq    %rbx, 0x48(%r14,%rax,8)
// 28d: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 291: 48 83 c6 50                   addq    $0x50, %rsi
// 295: 41 c7 46 40 ff ff ff ff       movl    $0xffffffff, 0x40(%r14) # imm = 0xFFFFFFFF
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _JIT_CONTINUE
// 2a7: 4c 89 f7                      movq    %r14, %rdi
// 2aa: 4c 89 ea                      movq    %r13, %rdx
// 2ad: 48 83 c4 28                   addq    $0x28, %rsp
// 2b1: 5b                            popq    %rbx
// 2b2: 41 5c                         popq    %r12
// 2b4: 41 5d                         popq    %r13
// 2b6: 41 5e                         popq    %r14
// 2b8: 41 5f                         popq    %r15
// 2ba: 5d                            popq    %rbp
// 2bb: ff e0                         jmpq    *%rax
// 2bd: 
static const unsigned char _CALL_BUILTIN_CLASSplus_POP_FRAME_code_body[702] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x71, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf1, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xf2, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x89, 0xe4, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x21, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfe, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xee, 0x31, 0xdb, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x74, 0x8c, 0x4c, 0x8b, 0x74, 0xdd, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x0b, 0x85, 0xc0, 0x78, 0xe7, 0xeb, 0x2a, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x64, 0x24, 0x20, 0x74, 0x29, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x29, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0x4c, 0x29, 0xe0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x44, 0x24, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8d, 0x0c, 0xc7, 0x48, 0x83, 0xc1, 0xf8, 0x49, 0x8b, 0x5c, 0xc7, 0xf8, 0x4c, 0x29, 0xe1, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x41, 0x89, 0x4c, 0x24, 0x40, 0x41, 0xff, 0x45, 0x24, 0x4d, 0x8b, 0x74, 0x24, 0x08, 0x4d, 0x89, 0x75, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x49, 0x63, 0x46, 0x40, 0x49, 0x89, 0x5c, 0xc6, 0x48, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x50, 0x41, 0xc7, 0x46, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_POP_FRAME_code_holes[16] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FrameClearAndPop, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_POP_FRAME_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_POP_FRAME_data_holes[1];

// _CALL_BUILTIN_CLASSplus_POP_TOP
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_POP_TOP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f5 00 00 00             je      0x15c <_JIT_ENTRY+0x15c>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e4 00 00 00             je      0x15c <_JIT_ENTRY+0x15c>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 c9 00 00 00             je      0x189 <_JIT_ENTRY+0x189>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// f2: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// f7: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// fc: 78 16                         js      0x114 <_JIT_ENTRY+0x114>
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 108: ff d0                         callq   *%rax
// 10a: 49 ff 0c 24                   decq    (%r12)
// 10e: 0f 84 86 01 00 00             je      0x29a <_JIT_ENTRY+0x29a>
// 114: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 118: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 11d: 48 85 c9                      testq   %rcx, %rcx
// 120: 0f 84 95 01 00 00             je      0x2bb <_JIT_ENTRY+0x2bb>
// 126: 48 89 08                      movq    %rcx, (%rax)
// 129: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 12d: 48 8b 00                      movq    (%rax), %rax
// 130: 84 c0                         testb   %al, %al
// 132: 0f 84 d1 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_HandlePending
// 142: 48 89 ef                      movq    %rbp, %rdi
// 145: ff d0                         callq   *%rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 0f 84 ba 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 14f: 48 8b 04 24                   movq    (%rsp), %rax
// 153: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 157: e9 5f 01 00 00                jmp     0x2bb <_JIT_ENTRY+0x2bb>
// 15c: 49 29 ff                      subq    %rdi, %r15
// 15f: 49 83 c7 b8                   addq    $-0x48, %r15
// 163: 49 c1 ef 03                   shrq    $0x3, %r15
// 167: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 16b: 48 8b 07                      movq    (%rdi), %rax
// 16e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000170:  R_X86_64_64  _JIT_TARGET
// 178: 89 c9                         movl    %ecx, %ecx
// 17a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 17e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 184: e9 43 01 00 00                jmp     0x2cc <_JIT_ENTRY+0x2cc>
// 189: 41 83 fd 02                   cmpl    $0x2, %r13d
// 18d: 41 be 01 00 00 00             movl    $0x1, %r14d
// 193: 45 0f 43 f5                   cmovael %r13d, %r14d
// 197: 31 db                         xorl    %ebx, %ebx
// 199: eb 11                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 de                      cmpq    %rbx, %r14
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 63 d8                      movslq  %eax, %rbx
// 21d: 4d 8b 74 df f8                movq    -0x8(%r15,%rbx,8), %r14
// 222: 49 8b 06                      movq    (%r14), %rax
// 225: 48 85 c0                      testq   %rax, %rax
// 228: 7f 21                         jg      0x24b <_JIT_ENTRY+0x24b>
// 22a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022c:  R_X86_64_64  .rodata.str1.1
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _Py_NegativeRefcount
// 23e: be 54 00 00 00                movl    $0x54, %esi
// 243: 4c 89 f2                      movq    %r14, %rdx
// 246: ff d0                         callq   *%rax
// 248: 49 8b 06                      movq    (%r14), %rax
// 24b: 4d 8d 3c df                   leaq    (%r15,%rbx,8), %r15
// 24f: 49 83 c7 f8                   addq    $-0x8, %r15
// 253: 85 c0                         testl   %eax, %eax
// 255: 78 20                         js      0x277 <_JIT_ENTRY+0x277>
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 261: ff d0                         callq   *%rax
// 263: 49 ff 0e                      decq    (%r14)
// 266: 75 0f                         jne     0x277 <_JIT_ENTRY+0x277>
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _Py_Dealloc
// 272: 4c 89 f7                      movq    %r14, %rdi
// 275: ff d0                         callq   *%rax
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _JIT_CONTINUE
// 281: 4c 89 ef                      movq    %r13, %rdi
// 284: 4c 89 fe                      movq    %r15, %rsi
// 287: 48 89 ea                      movq    %rbp, %rdx
// 28a: 48 83 c4 28                   addq    $0x28, %rsp
// 28e: 5b                            popq    %rbx
// 28f: 41 5c                         popq    %r12
// 291: 41 5d                         popq    %r13
// 293: 41 5e                         popq    %r14
// 295: 41 5f                         popq    %r15
// 297: 5d                            popq    %rbp
// 298: ff e0                         jmpq    *%rax
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _Py_Dealloc
// 2a4: 4c 89 e7                      movq    %r12, %rdi
// 2a7: ff d0                         callq   *%rax
// 2a9: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 2ad: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 2b2: 48 85 c9                      testq   %rcx, %rcx
// 2b5: 0f 85 6b fe ff ff             jne     0x126 <_JIT_ENTRY+0x126>
// 2bb: 4c 29 e8                      subq    %r13, %rax
// 2be: 48 83 c0 b8                   addq    $-0x48, %rax
// 2c2: 48 c1 e8 03                   shrq    $0x3, %rax
// 2c6: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 2ca: 31 c0                         xorl    %eax, %eax
// 2cc: 48 83 c4 28                   addq    $0x28, %rsp
// 2d0: 5b                            popq    %rbx
// 2d1: 41 5c                         popq    %r12
// 2d3: 41 5d                         popq    %r13
// 2d5: 41 5e                         popq    %r14
// 2d7: 41 5f                         popq    %r15
// 2d9: 5d                            popq    %rbp
// 2da: c3                            retq
// 2db: 
static const unsigned char _CALL_BUILTIN_CLASSplus_POP_TOP_code_body[732] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf5, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe4, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x86, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x95, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xba, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0xe9, 0x5f, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x43, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x74, 0xdf, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x4d, 0x8d, 0x3c, 0xdf, 0x49, 0x83, 0xc7, 0xf8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x85, 0x6b, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_POP_TOP_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_POP_TOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_POP_TOP_data_holes[1];

// _CALL_BUILTIN_CLASSplus_PUSH_EXC_INFO
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_PUSH_EXC_INFO.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 79 01                   leal    0x1(%r9), %r15d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 f9                   cmovel  %r9d, %r15d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 14 24                   movq    %r10, (%rsp)
// 79: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 7e: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 83: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 fa                      movl    %r15d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c6 00 00 00             jle     0x187 <_JIT_ENTRY+0x187>
// c1: 85 c0                         testl   %eax, %eax
// c3: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// c8: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// cd: 0f 89 e4 00 00 00             jns     0x1b7 <_JIT_ENTRY+0x1b7>
// d3: e9 00 01 00 00                jmp     0x1d8 <_JIT_ENTRY+0x1d8>
// d8: 49 29 fe                      subq    %rdi, %r14
// db: 49 83 c6 b8                   addq    $-0x48, %r14
// df: 49 c1 ee 03                   shrq    $0x3, %r14
// e3: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 20 01 00 00                jmp     0x225 <_JIT_ENTRY+0x225>
// 105: 41 83 ff 02                   cmpl    $0x2, %r15d
// 109: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 10f: 45 0f 43 ef                   cmovael %r15d, %r13d
// 113: 31 db                         xorl    %ebx, %ebx
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 48 ff c3                      incq    %rbx
// 123: 49 39 dd                      cmpq    %rbx, %r13
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4c 8b 7c dd 00                movq    (%rbp,%rbx,8), %r15
// 12d: 49 8b 07                      movq    (%r15), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7e 0b                         jle     0x140 <_JIT_ENTRY+0x140>
// 135: 85 c0                         testl   %eax, %eax
// 137: 78 e7                         js      0x120 <_JIT_ENTRY+0x120>
// 139: eb 2a                         jmp     0x165 <_JIT_ENTRY+0x165>
// 13b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 fa                      movq    %r15, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 07                      movq    (%r15), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 bb                         js      0x120 <_JIT_ENTRY+0x120>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0f                      decq    (%r15)
// 174: 75 aa                         jne     0x120 <_JIT_ENTRY+0x120>
// 176: 4c 89 ff                      movq    %r15, %rdi
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: ff d0                         callq   *%rax
// 185: eb 99                         jmp     0x120 <_JIT_ENTRY+0x120>
// 187: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000189:  R_X86_64_64  .rodata.str1.1
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _Py_NegativeRefcount
// 19b: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a0: 4c 89 e2                      movq    %r12, %rdx
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 8b 04 24                   movq    (%r12), %rax
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 1b0: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b5: 78 21                         js      0x1d8 <_JIT_ENTRY+0x1d8>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c1: ff d0                         callq   *%rax
// 1c3: 49 ff 0c 24                   decq    (%r12)
// 1c7: 75 0f                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_Dealloc
// 1d3: 4c 89 e7                      movq    %r12, %rdi
// 1d6: ff d0                         callq   *%rax
// 1d8: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 1dc: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1e1: 48 85 c9                      testq   %rcx, %rcx
// 1e4: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// 1e9: 74 29                         je      0x214 <_JIT_ENTRY+0x214>
// 1eb: 48 89 08                      movq    %rcx, (%rax)
// 1ee: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 1f2: 48 8b 00                      movq    (%rax), %rax
// 1f5: 84 c0                         testb   %al, %al
// 1f7: 74 3b                         je      0x234 <_JIT_ENTRY+0x234>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_HandlePending
// 203: 48 89 ef                      movq    %rbp, %rdi
// 206: ff d0                         callq   *%rax
// 208: 85 c0                         testl   %eax, %eax
// 20a: 74 28                         je      0x234 <_JIT_ENTRY+0x234>
// 20c: 48 8b 04 24                   movq    (%rsp), %rax
// 210: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 214: 4c 29 e8                      subq    %r13, %rax
// 217: 48 83 c0 b8                   addq    $-0x48, %rax
// 21b: 48 c1 e8 03                   shrq    $0x3, %rax
// 21f: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 223: 31 c0                         xorl    %eax, %eax
// 225: 48 83 c4 28                   addq    $0x28, %rsp
// 229: 5b                            popq    %rbx
// 22a: 41 5c                         popq    %r12
// 22c: 41 5d                         popq    %r13
// 22e: 41 5e                         popq    %r14
// 230: 41 5f                         popq    %r15
// 232: 5d                            popq    %rbp
// 233: c3                            retq
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _JIT_OPARG
// 23e: f7 d0                         notl    %eax
// 240: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 245: 48 98                         cltq
// 247: 49 8b 5c c6 f8                movq    -0x8(%r14,%rax,8), %rbx
// 24c: 4c 8b 7d 70                   movq    0x70(%rbp), %r15
// 250: 4d 8b 27                      movq    (%r15), %r12
// 253: 8b 03                         movl    (%rbx), %eax
// 255: ff c0                         incl    %eax
// 257: 74 0e                         je      0x267 <_JIT_ENTRY+0x267>
// 259: 89 03                         movl    %eax, (%rbx)
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 265: ff d0                         callq   *%rax
// 267: 4d 85 e4                      testq   %r12, %r12
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _Py_NoneStruct
// 274: 49 0f 45 c4                   cmovneq %r12, %rax
// 278: 49 89 1f                      movq    %rbx, (%r15)
// 27b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027d:  R_X86_64_64  _JIT_OPARG
// 285: f7 d1                         notl    %ecx
// 287: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 28d: 48 63 c9                      movslq  %ecx, %rcx
// 290: 49 89 44 ce f8                movq    %rax, -0x8(%r14,%rcx,8)
// 295: 49 89 1c ce                   movq    %rbx, (%r14,%rcx,8)
// 299: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 29d: 48 83 c6 08                   addq    $0x8, %rsi
// 2a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a3:  R_X86_64_64  _JIT_CONTINUE
// 2ab: 4c 89 ef                      movq    %r13, %rdi
// 2ae: 48 89 ea                      movq    %rbp, %rdx
// 2b1: 48 83 c4 28                   addq    $0x28, %rsp
// 2b5: 5b                            popq    %rbx
// 2b6: 41 5c                         popq    %r12
// 2b8: 41 5d                         popq    %r13
// 2ba: 41 5e                         popq    %r14
// 2bc: 41 5f                         popq    %r15
// 2be: 5d                            popq    %rbp
// 2bf: ff e0                         jmpq    *%rax
// 2c1: 
static const unsigned char _CALL_BUILTIN_CLASSplus_PUSH_EXC_INFO_code_body[706] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x79, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x89, 0xe4, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x20, 0x01, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xef, 0x31, 0xdb, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x74, 0x8c, 0x4c, 0x8b, 0x7c, 0xdd, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x0b, 0x85, 0xc0, 0x78, 0xe7, 0xeb, 0x2a, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x74, 0x29, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x28, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x5c, 0xc6, 0xf8, 0x4c, 0x8b, 0x7d, 0x70, 0x4d, 0x8b, 0x27, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x0f, 0x45, 0xc4, 0x49, 0x89, 0x1f, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x44, 0xce, 0xf8, 0x49, 0x89, 0x1c, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_PUSH_EXC_INFO_code_holes[18] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_PUSH_EXC_INFO_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_PUSH_EXC_INFO_data_holes[1];

// _CALL_BUILTIN_CLASSplus_PUSH_FRAME
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_PUSH_FRAME.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 71 01                   leal    0x1(%r9), %r14d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 f1                   cmovel  %r9d, %r14d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 14 24                   movq    %r10, (%rsp)
// 79: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 7e: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 83: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 f2                      movl    %r14d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c6 00 00 00             jle     0x187 <_JIT_ENTRY+0x187>
// c1: 85 c0                         testl   %eax, %eax
// c3: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// c8: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// cd: 0f 89 e4 00 00 00             jns     0x1b7 <_JIT_ENTRY+0x1b7>
// d3: e9 00 01 00 00                jmp     0x1d8 <_JIT_ENTRY+0x1d8>
// d8: 49 29 ff                      subq    %rdi, %r15
// db: 49 83 c7 b8                   addq    $-0x48, %r15
// df: 49 c1 ef 03                   shrq    $0x3, %r15
// e3: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 1f 01 00 00                jmp     0x224 <_JIT_ENTRY+0x224>
// 105: 41 83 fe 02                   cmpl    $0x2, %r14d
// 109: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 10f: 45 0f 43 ee                   cmovael %r14d, %r13d
// 113: 31 db                         xorl    %ebx, %ebx
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 48 ff c3                      incq    %rbx
// 123: 49 39 dd                      cmpq    %rbx, %r13
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4c 8b 74 dd 00                movq    (%rbp,%rbx,8), %r14
// 12d: 49 8b 06                      movq    (%r14), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7e 0b                         jle     0x140 <_JIT_ENTRY+0x140>
// 135: 85 c0                         testl   %eax, %eax
// 137: 78 e7                         js      0x120 <_JIT_ENTRY+0x120>
// 139: eb 2a                         jmp     0x165 <_JIT_ENTRY+0x165>
// 13b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 f2                      movq    %r14, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 06                      movq    (%r14), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 bb                         js      0x120 <_JIT_ENTRY+0x120>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0e                      decq    (%r14)
// 174: 75 aa                         jne     0x120 <_JIT_ENTRY+0x120>
// 176: 4c 89 f7                      movq    %r14, %rdi
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: ff d0                         callq   *%rax
// 185: eb 99                         jmp     0x120 <_JIT_ENTRY+0x120>
// 187: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000189:  R_X86_64_64  .rodata.str1.1
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _Py_NegativeRefcount
// 19b: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a0: 4c 89 e2                      movq    %r12, %rdx
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 8b 04 24                   movq    (%r12), %rax
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 1b0: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 1b5: 78 21                         js      0x1d8 <_JIT_ENTRY+0x1d8>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c1: ff d0                         callq   *%rax
// 1c3: 49 ff 0c 24                   decq    (%r12)
// 1c7: 75 0f                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_Dealloc
// 1d3: 4c 89 e7                      movq    %r12, %rdi
// 1d6: ff d0                         callq   *%rax
// 1d8: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1dd: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 1e1: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1e6: 48 85 c9                      testq   %rcx, %rcx
// 1e9: 74 29                         je      0x214 <_JIT_ENTRY+0x214>
// 1eb: 48 89 08                      movq    %rcx, (%rax)
// 1ee: 49 8b 46 10                   movq    0x10(%r14), %rax
// 1f2: 48 8b 00                      movq    (%rax), %rax
// 1f5: 84 c0                         testb   %al, %al
// 1f7: 74 3a                         je      0x233 <_JIT_ENTRY+0x233>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_HandlePending
// 203: 4c 89 f7                      movq    %r14, %rdi
// 206: ff d0                         callq   *%rax
// 208: 85 c0                         testl   %eax, %eax
// 20a: 74 27                         je      0x233 <_JIT_ENTRY+0x233>
// 20c: 48 8b 04 24                   movq    (%rsp), %rax
// 210: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 214: 48 29 d8                      subq    %rbx, %rax
// 217: 48 83 c0 b8                   addq    $-0x48, %rax
// 21b: 48 c1 e8 03                   shrq    $0x3, %rax
// 21f: 89 43 40                      movl    %eax, 0x40(%rbx)
// 222: 31 c0                         xorl    %eax, %eax
// 224: 48 83 c4 28                   addq    $0x28, %rsp
// 228: 5b                            popq    %rbx
// 229: 41 5c                         popq    %r12
// 22b: 41 5d                         popq    %r13
// 22d: 41 5e                         popq    %r14
// 22f: 41 5f                         popq    %r15
// 231: 5d                            popq    %rbp
// 232: c3                            retq
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _JIT_OPARG
// 23d: f7 d0                         notl    %eax
// 23f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 244: 48 98                         cltq
// 246: 49 8d 0c c7                   leaq    (%r15,%rax,8), %rcx
// 24a: 48 83 c1 f8                   addq    $-0x8, %rcx
// 24e: 49 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %rdi
// 253: 48 29 d9                      subq    %rbx, %rcx
// 256: 48 83 c1 b8                   addq    $-0x48, %rcx
// 25a: 48 c1 e9 03                   shrq    $0x3, %rcx
// 25e: 89 4b 40                      movl    %ecx, 0x40(%rbx)
// 261: 48 89 5f 08                   movq    %rbx, 0x8(%rdi)
// 265: 49 89 7e 40                   movq    %rdi, 0x40(%r14)
// 269: 41 ff 4e 24                   decl    0x24(%r14)
// 26d: 48 63 47 40                   movslq  0x40(%rdi), %rax
// 271: 48 8d 34 c7                   leaq    (%rdi,%rax,8), %rsi
// 275: 48 83 c6 48                   addq    $0x48, %rsi
// 279: c7 47 40 ff ff ff ff          movl    $0xffffffff, 0x40(%rdi) # imm = 0xFFFFFFFF
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _JIT_CONTINUE
// 28a: 4c 89 f2                      movq    %r14, %rdx
// 28d: 48 83 c4 28                   addq    $0x28, %rsp
// 291: 5b                            popq    %rbx
// 292: 41 5c                         popq    %r12
// 294: 41 5d                         popq    %r13
// 296: 41 5e                         popq    %r14
// 298: 41 5f                         popq    %r15
// 29a: 5d                            popq    %rbp
// 29b: ff e0                         jmpq    *%rax
// 29d: 
static const unsigned char _CALL_BUILTIN_CLASSplus_PUSH_FRAME_code_body[670] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x71, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf1, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xf2, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x0f, 0x89, 0xe4, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x1f, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfe, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xee, 0x31, 0xdb, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x74, 0x8c, 0x4c, 0x8b, 0x74, 0xdd, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x0b, 0x85, 0xc0, 0x78, 0xe7, 0xeb, 0x2a, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x29, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x27, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8d, 0x0c, 0xc7, 0x48, 0x83, 0xc1, 0xf8, 0x49, 0x8b, 0x7c, 0xc7, 0xf8, 0x48, 0x29, 0xd9, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x89, 0x4b, 0x40, 0x48, 0x89, 0x5f, 0x08, 0x49, 0x89, 0x7e, 0x40, 0x41, 0xff, 0x4e, 0x24, 0x48, 0x63, 0x47, 0x40, 0x48, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x48, 0xc7, 0x47, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_PUSH_FRAME_code_holes[15] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_PUSH_FRAME_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_PUSH_FRAME_data_holes[1];

// _CALL_BUILTIN_CLASSplus_PUSH_NULL
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_PUSH_NULL.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 79 01                   leal    0x1(%r9), %r15d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 f9                   cmovel  %r9d, %r15d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 14 24                   movq    %r10, (%rsp)
// 79: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 7e: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 83: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 fa                      movl    %r15d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c6 00 00 00             jle     0x187 <_JIT_ENTRY+0x187>
// c1: 85 c0                         testl   %eax, %eax
// c3: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// c8: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// cd: 0f 89 e4 00 00 00             jns     0x1b7 <_JIT_ENTRY+0x1b7>
// d3: e9 00 01 00 00                jmp     0x1d8 <_JIT_ENTRY+0x1d8>
// d8: 49 29 fe                      subq    %rdi, %r14
// db: 49 83 c6 b8                   addq    $-0x48, %r14
// df: 49 c1 ee 03                   shrq    $0x3, %r14
// e3: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 1f 01 00 00                jmp     0x224 <_JIT_ENTRY+0x224>
// 105: 41 83 ff 02                   cmpl    $0x2, %r15d
// 109: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 10f: 45 0f 43 ef                   cmovael %r15d, %r13d
// 113: 31 db                         xorl    %ebx, %ebx
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 48 ff c3                      incq    %rbx
// 123: 49 39 dd                      cmpq    %rbx, %r13
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4c 8b 7c dd 00                movq    (%rbp,%rbx,8), %r15
// 12d: 49 8b 07                      movq    (%r15), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7e 0b                         jle     0x140 <_JIT_ENTRY+0x140>
// 135: 85 c0                         testl   %eax, %eax
// 137: 78 e7                         js      0x120 <_JIT_ENTRY+0x120>
// 139: eb 2a                         jmp     0x165 <_JIT_ENTRY+0x165>
// 13b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 fa                      movq    %r15, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 07                      movq    (%r15), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 bb                         js      0x120 <_JIT_ENTRY+0x120>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0f                      decq    (%r15)
// 174: 75 aa                         jne     0x120 <_JIT_ENTRY+0x120>
// 176: 4c 89 ff                      movq    %r15, %rdi
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: ff d0                         callq   *%rax
// 185: eb 99                         jmp     0x120 <_JIT_ENTRY+0x120>
// 187: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000189:  R_X86_64_64  .rodata.str1.1
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _Py_NegativeRefcount
// 19b: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a0: 4c 89 e2                      movq    %r12, %rdx
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 8b 04 24                   movq    (%r12), %rax
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 1b0: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 1b5: 78 21                         js      0x1d8 <_JIT_ENTRY+0x1d8>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c1: ff d0                         callq   *%rax
// 1c3: 49 ff 0c 24                   decq    (%r12)
// 1c7: 75 0f                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_Dealloc
// 1d3: 4c 89 e7                      movq    %r12, %rdi
// 1d6: ff d0                         callq   *%rax
// 1d8: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1dd: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1e1: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1e6: 48 85 c9                      testq   %rcx, %rcx
// 1e9: 74 29                         je      0x214 <_JIT_ENTRY+0x214>
// 1eb: 48 89 08                      movq    %rcx, (%rax)
// 1ee: 49 8b 47 10                   movq    0x10(%r15), %rax
// 1f2: 48 8b 00                      movq    (%rax), %rax
// 1f5: 84 c0                         testb   %al, %al
// 1f7: 74 3a                         je      0x233 <_JIT_ENTRY+0x233>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_HandlePending
// 203: 4c 89 ff                      movq    %r15, %rdi
// 206: ff d0                         callq   *%rax
// 208: 85 c0                         testl   %eax, %eax
// 20a: 74 27                         je      0x233 <_JIT_ENTRY+0x233>
// 20c: 48 8b 04 24                   movq    (%rsp), %rax
// 210: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 214: 48 29 d8                      subq    %rbx, %rax
// 217: 48 83 c0 b8                   addq    $-0x48, %rax
// 21b: 48 c1 e8 03                   shrq    $0x3, %rax
// 21f: 89 43 40                      movl    %eax, 0x40(%rbx)
// 222: 31 c0                         xorl    %eax, %eax
// 224: 48 83 c4 28                   addq    $0x28, %rsp
// 228: 5b                            popq    %rbx
// 229: 41 5c                         popq    %r12
// 22b: 41 5d                         popq    %r13
// 22d: 41 5e                         popq    %r14
// 22f: 41 5f                         popq    %r15
// 231: 5d                            popq    %rbp
// 232: c3                            retq
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _JIT_OPARG
// 23d: f7 d0                         notl    %eax
// 23f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 244: 48 98                         cltq
// 246: 49 c7 04 c6 00 00 00 00       movq    $0x0, (%r14,%rax,8)
// 24e: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 252: 48 83 c6 08                   addq    $0x8, %rsi
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _JIT_CONTINUE
// 260: 48 89 df                      movq    %rbx, %rdi
// 263: 4c 89 fa                      movq    %r15, %rdx
// 266: 48 83 c4 28                   addq    $0x28, %rsp
// 26a: 5b                            popq    %rbx
// 26b: 41 5c                         popq    %r12
// 26d: 41 5d                         popq    %r13
// 26f: 41 5e                         popq    %r14
// 271: 41 5f                         popq    %r15
// 273: 5d                            popq    %rbp
// 274: ff e0                         jmpq    *%rax
// 276: 
static const unsigned char _CALL_BUILTIN_CLASSplus_PUSH_NULL_code_body[631] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x79, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x0f, 0x89, 0xe4, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x1f, 0x01, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xef, 0x31, 0xdb, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x74, 0x8c, 0x4c, 0x8b, 0x7c, 0xdd, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x0b, 0x85, 0xc0, 0x78, 0xe7, 0xeb, 0x2a, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x29, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x27, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0xc7, 0x04, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_PUSH_NULL_code_holes[15] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_PUSH_NULL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_PUSH_NULL_data_holes[1];

// _CALL_BUILTIN_CLASSplus_RESUME_CHECK
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_RESUME_CHECK.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 ff                      movq    %rdi, %r15
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 c3 01 00 00             je      0x22d <_JIT_ENTRY+0x22d>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 b2 01 00 00             je      0x22d <_JIT_ENTRY+0x22d>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// 8f: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 41 0f 94 c7                   sete    %r15b
// 9a: 89 da                         movl    %ebx, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 b7 00 00 00             je      0x17b <_JIT_ENTRY+0x17b>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// f6: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// fb: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 100: 78 21                         js      0x123 <_JIT_ENTRY+0x123>
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10c: ff d0                         callq   *%rax
// 10e: 49 ff 0c 24                   decq    (%r12)
// 112: 75 0f                         jne     0x123 <_JIT_ENTRY+0x123>
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_Dealloc
// 11e: 4c 89 e7                      movq    %r12, %rdi
// 121: ff d0                         callq   *%rax
// 123: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 128: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 12c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 130: 48 85 c9                      testq   %rcx, %rcx
// 133: 74 30                         je      0x165 <_JIT_ENTRY+0x165>
// 135: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 139: 48 89 08                      movq    %rcx, (%rax)
// 13c: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 140: 48 8b 08                      movq    (%rax), %rcx
// 143: 84 c9                         testb   %cl, %cl
// 145: 0f 84 b0 00 00 00             je      0x1fb <_JIT_ENTRY+0x1fb>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_HandlePending
// 155: 48 89 df                      movq    %rbx, %rdi
// 158: ff d0                         callq   *%rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 84 95 00 00 00             je      0x1f7 <_JIT_ENTRY+0x1f7>
// 162: 4c 89 f0                      movq    %r14, %rax
// 165: 4c 29 f8                      subq    %r15, %rax
// 168: 48 83 c0 b8                   addq    $-0x48, %rax
// 16c: 48 c1 e8 03                   shrq    $0x3, %rax
// 170: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 174: 31 c0                         xorl    %eax, %eax
// 176: e9 da 00 00 00                jmp     0x255 <_JIT_ENTRY+0x255>
// 17b: 83 fb 02                      cmpl    $0x2, %ebx
// 17e: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 184: 44 0f 43 eb                   cmovael %ebx, %r13d
// 188: 31 db                         xorl    %ebx, %ebx
// 18a: eb 10                         jmp     0x19c <_JIT_ENTRY+0x19c>
// 18c: 0f 1f 40 00                   nopl    (%rax)
// 190: 48 ff c3                      incq    %rbx
// 193: 49 39 dd                      cmpq    %rbx, %r13
// 196: 0f 84 28 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 19c: 4c 8b 7c dd 00                movq    (%rbp,%rbx,8), %r15
// 1a1: 49 8b 07                      movq    (%r15), %rax
// 1a4: 48 85 c0                      testq   %rax, %rax
// 1a7: 7e 07                         jle     0x1b0 <_JIT_ENTRY+0x1b0>
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 78 e3                         js      0x190 <_JIT_ENTRY+0x190>
// 1ad: eb 26                         jmp     0x1d5 <_JIT_ENTRY+0x1d5>
// 1af: 90                            nop
// 1b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1
// 1ba: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1bf: 4c 89 fa                      movq    %r15, %rdx
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _Py_NegativeRefcount
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 8b 07                      movq    (%r15), %rax
// 1d1: 85 c0                         testl   %eax, %eax
// 1d3: 78 bb                         js      0x190 <_JIT_ENTRY+0x190>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1df: ff d0                         callq   *%rax
// 1e1: 49 ff 0f                      decq    (%r15)
// 1e4: 75 aa                         jne     0x190 <_JIT_ENTRY+0x190>
// 1e6: 4c 89 ff                      movq    %r15, %rdi
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _Py_Dealloc
// 1f3: ff d0                         callq   *%rax
// 1f5: eb 99                         jmp     0x190 <_JIT_ENTRY+0x190>
// 1f7: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 1fb: 48 8b 00                      movq    (%rax), %rax
// 1fe: 49 8b 0f                      movq    (%r15), %rcx
// 201: 48 3b 81 a8 00 00 00          cmpq    0xa8(%rcx), %rax
// 208: 75 23                         jne     0x22d <_JIT_ENTRY+0x22d>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _JIT_CONTINUE
// 214: 4c 89 ff                      movq    %r15, %rdi
// 217: 4c 89 f6                      movq    %r14, %rsi
// 21a: 48 89 da                      movq    %rbx, %rdx
// 21d: 48 83 c4 28                   addq    $0x28, %rsp
// 221: 5b                            popq    %rbx
// 222: 41 5c                         popq    %r12
// 224: 41 5d                         popq    %r13
// 226: 41 5e                         popq    %r14
// 228: 41 5f                         popq    %r15
// 22a: 5d                            popq    %rbp
// 22b: ff e0                         jmpq    *%rax
// 22d: 4d 29 fe                      subq    %r15, %r14
// 230: 49 83 c6 b8                   addq    $-0x48, %r14
// 234: 49 c1 ee 03                   shrq    $0x3, %r14
// 238: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 23c: 49 8b 07                      movq    (%r15), %rax
// 23f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000241:  R_X86_64_64  _JIT_TARGET
// 249: 89 c9                         movl    %ecx, %ecx
// 24b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 24f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 255: 48 83 c4 28                   addq    $0x28, %rsp
// 259: 5b                            popq    %rbx
// 25a: 41 5c                         popq    %r12
// 25c: 41 5d                         popq    %r13
// 25e: 41 5e                         popq    %r14
// 260: 41 5f                         popq    %r15
// 262: 5d                            popq    %rbp
// 263: c3                            retq
// 264: 
static const unsigned char _CALL_BUILTIN_CLASSplus_RESUME_CHECK_code_body[613] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xc3, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xb2, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x30, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x08, 0x84, 0xc9, 0x0f, 0x84, 0xb0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x95, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0xe9, 0xda, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xeb, 0x31, 0xdb, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x7c, 0xdd, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x49, 0x8b, 0x0f, 0x48, 0x3b, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_RESUME_CHECK_code_holes[14] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_RESUME_CHECK_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_RESUME_CHECK_data_holes[1];

// _CALL_BUILTIN_CLASSplus_SAVE_RETURN_OFFSET
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_SAVE_RETURN_OFFSET.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 71 01                   leal    0x1(%r9), %r14d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 f1                   cmovel  %r9d, %r14d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 14 24                   movq    %r10, (%rsp)
// 79: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 7e: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 83: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 f2                      movl    %r14d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c6 00 00 00             jle     0x187 <_JIT_ENTRY+0x187>
// c1: 85 c0                         testl   %eax, %eax
// c3: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// c8: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// cd: 0f 89 e4 00 00 00             jns     0x1b7 <_JIT_ENTRY+0x1b7>
// d3: e9 00 01 00 00                jmp     0x1d8 <_JIT_ENTRY+0x1d8>
// d8: 49 29 ff                      subq    %rdi, %r15
// db: 49 83 c7 b8                   addq    $-0x48, %r15
// df: 49 c1 ef 03                   shrq    $0x3, %r15
// e3: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 22 01 00 00                jmp     0x227 <_JIT_ENTRY+0x227>
// 105: 41 83 fe 02                   cmpl    $0x2, %r14d
// 109: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 10f: 45 0f 43 ee                   cmovael %r14d, %r13d
// 113: 31 db                         xorl    %ebx, %ebx
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 48 ff c3                      incq    %rbx
// 123: 49 39 dd                      cmpq    %rbx, %r13
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4c 8b 74 dd 00                movq    (%rbp,%rbx,8), %r14
// 12d: 49 8b 06                      movq    (%r14), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7e 0b                         jle     0x140 <_JIT_ENTRY+0x140>
// 135: 85 c0                         testl   %eax, %eax
// 137: 78 e7                         js      0x120 <_JIT_ENTRY+0x120>
// 139: eb 2a                         jmp     0x165 <_JIT_ENTRY+0x165>
// 13b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 f2                      movq    %r14, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 06                      movq    (%r14), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 bb                         js      0x120 <_JIT_ENTRY+0x120>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0e                      decq    (%r14)
// 174: 75 aa                         jne     0x120 <_JIT_ENTRY+0x120>
// 176: 4c 89 f7                      movq    %r14, %rdi
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: ff d0                         callq   *%rax
// 185: eb 99                         jmp     0x120 <_JIT_ENTRY+0x120>
// 187: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000189:  R_X86_64_64  .rodata.str1.1
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _Py_NegativeRefcount
// 19b: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a0: 4c 89 e2                      movq    %r12, %rdx
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 8b 04 24                   movq    (%r12), %rax
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 1b0: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 1b5: 78 21                         js      0x1d8 <_JIT_ENTRY+0x1d8>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c1: ff d0                         callq   *%rax
// 1c3: 49 ff 0c 24                   decq    (%r12)
// 1c7: 75 0f                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_Dealloc
// 1d3: 4c 89 e7                      movq    %r12, %rdi
// 1d6: ff d0                         callq   *%rax
// 1d8: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1dd: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 1e1: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1e6: 48 85 d2                      testq   %rdx, %rdx
// 1e9: 74 2c                         je      0x217 <_JIT_ENTRY+0x217>
// 1eb: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1ef: 4d 8d 34 cf                   leaq    (%r15,%rcx,8), %r14
// 1f3: 48 89 10                      movq    %rdx, (%rax)
// 1f6: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1fa: 48 8b 00                      movq    (%rax), %rax
// 1fd: 84 c0                         testb   %al, %al
// 1ff: 74 35                         je      0x236 <_JIT_ENTRY+0x236>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_HandlePending
// 20b: 4c 89 ef                      movq    %r13, %rdi
// 20e: ff d0                         callq   *%rax
// 210: 85 c0                         testl   %eax, %eax
// 212: 74 22                         je      0x236 <_JIT_ENTRY+0x236>
// 214: 4c 89 f0                      movq    %r14, %rax
// 217: 48 29 d8                      subq    %rbx, %rax
// 21a: 48 83 c0 b8                   addq    $-0x48, %rax
// 21e: 48 c1 e8 03                   shrq    $0x3, %rax
// 222: 89 43 40                      movl    %eax, 0x40(%rbx)
// 225: 31 c0                         xorl    %eax, %eax
// 227: 48 83 c4 28                   addq    $0x28, %rsp
// 22b: 5b                            popq    %rbx
// 22c: 41 5c                         popq    %r12
// 22e: 41 5d                         popq    %r13
// 230: 41 5e                         popq    %r14
// 232: 41 5f                         popq    %r15
// 234: 5d                            popq    %rbp
// 235: c3                            retq
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _JIT_OPARG
// 240: 66 89 43 44                   movw    %ax, 0x44(%rbx)
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _JIT_CONTINUE
// 24e: 48 89 df                      movq    %rbx, %rdi
// 251: 4c 89 f6                      movq    %r14, %rsi
// 254: 4c 89 ea                      movq    %r13, %rdx
// 257: 48 83 c4 28                   addq    $0x28, %rsp
// 25b: 5b                            popq    %rbx
// 25c: 41 5c                         popq    %r12
// 25e: 41 5d                         popq    %r13
// 260: 41 5e                         popq    %r14
// 262: 41 5f                         popq    %r15
// 264: 5d                            popq    %rbp
// 265: ff e0                         jmpq    *%rax
// 267: 
static const unsigned char _CALL_BUILTIN_CLASSplus_SAVE_RETURN_OFFSET_code_body[616] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x71, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf1, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xf2, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x0f, 0x89, 0xe4, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x22, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfe, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xee, 0x31, 0xdb, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x74, 0x8c, 0x4c, 0x8b, 0x74, 0xdd, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x0b, 0x85, 0xc0, 0x78, 0xe7, 0xeb, 0x2a, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x2c, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x34, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x22, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x89, 0x43, 0x44, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_SAVE_RETURN_OFFSET_code_holes[15] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_SAVE_RETURN_OFFSET_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_SAVE_RETURN_OFFSET_data_holes[1];

// _CALL_BUILTIN_CLASSplus_SETUP_ANNOTATIONS
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_SETUP_ANNOTATIONS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 91 01 00 00             je      0x1f8 <_JIT_ENTRY+0x1f8>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 80 01 00 00             je      0x1f8 <_JIT_ENTRY+0x1f8>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 82: 48 89 54 24 28                movq    %rdx, 0x28(%rsp)
// 87: 48 89 7c 24 30                movq    %rdi, 0x30(%rsp)
// 8c: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 90: 48 85 c0                      testq   %rax, %rax
// 93: 41 0f 94 c6                   sete    %r14b
// 97: 89 da                         movl    %ebx, %edx
// 99: 4c 89 e7                      movq    %r12, %rdi
// 9c: 48 89 ee                      movq    %rbp, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: 41 ff d0                      callq   *%r8
// a4: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _JIT_OPARG
// b3: 66 85 c0                      testw   %ax, %ax
// b6: 0f 94 c0                      sete    %al
// b9: 41 84 c6                      testb   %al, %r14b
// bc: 0f 84 63 01 00 00             je      0x225 <_JIT_ENTRY+0x225>
// c2: 49 8b 04 24                   movq    (%r12), %rax
// c6: 48 85 c0                      testq   %rax, %rax
// c9: 7f 22                         jg      0xed <_JIT_ENTRY+0xed>
// cb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cd:  R_X86_64_64  .rodata.str1.1
// d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d7:  R_X86_64_64  _Py_NegativeRefcount
// df: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e4: 4c 89 e2                      movq    %r12, %rdx
// e7: ff d0                         callq   *%rax
// e9: 49 8b 04 24                   movq    (%r12), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 48 8b 5c 24 30                movq    0x30(%rsp), %rbx
// f4: 4c 8b 6c 24 28                movq    0x28(%rsp), %r13
// f9: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// fe: 78 16                         js      0x116 <_JIT_ENTRY+0x116>
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10a: ff d0                         callq   *%rax
// 10c: 49 ff 0c 24                   decq    (%r12)
// 110: 0f 84 93 01 00 00             je      0x2a9 <_JIT_ENTRY+0x2a9>
// 116: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 11a: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 11f: 48 85 d2                      testq   %rdx, %rdx
// 122: 0f 84 a2 01 00 00             je      0x2ca <_JIT_ENTRY+0x2ca>
// 128: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 12d: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 131: 48 89 10                      movq    %rdx, (%rax)
// 134: 49 8b 45 10                   movq    0x10(%r13), %rax
// 138: 48 8b 00                      movq    (%rax), %rax
// 13b: 84 c0                         testb   %al, %al
// 13d: 74 17                         je      0x156 <_JIT_ENTRY+0x156>
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  _Py_HandlePending
// 149: 4c 89 ef                      movq    %r13, %rdi
// 14c: ff d0                         callq   *%rax
// 14e: 85 c0                         testl   %eax, %eax
// 150: 0f 85 a1 01 00 00             jne     0x2f7 <_JIT_ENTRY+0x2f7>
// 156: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 15a: 48 85 ff                      testq   %rdi, %rdi
// 15d: 0f 84 6c 01 00 00             je      0x2cf <_JIT_ENTRY+0x2cf>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  PyMapping_GetOptionalItem
// 16d: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000016f:  R_X86_64_64  _PyRuntime
// 177: 49 81 c4 a8 a7 00 00          addq    $0xa7a8, %r12           # imm = 0xA7A8
// 17e: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 183: 4c 89 e6                      movq    %r12, %rsi
// 186: ff d0                         callq   *%rax
// 188: 85 c0                         testl   %eax, %eax
// 18a: 0f 88 67 01 00 00             js      0x2f7 <_JIT_ENTRY+0x2f7>
// 190: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 195: 4d 85 f6                      testq   %r14, %r14
// 198: 0f 84 79 01 00 00             je      0x317 <_JIT_ENTRY+0x317>
// 19e: 49 8b 06                      movq    (%r14), %rax
// 1a1: 48 85 c0                      testq   %rax, %rax
// 1a4: 7f 21                         jg      0x1c7 <_JIT_ENTRY+0x1c7>
// 1a6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a8:  R_X86_64_64  .rodata.str1.1
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _Py_NegativeRefcount
// 1ba: be 96 05 00 00                movl    $0x596, %esi            # imm = 0x596
// 1bf: 4c 89 f2                      movq    %r14, %rdx
// 1c2: ff d0                         callq   *%rax
// 1c4: 49 8b 06                      movq    (%r14), %rax
// 1c7: 85 c0                         testl   %eax, %eax
// 1c9: 0f 88 d0 01 00 00             js      0x39f <_JIT_ENTRY+0x39f>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d9: ff d0                         callq   *%rax
// 1db: 49 ff 0e                      decq    (%r14)
// 1de: 0f 85 bb 01 00 00             jne     0x39f <_JIT_ENTRY+0x39f>
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_Dealloc
// 1ee: 4c 89 f7                      movq    %r14, %rdi
// 1f1: ff d0                         callq   *%rax
// 1f3: e9 a7 01 00 00                jmp     0x39f <_JIT_ENTRY+0x39f>
// 1f8: 49 29 ff                      subq    %rdi, %r15
// 1fb: 49 83 c7 b8                   addq    $-0x48, %r15
// 1ff: 49 c1 ef 03                   shrq    $0x3, %r15
// 203: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 207: 48 8b 07                      movq    (%rdi), %rax
// 20a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020c:  R_X86_64_64  _JIT_TARGET
// 214: 89 c9                         movl    %ecx, %ecx
// 216: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 21a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 220: e9 e3 00 00 00                jmp     0x308 <_JIT_ENTRY+0x308>
// 225: 83 fb 02                      cmpl    $0x2, %ebx
// 228: 41 be 01 00 00 00             movl    $0x1, %r14d
// 22e: 44 0f 43 f3                   cmovael %ebx, %r14d
// 232: 31 db                         xorl    %ebx, %ebx
// 234: eb 16                         jmp     0x24c <_JIT_ENTRY+0x24c>
// 236: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 240: 48 ff c3                      incq    %rbx
// 243: 49 39 de                      cmpq    %rbx, %r14
// 246: 0f 84 76 fe ff ff             je      0xc2 <_JIT_ENTRY+0xc2>
// 24c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 251: 49 8b 45 00                   movq    (%r13), %rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 7e 06                         jle     0x260 <_JIT_ENTRY+0x260>
// 25a: 85 c0                         testl   %eax, %eax
// 25c: 78 e2                         js      0x240 <_JIT_ENTRY+0x240>
// 25e: eb 26                         jmp     0x286 <_JIT_ENTRY+0x286>
// 260: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000262:  R_X86_64_64  .rodata.str1.1
// 26a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 26f: 4c 89 ea                      movq    %r13, %rdx
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_NegativeRefcount
// 27c: ff d0                         callq   *%rax
// 27e: 49 8b 45 00                   movq    (%r13), %rax
// 282: 85 c0                         testl   %eax, %eax
// 284: 78 ba                         js      0x240 <_JIT_ENTRY+0x240>
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 290: ff d0                         callq   *%rax
// 292: 49 ff 4d 00                   decq    (%r13)
// 296: 75 a8                         jne     0x240 <_JIT_ENTRY+0x240>
// 298: 4c 89 ef                      movq    %r13, %rdi
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_Dealloc
// 2a5: ff d0                         callq   *%rax
// 2a7: eb 97                         jmp     0x240 <_JIT_ENTRY+0x240>
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _Py_Dealloc
// 2b3: 4c 89 e7                      movq    %r12, %rdi
// 2b6: ff d0                         callq   *%rax
// 2b8: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 2bc: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 2c1: 48 85 d2                      testq   %rdx, %rdx
// 2c4: 0f 85 5e fe ff ff             jne     0x128 <_JIT_ENTRY+0x128>
// 2ca: 49 89 c7                      movq    %rax, %r15
// 2cd: eb 28                         jmp     0x2f7 <_JIT_ENTRY+0x2f7>
// 2cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d1:  R_X86_64_64  PyExc_SystemError
// 2d9: 48 8b 30                      movq    (%rax), %rsi
// 2dc: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002de:  R_X86_64_64  .rodata.str1.1+0x39
// 2e6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002e8:  R_X86_64_64  _PyErr_Format
// 2f0: 4c 89 ef                      movq    %r13, %rdi
// 2f3: 31 c0                         xorl    %eax, %eax
// 2f5: ff d1                         callq   *%rcx
// 2f7: 49 29 df                      subq    %rbx, %r15
// 2fa: 49 83 c7 b8                   addq    $-0x48, %r15
// 2fe: 49 c1 ef 03                   shrq    $0x3, %r15
// 302: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 306: 31 c0                         xorl    %eax, %eax
// 308: 48 83 c4 38                   addq    $0x38, %rsp
// 30c: 5b                            popq    %rbx
// 30d: 41 5c                         popq    %r12
// 30f: 41 5d                         popq    %r13
// 311: 41 5e                         popq    %r14
// 313: 41 5f                         popq    %r15
// 315: 5d                            popq    %rbp
// 316: c3                            retq
// 317: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000319:  R_X86_64_64  PyDict_New
// 321: ff d0                         callq   *%rax
// 323: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 328: 48 85 c0                      testq   %rax, %rax
// 32b: 74 ca                         je      0x2f7 <_JIT_ENTRY+0x2f7>
// 32d: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 331: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000333:  R_X86_64_64  PyObject_SetItem
// 33b: 4c 89 e6                      movq    %r12, %rsi
// 33e: 48 89 c2                      movq    %rax, %rdx
// 341: ff d1                         callq   *%rcx
// 343: 89 c5                         movl    %eax, %ebp
// 345: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 34a: 49 8b 06                      movq    (%r14), %rax
// 34d: 48 85 c0                      testq   %rax, %rax
// 350: 7f 21                         jg      0x373 <_JIT_ENTRY+0x373>
// 352: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000354:  R_X86_64_64  .rodata.str1.1
// 35c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035e:  R_X86_64_64  _Py_NegativeRefcount
// 366: be 92 05 00 00                movl    $0x592, %esi            # imm = 0x592
// 36b: 4c 89 f2                      movq    %r14, %rdx
// 36e: ff d0                         callq   *%rax
// 370: 49 8b 06                      movq    (%r14), %rax
// 373: 85 c0                         testl   %eax, %eax
// 375: 78 20                         js      0x397 <_JIT_ENTRY+0x397>
// 377: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000379:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 381: ff d0                         callq   *%rax
// 383: 49 ff 0e                      decq    (%r14)
// 386: 75 0f                         jne     0x397 <_JIT_ENTRY+0x397>
// 388: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038a:  R_X86_64_64  _Py_Dealloc
// 392: 4c 89 f7                      movq    %r14, %rdi
// 395: ff d0                         callq   *%rax
// 397: 85 ed                         testl   %ebp, %ebp
// 399: 0f 85 58 ff ff ff             jne     0x2f7 <_JIT_ENTRY+0x2f7>
// 39f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a1:  R_X86_64_64  _JIT_CONTINUE
// 3a9: 48 89 df                      movq    %rbx, %rdi
// 3ac: 4c 89 fe                      movq    %r15, %rsi
// 3af: 4c 89 ea                      movq    %r13, %rdx
// 3b2: 48 83 c4 38                   addq    $0x38, %rsp
// 3b6: 5b                            popq    %rbx
// 3b7: 41 5c                         popq    %r12
// 3b9: 41 5d                         popq    %r13
// 3bb: 41 5e                         popq    %r14
// 3bd: 41 5f                         popq    %r15
// 3bf: 5d                            popq    %rbp
// 3c0: ff e0                         jmpq    *%rax
// 3c2: 
static const unsigned char _CALL_BUILTIN_CLASSplus_SETUP_ANNOTATIONS_code_body[963] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x91, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x80, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x28, 0x48, 0x89, 0x7c, 0x24, 0x30, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0x63, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x4c, 0x8b, 0x6c, 0x24, 0x28, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x93, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xa2, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x3c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xa1, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x6c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc4, 0xa8, 0xa7, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x67, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x79, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x0f, 0x88, 0xd0, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0xbb, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0xe9, 0xa7, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xe3, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x16, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x76, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x0f, 0x85, 0x5e, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xc7, 0xeb, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x31, 0xc0, 0xff, 0xd1, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0xca, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc2, 0xff, 0xd1, 0x89, 0xc5, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x92, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x85, 0x58, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_SETUP_ANNOTATIONS_code_holes[29] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x16f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x319, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_New, 0x0},
    {0x333, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x354, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x35e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x379, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x38a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3a1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when setting up annotations\x00'
// 65: 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_SETUP_ANNOTATIONS_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_SETUP_ANNOTATIONS_data_holes[1];

// _CALL_BUILTIN_CLASSplus_SET_ADD
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_SET_ADD.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f8 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e7 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 82: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 87: 48 89 3c 24                   movq    %rdi, (%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 cc 00 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 1c 24                   movq    (%rsp), %rbx
// f1: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// f6: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// fb: 78 16                         js      0x113 <_JIT_ENTRY+0x113>
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 107: ff d0                         callq   *%rax
// 109: 49 ff 0c 24                   decq    (%r12)
// 10d: 0f 84 92 01 00 00             je      0x2a5 <_JIT_ENTRY+0x2a5>
// 113: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 118: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 11c: 4d 85 ed                      testq   %r13, %r13
// 11f: 0f 84 a1 01 00 00             je      0x2c6 <_JIT_ENTRY+0x2c6>
// 125: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 12a: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 12e: 4c 89 28                      movq    %r13, (%rax)
// 131: 49 8b 46 10                   movq    0x10(%r14), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 0f 84 c9 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_HandlePending
// 14a: 4c 89 f7                      movq    %r14, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 0f 84 b2 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 157: 4c 89 e0                      movq    %r12, %rax
// 15a: e9 67 01 00 00                jmp     0x2c6 <_JIT_ENTRY+0x2c6>
// 15f: 49 29 ff                      subq    %rdi, %r15
// 162: 49 83 c7 b8                   addq    $-0x48, %r15
// 166: 49 c1 ef 03                   shrq    $0x3, %r15
// 16a: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 16e: 48 8b 07                      movq    (%rdi), %rax
// 171: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000173:  R_X86_64_64  _JIT_TARGET
// 17b: 89 c9                         movl    %ecx, %ecx
// 17d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 181: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 187: e9 4a 01 00 00                jmp     0x2d6 <_JIT_ENTRY+0x2d6>
// 18c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 190: 41 be 01 00 00 00             movl    $0x1, %r14d
// 196: 45 0f 43 f5                   cmovael %r13d, %r14d
// 19a: 31 db                         xorl    %ebx, %ebx
// 19c: eb 0e                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19e: 66 90                         nop
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 de                      cmpq    %rbx, %r14
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 63 d8                      movslq  %eax, %rbx
// 21d: 4d 8b 74 df f8                movq    -0x8(%r15,%rbx,8), %r14
// 222: 48 8d 04 1b                   leaq    (%rbx,%rbx), %rax
// 226: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  PySet_Add
// 234: 4c 89 f6                      movq    %r14, %rsi
// 237: ff d0                         callq   *%rax
// 239: 89 c5                         movl    %eax, %ebp
// 23b: 49 8b 06                      movq    (%r14), %rax
// 23e: 48 85 c0                      testq   %rax, %rax
// 241: 7f 21                         jg      0x264 <_JIT_ENTRY+0x264>
// 243: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000245:  R_X86_64_64  .rodata.str1.1
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_NegativeRefcount
// 257: be 29 02 00 00                movl    $0x229, %esi            # imm = 0x229
// 25c: 4c 89 f2                      movq    %r14, %rdx
// 25f: ff d0                         callq   *%rax
// 261: 49 8b 06                      movq    (%r14), %rax
// 264: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 268: 48 83 c3 f8                   addq    $-0x8, %rbx
// 26c: 85 c0                         testl   %eax, %eax
// 26e: 78 20                         js      0x290 <_JIT_ENTRY+0x290>
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27a: ff d0                         callq   *%rax
// 27c: 49 ff 0e                      decq    (%r14)
// 27f: 75 0f                         jne     0x290 <_JIT_ENTRY+0x290>
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  _Py_Dealloc
// 28b: 4c 89 f7                      movq    %r14, %rdi
// 28e: ff d0                         callq   *%rax
// 290: 85 ed                         testl   %ebp, %ebp
// 292: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 296: 74 4d                         je      0x2e5 <_JIT_ENTRY+0x2e5>
// 298: 49 83 c4 f8                   addq    $-0x8, %r12
// 29c: 4c 89 e0                      movq    %r12, %rax
// 29f: 48 8b 1c 24                   movq    (%rsp), %rbx
// 2a3: eb 21                         jmp     0x2c6 <_JIT_ENTRY+0x2c6>
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _Py_Dealloc
// 2af: 4c 89 e7                      movq    %r12, %rdi
// 2b2: ff d0                         callq   *%rax
// 2b4: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 2b9: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 2bd: 4d 85 ed                      testq   %r13, %r13
// 2c0: 0f 85 5f fe ff ff             jne     0x125 <_JIT_ENTRY+0x125>
// 2c6: 48 29 d8                      subq    %rbx, %rax
// 2c9: 48 83 c0 b8                   addq    $-0x48, %rax
// 2cd: 48 c1 e8 03                   shrq    $0x3, %rax
// 2d1: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2d4: 31 c0                         xorl    %eax, %eax
// 2d6: 48 83 c4 28                   addq    $0x28, %rsp
// 2da: 5b                            popq    %rbx
// 2db: 41 5c                         popq    %r12
// 2dd: 41 5d                         popq    %r13
// 2df: 41 5e                         popq    %r14
// 2e1: 41 5f                         popq    %r15
// 2e3: 5d                            popq    %rbp
// 2e4: c3                            retq
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _JIT_CONTINUE
// 2ef: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2f3: 4c 89 e6                      movq    %r12, %rsi
// 2f6: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2fb: 48 83 c4 28                   addq    $0x28, %rsp
// 2ff: 5b                            popq    %rbx
// 300: 41 5c                         popq    %r12
// 302: 41 5d                         popq    %r13
// 304: 41 5e                         popq    %r14
// 306: 41 5f                         popq    %r15
// 308: 5d                            popq    %rbp
// 309: ff e0                         jmpq    *%rax
// 30b: 
static const unsigned char _CALL_BUILTIN_CLASSplus_SET_ADD_code_body[780] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x92, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xa1, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x67, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x4a, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x74, 0xdf, 0xf8, 0x48, 0x8d, 0x04, 0x1b, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x29, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x49, 0x8d, 0x1c, 0xdf, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe3, 0x74, 0x4d, 0x49, 0x83, 0xc4, 0xf8, 0x4c, 0x89, 0xe0, 0x48, 0x8b, 0x1c, 0x24, 0xeb, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x85, 0x5f, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_SET_ADD_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_SET_ADD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_SET_ADD_data_holes[1];

// _CALL_BUILTIN_CLASSplus_SET_FUNCTION_ATTRIBUTE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_SET_FUNCTION_ATTRIBUTE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 09 01 00 00             je      0x170 <_JIT_ENTRY+0x170>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 f8 00 00 00             je      0x170 <_JIT_ENTRY+0x170>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 e7 00 00 00             je      0x1a7 <_JIT_ENTRY+0x1a7>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f2: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// f7: 78 21                         js      0x11a <_JIT_ENTRY+0x11a>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 0c 24                   decq    (%r12)
// 109: 75 0f                         jne     0x11a <_JIT_ENTRY+0x11a>
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_Dealloc
// 115: 4c 89 e7                      movq    %r12, %rdi
// 118: ff d0                         callq   *%rax
// 11a: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 11f: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 123: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 128: 48 85 c9                      testq   %rcx, %rcx
// 12b: 74 31                         je      0x15e <_JIT_ENTRY+0x15e>
// 12d: 48 89 08                      movq    %rcx, (%rax)
// 130: 49 8b 47 10                   movq    0x10(%r15), %rax
// 134: 48 8b 00                      movq    (%rax), %rax
// 137: 84 c0                         testb   %al, %al
// 139: 0f 84 ea 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  _Py_HandlePending
// 149: 4c 89 ff                      movq    %r15, %rdi
// 14c: ff d0                         callq   *%rax
// 14e: 85 c0                         testl   %eax, %eax
// 150: 0f 84 d3 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 156: 48 8b 04 24                   movq    (%rsp), %rax
// 15a: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 15e: 48 29 d8                      subq    %rbx, %rax
// 161: 48 83 c0 b8                   addq    $-0x48, %rax
// 165: 48 c1 e8 03                   shrq    $0x3, %rax
// 169: 89 43 40                      movl    %eax, 0x40(%rbx)
// 16c: 31 c0                         xorl    %eax, %eax
// 16e: eb 28                         jmp     0x198 <_JIT_ENTRY+0x198>
// 170: 49 29 fe                      subq    %rdi, %r14
// 173: 49 83 c6 b8                   addq    $-0x48, %r14
// 177: 49 c1 ee 03                   shrq    $0x3, %r14
// 17b: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 17f: 48 8b 07                      movq    (%rdi), %rax
// 182: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000184:  R_X86_64_64  _JIT_TARGET
// 18c: 89 c9                         movl    %ecx, %ecx
// 18e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 192: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 198: 48 83 c4 28                   addq    $0x28, %rsp
// 19c: 5b                            popq    %rbx
// 19d: 41 5c                         popq    %r12
// 19f: 41 5d                         popq    %r13
// 1a1: 41 5e                         popq    %r14
// 1a3: 41 5f                         popq    %r15
// 1a5: 5d                            popq    %rbp
// 1a6: c3                            retq
// 1a7: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ab: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1b1: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1b5: 31 db                         xorl    %ebx, %ebx
// 1b7: eb 13                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1b9: 0f 1f 80 00 00 00 00          nopl    (%rax)
// 1c0: 48 ff c3                      incq    %rbx
// 1c3: 49 39 df                      cmpq    %rbx, %r15
// 1c6: 0f 84 f4 fe ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1cc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: 0f b7 f0                      movzwl  %ax, %esi
// 236: 89 f0                         movl    %esi, %eax
// 238: f7 d0                         notl    %eax
// 23a: 48 63 d0                      movslq  %eax, %rdx
// 23d: 49 8b 4c d6 f0                movq    -0x10(%r14,%rdx,8), %rcx
// 242: 49 8b 44 d6 f8                movq    -0x8(%r14,%rdx,8), %rax
// 247: 83 fe 03                      cmpl    $0x3, %esi
// 24a: 7f 10                         jg      0x25c <_JIT_ENTRY+0x25c>
// 24c: 83 fe 01                      cmpl    $0x1, %esi
// 24f: 74 1b                         je      0x26c <_JIT_ENTRY+0x26c>
// 251: 83 fe 02                      cmpl    $0x2, %esi
// 254: 75 65                         jne     0x2bb <_JIT_ENTRY+0x2bb>
// 256: 48 8d 78 40                   leaq    0x40(%rax), %rdi
// 25a: eb 1a                         jmp     0x276 <_JIT_ENTRY+0x276>
// 25c: 83 fe 04                      cmpl    $0x4, %esi
// 25f: 74 11                         je      0x272 <_JIT_ENTRY+0x272>
// 261: 83 fe 08                      cmpl    $0x8, %esi
// 264: 75 55                         jne     0x2bb <_JIT_ENTRY+0x2bb>
// 266: 48 8d 78 48                   leaq    0x48(%rax), %rdi
// 26a: eb 0a                         jmp     0x276 <_JIT_ENTRY+0x276>
// 26c: 48 8d 78 38                   leaq    0x38(%rax), %rdi
// 270: eb 04                         jmp     0x276 <_JIT_ENTRY+0x276>
// 272: 48 8d 78 70                   leaq    0x70(%rax), %rdi
// 276: 49 8d 34 d6                   leaq    (%r14,%rdx,8), %rsi
// 27a: 48 83 c6 f8                   addq    $-0x8, %rsi
// 27e: 48 89 0f                      movq    %rcx, (%rdi)
// 281: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000283:  R_X86_64_64  _JIT_OPARG
// 28b: f7 d1                         notl    %ecx
// 28d: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 293: 48 63 c9                      movslq  %ecx, %rcx
// 296: 49 89 44 ce f0                movq    %rax, -0x10(%r14,%rcx,8)
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _JIT_CONTINUE
// 2a5: 48 89 df                      movq    %rbx, %rdi
// 2a8: 4c 89 fa                      movq    %r15, %rdx
// 2ab: 48 83 c4 28                   addq    $0x28, %rsp
// 2af: 5b                            popq    %rbx
// 2b0: 41 5c                         popq    %r12
// 2b2: 41 5d                         popq    %r13
// 2b4: 41 5e                         popq    %r14
// 2b6: 41 5f                         popq    %r15
// 2b8: 5d                            popq    %rbp
// 2b9: ff e0                         jmpq    *%rax
// 2bb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002bd:  R_X86_64_64  .rodata.str1.1+0x39
// 2c5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002c7:  R_X86_64_64  .rodata.str1.1+0x44
// 2cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d1:  R_X86_64_64  _Py_FatalErrorFunc
// 2d9: ff d0                         callq   *%rax
// 2db: 
static const unsigned char _CALL_BUILTIN_CLASSplus_SET_FUNCTION_ATTRIBUTE_code_body[732] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x09, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xea, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xd3, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0x28, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x13, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0xf4, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x89, 0xf0, 0xf7, 0xd0, 0x48, 0x63, 0xd0, 0x49, 0x8b, 0x4c, 0xd6, 0xf0, 0x49, 0x8b, 0x44, 0xd6, 0xf8, 0x83, 0xfe, 0x03, 0x7f, 0x10, 0x83, 0xfe, 0x01, 0x74, 0x1b, 0x83, 0xfe, 0x02, 0x75, 0x65, 0x48, 0x8d, 0x78, 0x40, 0xeb, 0x1a, 0x83, 0xfe, 0x04, 0x74, 0x11, 0x83, 0xfe, 0x08, 0x75, 0x55, 0x48, 0x8d, 0x78, 0x48, 0xeb, 0x0a, 0x48, 0x8d, 0x78, 0x38, 0xeb, 0x04, 0x48, 0x8d, 0x78, 0x70, 0x49, 0x8d, 0x34, 0xd6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x89, 0x0f, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x44, 0xce, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CALL_BUILTIN_CLASSplus_SET_FUNCTION_ATTRIBUTE_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x44},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalErrorFunc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_JIT_ENTRY\x00We've reached an unreachable state. Anything is possible.\nThe limits were in our heads all along. Follow your dreams.\nhttps://xkcd.com/2200\x00"
// d0: 
static const unsigned char _CALL_BUILTIN_CLASSplus_SET_FUNCTION_ATTRIBUTE_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x00, 0x57, 0x65, 0x27, 0x76, 0x65, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x20, 0x41, 0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x2e, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x75, 0x72, 0x20, 0x68, 0x65, 0x61, 0x64, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x20, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x78, 0x6b, 0x63, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x32, 0x32, 0x30, 0x30, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_SET_FUNCTION_ATTRIBUTE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_SET_IP
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_SET_IP.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 71 01                   leal    0x1(%r9), %r14d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 f1                   cmovel  %r9d, %r14d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 74 75                         je      0xd8 <_JIT_ENTRY+0xd8>
// 63: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6b: 4d 85 c0                      testq   %r8, %r8
// 6e: 74 68                         je      0xd8 <_JIT_ENTRY+0xd8>
// 70: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 75: 4c 89 14 24                   movq    %r10, (%rsp)
// 79: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 7e: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 83: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 0f 94 c3                      sete    %bl
// 8d: 44 89 f2                      movl    %r14d, %edx
// 90: 4c 89 e7                      movq    %r12, %rdi
// 93: 48 89 ee                      movq    %rbp, %rsi
// 96: 31 c9                         xorl    %ecx, %ecx
// 98: 41 ff d0                      callq   *%r8
// 9b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: 66 85 c0                      testw   %ax, %ax
// ad: 0f 94 c0                      sete    %al
// b0: 84 c3                         testb   %al, %bl
// b2: 74 51                         je      0x105 <_JIT_ENTRY+0x105>
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 85 c0                      testq   %rax, %rax
// bb: 0f 8e c6 00 00 00             jle     0x187 <_JIT_ENTRY+0x187>
// c1: 85 c0                         testl   %eax, %eax
// c3: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// c8: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// cd: 0f 89 e4 00 00 00             jns     0x1b7 <_JIT_ENTRY+0x1b7>
// d3: e9 00 01 00 00                jmp     0x1d8 <_JIT_ENTRY+0x1d8>
// d8: 49 29 ff                      subq    %rdi, %r15
// db: 49 83 c7 b8                   addq    $-0x48, %r15
// df: 49 c1 ef 03                   shrq    $0x3, %r15
// e3: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// e7: 48 8b 07                      movq    (%rdi), %rax
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: e9 22 01 00 00                jmp     0x227 <_JIT_ENTRY+0x227>
// 105: 41 83 fe 02                   cmpl    $0x2, %r14d
// 109: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 10f: 45 0f 43 ee                   cmovael %r14d, %r13d
// 113: 31 db                         xorl    %ebx, %ebx
// 115: eb 11                         jmp     0x128 <_JIT_ENTRY+0x128>
// 117: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 120: 48 ff c3                      incq    %rbx
// 123: 49 39 dd                      cmpq    %rbx, %r13
// 126: 74 8c                         je      0xb4 <_JIT_ENTRY+0xb4>
// 128: 4c 8b 74 dd 00                movq    (%rbp,%rbx,8), %r14
// 12d: 49 8b 06                      movq    (%r14), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7e 0b                         jle     0x140 <_JIT_ENTRY+0x140>
// 135: 85 c0                         testl   %eax, %eax
// 137: 78 e7                         js      0x120 <_JIT_ENTRY+0x120>
// 139: eb 2a                         jmp     0x165 <_JIT_ENTRY+0x165>
// 13b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 14f: 4c 89 f2                      movq    %r14, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 06                      movq    (%r14), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 bb                         js      0x120 <_JIT_ENTRY+0x120>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0e                      decq    (%r14)
// 174: 75 aa                         jne     0x120 <_JIT_ENTRY+0x120>
// 176: 4c 89 f7                      movq    %r14, %rdi
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: ff d0                         callq   *%rax
// 185: eb 99                         jmp     0x120 <_JIT_ENTRY+0x120>
// 187: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000189:  R_X86_64_64  .rodata.str1.1
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _Py_NegativeRefcount
// 19b: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1a0: 4c 89 e2                      movq    %r12, %rdx
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 8b 04 24                   movq    (%r12), %rax
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 1b0: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 1b5: 78 21                         js      0x1d8 <_JIT_ENTRY+0x1d8>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c1: ff d0                         callq   *%rax
// 1c3: 49 ff 0c 24                   decq    (%r12)
// 1c7: 75 0f                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_Dealloc
// 1d3: 4c 89 e7                      movq    %r12, %rdi
// 1d6: ff d0                         callq   *%rax
// 1d8: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1dd: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 1e1: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1e6: 48 85 d2                      testq   %rdx, %rdx
// 1e9: 74 2c                         je      0x217 <_JIT_ENTRY+0x217>
// 1eb: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1ef: 4d 8d 34 cf                   leaq    (%r15,%rcx,8), %r14
// 1f3: 48 89 10                      movq    %rdx, (%rax)
// 1f6: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1fa: 48 8b 00                      movq    (%rax), %rax
// 1fd: 84 c0                         testb   %al, %al
// 1ff: 74 35                         je      0x236 <_JIT_ENTRY+0x236>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_HandlePending
// 20b: 4c 89 ef                      movq    %r13, %rdi
// 20e: ff d0                         callq   *%rax
// 210: 85 c0                         testl   %eax, %eax
// 212: 74 22                         je      0x236 <_JIT_ENTRY+0x236>
// 214: 4c 89 f0                      movq    %r14, %rax
// 217: 48 29 d8                      subq    %rbx, %rax
// 21a: 48 83 c0 b8                   addq    $-0x48, %rax
// 21e: 48 c1 e8 03                   shrq    $0x3, %rax
// 222: 89 43 40                      movl    %eax, 0x40(%rbx)
// 225: 31 c0                         xorl    %eax, %eax
// 227: 48 83 c4 28                   addq    $0x28, %rsp
// 22b: 5b                            popq    %rbx
// 22c: 41 5c                         popq    %r12
// 22e: 41 5d                         popq    %r13
// 230: 41 5e                         popq    %r14
// 232: 41 5f                         popq    %r15
// 234: 5d                            popq    %rbp
// 235: c3                            retq
// 236: 48 8b 03                      movq    (%rbx), %rax
// 239: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: 0f b7 c9                      movzwl  %cx, %ecx
// 246: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 24a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 250: 48 89 43 38                   movq    %rax, 0x38(%rbx)
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _JIT_CONTINUE
// 25e: 48 89 df                      movq    %rbx, %rdi
// 261: 4c 89 f6                      movq    %r14, %rsi
// 264: 4c 89 ea                      movq    %r13, %rdx
// 267: 48 83 c4 28                   addq    $0x28, %rsp
// 26b: 5b                            popq    %rbx
// 26c: 41 5c                         popq    %r12
// 26e: 41 5d                         popq    %r13
// 270: 41 5e                         popq    %r14
// 272: 41 5f                         popq    %r15
// 274: 5d                            popq    %rbp
// 275: ff e0                         jmpq    *%rax
// 277: 
static const unsigned char _CALL_BUILTIN_CLASSplus_SET_IP_code_body[632] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x71, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf1, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x75, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x74, 0x68, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xf2, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x51, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x0f, 0x89, 0xe4, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x22, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfe, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xee, 0x31, 0xdb, 0xeb, 0x11, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x74, 0x8c, 0x4c, 0x8b, 0x74, 0xdd, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x0b, 0x85, 0xc0, 0x78, 0xe7, 0xeb, 0x2a, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x2c, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x34, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x22, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x89, 0x43, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_SET_IP_code_holes[15] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_SET_IP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_SET_IP_data_holes[1];

// _CALL_BUILTIN_CLASSplus_SET_UPDATE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_SET_UPDATE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f9 00 00 00             je      0x160 <_JIT_ENTRY+0x160>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e8 00 00 00             je      0x160 <_JIT_ENTRY+0x160>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 82: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 87: 48 89 3c 24                   movq    %rdi, (%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 cd 00 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// f2: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f7: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// fc: 78 16                         js      0x114 <_JIT_ENTRY+0x114>
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 108: ff d0                         callq   *%rax
// 10a: 49 ff 0c 24                   decq    (%r12)
// 10e: 0f 84 aa 01 00 00             je      0x2be <_JIT_ENTRY+0x2be>
// 114: 4d 8d 24 df                   leaq    (%r15,%rbx,8), %r12
// 118: 48 85 ed                      testq   %rbp, %rbp
// 11b: 4c 8b 34 24                   movq    (%rsp), %r14
// 11f: 0f 84 c3 01 00 00             je      0x2e8 <_JIT_ENTRY+0x2e8>
// 125: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 12a: 49 8d 1c c7                   leaq    (%r15,%rax,8), %rbx
// 12e: 49 89 2c 24                   movq    %rbp, (%r12)
// 132: 49 8b 45 10                   movq    0x10(%r13), %rax
// 136: 48 8b 00                      movq    (%rax), %rax
// 139: 84 c0                         testb   %al, %al
// 13b: 0f 84 c8 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_HandlePending
// 14b: 4c 89 ef                      movq    %r13, %rdi
// 14e: ff d0                         callq   *%rax
// 150: 85 c0                         testl   %eax, %eax
// 152: 0f 84 b1 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 158: 49 89 dc                      movq    %rbx, %r12
// 15b: e9 88 01 00 00                jmp     0x2e8 <_JIT_ENTRY+0x2e8>
// 160: 49 29 ff                      subq    %rdi, %r15
// 163: 49 83 c7 b8                   addq    $-0x48, %r15
// 167: 49 c1 ef 03                   shrq    $0x3, %r15
// 16b: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 16f: 48 8b 07                      movq    (%rdi), %rax
// 172: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000174:  R_X86_64_64  _JIT_TARGET
// 17c: 89 c9                         movl    %ecx, %ecx
// 17e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 182: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 188: e9 6c 01 00 00                jmp     0x2f9 <_JIT_ENTRY+0x2f9>
// 18d: 41 83 fd 02                   cmpl    $0x2, %r13d
// 191: 41 be 01 00 00 00             movl    $0x1, %r14d
// 197: 45 0f 43 f5                   cmovael %r13d, %r14d
// 19b: 31 db                         xorl    %ebx, %ebx
// 19d: eb 0d                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19f: 90                            nop
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 de                      cmpq    %rbx, %r14
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 4c 63 e0                      movslq  %eax, %r12
// 21d: 4f 8b 74 e7 f8                movq    -0x8(%r15,%r12,8), %r14
// 222: 4b 8d 04 24                   leaq    (%r12,%r12), %rax
// 226: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _PySet_Update
// 234: 4c 89 f6                      movq    %r14, %rsi
// 237: ff d0                         callq   *%rax
// 239: 89 c5                         movl    %eax, %ebp
// 23b: 49 8b 06                      movq    (%r14), %rax
// 23e: 48 85 c0                      testq   %rax, %rax
// 241: 7f 21                         jg      0x264 <_JIT_ENTRY+0x264>
// 243: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000245:  R_X86_64_64  .rodata.str1.1
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_NegativeRefcount
// 257: be 53 05 00 00                movl    $0x553, %esi            # imm = 0x553
// 25c: 4c 89 f2                      movq    %r14, %rdx
// 25f: ff d0                         callq   *%rax
// 261: 49 8b 06                      movq    (%r14), %rax
// 264: 4f 8d 24 e7                   leaq    (%r15,%r12,8), %r12
// 268: 49 83 c4 f8                   addq    $-0x8, %r12
// 26c: 85 c0                         testl   %eax, %eax
// 26e: 78 20                         js      0x290 <_JIT_ENTRY+0x290>
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27a: ff d0                         callq   *%rax
// 27c: 49 ff 0e                      decq    (%r14)
// 27f: 75 0f                         jne     0x290 <_JIT_ENTRY+0x290>
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  _Py_Dealloc
// 28b: 4c 89 f7                      movq    %r14, %rdi
// 28e: ff d0                         callq   *%rax
// 290: 85 ed                         testl   %ebp, %ebp
// 292: 4c 0f 48 e3                   cmovsq  %rbx, %r12
// 296: 78 48                         js      0x2e0 <_JIT_ENTRY+0x2e0>
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _JIT_CONTINUE
// 2a2: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2a6: 4c 89 e6                      movq    %r12, %rsi
// 2a9: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2ae: 48 83 c4 28                   addq    $0x28, %rsp
// 2b2: 5b                            popq    %rbx
// 2b3: 41 5c                         popq    %r12
// 2b5: 41 5d                         popq    %r13
// 2b7: 41 5e                         popq    %r14
// 2b9: 41 5f                         popq    %r15
// 2bb: 5d                            popq    %rbp
// 2bc: ff e0                         jmpq    *%rax
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _Py_Dealloc
// 2c8: 4c 89 e7                      movq    %r12, %rdi
// 2cb: ff d0                         callq   *%rax
// 2cd: 4d 8d 24 df                   leaq    (%r15,%rbx,8), %r12
// 2d1: 48 85 ed                      testq   %rbp, %rbp
// 2d4: 4c 8b 34 24                   movq    (%rsp), %r14
// 2d8: 0f 85 47 fe ff ff             jne     0x125 <_JIT_ENTRY+0x125>
// 2de: eb 08                         jmp     0x2e8 <_JIT_ENTRY+0x2e8>
// 2e0: 49 83 c4 f8                   addq    $-0x8, %r12
// 2e4: 4c 8b 34 24                   movq    (%rsp), %r14
// 2e8: 4d 29 f4                      subq    %r14, %r12
// 2eb: 49 83 c4 b8                   addq    $-0x48, %r12
// 2ef: 49 c1 ec 03                   shrq    $0x3, %r12
// 2f3: 45 89 66 40                   movl    %r12d, 0x40(%r14)
// 2f7: 31 c0                         xorl    %eax, %eax
// 2f9: 48 83 c4 28                   addq    $0x28, %rsp
// 2fd: 5b                            popq    %rbx
// 2fe: 41 5c                         popq    %r12
// 300: 41 5d                         popq    %r13
// 302: 41 5e                         popq    %r14
// 304: 41 5f                         popq    %r15
// 306: 5d                            popq    %rbp
// 307: c3                            retq
// 308: 
static const unsigned char _CALL_BUILTIN_CLASSplus_SET_UPDATE_code_body[777] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xcd, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xaa, 0x01, 0x00, 0x00, 0x4d, 0x8d, 0x24, 0xdf, 0x48, 0x85, 0xed, 0x4c, 0x8b, 0x34, 0x24, 0x0f, 0x84, 0xc3, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x1c, 0xc7, 0x49, 0x89, 0x2c, 0x24, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x89, 0xdc, 0xe9, 0x88, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x6c, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe0, 0x4f, 0x8b, 0x74, 0xe7, 0xf8, 0x4b, 0x8d, 0x04, 0x24, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x53, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x4f, 0x8d, 0x24, 0xe7, 0x49, 0x83, 0xc4, 0xf8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x0f, 0x48, 0xe3, 0x78, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x24, 0xdf, 0x48, 0x85, 0xed, 0x4c, 0x8b, 0x34, 0x24, 0x0f, 0x85, 0x47, 0xfe, 0xff, 0xff, 0xeb, 0x08, 0x49, 0x83, 0xc4, 0xf8, 0x4c, 0x8b, 0x34, 0x24, 0x4d, 0x29, 0xf4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x66, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_SET_UPDATE_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySet_Update, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_SET_UPDATE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_SET_UPDATE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_STORE_ATTR
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_STORE_ATTR.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f8 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e7 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 82: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 87: 48 89 3c 24                   movq    %rdi, (%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 cc 00 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 2c 24                   movq    (%rsp), %rbp
// f1: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// f6: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// fb: 78 16                         js      0x113 <_JIT_ENTRY+0x113>
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 107: ff d0                         callq   *%rax
// 109: 49 ff 0c 24                   decq    (%r12)
// 10d: 0f 84 f2 01 00 00             je      0x305 <_JIT_ENTRY+0x305>
// 113: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 118: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 11c: 4d 85 f6                      testq   %r14, %r14
// 11f: 0f 84 01 02 00 00             je      0x326 <_JIT_ENTRY+0x326>
// 125: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 12a: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 12e: 4c 89 30                      movq    %r14, (%rax)
// 131: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 0f 84 c9 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_HandlePending
// 14a: 48 89 df                      movq    %rbx, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 0f 84 b2 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 157: 4c 89 e0                      movq    %r12, %rax
// 15a: e9 c7 01 00 00                jmp     0x326 <_JIT_ENTRY+0x326>
// 15f: 49 29 ff                      subq    %rdi, %r15
// 162: 49 83 c7 b8                   addq    $-0x48, %r15
// 166: 49 c1 ef 03                   shrq    $0x3, %r15
// 16a: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 16e: 48 8b 07                      movq    (%rdi), %rax
// 171: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000173:  R_X86_64_64  _JIT_TARGET
// 17b: 89 c9                         movl    %ecx, %ecx
// 17d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 181: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 187: e9 aa 01 00 00                jmp     0x336 <_JIT_ENTRY+0x336>
// 18c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 190: 41 be 01 00 00 00             movl    $0x1, %r14d
// 196: 45 0f 43 f5                   cmovael %r13d, %r14d
// 19a: 31 db                         xorl    %ebx, %ebx
// 19c: eb 0e                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19e: 66 90                         nop
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 de                      cmpq    %rbx, %r14
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: 0f b7 c8                      movzwl  %ax, %ecx
// 216: f7 d0                         notl    %eax
// 218: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21d: 48 63 d8                      movslq  %eax, %rbx
// 220: 4d 8b 74 df f0                movq    -0x10(%r15,%rbx,8), %r14
// 225: 4d 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %r13
// 22a: 48 8b 45 00                   movq    (%rbp), %rax
// 22e: 48 8b 40 20                   movq    0x20(%rax), %rax
// 232: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  PyObject_SetAttr
// 241: 4c 89 ef                      movq    %r13, %rdi
// 244: 4c 89 f2                      movq    %r14, %rdx
// 247: ff d0                         callq   *%rax
// 249: 89 c5                         movl    %eax, %ebp
// 24b: 49 8b 06                      movq    (%r14), %rax
// 24e: 48 85 c0                      testq   %rax, %rax
// 251: 7f 21                         jg      0x274 <_JIT_ENTRY+0x274>
// 253: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000255:  R_X86_64_64  .rodata.str1.1
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _Py_NegativeRefcount
// 267: be c5 03 00 00                movl    $0x3c5, %esi            # imm = 0x3C5
// 26c: 4c 89 f2                      movq    %r14, %rdx
// 26f: ff d0                         callq   *%rax
// 271: 49 8b 06                      movq    (%r14), %rax
// 274: 85 c0                         testl   %eax, %eax
// 276: 78 20                         js      0x298 <_JIT_ENTRY+0x298>
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 282: ff d0                         callq   *%rax
// 284: 49 ff 0e                      decq    (%r14)
// 287: 75 0f                         jne     0x298 <_JIT_ENTRY+0x298>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _Py_Dealloc
// 293: 4c 89 f7                      movq    %r14, %rdi
// 296: ff d0                         callq   *%rax
// 298: 49 8b 45 00                   movq    (%r13), %rax
// 29c: 48 85 c0                      testq   %rax, %rax
// 29f: 7f 22                         jg      0x2c3 <_JIT_ENTRY+0x2c3>
// 2a1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a3:  R_X86_64_64  .rodata.str1.1
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_NegativeRefcount
// 2b5: be c6 03 00 00                movl    $0x3c6, %esi            # imm = 0x3C6
// 2ba: 4c 89 ea                      movq    %r13, %rdx
// 2bd: ff d0                         callq   *%rax
// 2bf: 49 8b 45 00                   movq    (%r13), %rax
// 2c3: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 2c7: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2cb: 85 c0                         testl   %eax, %eax
// 2cd: 78 21                         js      0x2f0 <_JIT_ENTRY+0x2f0>
// 2cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d9: ff d0                         callq   *%rax
// 2db: 49 ff 4d 00                   decq    (%r13)
// 2df: 75 0f                         jne     0x2f0 <_JIT_ENTRY+0x2f0>
// 2e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e3:  R_X86_64_64  _Py_Dealloc
// 2eb: 4c 89 ef                      movq    %r13, %rdi
// 2ee: ff d0                         callq   *%rax
// 2f0: 85 ed                         testl   %ebp, %ebp
// 2f2: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 2f6: 74 4d                         je      0x345 <_JIT_ENTRY+0x345>
// 2f8: 49 83 c4 f0                   addq    $-0x10, %r12
// 2fc: 4c 89 e0                      movq    %r12, %rax
// 2ff: 48 8b 2c 24                   movq    (%rsp), %rbp
// 303: eb 21                         jmp     0x326 <_JIT_ENTRY+0x326>
// 305: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000307:  R_X86_64_64  _Py_Dealloc
// 30f: 4c 89 e7                      movq    %r12, %rdi
// 312: ff d0                         callq   *%rax
// 314: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 319: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 31d: 4d 85 f6                      testq   %r14, %r14
// 320: 0f 85 ff fd ff ff             jne     0x125 <_JIT_ENTRY+0x125>
// 326: 48 29 e8                      subq    %rbp, %rax
// 329: 48 83 c0 b8                   addq    $-0x48, %rax
// 32d: 48 c1 e8 03                   shrq    $0x3, %rax
// 331: 89 45 40                      movl    %eax, 0x40(%rbp)
// 334: 31 c0                         xorl    %eax, %eax
// 336: 48 83 c4 28                   addq    $0x28, %rsp
// 33a: 5b                            popq    %rbx
// 33b: 41 5c                         popq    %r12
// 33d: 41 5d                         popq    %r13
// 33f: 41 5e                         popq    %r14
// 341: 41 5f                         popq    %r15
// 343: 5d                            popq    %rbp
// 344: c3                            retq
// 345: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000347:  R_X86_64_64  _JIT_CONTINUE
// 34f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 353: 4c 89 e6                      movq    %r12, %rsi
// 356: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 35b: 48 83 c4 28                   addq    $0x28, %rsp
// 35f: 5b                            popq    %rbx
// 360: 41 5c                         popq    %r12
// 362: 41 5d                         popq    %r13
// 364: 41 5e                         popq    %r14
// 366: 41 5f                         popq    %r15
// 368: 5d                            popq    %rbp
// 369: ff e0                         jmpq    *%rax
// 36b: 
static const unsigned char _CALL_BUILTIN_CLASSplus_STORE_ATTR_code_body[876] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xf2, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x01, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x30, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0xc7, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x74, 0xdf, 0xf0, 0x4d, 0x8b, 0x6c, 0xdf, 0xf8, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc6, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8d, 0x1c, 0xdf, 0x48, 0x83, 0xc3, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe3, 0x74, 0x4d, 0x49, 0x83, 0xc4, 0xf0, 0x4c, 0x89, 0xe0, 0x48, 0x8b, 0x2c, 0x24, 0xeb, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xf6, 0x0f, 0x85, 0xff, 0xfd, 0xff, 0xff, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_STORE_ATTR_code_holes[24] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetAttr, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x307, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x347, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_STORE_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_STORE_ATTR_data_holes[1];

// _CALL_BUILTIN_CLASSplus_STORE_ATTR_INSTANCE_VALUE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_STORE_ATTR_INSTANCE_VALUE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f6 00 00 00             je      0x15d <_JIT_ENTRY+0x15d>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e5 00 00 00             je      0x15d <_JIT_ENTRY+0x15d>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 41 0f 94 c6                   sete    %r14b
// 96: 89 da                         movl    %ebx, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 41 84 c6                      testb   %al, %r14b
// bb: 0f 84 c9 00 00 00             je      0x18a <_JIT_ENTRY+0x18a>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e3: 4c 89 e2                      movq    %r12, %rdx
// e6: ff d0                         callq   *%rax
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 85 c0                         testl   %eax, %eax
// ee: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// f3: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// f8: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 0c 24                   decq    (%r12)
// 10f: 0f 84 86 01 00 00             je      0x29b <_JIT_ENTRY+0x29b>
// 115: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 119: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 11e: 48 85 c9                      testq   %rcx, %rcx
// 121: 0f 84 95 01 00 00             je      0x2bc <_JIT_ENTRY+0x2bc>
// 127: 48 89 08                      movq    %rcx, (%rax)
// 12a: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 12e: 48 8b 00                      movq    (%rax), %rax
// 131: 84 c0                         testb   %al, %al
// 133: 0f 84 d0 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_HandlePending
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 85 c0                         testl   %eax, %eax
// 14a: 0f 84 b9 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 150: 48 8b 04 24                   movq    (%rsp), %rax
// 154: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 158: e9 5f 01 00 00                jmp     0x2bc <_JIT_ENTRY+0x2bc>
// 15d: 49 29 ff                      subq    %rdi, %r15
// 160: 49 83 c7 b8                   addq    $-0x48, %r15
// 164: 49 c1 ef 03                   shrq    $0x3, %r15
// 168: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 16c: 48 8b 07                      movq    (%rdi), %rax
// 16f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000171:  R_X86_64_64  _JIT_TARGET
// 179: 89 c9                         movl    %ecx, %ecx
// 17b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 17f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 185: e9 43 01 00 00                jmp     0x2cd <_JIT_ENTRY+0x2cd>
// 18a: 83 fb 02                      cmpl    $0x2, %ebx
// 18d: 41 be 01 00 00 00             movl    $0x1, %r14d
// 193: 44 0f 43 f3                   cmovael %ebx, %r14d
// 197: 31 db                         xorl    %ebx, %ebx
// 199: eb 11                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 de                      cmpq    %rbx, %r14
// 1a6: 0f 84 15 ff ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 63 d8                      movslq  %eax, %rbx
// 21d: 49 8b 4c df f0                movq    -0x10(%r15,%rbx,8), %rcx
// 222: 4d 8b 64 df f8                movq    -0x8(%r15,%rbx,8), %r12
// 227: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 22c: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000022e:  R_X86_64_64  _JIT_OPERAND
// 236: 0f b7 d2                      movzwl  %dx, %edx
// 239: 4c 8b 74 d0 01                movq    0x1(%rax,%rdx,8), %r14
// 23e: 48 89 4c d0 01                movq    %rcx, 0x1(%rax,%rdx,8)
// 243: 4d 85 f6                      testq   %r14, %r14
// 246: 0f 84 90 00 00 00             je      0x2dc <_JIT_ENTRY+0x2dc>
// 24c: 49 8b 06                      movq    (%r14), %rax
// 24f: 48 85 c0                      testq   %rax, %rax
// 252: 7f 21                         jg      0x275 <_JIT_ENTRY+0x275>
// 254: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000256:  R_X86_64_64  .rodata.str1.1
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  _Py_NegativeRefcount
// 268: be 16 07 00 00                movl    $0x716, %esi            # imm = 0x716
// 26d: 4c 89 f2                      movq    %r14, %rdx
// 270: ff d0                         callq   *%rax
// 272: 49 8b 06                      movq    (%r14), %rax
// 275: 85 c0                         testl   %eax, %eax
// 277: 78 7f                         js      0x2f8 <_JIT_ENTRY+0x2f8>
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 283: ff d0                         callq   *%rax
// 285: 49 ff 0e                      decq    (%r14)
// 288: 75 6e                         jne     0x2f8 <_JIT_ENTRY+0x2f8>
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _Py_Dealloc
// 294: 4c 89 f7                      movq    %r14, %rdi
// 297: ff d0                         callq   *%rax
// 299: eb 5d                         jmp     0x2f8 <_JIT_ENTRY+0x2f8>
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_Dealloc
// 2a5: 4c 89 e7                      movq    %r12, %rdi
// 2a8: ff d0                         callq   *%rax
// 2aa: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 2ae: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 2b3: 48 85 c9                      testq   %rcx, %rcx
// 2b6: 0f 85 6b fe ff ff             jne     0x127 <_JIT_ENTRY+0x127>
// 2bc: 4c 29 e8                      subq    %r13, %rax
// 2bf: 48 83 c0 b8                   addq    $-0x48, %rax
// 2c3: 48 c1 e8 03                   shrq    $0x3, %rax
// 2c7: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 2cb: 31 c0                         xorl    %eax, %eax
// 2cd: 48 83 c4 28                   addq    $0x28, %rsp
// 2d1: 5b                            popq    %rbx
// 2d2: 41 5c                         popq    %r12
// 2d4: 41 5d                         popq    %r13
// 2d6: 41 5e                         popq    %r14
// 2d8: 41 5f                         popq    %r15
// 2da: 5d                            popq    %rbp
// 2db: c3                            retq
// 2dc: 0f b6 48 ff                   movzbl  -0x1(%rax), %ecx
// 2e0: 8d 51 01                      leal    0x1(%rcx), %edx
// 2e3: 48 f7 d1                      notq    %rcx
// 2e6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002e8:  R_X86_64_64  _JIT_OPERAND
// 2f0: 40 88 74 08 ff                movb    %sil, -0x1(%rax,%rcx)
// 2f5: 88 50 ff                      movb    %dl, -0x1(%rax)
// 2f8: 49 8b 04 24                   movq    (%r12), %rax
// 2fc: 48 85 c0                      testq   %rax, %rax
// 2ff: 7f 22                         jg      0x323 <_JIT_ENTRY+0x323>
// 301: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000303:  R_X86_64_64  .rodata.str1.1
// 30b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030d:  R_X86_64_64  _Py_NegativeRefcount
// 315: be 18 07 00 00                movl    $0x718, %esi            # imm = 0x718
// 31a: 4c 89 e2                      movq    %r12, %rdx
// 31d: ff d0                         callq   *%rax
// 31f: 49 8b 04 24                   movq    (%r12), %rax
// 323: 4d 8d 34 df                   leaq    (%r15,%rbx,8), %r14
// 327: 49 83 c6 f0                   addq    $-0x10, %r14
// 32b: 85 c0                         testl   %eax, %eax
// 32d: 78 21                         js      0x350 <_JIT_ENTRY+0x350>
// 32f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000331:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 339: ff d0                         callq   *%rax
// 33b: 49 ff 0c 24                   decq    (%r12)
// 33f: 75 0f                         jne     0x350 <_JIT_ENTRY+0x350>
// 341: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000343:  R_X86_64_64  _Py_Dealloc
// 34b: 4c 89 e7                      movq    %r12, %rdi
// 34e: ff d0                         callq   *%rax
// 350: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000352:  R_X86_64_64  _JIT_CONTINUE
// 35a: 4c 89 ef                      movq    %r13, %rdi
// 35d: 4c 89 f6                      movq    %r14, %rsi
// 360: 48 89 ea                      movq    %rbp, %rdx
// 363: 48 83 c4 28                   addq    $0x28, %rsp
// 367: 5b                            popq    %rbx
// 368: 41 5c                         popq    %r12
// 36a: 41 5d                         popq    %r13
// 36c: 41 5e                         popq    %r14
// 36e: 41 5f                         popq    %r15
// 370: 5d                            popq    %rbp
// 371: ff e0                         jmpq    *%rax
// 373: 
static const unsigned char _CALL_BUILTIN_CLASSplus_STORE_ATTR_INSTANCE_VALUE_code_body[884] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf6, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe5, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x86, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x95, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb9, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0xe9, 0x5f, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x43, 0x01, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x15, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x49, 0x8b, 0x4c, 0xdf, 0xf0, 0x4d, 0x8b, 0x64, 0xdf, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x4c, 0x8b, 0x74, 0xd0, 0x01, 0x48, 0x89, 0x4c, 0xd0, 0x01, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x7f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x6e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0xeb, 0x5d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x85, 0x6b, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x0f, 0xb6, 0x48, 0xff, 0x8d, 0x51, 0x01, 0x48, 0xf7, 0xd1, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x88, 0x74, 0x08, 0xff, 0x88, 0x50, 0xff, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x34, 0xdf, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_STORE_ATTR_INSTANCE_VALUE_code_holes[25] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x303, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x331, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x343, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x352, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_STORE_ATTR_INSTANCE_VALUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_STORE_ATTR_INSTANCE_VALUE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_STORE_ATTR_SLOT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_STORE_ATTR_SLOT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f6 00 00 00             je      0x15d <_JIT_ENTRY+0x15d>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e5 00 00 00             je      0x15d <_JIT_ENTRY+0x15d>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 41 0f 94 c6                   sete    %r14b
// 96: 89 da                         movl    %ebx, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 41 84 c6                      testb   %al, %r14b
// bb: 0f 84 c9 00 00 00             je      0x18a <_JIT_ENTRY+0x18a>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e3: 4c 89 e2                      movq    %r12, %rdx
// e6: ff d0                         callq   *%rax
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 85 c0                         testl   %eax, %eax
// ee: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// f3: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// f8: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 0c 24                   decq    (%r12)
// 10f: 0f 84 f4 01 00 00             je      0x309 <_JIT_ENTRY+0x309>
// 115: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 119: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 11e: 48 85 c9                      testq   %rcx, %rcx
// 121: 0f 84 03 02 00 00             je      0x32a <_JIT_ENTRY+0x32a>
// 127: 48 89 08                      movq    %rcx, (%rax)
// 12a: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 12e: 48 8b 00                      movq    (%rax), %rax
// 131: 84 c0                         testb   %al, %al
// 133: 0f 84 d0 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_HandlePending
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 85 c0                         testl   %eax, %eax
// 14a: 0f 84 b9 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 150: 48 8b 04 24                   movq    (%rsp), %rax
// 154: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 158: e9 cd 01 00 00                jmp     0x32a <_JIT_ENTRY+0x32a>
// 15d: 49 29 ff                      subq    %rdi, %r15
// 160: 49 83 c7 b8                   addq    $-0x48, %r15
// 164: 49 c1 ef 03                   shrq    $0x3, %r15
// 168: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 16c: 48 8b 07                      movq    (%rdi), %rax
// 16f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000171:  R_X86_64_64  _JIT_TARGET
// 179: 89 c9                         movl    %ecx, %ecx
// 17b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 17f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 185: e9 b1 01 00 00                jmp     0x33b <_JIT_ENTRY+0x33b>
// 18a: 83 fb 02                      cmpl    $0x2, %ebx
// 18d: 41 be 01 00 00 00             movl    $0x1, %r14d
// 193: 44 0f 43 f3                   cmovael %ebx, %r14d
// 197: 31 db                         xorl    %ebx, %ebx
// 199: eb 11                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 de                      cmpq    %rbx, %r14
// 1a6: 0f 84 15 ff ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 63 d8                      movslq  %eax, %rbx
// 21d: 49 8b 44 df f0                movq    -0x10(%r15,%rbx,8), %rax
// 222: 4d 8b 64 df f8                movq    -0x8(%r15,%rbx,8), %r12
// 227: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000229:  R_X86_64_64  _JIT_OPERAND
// 231: 0f b7 c9                      movzwl  %cx, %ecx
// 234: 4d 8b 34 0c                   movq    (%r12,%rcx), %r14
// 238: 49 89 04 0c                   movq    %rax, (%r12,%rcx)
// 23c: 4d 85 f6                      testq   %r14, %r14
// 23f: 74 4d                         je      0x28e <_JIT_ENTRY+0x28e>
// 241: 49 8b 06                      movq    (%r14), %rax
// 244: 48 85 c0                      testq   %rax, %rax
// 247: 7f 21                         jg      0x26a <_JIT_ENTRY+0x26a>
// 249: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024b:  R_X86_64_64  .rodata.str1.1+0x39
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  _Py_NegativeRefcount
// 25d: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 262: 4c 89 f2                      movq    %r14, %rdx
// 265: ff d0                         callq   *%rax
// 267: 49 8b 06                      movq    (%r14), %rax
// 26a: 85 c0                         testl   %eax, %eax
// 26c: 78 20                         js      0x28e <_JIT_ENTRY+0x28e>
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 278: ff d0                         callq   *%rax
// 27a: 49 ff 0e                      decq    (%r14)
// 27d: 75 0f                         jne     0x28e <_JIT_ENTRY+0x28e>
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_Dealloc
// 289: 4c 89 f7                      movq    %r14, %rdi
// 28c: ff d0                         callq   *%rax
// 28e: 49 8b 04 24                   movq    (%r12), %rax
// 292: 48 85 c0                      testq   %rax, %rax
// 295: 7f 22                         jg      0x2b9 <_JIT_ENTRY+0x2b9>
// 297: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000299:  R_X86_64_64  .rodata.str1.1
// 2a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a3:  R_X86_64_64  _Py_NegativeRefcount
// 2ab: be 2a 07 00 00                movl    $0x72a, %esi            # imm = 0x72A
// 2b0: 4c 89 e2                      movq    %r12, %rdx
// 2b3: ff d0                         callq   *%rax
// 2b5: 49 8b 04 24                   movq    (%r12), %rax
// 2b9: 4d 8d 34 df                   leaq    (%r15,%rbx,8), %r14
// 2bd: 49 83 c6 f0                   addq    $-0x10, %r14
// 2c1: 85 c0                         testl   %eax, %eax
// 2c3: 78 21                         js      0x2e6 <_JIT_ENTRY+0x2e6>
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2cf: ff d0                         callq   *%rax
// 2d1: 49 ff 0c 24                   decq    (%r12)
// 2d5: 75 0f                         jne     0x2e6 <_JIT_ENTRY+0x2e6>
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  _Py_Dealloc
// 2e1: 4c 89 e7                      movq    %r12, %rdi
// 2e4: ff d0                         callq   *%rax
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _JIT_CONTINUE
// 2f0: 4c 89 ef                      movq    %r13, %rdi
// 2f3: 4c 89 f6                      movq    %r14, %rsi
// 2f6: 48 89 ea                      movq    %rbp, %rdx
// 2f9: 48 83 c4 28                   addq    $0x28, %rsp
// 2fd: 5b                            popq    %rbx
// 2fe: 41 5c                         popq    %r12
// 300: 41 5d                         popq    %r13
// 302: 41 5e                         popq    %r14
// 304: 41 5f                         popq    %r15
// 306: 5d                            popq    %rbp
// 307: ff e0                         jmpq    *%rax
// 309: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030b:  R_X86_64_64  _Py_Dealloc
// 313: 4c 89 e7                      movq    %r12, %rdi
// 316: ff d0                         callq   *%rax
// 318: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 31c: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 321: 48 85 c9                      testq   %rcx, %rcx
// 324: 0f 85 fd fd ff ff             jne     0x127 <_JIT_ENTRY+0x127>
// 32a: 4c 29 e8                      subq    %r13, %rax
// 32d: 48 83 c0 b8                   addq    $-0x48, %rax
// 331: 48 c1 e8 03                   shrq    $0x3, %rax
// 335: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 339: 31 c0                         xorl    %eax, %eax
// 33b: 48 83 c4 28                   addq    $0x28, %rsp
// 33f: 5b                            popq    %rbx
// 340: 41 5c                         popq    %r12
// 342: 41 5d                         popq    %r13
// 344: 41 5e                         popq    %r14
// 346: 41 5f                         popq    %r15
// 348: 5d                            popq    %rbp
// 349: c3                            retq
// 34a: 
static const unsigned char _CALL_BUILTIN_CLASSplus_STORE_ATTR_SLOT_code_body[843] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf6, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe5, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xf4, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x03, 0x02, 0x00, 0x00, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb9, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0xe9, 0xcd, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xb1, 0x01, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x15, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x49, 0x8b, 0x44, 0xdf, 0xf0, 0x4d, 0x8b, 0x64, 0xdf, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4d, 0x8b, 0x34, 0x0c, 0x49, 0x89, 0x04, 0x0c, 0x4d, 0x85, 0xf6, 0x74, 0x4d, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x2a, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x34, 0xdf, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x85, 0xfd, 0xfd, 0xff, 0xff, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_STORE_ATTR_SLOT_code_holes[24] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x255, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x30b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_STORE_ATTR_SLOT_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_STORE_ATTR_SLOT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_STORE_DEREF
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_STORE_DEREF.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f6 00 00 00             je      0x15d <_JIT_ENTRY+0x15d>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e5 00 00 00             je      0x15d <_JIT_ENTRY+0x15d>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 41 0f 94 c6                   sete    %r14b
// 96: 89 da                         movl    %ebx, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 41 84 c6                      testb   %al, %r14b
// bb: 0f 84 c9 00 00 00             je      0x18a <_JIT_ENTRY+0x18a>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e3: 4c 89 e2                      movq    %r12, %rdx
// e6: ff d0                         callq   *%rax
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 85 c0                         testl   %eax, %eax
// ee: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f3: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// f8: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 0c 24                   decq    (%r12)
// 10f: 0f 84 99 01 00 00             je      0x2ae <_JIT_ENTRY+0x2ae>
// 115: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 119: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 11e: 48 85 c9                      testq   %rcx, %rcx
// 121: 0f 84 a8 01 00 00             je      0x2cf <_JIT_ENTRY+0x2cf>
// 127: 48 89 08                      movq    %rcx, (%rax)
// 12a: 49 8b 45 10                   movq    0x10(%r13), %rax
// 12e: 48 8b 00                      movq    (%rax), %rax
// 131: 84 c0                         testb   %al, %al
// 133: 0f 84 d0 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_HandlePending
// 143: 4c 89 ef                      movq    %r13, %rdi
// 146: ff d0                         callq   *%rax
// 148: 85 c0                         testl   %eax, %eax
// 14a: 0f 84 b9 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 150: 48 8b 04 24                   movq    (%rsp), %rax
// 154: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 158: e9 72 01 00 00                jmp     0x2cf <_JIT_ENTRY+0x2cf>
// 15d: 49 29 ff                      subq    %rdi, %r15
// 160: 49 83 c7 b8                   addq    $-0x48, %r15
// 164: 49 c1 ef 03                   shrq    $0x3, %r15
// 168: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 16c: 48 8b 07                      movq    (%rdi), %rax
// 16f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000171:  R_X86_64_64  _JIT_TARGET
// 179: 89 c9                         movl    %ecx, %ecx
// 17b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 17f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 185: e9 55 01 00 00                jmp     0x2df <_JIT_ENTRY+0x2df>
// 18a: 83 fb 02                      cmpl    $0x2, %ebx
// 18d: 41 be 01 00 00 00             movl    $0x1, %r14d
// 193: 44 0f 43 f3                   cmovael %ebx, %r14d
// 197: 31 db                         xorl    %ebx, %ebx
// 199: eb 11                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 de                      cmpq    %rbx, %r14
// 1a6: 0f 84 15 ff ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: 0f b7 c8                      movzwl  %ax, %ecx
// 216: f7 d0                         notl    %eax
// 218: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21d: 48 98                         cltq
// 21f: 4d 8d 34 c7                   leaq    (%r15,%rax,8), %r14
// 223: 49 83 c6 f8                   addq    $-0x8, %r14
// 227: 49 8b 44 c7 f8                movq    -0x8(%r15,%rax,8), %rax
// 22c: 48 8b 4c cb 48                movq    0x48(%rbx,%rcx,8), %rcx
// 231: 4c 8b 79 10                   movq    0x10(%rcx), %r15
// 235: 48 89 41 10                   movq    %rax, 0x10(%rcx)
// 239: 4d 85 ff                      testq   %r15, %r15
// 23c: 74 4d                         je      0x28b <_JIT_ENTRY+0x28b>
// 23e: 49 8b 07                      movq    (%r15), %rax
// 241: 48 85 c0                      testq   %rax, %rax
// 244: 7f 21                         jg      0x267 <_JIT_ENTRY+0x267>
// 246: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000248:  R_X86_64_64  .rodata.str1.1+0x39
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _Py_NegativeRefcount
// 25a: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 25f: 4c 89 fa                      movq    %r15, %rdx
// 262: ff d0                         callq   *%rax
// 264: 49 8b 07                      movq    (%r15), %rax
// 267: 85 c0                         testl   %eax, %eax
// 269: 78 20                         js      0x28b <_JIT_ENTRY+0x28b>
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 275: ff d0                         callq   *%rax
// 277: 49 ff 0f                      decq    (%r15)
// 27a: 75 0f                         jne     0x28b <_JIT_ENTRY+0x28b>
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_Dealloc
// 286: 4c 89 ff                      movq    %r15, %rdi
// 289: ff d0                         callq   *%rax
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _JIT_CONTINUE
// 295: 48 89 df                      movq    %rbx, %rdi
// 298: 4c 89 f6                      movq    %r14, %rsi
// 29b: 4c 89 ea                      movq    %r13, %rdx
// 29e: 48 83 c4 28                   addq    $0x28, %rsp
// 2a2: 5b                            popq    %rbx
// 2a3: 41 5c                         popq    %r12
// 2a5: 41 5d                         popq    %r13
// 2a7: 41 5e                         popq    %r14
// 2a9: 41 5f                         popq    %r15
// 2ab: 5d                            popq    %rbp
// 2ac: ff e0                         jmpq    *%rax
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  _Py_Dealloc
// 2b8: 4c 89 e7                      movq    %r12, %rdi
// 2bb: ff d0                         callq   *%rax
// 2bd: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 2c1: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 2c6: 48 85 c9                      testq   %rcx, %rcx
// 2c9: 0f 85 58 fe ff ff             jne     0x127 <_JIT_ENTRY+0x127>
// 2cf: 48 29 d8                      subq    %rbx, %rax
// 2d2: 48 83 c0 b8                   addq    $-0x48, %rax
// 2d6: 48 c1 e8 03                   shrq    $0x3, %rax
// 2da: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2dd: 31 c0                         xorl    %eax, %eax
// 2df: 48 83 c4 28                   addq    $0x28, %rsp
// 2e3: 5b                            popq    %rbx
// 2e4: 41 5c                         popq    %r12
// 2e6: 41 5d                         popq    %r13
// 2e8: 41 5e                         popq    %r14
// 2ea: 41 5f                         popq    %r15
// 2ec: 5d                            popq    %rbp
// 2ed: c3                            retq
// 2ee: 
static const unsigned char _CALL_BUILTIN_CLASSplus_STORE_DEREF_code_body[751] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf6, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe5, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x99, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xa8, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb9, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0xe9, 0x72, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x55, 0x01, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x15, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x34, 0xc7, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x8b, 0x44, 0xc7, 0xf8, 0x48, 0x8b, 0x4c, 0xcb, 0x48, 0x4c, 0x8b, 0x79, 0x10, 0x48, 0x89, 0x41, 0x10, 0x4d, 0x85, 0xff, 0x74, 0x4d, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x85, 0x58, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_STORE_DEREF_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_STORE_DEREF_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_STORE_DEREF_data_holes[1];

// _CALL_BUILTIN_CLASSplus_STORE_FAST
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_STORE_FAST.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f6 00 00 00             je      0x15d <_JIT_ENTRY+0x15d>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e5 00 00 00             je      0x15d <_JIT_ENTRY+0x15d>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 41 0f 94 c6                   sete    %r14b
// 96: 89 da                         movl    %ebx, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 41 84 c6                      testb   %al, %r14b
// bb: 0f 84 c9 00 00 00             je      0x18a <_JIT_ENTRY+0x18a>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e3: 4c 89 e2                      movq    %r12, %rdx
// e6: ff d0                         callq   *%rax
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 85 c0                         testl   %eax, %eax
// ee: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f3: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// f8: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 0c 24                   decq    (%r12)
// 10f: 0f 84 96 01 00 00             je      0x2ab <_JIT_ENTRY+0x2ab>
// 115: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 119: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 11e: 48 85 c9                      testq   %rcx, %rcx
// 121: 0f 84 a5 01 00 00             je      0x2cc <_JIT_ENTRY+0x2cc>
// 127: 48 89 08                      movq    %rcx, (%rax)
// 12a: 49 8b 45 10                   movq    0x10(%r13), %rax
// 12e: 48 8b 00                      movq    (%rax), %rax
// 131: 84 c0                         testb   %al, %al
// 133: 0f 84 d0 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_HandlePending
// 143: 4c 89 ef                      movq    %r13, %rdi
// 146: ff d0                         callq   *%rax
// 148: 85 c0                         testl   %eax, %eax
// 14a: 0f 84 b9 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 150: 48 8b 04 24                   movq    (%rsp), %rax
// 154: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 158: e9 6f 01 00 00                jmp     0x2cc <_JIT_ENTRY+0x2cc>
// 15d: 49 29 ff                      subq    %rdi, %r15
// 160: 49 83 c7 b8                   addq    $-0x48, %r15
// 164: 49 c1 ef 03                   shrq    $0x3, %r15
// 168: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 16c: 48 8b 07                      movq    (%rdi), %rax
// 16f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000171:  R_X86_64_64  _JIT_TARGET
// 179: 89 c9                         movl    %ecx, %ecx
// 17b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 17f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 185: e9 52 01 00 00                jmp     0x2dc <_JIT_ENTRY+0x2dc>
// 18a: 83 fb 02                      cmpl    $0x2, %ebx
// 18d: 41 be 01 00 00 00             movl    $0x1, %r14d
// 193: 44 0f 43 f3                   cmovael %ebx, %r14d
// 197: 31 db                         xorl    %ebx, %ebx
// 199: eb 11                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 de                      cmpq    %rbx, %r14
// 1a6: 0f 84 15 ff ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: 0f b7 c8                      movzwl  %ax, %ecx
// 216: f7 d0                         notl    %eax
// 218: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21d: 48 98                         cltq
// 21f: 4d 8d 34 c7                   leaq    (%r15,%rax,8), %r14
// 223: 49 83 c6 f8                   addq    $-0x8, %r14
// 227: 49 8b 44 c7 f8                movq    -0x8(%r15,%rax,8), %rax
// 22c: 4c 8b 7c cb 48                movq    0x48(%rbx,%rcx,8), %r15
// 231: 48 89 44 cb 48                movq    %rax, 0x48(%rbx,%rcx,8)
// 236: 4d 85 ff                      testq   %r15, %r15
// 239: 74 4d                         je      0x288 <_JIT_ENTRY+0x288>
// 23b: 49 8b 07                      movq    (%r15), %rax
// 23e: 48 85 c0                      testq   %rax, %rax
// 241: 7f 21                         jg      0x264 <_JIT_ENTRY+0x264>
// 243: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000245:  R_X86_64_64  .rodata.str1.1+0x39
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_NegativeRefcount
// 257: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 25c: 4c 89 fa                      movq    %r15, %rdx
// 25f: ff d0                         callq   *%rax
// 261: 49 8b 07                      movq    (%r15), %rax
// 264: 85 c0                         testl   %eax, %eax
// 266: 78 20                         js      0x288 <_JIT_ENTRY+0x288>
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 272: ff d0                         callq   *%rax
// 274: 49 ff 0f                      decq    (%r15)
// 277: 75 0f                         jne     0x288 <_JIT_ENTRY+0x288>
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_Dealloc
// 283: 4c 89 ff                      movq    %r15, %rdi
// 286: ff d0                         callq   *%rax
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _JIT_CONTINUE
// 292: 48 89 df                      movq    %rbx, %rdi
// 295: 4c 89 f6                      movq    %r14, %rsi
// 298: 4c 89 ea                      movq    %r13, %rdx
// 29b: 48 83 c4 28                   addq    $0x28, %rsp
// 29f: 5b                            popq    %rbx
// 2a0: 41 5c                         popq    %r12
// 2a2: 41 5d                         popq    %r13
// 2a4: 41 5e                         popq    %r14
// 2a6: 41 5f                         popq    %r15
// 2a8: 5d                            popq    %rbp
// 2a9: ff e0                         jmpq    *%rax
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_Dealloc
// 2b5: 4c 89 e7                      movq    %r12, %rdi
// 2b8: ff d0                         callq   *%rax
// 2ba: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 2be: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 2c3: 48 85 c9                      testq   %rcx, %rcx
// 2c6: 0f 85 5b fe ff ff             jne     0x127 <_JIT_ENTRY+0x127>
// 2cc: 48 29 d8                      subq    %rbx, %rax
// 2cf: 48 83 c0 b8                   addq    $-0x48, %rax
// 2d3: 48 c1 e8 03                   shrq    $0x3, %rax
// 2d7: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2da: 31 c0                         xorl    %eax, %eax
// 2dc: 48 83 c4 28                   addq    $0x28, %rsp
// 2e0: 5b                            popq    %rbx
// 2e1: 41 5c                         popq    %r12
// 2e3: 41 5d                         popq    %r13
// 2e5: 41 5e                         popq    %r14
// 2e7: 41 5f                         popq    %r15
// 2e9: 5d                            popq    %rbp
// 2ea: c3                            retq
// 2eb: 
static const unsigned char _CALL_BUILTIN_CLASSplus_STORE_FAST_code_body[748] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf6, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe5, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x96, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xa5, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb9, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0xe9, 0x6f, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x52, 0x01, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x15, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x34, 0xc7, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x8b, 0x44, 0xc7, 0xf8, 0x4c, 0x8b, 0x7c, 0xcb, 0x48, 0x48, 0x89, 0x44, 0xcb, 0x48, 0x4d, 0x85, 0xff, 0x74, 0x4d, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x85, 0x5b, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_STORE_FAST_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_STORE_FAST_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_STORE_FAST_data_holes[1];

// _CALL_BUILTIN_CLASSplus_STORE_GLOBAL
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_STORE_GLOBAL.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f8 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e7 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 82: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 87: 48 89 3c 24                   movq    %rdi, (%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 cc 00 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 4c 8b 2c 24                   movq    (%rsp), %r13
// f1: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// f6: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// fb: 78 16                         js      0x113 <_JIT_ENTRY+0x113>
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 107: ff d0                         callq   *%rax
// 109: 49 ff 0c 24                   decq    (%r12)
// 10d: 0f 84 9e 01 00 00             je      0x2b1 <_JIT_ENTRY+0x2b1>
// 113: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 118: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 11c: 4d 85 f6                      testq   %r14, %r14
// 11f: 0f 84 ad 01 00 00             je      0x2d2 <_JIT_ENTRY+0x2d2>
// 125: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 12a: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 12e: 4c 89 30                      movq    %r14, (%rax)
// 131: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 0f 84 c9 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_HandlePending
// 14a: 48 89 df                      movq    %rbx, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 0f 84 b2 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 157: 4c 89 e0                      movq    %r12, %rax
// 15a: e9 73 01 00 00                jmp     0x2d2 <_JIT_ENTRY+0x2d2>
// 15f: 49 29 ff                      subq    %rdi, %r15
// 162: 49 83 c7 b8                   addq    $-0x48, %r15
// 166: 49 c1 ef 03                   shrq    $0x3, %r15
// 16a: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 16e: 48 8b 07                      movq    (%rdi), %rax
// 171: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000173:  R_X86_64_64  _JIT_TARGET
// 17b: 89 c9                         movl    %ecx, %ecx
// 17d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 181: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 187: e9 57 01 00 00                jmp     0x2e3 <_JIT_ENTRY+0x2e3>
// 18c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 190: 41 be 01 00 00 00             movl    $0x1, %r14d
// 196: 45 0f 43 f5                   cmovael %r13d, %r14d
// 19a: 31 db                         xorl    %ebx, %ebx
// 19c: eb 0e                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19e: 66 90                         nop
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 de                      cmpq    %rbx, %r14
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: 0f b7 c8                      movzwl  %ax, %ecx
// 216: f7 d0                         notl    %eax
// 218: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21d: 48 63 d8                      movslq  %eax, %rbx
// 220: 4d 8b 74 df f8                movq    -0x8(%r15,%rbx,8), %r14
// 225: 49 8b 45 00                   movq    (%r13), %rax
// 229: 49 8b 7d 18                   movq    0x18(%r13), %rdi
// 22d: 48 8b 40 20                   movq    0x20(%rax), %rax
// 231: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  PyDict_SetItem
// 240: 4c 89 f2                      movq    %r14, %rdx
// 243: ff d0                         callq   *%rax
// 245: 89 c5                         movl    %eax, %ebp
// 247: 49 8b 06                      movq    (%r14), %rax
// 24a: 48 85 c0                      testq   %rax, %rax
// 24d: 7f 21                         jg      0x270 <_JIT_ENTRY+0x270>
// 24f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000251:  R_X86_64_64  .rodata.str1.1
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _Py_NegativeRefcount
// 263: be de 03 00 00                movl    $0x3de, %esi            # imm = 0x3DE
// 268: 4c 89 f2                      movq    %r14, %rdx
// 26b: ff d0                         callq   *%rax
// 26d: 49 8b 06                      movq    (%r14), %rax
// 270: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 274: 48 83 c3 f8                   addq    $-0x8, %rbx
// 278: 85 c0                         testl   %eax, %eax
// 27a: 78 20                         js      0x29c <_JIT_ENTRY+0x29c>
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 286: ff d0                         callq   *%rax
// 288: 49 ff 0e                      decq    (%r14)
// 28b: 75 0f                         jne     0x29c <_JIT_ENTRY+0x29c>
// 28d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028f:  R_X86_64_64  _Py_Dealloc
// 297: 4c 89 f7                      movq    %r14, %rdi
// 29a: ff d0                         callq   *%rax
// 29c: 85 ed                         testl   %ebp, %ebp
// 29e: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 2a2: 74 4e                         je      0x2f2 <_JIT_ENTRY+0x2f2>
// 2a4: 49 83 c4 f8                   addq    $-0x8, %r12
// 2a8: 4c 89 e0                      movq    %r12, %rax
// 2ab: 4c 8b 2c 24                   movq    (%rsp), %r13
// 2af: eb 21                         jmp     0x2d2 <_JIT_ENTRY+0x2d2>
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _Py_Dealloc
// 2bb: 4c 89 e7                      movq    %r12, %rdi
// 2be: ff d0                         callq   *%rax
// 2c0: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 2c5: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 2c9: 4d 85 f6                      testq   %r14, %r14
// 2cc: 0f 85 53 fe ff ff             jne     0x125 <_JIT_ENTRY+0x125>
// 2d2: 4c 29 e8                      subq    %r13, %rax
// 2d5: 48 83 c0 b8                   addq    $-0x48, %rax
// 2d9: 48 c1 e8 03                   shrq    $0x3, %rax
// 2dd: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 2e1: 31 c0                         xorl    %eax, %eax
// 2e3: 48 83 c4 28                   addq    $0x28, %rsp
// 2e7: 5b                            popq    %rbx
// 2e8: 41 5c                         popq    %r12
// 2ea: 41 5d                         popq    %r13
// 2ec: 41 5e                         popq    %r14
// 2ee: 41 5f                         popq    %r15
// 2f0: 5d                            popq    %rbp
// 2f1: c3                            retq
// 2f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f4:  R_X86_64_64  _JIT_CONTINUE
// 2fc: 48 8b 3c 24                   movq    (%rsp), %rdi
// 300: 4c 89 e6                      movq    %r12, %rsi
// 303: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 308: 48 83 c4 28                   addq    $0x28, %rsp
// 30c: 5b                            popq    %rbx
// 30d: 41 5c                         popq    %r12
// 30f: 41 5d                         popq    %r13
// 311: 41 5e                         popq    %r14
// 313: 41 5f                         popq    %r15
// 315: 5d                            popq    %rbp
// 316: ff e0                         jmpq    *%rax
// 318: 
static const unsigned char _CALL_BUILTIN_CLASSplus_STORE_GLOBAL_code_body[793] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x2c, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x9e, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0xad, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x30, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x73, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x57, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x74, 0xdf, 0xf8, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8b, 0x7d, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xde, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x49, 0x8d, 0x1c, 0xdf, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe3, 0x74, 0x4e, 0x49, 0x83, 0xc4, 0xf8, 0x4c, 0x89, 0xe0, 0x4c, 0x8b, 0x2c, 0x24, 0xeb, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xf6, 0x0f, 0x85, 0x53, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_STORE_GLOBAL_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_STORE_GLOBAL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_STORE_GLOBAL_data_holes[1];

// _CALL_BUILTIN_CLASSplus_STORE_NAME
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_STORE_NAME.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 01 01 00 00             je      0x168 <_JIT_ENTRY+0x168>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 f0 00 00 00             je      0x168 <_JIT_ENTRY+0x168>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 d5 00 00 00             je      0x195 <_JIT_ENTRY+0x195>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f2: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// f7: 78 21                         js      0x11a <_JIT_ENTRY+0x11a>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 0c 24                   decq    (%r12)
// 109: 75 0f                         jne     0x11a <_JIT_ENTRY+0x11a>
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_Dealloc
// 115: 4c 89 e7                      movq    %r12, %rdi
// 118: ff d0                         callq   *%rax
// 11a: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 11f: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 123: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 128: 48 85 c0                      testq   %rax, %rax
// 12b: 0f 84 24 02 00 00             je      0x355 <_JIT_ENTRY+0x355>
// 131: 49 89 04 24                   movq    %rax, (%r12)
// 135: 49 8b 46 10                   movq    0x10(%r14), %rax
// 139: 48 8b 00                      movq    (%rax), %rax
// 13c: 84 c0                         testb   %al, %al
// 13e: 0f 84 d5 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_HandlePending
// 14e: 4c 89 f7                      movq    %r14, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 84 be 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 15b: 48 8b 04 24                   movq    (%rsp), %rax
// 15f: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 163: e9 ed 01 00 00                jmp     0x355 <_JIT_ENTRY+0x355>
// 168: 49 29 ff                      subq    %rdi, %r15
// 16b: 49 83 c7 b8                   addq    $-0x48, %r15
// 16f: 49 c1 ef 03                   shrq    $0x3, %r15
// 173: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 177: 48 8b 07                      movq    (%rdi), %rax
// 17a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017c:  R_X86_64_64  _JIT_TARGET
// 184: 89 c9                         movl    %ecx, %ecx
// 186: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 18a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 190: e9 d1 01 00 00                jmp     0x366 <_JIT_ENTRY+0x366>
// 195: 41 83 fd 02                   cmpl    $0x2, %r13d
// 199: 41 be 01 00 00 00             movl    $0x1, %r14d
// 19f: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1a3: 31 db                         xorl    %ebx, %ebx
// 1a5: eb 15                         jmp     0x1bc <_JIT_ENTRY+0x1bc>
// 1a7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1b0: 48 ff c3                      incq    %rbx
// 1b3: 49 39 de                      cmpq    %rbx, %r14
// 1b6: 0f 84 04 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1bc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1c1: 49 8b 45 00                   movq    (%r13), %rax
// 1c5: 48 85 c0                      testq   %rax, %rax
// 1c8: 7e 06                         jle     0x1d0 <_JIT_ENTRY+0x1d0>
// 1ca: 85 c0                         testl   %eax, %eax
// 1cc: 78 e2                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1ce: eb 26                         jmp     0x1f6 <_JIT_ENTRY+0x1f6>
// 1d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1
// 1da: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1df: 4c 89 ea                      movq    %r13, %rdx
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_NegativeRefcount
// 1ec: ff d0                         callq   *%rax
// 1ee: 49 8b 45 00                   movq    (%r13), %rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 78 ba                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 200: ff d0                         callq   *%rax
// 202: 49 ff 4d 00                   decq    (%r13)
// 206: 75 a8                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 208: 4c 89 ef                      movq    %r13, %rdi
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_Dealloc
// 215: ff d0                         callq   *%rax
// 217: eb 97                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_OPARG
// 223: 0f b7 c8                      movzwl  %ax, %ecx
// 226: f7 d0                         notl    %eax
// 228: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 22d: 48 98                         cltq
// 22f: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 233: 49 83 c4 f8                   addq    $-0x8, %r12
// 237: 4d 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %r15
// 23c: 48 8b 03                      movq    (%rbx), %rax
// 23f: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 243: 48 8b 40 20                   movq    0x20(%rax), %rax
// 247: 48 8b 4c c8 18                movq    0x18(%rax,%rcx,8), %rcx
// 24c: 48 85 ff                      testq   %rdi, %rdi
// 24f: 74 23                         je      0x274 <_JIT_ENTRY+0x274>
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  PyDict_Type
// 25b: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 25f: 0f 84 8b 00 00 00             je      0x2f0 <_JIT_ENTRY+0x2f0>
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  PyObject_SetItem
// 26f: e9 86 00 00 00                jmp     0x2fa <_JIT_ENTRY+0x2fa>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  PyExc_SystemError
// 27e: 48 8b 30                      movq    (%rax), %rsi
// 281: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000283:  R_X86_64_64  .rodata.str1.1+0x39
// 28b: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000028d:  R_X86_64_64  _PyErr_Format
// 295: 4c 89 f7                      movq    %r14, %rdi
// 298: 31 c0                         xorl    %eax, %eax
// 29a: 41 ff d0                      callq   *%r8
// 29d: 49 8b 07                      movq    (%r15), %rax
// 2a0: 48 85 c0                      testq   %rax, %rax
// 2a3: 7f 21                         jg      0x2c6 <_JIT_ENTRY+0x2c6>
// 2a5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a7:  R_X86_64_64  .rodata.str1.1
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _Py_NegativeRefcount
// 2b9: be 4d 03 00 00                movl    $0x34d, %esi            # imm = 0x34D
// 2be: 4c 89 fa                      movq    %r15, %rdx
// 2c1: ff d0                         callq   *%rax
// 2c3: 49 8b 07                      movq    (%r15), %rax
// 2c6: 85 c0                         testl   %eax, %eax
// 2c8: 0f 88 87 00 00 00             js      0x355 <_JIT_ENTRY+0x355>
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d8: ff d0                         callq   *%rax
// 2da: 49 ff 0f                      decq    (%r15)
// 2dd: 75 76                         jne     0x355 <_JIT_ENTRY+0x355>
// 2df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e1:  R_X86_64_64  _Py_Dealloc
// 2e9: 4c 89 ff                      movq    %r15, %rdi
// 2ec: ff d0                         callq   *%rax
// 2ee: eb 65                         jmp     0x355 <_JIT_ENTRY+0x355>
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  PyDict_SetItem
// 2fa: 48 89 ce                      movq    %rcx, %rsi
// 2fd: 4c 89 fa                      movq    %r15, %rdx
// 300: ff d0                         callq   *%rax
// 302: 89 c5                         movl    %eax, %ebp
// 304: 49 8b 07                      movq    (%r15), %rax
// 307: 48 85 c0                      testq   %rax, %rax
// 30a: 7f 21                         jg      0x32d <_JIT_ENTRY+0x32d>
// 30c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000030e:  R_X86_64_64  .rodata.str1.1
// 316: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000318:  R_X86_64_64  _Py_NegativeRefcount
// 320: be 54 03 00 00                movl    $0x354, %esi            # imm = 0x354
// 325: 4c 89 fa                      movq    %r15, %rdx
// 328: ff d0                         callq   *%rax
// 32a: 49 8b 07                      movq    (%r15), %rax
// 32d: 85 c0                         testl   %eax, %eax
// 32f: 78 20                         js      0x351 <_JIT_ENTRY+0x351>
// 331: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000333:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 33b: ff d0                         callq   *%rax
// 33d: 49 ff 0f                      decq    (%r15)
// 340: 75 0f                         jne     0x351 <_JIT_ENTRY+0x351>
// 342: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000344:  R_X86_64_64  _Py_Dealloc
// 34c: 4c 89 ff                      movq    %r15, %rdi
// 34f: ff d0                         callq   *%rax
// 351: 85 ed                         testl   %ebp, %ebp
// 353: 74 20                         je      0x375 <_JIT_ENTRY+0x375>
// 355: 49 29 dc                      subq    %rbx, %r12
// 358: 49 83 c4 b8                   addq    $-0x48, %r12
// 35c: 49 c1 ec 03                   shrq    $0x3, %r12
// 360: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 364: 31 c0                         xorl    %eax, %eax
// 366: 48 83 c4 28                   addq    $0x28, %rsp
// 36a: 5b                            popq    %rbx
// 36b: 41 5c                         popq    %r12
// 36d: 41 5d                         popq    %r13
// 36f: 41 5e                         popq    %r14
// 371: 41 5f                         popq    %r15
// 373: 5d                            popq    %rbp
// 374: c3                            retq
// 375: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000377:  R_X86_64_64  _JIT_CONTINUE
// 37f: 48 89 df                      movq    %rbx, %rdi
// 382: 4c 89 e6                      movq    %r12, %rsi
// 385: 4c 89 f2                      movq    %r14, %rdx
// 388: 48 83 c4 28                   addq    $0x28, %rsp
// 38c: 5b                            popq    %rbx
// 38d: 41 5c                         popq    %r12
// 38f: 41 5d                         popq    %r13
// 391: 41 5e                         popq    %r14
// 393: 41 5f                         popq    %r15
// 395: 5d                            popq    %rbp
// 396: ff e0                         jmpq    *%rax
// 398: 
static const unsigned char _CALL_BUILTIN_CLASSplus_STORE_NAME_code_body[921] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x01, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xf0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xd5, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xc7, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x24, 0x02, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xbe, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x24, 0xc7, 0xe9, 0xed, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xd1, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x04, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x4d, 0x8b, 0x7c, 0xc7, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x4c, 0xc8, 0x18, 0x48, 0x85, 0xff, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x0f, 0x84, 0x8b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4d, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0x87, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x76, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x65, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xce, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x74, 0x20, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_STORE_NAME_code_holes[29] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x30e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x318, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x333, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x344, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x377, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when storing %R\x00'
// 59: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_STORE_NAME_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_STORE_NAME_data_holes[1];

// _CALL_BUILTIN_CLASSplus_STORE_SLICE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_STORE_SLICE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f9 00 00 00             je      0x160 <_JIT_ENTRY+0x160>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e8 00 00 00             je      0x160 <_JIT_ENTRY+0x160>
// 78: 4c 89 0c 24                   movq    %r9, (%rsp)
// 7c: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 81: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 86: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 41 0f 94 c6                   sete    %r14b
// 96: 89 da                         movl    %ebx, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 41 84 c6                      testb   %al, %r14b
// bb: 0f 84 cc 00 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e3: 4c 89 e2                      movq    %r12, %rdx
// e6: ff d0                         callq   *%rax
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 85 c0                         testl   %eax, %eax
// ee: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// f3: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// f8: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 0c 24                   decq    (%r12)
// 10f: 0f 84 87 02 00 00             je      0x39c <_JIT_ENTRY+0x39c>
// 115: 48 8b 04 24                   movq    (%rsp), %rax
// 119: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 11d: 4d 85 ed                      testq   %r13, %r13
// 120: 0f 84 96 02 00 00             je      0x3bc <_JIT_ENTRY+0x3bc>
// 126: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 12b: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 12f: 4c 89 28                      movq    %r13, (%rax)
// 132: 49 8b 46 10                   movq    0x10(%r14), %rax
// 136: 48 8b 00                      movq    (%rax), %rax
// 139: 84 c0                         testb   %al, %al
// 13b: 0f 84 c8 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_HandlePending
// 14b: 4c 89 f7                      movq    %r14, %rdi
// 14e: ff d0                         callq   *%rax
// 150: 85 c0                         testl   %eax, %eax
// 152: 0f 84 b1 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 158: 4c 89 e0                      movq    %r12, %rax
// 15b: e9 5c 02 00 00                jmp     0x3bc <_JIT_ENTRY+0x3bc>
// 160: 49 29 ff                      subq    %rdi, %r15
// 163: 49 83 c7 b8                   addq    $-0x48, %r15
// 167: 49 c1 ef 03                   shrq    $0x3, %r15
// 16b: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 16f: 48 8b 07                      movq    (%rdi), %rax
// 172: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000174:  R_X86_64_64  _JIT_TARGET
// 17c: 89 c9                         movl    %ecx, %ecx
// 17e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 182: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 188: e9 3f 02 00 00                jmp     0x3cc <_JIT_ENTRY+0x3cc>
// 18d: 83 fb 02                      cmpl    $0x2, %ebx
// 190: 41 be 01 00 00 00             movl    $0x1, %r14d
// 196: 44 0f 43 f3                   cmovael %ebx, %r14d
// 19a: 31 db                         xorl    %ebx, %ebx
// 19c: eb 0e                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19e: 66 90                         nop
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 de                      cmpq    %rbx, %r14
// 1a6: 0f 84 15 ff ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 63 d8                      movslq  %eax, %rbx
// 21d: 49 8b 74 df f8                movq    -0x8(%r15,%rbx,8), %rsi
// 222: 49 8b 7c df f0                movq    -0x10(%r15,%rbx,8), %rdi
// 227: 49 8b 6c df e0                movq    -0x20(%r15,%rbx,8), %rbp
// 22c: 4d 8b 6c df e8                movq    -0x18(%r15,%rbx,8), %r13
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 23b: ff d0                         callq   *%rax
// 23d: 48 85 c0                      testq   %rax, %rax
// 240: 0f 84 95 01 00 00             je      0x3db <_JIT_ENTRY+0x3db>
// 246: 49 89 c6                      movq    %rax, %r14
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  PyObject_SetItem
// 253: 4c 89 ef                      movq    %r13, %rdi
// 256: 4c 89 f6                      movq    %r14, %rsi
// 259: 48 89 ea                      movq    %rbp, %rdx
// 25c: ff d0                         callq   *%rax
// 25e: 89 04 24                      movl    %eax, (%rsp)
// 261: 49 8b 06                      movq    (%r14), %rax
// 264: 48 85 c0                      testq   %rax, %rax
// 267: 7f 21                         jg      0x28a <_JIT_ENTRY+0x28a>
// 269: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026b:  R_X86_64_64  .rodata.str1.1
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_NegativeRefcount
// 27d: be b2 01 00 00                movl    $0x1b2, %esi            # imm = 0x1B2
// 282: 4c 89 f2                      movq    %r14, %rdx
// 285: ff d0                         callq   *%rax
// 287: 49 8b 06                      movq    (%r14), %rax
// 28a: 85 c0                         testl   %eax, %eax
// 28c: 78 20                         js      0x2ae <_JIT_ENTRY+0x2ae>
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 298: ff d0                         callq   *%rax
// 29a: 49 ff 0e                      decq    (%r14)
// 29d: 75 0f                         jne     0x2ae <_JIT_ENTRY+0x2ae>
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  _Py_Dealloc
// 2a9: 4c 89 f7                      movq    %r14, %rdi
// 2ac: ff d0                         callq   *%rax
// 2ae: 83 3c 24 00                   cmpl    $0x0, (%rsp)
// 2b2: 41 0f 94 c6                   sete    %r14b
// 2b6: 48 8b 45 00                   movq    (%rbp), %rax
// 2ba: 48 85 c0                      testq   %rax, %rax
// 2bd: 7f 22                         jg      0x2e1 <_JIT_ENTRY+0x2e1>
// 2bf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c1:  R_X86_64_64  .rodata.str1.1
// 2c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cb:  R_X86_64_64  _Py_NegativeRefcount
// 2d3: be b4 01 00 00                movl    $0x1b4, %esi            # imm = 0x1B4
// 2d8: 48 89 ea                      movq    %rbp, %rdx
// 2db: ff d0                         callq   *%rax
// 2dd: 48 8b 45 00                   movq    (%rbp), %rax
// 2e1: 85 c0                         testl   %eax, %eax
// 2e3: 78 21                         js      0x306 <_JIT_ENTRY+0x306>
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ef: ff d0                         callq   *%rax
// 2f1: 48 ff 4d 00                   decq    (%rbp)
// 2f5: 75 0f                         jne     0x306 <_JIT_ENTRY+0x306>
// 2f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f9:  R_X86_64_64  _Py_Dealloc
// 301: 48 89 ef                      movq    %rbp, %rdi
// 304: ff d0                         callq   *%rax
// 306: 49 8b 45 00                   movq    (%r13), %rax
// 30a: 48 85 c0                      testq   %rax, %rax
// 30d: 7f 22                         jg      0x331 <_JIT_ENTRY+0x331>
// 30f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000311:  R_X86_64_64  .rodata.str1.1
// 319: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031b:  R_X86_64_64  _Py_NegativeRefcount
// 323: be b5 01 00 00                movl    $0x1b5, %esi            # imm = 0x1B5
// 328: 4c 89 ea                      movq    %r13, %rdx
// 32b: ff d0                         callq   *%rax
// 32d: 49 8b 45 00                   movq    (%r13), %rax
// 331: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 335: 48 83 c3 e0                   addq    $-0x20, %rbx
// 339: 85 c0                         testl   %eax, %eax
// 33b: 78 21                         js      0x35e <_JIT_ENTRY+0x35e>
// 33d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 347: ff d0                         callq   *%rax
// 349: 49 ff 4d 00                   decq    (%r13)
// 34d: 75 0f                         jne     0x35e <_JIT_ENTRY+0x35e>
// 34f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000351:  R_X86_64_64  _Py_Dealloc
// 359: 4c 89 ef                      movq    %r13, %rdi
// 35c: ff d0                         callq   *%rax
// 35e: 45 84 f6                      testb   %r14b, %r14b
// 361: 4c 0f 45 e3                   cmovneq %rbx, %r12
// 365: 74 27                         je      0x38e <_JIT_ENTRY+0x38e>
// 367: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000369:  R_X86_64_64  _JIT_CONTINUE
// 371: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 376: 4c 89 e6                      movq    %r12, %rsi
// 379: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 37e: 48 83 c4 28                   addq    $0x28, %rsp
// 382: 5b                            popq    %rbx
// 383: 41 5c                         popq    %r12
// 385: 41 5d                         popq    %r13
// 387: 41 5e                         popq    %r14
// 389: 41 5f                         popq    %r15
// 38b: 5d                            popq    %rbp
// 38c: ff e0                         jmpq    *%rax
// 38e: 49 83 c4 e0                   addq    $-0x20, %r12
// 392: 4c 89 e0                      movq    %r12, %rax
// 395: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 39a: eb 20                         jmp     0x3bc <_JIT_ENTRY+0x3bc>
// 39c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039e:  R_X86_64_64  _Py_Dealloc
// 3a6: 4c 89 e7                      movq    %r12, %rdi
// 3a9: ff d0                         callq   *%rax
// 3ab: 48 8b 04 24                   movq    (%rsp), %rax
// 3af: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 3b3: 4d 85 ed                      testq   %r13, %r13
// 3b6: 0f 85 6a fd ff ff             jne     0x126 <_JIT_ENTRY+0x126>
// 3bc: 48 29 d8                      subq    %rbx, %rax
// 3bf: 48 83 c0 b8                   addq    $-0x48, %rax
// 3c3: 48 c1 e8 03                   shrq    $0x3, %rax
// 3c7: 89 43 40                      movl    %eax, 0x40(%rbx)
// 3ca: 31 c0                         xorl    %eax, %eax
// 3cc: 48 83 c4 28                   addq    $0x28, %rsp
// 3d0: 5b                            popq    %rbx
// 3d1: 41 5c                         popq    %r12
// 3d3: 41 5d                         popq    %r13
// 3d5: 41 5e                         popq    %r14
// 3d7: 41 5f                         popq    %r15
// 3d9: 5d                            popq    %rbp
// 3da: c3                            retq
// 3db: 45 31 f6                      xorl    %r14d, %r14d
// 3de: 48 8b 45 00                   movq    (%rbp), %rax
// 3e2: 48 85 c0                      testq   %rax, %rax
// 3e5: 0f 8f f6 fe ff ff             jg      0x2e1 <_JIT_ENTRY+0x2e1>
// 3eb: e9 cf fe ff ff                jmp     0x2bf <_JIT_ENTRY+0x2bf>
// 3f0: 
static const unsigned char _CALL_BUILTIN_CLASSplus_STORE_SLICE_code_body[1009] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x0c, 0x24, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x87, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x96, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x5c, 0x02, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x3f, 0x02, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x15, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x49, 0x8b, 0x74, 0xdf, 0xf8, 0x49, 0x8b, 0x7c, 0xdf, 0xf0, 0x49, 0x8b, 0x6c, 0xdf, 0xe0, 0x4d, 0x8b, 0x6c, 0xdf, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x95, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb2, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x83, 0x3c, 0x24, 0x00, 0x41, 0x0f, 0x94, 0xc6, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb4, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb5, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8d, 0x1c, 0xdf, 0x48, 0x83, 0xc3, 0xe0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x45, 0x84, 0xf6, 0x4c, 0x0f, 0x45, 0xe3, 0x74, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc4, 0xe0, 0x4c, 0x89, 0xe0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0xeb, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x85, 0x6a, 0xfd, 0xff, 0xff, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x45, 0x31, 0xf6, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xf6, 0xfe, 0xff, 0xff, 0xe9, 0xcf, 0xfe, 0xff, 0xff};
static const Hole _CALL_BUILTIN_CLASSplus_STORE_SLICE_code_holes[29] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x311, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x33f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x351, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x369, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x39e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_STORE_SLICE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_STORE_SLICE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_STORE_SUBSCR
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_STORE_SUBSCR.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f8 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e7 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 78: 4c 89 0c 24                   movq    %r9, (%rsp)
// 7c: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 81: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 86: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 cc 00 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// f2: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// f7: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// fc: 78 16                         js      0x114 <_JIT_ENTRY+0x114>
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 108: ff d0                         callq   *%rax
// 10a: 49 ff 0c 24                   decq    (%r12)
// 10e: 0f 84 42 02 00 00             je      0x356 <_JIT_ENTRY+0x356>
// 114: 48 8b 04 24                   movq    (%rsp), %rax
// 118: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 11c: 4d 85 ed                      testq   %r13, %r13
// 11f: 0f 84 51 02 00 00             je      0x376 <_JIT_ENTRY+0x376>
// 125: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 12a: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 12e: 4c 89 28                      movq    %r13, (%rax)
// 131: 49 8b 46 10                   movq    0x10(%r14), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 0f 84 c9 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_HandlePending
// 14a: 4c 89 f7                      movq    %r14, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 0f 84 b2 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 157: 4c 89 e0                      movq    %r12, %rax
// 15a: e9 17 02 00 00                jmp     0x376 <_JIT_ENTRY+0x376>
// 15f: 49 29 ff                      subq    %rdi, %r15
// 162: 49 83 c7 b8                   addq    $-0x48, %r15
// 166: 49 c1 ef 03                   shrq    $0x3, %r15
// 16a: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 16e: 48 8b 07                      movq    (%rdi), %rax
// 171: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000173:  R_X86_64_64  _JIT_TARGET
// 17b: 89 c9                         movl    %ecx, %ecx
// 17d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 181: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 187: e9 fa 01 00 00                jmp     0x386 <_JIT_ENTRY+0x386>
// 18c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 190: 41 be 01 00 00 00             movl    $0x1, %r14d
// 196: 45 0f 43 f5                   cmovael %r13d, %r14d
// 19a: 31 db                         xorl    %ebx, %ebx
// 19c: eb 0e                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19e: 66 90                         nop
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 de                      cmpq    %rbx, %r14
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 63 d8                      movslq  %eax, %rbx
// 21d: 4d 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %r13
// 222: 4d 8b 74 df e8                movq    -0x18(%r15,%rbx,8), %r14
// 227: 49 8b 6c df f0                movq    -0x10(%r15,%rbx,8), %rbp
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  PyObject_SetItem
// 236: 48 89 ef                      movq    %rbp, %rdi
// 239: 4c 89 ee                      movq    %r13, %rsi
// 23c: 4c 89 f2                      movq    %r14, %rdx
// 23f: ff d0                         callq   *%rax
// 241: 89 04 24                      movl    %eax, (%rsp)
// 244: 49 8b 06                      movq    (%r14), %rax
// 247: 48 85 c0                      testq   %rax, %rax
// 24a: 7f 21                         jg      0x26d <_JIT_ENTRY+0x26d>
// 24c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024e:  R_X86_64_64  .rodata.str1.1
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _Py_NegativeRefcount
// 260: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 265: 4c 89 f2                      movq    %r14, %rdx
// 268: ff d0                         callq   *%rax
// 26a: 49 8b 06                      movq    (%r14), %rax
// 26d: 85 c0                         testl   %eax, %eax
// 26f: 78 20                         js      0x291 <_JIT_ENTRY+0x291>
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27b: ff d0                         callq   *%rax
// 27d: 49 ff 0e                      decq    (%r14)
// 280: 75 0f                         jne     0x291 <_JIT_ENTRY+0x291>
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_Dealloc
// 28c: 4c 89 f7                      movq    %r14, %rdi
// 28f: ff d0                         callq   *%rax
// 291: 48 8b 45 00                   movq    (%rbp), %rax
// 295: 48 85 c0                      testq   %rax, %rax
// 298: 7f 22                         jg      0x2bc <_JIT_ENTRY+0x2bc>
// 29a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029c:  R_X86_64_64  .rodata.str1.1
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _Py_NegativeRefcount
// 2ae: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// 2b3: 48 89 ea                      movq    %rbp, %rdx
// 2b6: ff d0                         callq   *%rax
// 2b8: 48 8b 45 00                   movq    (%rbp), %rax
// 2bc: 85 c0                         testl   %eax, %eax
// 2be: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 2c3: 78 21                         js      0x2e6 <_JIT_ENTRY+0x2e6>
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2cf: ff d0                         callq   *%rax
// 2d1: 48 ff 4d 00                   decq    (%rbp)
// 2d5: 75 0f                         jne     0x2e6 <_JIT_ENTRY+0x2e6>
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  _Py_Dealloc
// 2e1: 48 89 ef                      movq    %rbp, %rdi
// 2e4: ff d0                         callq   *%rax
// 2e6: 49 8b 45 00                   movq    (%r13), %rax
// 2ea: 48 85 c0                      testq   %rax, %rax
// 2ed: 7f 22                         jg      0x311 <_JIT_ENTRY+0x311>
// 2ef: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f1:  R_X86_64_64  .rodata.str1.1
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _Py_NegativeRefcount
// 303: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 308: 4c 89 ea                      movq    %r13, %rdx
// 30b: ff d0                         callq   *%rax
// 30d: 49 8b 45 00                   movq    (%r13), %rax
// 311: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 315: 48 83 c3 e8                   addq    $-0x18, %rbx
// 319: 85 c0                         testl   %eax, %eax
// 31b: 78 21                         js      0x33e <_JIT_ENTRY+0x33e>
// 31d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 327: ff d0                         callq   *%rax
// 329: 49 ff 4d 00                   decq    (%r13)
// 32d: 75 0f                         jne     0x33e <_JIT_ENTRY+0x33e>
// 32f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000331:  R_X86_64_64  _Py_Dealloc
// 339: 4c 89 ef                      movq    %r13, %rdi
// 33c: ff d0                         callq   *%rax
// 33e: 83 3c 24 00                   cmpl    $0x0, (%rsp)
// 342: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 346: 74 4d                         je      0x395 <_JIT_ENTRY+0x395>
// 348: 49 83 c4 e8                   addq    $-0x18, %r12
// 34c: 4c 89 e0                      movq    %r12, %rax
// 34f: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 354: eb 20                         jmp     0x376 <_JIT_ENTRY+0x376>
// 356: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000358:  R_X86_64_64  _Py_Dealloc
// 360: 4c 89 e7                      movq    %r12, %rdi
// 363: ff d0                         callq   *%rax
// 365: 48 8b 04 24                   movq    (%rsp), %rax
// 369: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 36d: 4d 85 ed                      testq   %r13, %r13
// 370: 0f 85 af fd ff ff             jne     0x125 <_JIT_ENTRY+0x125>
// 376: 48 29 d8                      subq    %rbx, %rax
// 379: 48 83 c0 b8                   addq    $-0x48, %rax
// 37d: 48 c1 e8 03                   shrq    $0x3, %rax
// 381: 89 43 40                      movl    %eax, 0x40(%rbx)
// 384: 31 c0                         xorl    %eax, %eax
// 386: 48 83 c4 28                   addq    $0x28, %rsp
// 38a: 5b                            popq    %rbx
// 38b: 41 5c                         popq    %r12
// 38d: 41 5d                         popq    %r13
// 38f: 41 5e                         popq    %r14
// 391: 41 5f                         popq    %r15
// 393: 5d                            popq    %rbp
// 394: c3                            retq
// 395: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000397:  R_X86_64_64  _JIT_CONTINUE
// 39f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 3a4: 4c 89 e6                      movq    %r12, %rsi
// 3a7: 4c 89 f2                      movq    %r14, %rdx
// 3aa: 48 83 c4 28                   addq    $0x28, %rsp
// 3ae: 5b                            popq    %rbx
// 3af: 41 5c                         popq    %r12
// 3b1: 41 5d                         popq    %r13
// 3b3: 41 5e                         popq    %r14
// 3b5: 41 5f                         popq    %r15
// 3b7: 5d                            popq    %rbp
// 3b8: ff e0                         jmpq    *%rax
// 3ba: 
static const unsigned char _CALL_BUILTIN_CLASSplus_STORE_SUBSCR_code_body[955] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x0c, 0x24, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x42, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x51, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x17, 0x02, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xfa, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xdf, 0xf8, 0x4d, 0x8b, 0x74, 0xdf, 0xe8, 0x49, 0x8b, 0x6c, 0xdf, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8d, 0x1c, 0xdf, 0x48, 0x83, 0xc3, 0xe8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x83, 0x3c, 0x24, 0x00, 0x4c, 0x0f, 0x44, 0xe3, 0x74, 0x4d, 0x49, 0x83, 0xc4, 0xe8, 0x4c, 0x89, 0xe0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0xeb, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x85, 0xaf, 0xfd, 0xff, 0xff, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_STORE_SUBSCR_code_holes[28] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x331, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x358, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x397, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_STORE_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_STORE_SUBSCR_data_holes[1];

// _CALL_BUILTIN_CLASSplus_STORE_SUBSCR_DICT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_STORE_SUBSCR_DICT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 1d 01 00 00             je      0x187 <_JIT_ENTRY+0x187>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 0c 01 00 00             je      0x187 <_JIT_ENTRY+0x187>
// 7b: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 80: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 85: 48 89 14 24                   movq    %rdx, (%rsp)
// 89: 4c 89 74 24 20                movq    %r14, 0x20(%rsp)
// 8e: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 41 0f 94 c6                   sete    %r14b
// 99: 89 da                         movl    %ebx, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c6                      testb   %al, %r14b
// be: 0f 84 f0 00 00 00             je      0x1b4 <_JIT_ENTRY+0x1b4>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// f6: 48 8b 1c 24                   movq    (%rsp), %rbx
// fa: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// ff: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 104: 78 16                         js      0x11c <_JIT_ENTRY+0x11c>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 0c 24                   decq    (%r12)
// 116: 0f 84 1d 01 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 11c: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 121: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 125: 48 85 ed                      testq   %rbp, %rbp
// 128: 0f 84 c6 01 00 00             je      0x2f4 <_JIT_ENTRY+0x2f4>
// 12e: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 132: 48 89 28                      movq    %rbp, (%rax)
// 135: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 139: 48 8b 00                      movq    (%rax), %rax
// 13c: 84 c0                         testb   %al, %al
// 13e: 74 17                         je      0x157 <_JIT_ENTRY+0x157>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_HandlePending
// 14a: 48 89 df                      movq    %rbx, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 0f 85 9a 01 00 00             jne     0x2f1 <_JIT_ENTRY+0x2f1>
// 157: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000159:  R_X86_64_64  _JIT_OPARG
// 161: f7 d0                         notl    %eax
// 163: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 168: 48 63 d8                      movslq  %eax, %rbx
// 16b: 4d 8b 6c df f0                movq    -0x10(%r15,%rbx,8), %r13
// 170: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000172:  R_X86_64_64  PyDict_Type
// 17a: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 17e: 0f 84 db 00 00 00             je      0x25f <_JIT_ENTRY+0x25f>
// 184: 4d 89 e7                      movq    %r12, %r15
// 187: 4d 29 f7                      subq    %r14, %r15
// 18a: 49 83 c7 b8                   addq    $-0x48, %r15
// 18e: 49 c1 ef 03                   shrq    $0x3, %r15
// 192: 45 89 7e 40                   movl    %r15d, 0x40(%r14)
// 196: 49 8b 06                      movq    (%r14), %rax
// 199: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019b:  R_X86_64_64  _JIT_TARGET
// 1a3: 89 c9                         movl    %ecx, %ecx
// 1a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1af: e9 51 01 00 00                jmp     0x305 <_JIT_ENTRY+0x305>
// 1b4: 83 fb 02                      cmpl    $0x2, %ebx
// 1b7: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1bd: 44 0f 43 f3                   cmovael %ebx, %r14d
// 1c1: 31 db                         xorl    %ebx, %ebx
// 1c3: eb 17                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 1d0: 48 ff c3                      incq    %rbx
// 1d3: 49 39 de                      cmpq    %rbx, %r14
// 1d6: 0f 84 e8 fe ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 1dc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _Py_Dealloc
// 243: 4c 89 e7                      movq    %r12, %rdi
// 246: ff d0                         callq   *%rax
// 248: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 24d: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 251: 48 85 ed                      testq   %rbp, %rbp
// 254: 0f 85 d4 fe ff ff             jne     0x12e <_JIT_ENTRY+0x12e>
// 25a: e9 95 00 00 00                jmp     0x2f4 <_JIT_ENTRY+0x2f4>
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _JIT_OPARG
// 269: f7 d0                         notl    %eax
// 26b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 270: 48 98                         cltq
// 272: 49 8b 54 c7 e8                movq    -0x18(%r15,%rax,8), %rdx
// 277: 49 8b 74 c7 f8                movq    -0x8(%r15,%rax,8), %rsi
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _PyDict_SetItem_Take2
// 286: 4c 89 ef                      movq    %r13, %rdi
// 289: ff d0                         callq   *%rax
// 28b: 89 c5                         movl    %eax, %ebp
// 28d: 49 8b 45 00                   movq    (%r13), %rax
// 291: 48 85 c0                      testq   %rax, %rax
// 294: 7f 22                         jg      0x2b8 <_JIT_ENTRY+0x2b8>
// 296: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000298:  R_X86_64_64  .rodata.str1.1
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _Py_NegativeRefcount
// 2aa: be 63 02 00 00                movl    $0x263, %esi            # imm = 0x263
// 2af: 4c 89 ea                      movq    %r13, %rdx
// 2b2: ff d0                         callq   *%rax
// 2b4: 49 8b 45 00                   movq    (%r13), %rax
// 2b8: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 2bc: 48 83 c3 e8                   addq    $-0x18, %rbx
// 2c0: 85 c0                         testl   %eax, %eax
// 2c2: 78 21                         js      0x2e5 <_JIT_ENTRY+0x2e5>
// 2c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ce: ff d0                         callq   *%rax
// 2d0: 49 ff 4d 00                   decq    (%r13)
// 2d4: 75 0f                         jne     0x2e5 <_JIT_ENTRY+0x2e5>
// 2d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d8:  R_X86_64_64  _Py_Dealloc
// 2e0: 4c 89 ef                      movq    %r13, %rdi
// 2e3: ff d0                         callq   *%rax
// 2e5: 85 ed                         testl   %ebp, %ebp
// 2e7: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 2eb: 74 27                         je      0x314 <_JIT_ENTRY+0x314>
// 2ed: 49 83 c4 e8                   addq    $-0x18, %r12
// 2f1: 4c 89 e0                      movq    %r12, %rax
// 2f4: 4c 29 f0                      subq    %r14, %rax
// 2f7: 48 83 c0 b8                   addq    $-0x48, %rax
// 2fb: 48 c1 e8 03                   shrq    $0x3, %rax
// 2ff: 41 89 46 40                   movl    %eax, 0x40(%r14)
// 303: 31 c0                         xorl    %eax, %eax
// 305: 48 83 c4 28                   addq    $0x28, %rsp
// 309: 5b                            popq    %rbx
// 30a: 41 5c                         popq    %r12
// 30c: 41 5d                         popq    %r13
// 30e: 41 5e                         popq    %r14
// 310: 41 5f                         popq    %r15
// 312: 5d                            popq    %rbp
// 313: c3                            retq
// 314: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000316:  R_X86_64_64  _JIT_CONTINUE
// 31e: 4c 89 f7                      movq    %r14, %rdi
// 321: 4c 89 e6                      movq    %r12, %rsi
// 324: 48 8b 14 24                   movq    (%rsp), %rdx
// 328: 48 83 c4 28                   addq    $0x28, %rsp
// 32c: 5b                            popq    %rbx
// 32d: 41 5c                         popq    %r12
// 32f: 41 5d                         popq    %r13
// 331: 41 5e                         popq    %r14
// 333: 41 5f                         popq    %r15
// 335: 5d                            popq    %rbp
// 336: ff e0                         jmpq    *%rax
// 338: 
static const unsigned char _CALL_BUILTIN_CLASSplus_STORE_SUBSCR_DICT_code_body[825] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfe, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd7, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x1d, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x0c, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x74, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xf0, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x1d, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x85, 0xed, 0x0f, 0x84, 0xc6, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xef, 0x48, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x9a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xdf, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x84, 0xdb, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe7, 0x4d, 0x29, 0xf7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x51, 0x01, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x17, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0xe8, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x85, 0xed, 0x0f, 0x85, 0xd4, 0xfe, 0xff, 0xff, 0xe9, 0x95, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x54, 0xc7, 0xe8, 0x49, 0x8b, 0x74, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x63, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8d, 0x1c, 0xdf, 0x48, 0x83, 0xc3, 0xe8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe3, 0x74, 0x27, 0x49, 0x83, 0xc4, 0xe8, 0x4c, 0x89, 0xe0, 0x4c, 0x29, 0xf0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x46, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_STORE_SUBSCR_DICT_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x316, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_STORE_SUBSCR_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_STORE_SUBSCR_DICT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_STORE_SUBSCR_LIST_INT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_STORE_SUBSCR_LIST_INT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fd                      movq    %rdi, %rbp
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 0d 01 00 00             je      0x177 <_JIT_ENTRY+0x177>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 fc 00 00 00             je      0x177 <_JIT_ENTRY+0x177>
// 7b: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 80: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 85: 48 89 14 24                   movq    %rdx, (%rsp)
// 89: 48 89 6c 24 20                movq    %rbp, 0x20(%rsp)
// 8e: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 41 0f 94 c6                   sete    %r14b
// 99: 89 da                         movl    %ebx, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c6                      testb   %al, %r14b
// be: 0f 84 ee 00 00 00             je      0x1b2 <_JIT_ENTRY+0x1b2>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// f6: 48 8b 1c 24                   movq    (%rsp), %rbx
// fa: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// ff: 78 21                         js      0x122 <_JIT_ENTRY+0x122>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10b: ff d0                         callq   *%rax
// 10d: 49 ff 0c 24                   decq    (%r12)
// 111: 75 0f                         jne     0x122 <_JIT_ENTRY+0x122>
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _Py_Dealloc
// 11d: 4c 89 e7                      movq    %r12, %rdi
// 120: ff d0                         callq   *%rax
// 122: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 127: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 12b: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 130: 48 85 c9                      testq   %rcx, %rcx
// 133: 74 30                         je      0x165 <_JIT_ENTRY+0x165>
// 135: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 139: 48 89 08                      movq    %rcx, (%rax)
// 13c: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 140: 48 8b 00                      movq    (%rax), %rax
// 143: 84 c0                         testb   %al, %al
// 145: 0f 84 ee 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_HandlePending
// 155: 48 89 df                      movq    %rbx, %rdi
// 158: ff d0                         callq   *%rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 84 d7 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 162: 4c 89 f0                      movq    %r14, %rax
// 165: 48 29 e8                      subq    %rbp, %rax
// 168: 48 83 c0 b8                   addq    $-0x48, %rax
// 16c: 48 c1 e8 03                   shrq    $0x3, %rax
// 170: 89 45 40                      movl    %eax, 0x40(%rbp)
// 173: 31 c0                         xorl    %eax, %eax
// 175: eb 2c                         jmp     0x1a3 <_JIT_ENTRY+0x1a3>
// 177: 4d 89 fe                      movq    %r15, %r14
// 17a: 49 29 ee                      subq    %rbp, %r14
// 17d: 49 83 c6 b8                   addq    $-0x48, %r14
// 181: 49 c1 ee 03                   shrq    $0x3, %r14
// 185: 44 89 75 40                   movl    %r14d, 0x40(%rbp)
// 189: 48 8b 45 00                   movq    (%rbp), %rax
// 18d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018f:  R_X86_64_64  _JIT_TARGET
// 197: 89 c9                         movl    %ecx, %ecx
// 199: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 19d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1a3: 48 83 c4 28                   addq    $0x28, %rsp
// 1a7: 5b                            popq    %rbx
// 1a8: 41 5c                         popq    %r12
// 1aa: 41 5d                         popq    %r13
// 1ac: 41 5e                         popq    %r14
// 1ae: 41 5f                         popq    %r15
// 1b0: 5d                            popq    %rbp
// 1b1: c3                            retq
// 1b2: 83 fb 02                      cmpl    $0x2, %ebx
// 1b5: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1bb: 44 0f 43 f3                   cmovael %ebx, %r14d
// 1bf: 31 db                         xorl    %ebx, %ebx
// 1c1: eb 19                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 1d0: 48 ff c3                      incq    %rbx
// 1d3: 49 39 de                      cmpq    %rbx, %r14
// 1d6: 0f 84 e8 fe ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 1dc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 48 63 d8                      movslq  %eax, %rbx
// 24d: 4d 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %r13
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  PyLong_Type
// 25c: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 260: 0f 85 14 ff ff ff             jne     0x17a <_JIT_ENTRY+0x17a>
// 266: 4d 8b 64 df f0                movq    -0x10(%r15,%rbx,8), %r12
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  PyList_Type
// 275: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 27a: 0f 85 fa fe ff ff             jne     0x17a <_JIT_ENTRY+0x17a>
// 280: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 285: 0f 87 ef fe ff ff             ja      0x17a <_JIT_ENTRY+0x17a>
// 28b: 41 8b 45 18                   movl    0x18(%r13), %eax
// 28f: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 294: 0f 8e e0 fe ff ff             jle     0x17a <_JIT_ENTRY+0x17a>
// 29a: 49 8b 4c df e8                movq    -0x18(%r15,%rbx,8), %rcx
// 29f: 49 8b 54 24 18                movq    0x18(%r12), %rdx
// 2a4: 4c 8b 34 c2                   movq    (%rdx,%rax,8), %r14
// 2a8: 48 89 0c c2                   movq    %rcx, (%rdx,%rax,8)
// 2ac: 49 8b 06                      movq    (%r14), %rax
// 2af: 48 85 c0                      testq   %rax, %rax
// 2b2: 7f 21                         jg      0x2d5 <_JIT_ENTRY+0x2d5>
// 2b4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b6:  R_X86_64_64  .rodata.str1.1
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _Py_NegativeRefcount
// 2c8: be 52 02 00 00                movl    $0x252, %esi            # imm = 0x252
// 2cd: 4c 89 f2                      movq    %r14, %rdx
// 2d0: ff d0                         callq   *%rax
// 2d2: 49 8b 06                      movq    (%r14), %rax
// 2d5: 85 c0                         testl   %eax, %eax
// 2d7: 78 20                         js      0x2f9 <_JIT_ENTRY+0x2f9>
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e3: ff d0                         callq   *%rax
// 2e5: 49 ff 0e                      decq    (%r14)
// 2e8: 75 0f                         jne     0x2f9 <_JIT_ENTRY+0x2f9>
// 2ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ec:  R_X86_64_64  _Py_Dealloc
// 2f4: 4c 89 f7                      movq    %r14, %rdi
// 2f7: ff d0                         callq   *%rax
// 2f9: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2fe: 75 28                         jne     0x328 <_JIT_ENTRY+0x328>
// 300: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000302:  R_X86_64_64  PyInterpreterState_Get
// 30a: ff d0                         callq   *%rax
// 30c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 313: 49 ff 4d 00                   decq    (%r13)
// 317: 75 0f                         jne     0x328 <_JIT_ENTRY+0x328>
// 319: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031b:  R_X86_64_64  PyObject_Free
// 323: 4c 89 ef                      movq    %r13, %rdi
// 326: ff d0                         callq   *%rax
// 328: 49 8b 04 24                   movq    (%r12), %rax
// 32c: 48 85 c0                      testq   %rax, %rax
// 32f: 7f 22                         jg      0x353 <_JIT_ENTRY+0x353>
// 331: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000333:  R_X86_64_64  .rodata.str1.1
// 33b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033d:  R_X86_64_64  _Py_NegativeRefcount
// 345: be 54 02 00 00                movl    $0x254, %esi            # imm = 0x254
// 34a: 4c 89 e2                      movq    %r12, %rdx
// 34d: ff d0                         callq   *%rax
// 34f: 49 8b 04 24                   movq    (%r12), %rax
// 353: 4d 8d 34 df                   leaq    (%r15,%rbx,8), %r14
// 357: 49 83 c6 e8                   addq    $-0x18, %r14
// 35b: 85 c0                         testl   %eax, %eax
// 35d: 48 8b 1c 24                   movq    (%rsp), %rbx
// 361: 78 21                         js      0x384 <_JIT_ENTRY+0x384>
// 363: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000365:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 36d: ff d0                         callq   *%rax
// 36f: 49 ff 0c 24                   decq    (%r12)
// 373: 75 0f                         jne     0x384 <_JIT_ENTRY+0x384>
// 375: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000377:  R_X86_64_64  _Py_Dealloc
// 37f: 4c 89 e7                      movq    %r12, %rdi
// 382: ff d0                         callq   *%rax
// 384: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000386:  R_X86_64_64  _JIT_CONTINUE
// 38e: 48 89 ef                      movq    %rbp, %rdi
// 391: 4c 89 f6                      movq    %r14, %rsi
// 394: 48 89 da                      movq    %rbx, %rdx
// 397: 48 83 c4 28                   addq    $0x28, %rsp
// 39b: 5b                            popq    %rbx
// 39c: 41 5c                         popq    %r12
// 39e: 41 5d                         popq    %r13
// 3a0: 41 5e                         popq    %r14
// 3a2: 41 5f                         popq    %r15
// 3a4: 5d                            popq    %rbp
// 3a5: ff e0                         jmpq    *%rax
// 3a7: 
static const unsigned char _CALL_BUILTIN_CLASSplus_STORE_SUBSCR_LIST_INT_code_body[936] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd7, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x0d, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xfc, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x6c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xee, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x30, 0x4f, 0x8d, 0x34, 0xf7, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xee, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xeb, 0x2c, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xee, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x75, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x83, 0xfb, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf3, 0x31, 0xdb, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0xe8, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xdf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x14, 0xff, 0xff, 0xff, 0x4d, 0x8b, 0x64, 0xdf, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xfa, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xef, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xe0, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x4c, 0xdf, 0xe8, 0x49, 0x8b, 0x54, 0x24, 0x18, 0x4c, 0x8b, 0x34, 0xc2, 0x48, 0x89, 0x0c, 0xc2, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x52, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x34, 0xdf, 0x49, 0x83, 0xc6, 0xe8, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_STORE_SUBSCR_LIST_INT_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x333, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x33d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x365, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x377, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x386, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_STORE_SUBSCR_LIST_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_STORE_SUBSCR_LIST_INT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_SWAP
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_SWAP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 79 01                   leal    0x1(%r9), %r15d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 f9                   cmovel  %r9d, %r15d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f8 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e7 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 fa                      movl    %r15d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 cc 00 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f2: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// f7: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// fc: 78 16                         js      0x114 <_JIT_ENTRY+0x114>
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 108: ff d0                         callq   *%rax
// 10a: 49 ff 0c 24                   decq    (%r12)
// 10e: 0f 84 44 01 00 00             je      0x258 <_JIT_ENTRY+0x258>
// 114: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 119: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 11d: 4d 85 ed                      testq   %r13, %r13
// 120: 0f 84 53 01 00 00             je      0x279 <_JIT_ENTRY+0x279>
// 126: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12a: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 12e: 4c 89 28                      movq    %r13, (%rax)
// 131: 49 8b 47 10                   movq    0x10(%r15), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 0f 84 c7 00 00 00             je      0x207 <_JIT_ENTRY+0x207>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_HandlePending
// 14a: 4c 89 ff                      movq    %r15, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 0f 84 b0 00 00 00             je      0x207 <_JIT_ENTRY+0x207>
// 157: 4c 89 e0                      movq    %r12, %rax
// 15a: e9 1a 01 00 00                jmp     0x279 <_JIT_ENTRY+0x279>
// 15f: 49 29 fe                      subq    %rdi, %r14
// 162: 49 83 c6 b8                   addq    $-0x48, %r14
// 166: 49 c1 ee 03                   shrq    $0x3, %r14
// 16a: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 16e: 48 8b 07                      movq    (%rdi), %rax
// 171: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000173:  R_X86_64_64  _JIT_TARGET
// 17b: 89 c9                         movl    %ecx, %ecx
// 17d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 181: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 187: e9 fd 00 00 00                jmp     0x289 <_JIT_ENTRY+0x289>
// 18c: 41 83 ff 02                   cmpl    $0x2, %r15d
// 190: bb 01 00 00 00                movl    $0x1, %ebx
// 195: 41 0f 43 df                   cmovael %r15d, %ebx
// 199: 45 31 ed                      xorl    %r13d, %r13d
// 19c: eb 0e                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19e: 66 90                         nop
// 1a0: 49 ff c5                      incq    %r13
// 1a3: 4c 39 eb                      cmpq    %r13, %rbx
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4e 8b 7c ed 00                movq    (%rbp,%r13,8), %r15
// 1b1: 49 8b 07                      movq    (%r15), %rax
// 1b4: 48 85 c0                      testq   %rax, %rax
// 1b7: 7e 07                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1b9: 85 c0                         testl   %eax, %eax
// 1bb: 78 e3                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1bd: eb 26                         jmp     0x1e5 <_JIT_ENTRY+0x1e5>
// 1bf: 90                            nop
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 fa                      movq    %r15, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 07                      movq    (%r15), %rax
// 1e1: 85 c0                         testl   %eax, %eax
// 1e3: 78 bb                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ef: ff d0                         callq   *%rax
// 1f1: 49 ff 0f                      decq    (%r15)
// 1f4: 75 aa                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f6: 4c 89 ff                      movq    %r15, %rdi
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_Dealloc
// 203: ff d0                         callq   *%rax
// 205: eb 99                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  _JIT_OPARG
// 211: 0f b7 c8                      movzwl  %ax, %ecx
// 214: f7 d0                         notl    %eax
// 216: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21b: 48 98                         cltq
// 21d: 49 8b 54 c6 f8                movq    -0x8(%r14,%rax,8), %rdx
// 222: 48 89 c6                      movq    %rax, %rsi
// 225: 48 29 ce                      subq    %rcx, %rsi
// 228: 49 8b 0c f6                   movq    (%r14,%rsi,8), %rcx
// 22c: 49 89 14 f6                   movq    %rdx, (%r14,%rsi,8)
// 230: 49 89 4c c6 f8                movq    %rcx, -0x8(%r14,%rax,8)
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _JIT_CONTINUE
// 23f: 48 89 df                      movq    %rbx, %rdi
// 242: 4c 89 e6                      movq    %r12, %rsi
// 245: 4c 89 fa                      movq    %r15, %rdx
// 248: 48 83 c4 28                   addq    $0x28, %rsp
// 24c: 5b                            popq    %rbx
// 24d: 41 5c                         popq    %r12
// 24f: 41 5d                         popq    %r13
// 251: 41 5e                         popq    %r14
// 253: 41 5f                         popq    %r15
// 255: 5d                            popq    %rbp
// 256: ff e0                         jmpq    *%rax
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _Py_Dealloc
// 262: 4c 89 e7                      movq    %r12, %rdi
// 265: ff d0                         callq   *%rax
// 267: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 26c: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 270: 4d 85 ed                      testq   %r13, %r13
// 273: 0f 85 ad fe ff ff             jne     0x126 <_JIT_ENTRY+0x126>
// 279: 48 29 d8                      subq    %rbx, %rax
// 27c: 48 83 c0 b8                   addq    $-0x48, %rax
// 280: 48 c1 e8 03                   shrq    $0x3, %rax
// 284: 89 43 40                      movl    %eax, 0x40(%rbx)
// 287: 31 c0                         xorl    %eax, %eax
// 289: 48 83 c4 28                   addq    $0x28, %rsp
// 28d: 5b                            popq    %rbx
// 28e: 41 5c                         popq    %r12
// 290: 41 5d                         popq    %r13
// 292: 41 5e                         popq    %r14
// 294: 41 5f                         popq    %r15
// 296: 5d                            popq    %rbp
// 297: c3                            retq
// 298: 
static const unsigned char _CALL_BUILTIN_CLASSplus_SWAP_code_body[665] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x79, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x44, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x53, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x1a, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xfd, 0x00, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdf, 0x45, 0x31, 0xed, 0xeb, 0x0e, 0x66, 0x90, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xeb, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x7c, 0xed, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x54, 0xc6, 0xf8, 0x48, 0x89, 0xc6, 0x48, 0x29, 0xce, 0x49, 0x8b, 0x0c, 0xf6, 0x49, 0x89, 0x14, 0xf6, 0x49, 0x89, 0x4c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x0f, 0x85, 0xad, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_SWAP_code_holes[15] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_SWAP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_SWAP_data_holes[1];

// _CALL_BUILTIN_CLASSplus_TO_BOOL
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_TO_BOOL.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f8 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e7 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 78: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 7d: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 82: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 87: 48 89 3c 24                   movq    %rdi, (%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 cc 00 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 1c 24                   movq    (%rsp), %rbx
// f1: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// f6: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// fb: 78 16                         js      0x113 <_JIT_ENTRY+0x113>
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 107: ff d0                         callq   *%rax
// 109: 49 ff 0c 24                   decq    (%r12)
// 10d: 0f 84 ba 01 00 00             je      0x2cd <_JIT_ENTRY+0x2cd>
// 113: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 118: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 11c: 4d 85 ed                      testq   %r13, %r13
// 11f: 0f 84 cf 01 00 00             je      0x2f4 <_JIT_ENTRY+0x2f4>
// 125: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 12a: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 12e: 4c 89 28                      movq    %r13, (%rax)
// 131: 49 8b 46 10                   movq    0x10(%r14), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 0f 84 c9 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_HandlePending
// 14a: 4c 89 f7                      movq    %r14, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 0f 84 b2 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 157: 4c 89 e0                      movq    %r12, %rax
// 15a: e9 95 01 00 00                jmp     0x2f4 <_JIT_ENTRY+0x2f4>
// 15f: 49 29 ff                      subq    %rdi, %r15
// 162: 49 83 c7 b8                   addq    $-0x48, %r15
// 166: 49 c1 ef 03                   shrq    $0x3, %r15
// 16a: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 16e: 48 8b 07                      movq    (%rdi), %rax
// 171: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000173:  R_X86_64_64  _JIT_TARGET
// 17b: 89 c9                         movl    %ecx, %ecx
// 17d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 181: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 187: e9 78 01 00 00                jmp     0x304 <_JIT_ENTRY+0x304>
// 18c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 190: 41 be 01 00 00 00             movl    $0x1, %r14d
// 196: 45 0f 43 f5                   cmovael %r13d, %r14d
// 19a: 31 db                         xorl    %ebx, %ebx
// 19c: eb 0e                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19e: 66 90                         nop
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 de                      cmpq    %rbx, %r14
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 63 d8                      movslq  %eax, %rbx
// 21d: 4d 8b 74 df f8                movq    -0x8(%r15,%rbx,8), %r14
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  PyObject_IsTrue
// 22c: 4c 89 f7                      movq    %r14, %rdi
// 22f: ff d0                         callq   *%rax
// 231: 89 c5                         movl    %eax, %ebp
// 233: 49 8b 06                      movq    (%r14), %rax
// 236: 48 85 c0                      testq   %rax, %rax
// 239: 7f 21                         jg      0x25c <_JIT_ENTRY+0x25c>
// 23b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023d:  R_X86_64_64  .rodata.str1.1
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _Py_NegativeRefcount
// 24f: be 86 00 00 00                movl    $0x86, %esi
// 254: 4c 89 f2                      movq    %r14, %rdx
// 257: ff d0                         callq   *%rax
// 259: 49 8b 06                      movq    (%r14), %rax
// 25c: 85 c0                         testl   %eax, %eax
// 25e: 78 20                         js      0x280 <_JIT_ENTRY+0x280>
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26a: ff d0                         callq   *%rax
// 26c: 49 ff 0e                      decq    (%r14)
// 26f: 75 0f                         jne     0x280 <_JIT_ENTRY+0x280>
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _Py_Dealloc
// 27b: 4c 89 f7                      movq    %r14, %rdi
// 27e: ff d0                         callq   *%rax
// 280: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 284: 48 83 c0 f8                   addq    $-0x8, %rax
// 288: 85 ed                         testl   %ebp, %ebp
// 28a: 78 64                         js      0x2f0 <_JIT_ENTRY+0x2f0>
// 28c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000028e:  R_X86_64_64  _Py_FalseStruct
// 296: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000298:  R_X86_64_64  _Py_TrueStruct
// 2a0: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 2a4: 48 89 10                      movq    %rdx, (%rax)
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _JIT_CONTINUE
// 2b1: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2b5: 4c 89 e6                      movq    %r12, %rsi
// 2b8: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2bd: 48 83 c4 28                   addq    $0x28, %rsp
// 2c1: 5b                            popq    %rbx
// 2c2: 41 5c                         popq    %r12
// 2c4: 41 5d                         popq    %r13
// 2c6: 41 5e                         popq    %r14
// 2c8: 41 5f                         popq    %r15
// 2ca: 5d                            popq    %rbp
// 2cb: ff e0                         jmpq    *%rax
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _Py_Dealloc
// 2d7: 4c 89 e7                      movq    %r12, %rdi
// 2da: ff d0                         callq   *%rax
// 2dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 2e1: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 2e5: 4d 85 ed                      testq   %r13, %r13
// 2e8: 0f 85 37 fe ff ff             jne     0x125 <_JIT_ENTRY+0x125>
// 2ee: eb 04                         jmp     0x2f4 <_JIT_ENTRY+0x2f4>
// 2f0: 48 8b 1c 24                   movq    (%rsp), %rbx
// 2f4: 48 29 d8                      subq    %rbx, %rax
// 2f7: 48 83 c0 b8                   addq    $-0x48, %rax
// 2fb: 48 c1 e8 03                   shrq    $0x3, %rax
// 2ff: 89 43 40                      movl    %eax, 0x40(%rbx)
// 302: 31 c0                         xorl    %eax, %eax
// 304: 48 83 c4 28                   addq    $0x28, %rsp
// 308: 5b                            popq    %rbx
// 309: 41 5c                         popq    %r12
// 30b: 41 5d                         popq    %r13
// 30d: 41 5e                         popq    %r14
// 30f: 41 5f                         popq    %r15
// 311: 5d                            popq    %rbp
// 312: c3                            retq
// 313: 
static const unsigned char _CALL_BUILTIN_CLASSplus_TO_BOOL_code_body[788] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x3c, 0x24, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xba, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xcf, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x95, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x78, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x74, 0xdf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x83, 0xc0, 0xf8, 0x85, 0xed, 0x78, 0x64, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x48, 0x89, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x85, 0x37, 0xfe, 0xff, 0xff, 0xeb, 0x04, 0x48, 0x8b, 0x1c, 0x24, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_TO_BOOL_code_holes[22] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_TO_BOOL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_TO_BOOL_data_holes[1];

// _CALL_BUILTIN_CLASSplus_TO_BOOL_ALWAYS_TRUE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_TO_BOOL_ALWAYS_TRUE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 fd                      movq    %rdi, %r13
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 7a 02 00 00             je      0x2e4 <_JIT_ENTRY+0x2e4>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 69 02 00 00             je      0x2e4 <_JIT_ENTRY+0x2e4>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 8f: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 41 0f 94 c7                   sete    %r15b
// 9a: 89 da                         movl    %ebx, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 9f 00 00 00             je      0x163 <_JIT_ENTRY+0x163>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// f6: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// fb: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 100: 48 8b 2c 24                   movq    (%rsp), %rbp
// 104: 78 16                         js      0x11c <_JIT_ENTRY+0x11c>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 0c 24                   decq    (%r12)
// 116: 0f 84 91 01 00 00             je      0x2ad <_JIT_ENTRY+0x2ad>
// 11c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 121: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 125: 48 85 ed                      testq   %rbp, %rbp
// 128: 0f 84 a0 01 00 00             je      0x2ce <_JIT_ENTRY+0x2ce>
// 12e: 4f 8d 24 fe                   leaq    (%r14,%r15,8), %r12
// 132: 48 89 28                      movq    %rbp, (%rax)
// 135: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 139: 48 8b 00                      movq    (%rax), %rax
// 13c: 84 c0                         testb   %al, %al
// 13e: 0f 84 a5 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_HandlePending
// 14e: 48 89 df                      movq    %rbx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 84 8e 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 15b: 4c 89 e0                      movq    %r12, %rax
// 15e: e9 6b 01 00 00                jmp     0x2ce <_JIT_ENTRY+0x2ce>
// 163: 83 fb 02                      cmpl    $0x2, %ebx
// 166: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 16c: 44 0f 43 fb                   cmovael %ebx, %r15d
// 170: 31 db                         xorl    %ebx, %ebx
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 48 ff c3                      incq    %rbx
// 183: 49 39 df                      cmpq    %rbx, %r15
// 186: 0f 84 38 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 18c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 191: 49 8b 45 00                   movq    (%r13), %rax
// 195: 48 85 c0                      testq   %rax, %rax
// 198: 7e 06                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 78 e2                         js      0x180 <_JIT_ENTRY+0x180>
// 19e: eb 26                         jmp     0x1c6 <_JIT_ENTRY+0x1c6>
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 ea                      movq    %r13, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 45 00                   movq    (%r13), %rax
// 1c2: 85 c0                         testl   %eax, %eax
// 1c4: 78 ba                         js      0x180 <_JIT_ENTRY+0x180>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d0: ff d0                         callq   *%rax
// 1d2: 49 ff 4d 00                   decq    (%r13)
// 1d6: 75 a8                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d8: 4c 89 ef                      movq    %r13, %rdi
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_Dealloc
// 1e5: ff d0                         callq   *%rax
// 1e7: eb 97                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_OPARG
// 1f3: f7 d0                         notl    %eax
// 1f5: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1fa: 48 98                         cltq
// 1fc: 4d 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %r15
// 201: 49 8b 47 08                   movq    0x8(%r15), %rax
// 205: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000207:  R_X86_64_64  _JIT_OPERAND
// 20f: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 215: 0f 85 c6 00 00 00             jne     0x2e1 <_JIT_ENTRY+0x2e1>
// 21b: 49 8b 07                      movq    (%r15), %rax
// 21e: 48 85 c0                      testq   %rax, %rax
// 221: 7f 21                         jg      0x244 <_JIT_ENTRY+0x244>
// 223: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000225:  R_X86_64_64  .rodata.str1.1
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_NegativeRefcount
// 237: be db 00 00 00                movl    $0xdb, %esi
// 23c: 4c 89 fa                      movq    %r15, %rdx
// 23f: ff d0                         callq   *%rax
// 241: 49 8b 07                      movq    (%r15), %rax
// 244: 85 c0                         testl   %eax, %eax
// 246: 78 20                         js      0x268 <_JIT_ENTRY+0x268>
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 252: ff d0                         callq   *%rax
// 254: 49 ff 0f                      decq    (%r15)
// 257: 75 0f                         jne     0x268 <_JIT_ENTRY+0x268>
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _Py_Dealloc
// 263: 4c 89 ff                      movq    %r15, %rdi
// 266: ff d0                         callq   *%rax
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _JIT_OPARG
// 272: f7 d0                         notl    %eax
// 274: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 279: 48 98                         cltq
// 27b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027d:  R_X86_64_64  _Py_TrueStruct
// 285: 49 89 4c c6 f8                movq    %rcx, -0x8(%r14,%rax,8)
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _JIT_CONTINUE
// 294: 4c 89 ef                      movq    %r13, %rdi
// 297: 4c 89 e6                      movq    %r12, %rsi
// 29a: 48 89 da                      movq    %rbx, %rdx
// 29d: 48 83 c4 28                   addq    $0x28, %rsp
// 2a1: 5b                            popq    %rbx
// 2a2: 41 5c                         popq    %r12
// 2a4: 41 5d                         popq    %r13
// 2a6: 41 5e                         popq    %r14
// 2a8: 41 5f                         popq    %r15
// 2aa: 5d                            popq    %rbp
// 2ab: ff e0                         jmpq    *%rax
// 2ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002af:  R_X86_64_64  _Py_Dealloc
// 2b7: 4c 89 e7                      movq    %r12, %rdi
// 2ba: ff d0                         callq   *%rax
// 2bc: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2c1: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 2c5: 48 85 ed                      testq   %rbp, %rbp
// 2c8: 0f 85 60 fe ff ff             jne     0x12e <_JIT_ENTRY+0x12e>
// 2ce: 4c 29 e8                      subq    %r13, %rax
// 2d1: 48 83 c0 b8                   addq    $-0x48, %rax
// 2d5: 48 c1 e8 03                   shrq    $0x3, %rax
// 2d9: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 2dd: 31 c0                         xorl    %eax, %eax
// 2df: eb 2c                         jmp     0x30d <_JIT_ENTRY+0x30d>
// 2e1: 4d 89 e6                      movq    %r12, %r14
// 2e4: 4d 29 ee                      subq    %r13, %r14
// 2e7: 49 83 c6 b8                   addq    $-0x48, %r14
// 2eb: 49 c1 ee 03                   shrq    $0x3, %r14
// 2ef: 45 89 75 40                   movl    %r14d, 0x40(%r13)
// 2f3: 49 8b 45 00                   movq    (%r13), %rax
// 2f7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002f9:  R_X86_64_64  _JIT_TARGET
// 301: 89 c9                         movl    %ecx, %ecx
// 303: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 307: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 30d: 48 83 c4 28                   addq    $0x28, %rsp
// 311: 5b                            popq    %rbx
// 312: 41 5c                         popq    %r12
// 314: 41 5d                         popq    %r13
// 316: 41 5e                         popq    %r14
// 318: 41 5f                         popq    %r15
// 31a: 5d                            popq    %rbp
// 31b: c3                            retq
// 31c: 
static const unsigned char _CALL_BUILTIN_CLASSplus_TO_BOOL_ALWAYS_TRUE_code_body[797] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x7a, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x69, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x91, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x84, 0xa0, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xfe, 0x48, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8e, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x6b, 0x01, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfb, 0x31, 0xdb, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x7c, 0xc6, 0xf8, 0x49, 0x8b, 0x47, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x0f, 0x85, 0xc6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x4c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x85, 0x60, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xeb, 0x2c, 0x4d, 0x89, 0xe6, 0x4d, 0x29, 0xee, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x75, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_TO_BOOL_ALWAYS_TRUE_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_TO_BOOL_ALWAYS_TRUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_TO_BOOL_ALWAYS_TRUE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_TO_BOOL_BOOL
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_TO_BOOL_BOOL.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 ff                      movq    %rdi, %r15
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 a8 01 00 00             je      0x212 <_JIT_ENTRY+0x212>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 97 01 00 00             je      0x212 <_JIT_ENTRY+0x212>
// 7b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 80: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 85: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 8a: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// 8f: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 41 0f 94 c7                   sete    %r15b
// 9a: 89 da                         movl    %ebx, %edx
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: 48 89 ee                      movq    %rbp, %rsi
// a2: 31 c9                         xorl    %ecx, %ecx
// a4: 41 ff d0                      callq   *%r8
// a7: 48 89 04 24                   movq    %rax, (%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 9f 00 00 00             je      0x163 <_JIT_ENTRY+0x163>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// f6: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// fb: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 100: 48 8b 2c 24                   movq    (%rsp), %rbp
// 104: 78 16                         js      0x11c <_JIT_ENTRY+0x11c>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 0c 24                   decq    (%r12)
// 116: 0f 84 20 01 00 00             je      0x23c <_JIT_ENTRY+0x23c>
// 11c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 121: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 125: 48 85 ed                      testq   %rbp, %rbp
// 128: 0f 84 2f 01 00 00             je      0x25d <_JIT_ENTRY+0x25d>
// 12e: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 132: 48 89 28                      movq    %rbp, (%rax)
// 135: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 139: 48 8b 00                      movq    (%rax), %rax
// 13c: 84 c0                         testb   %al, %al
// 13e: 0f 84 a3 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_HandlePending
// 14e: 48 89 df                      movq    %rbx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 84 8c 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 15b: 4c 89 e0                      movq    %r12, %rax
// 15e: e9 fa 00 00 00                jmp     0x25d <_JIT_ENTRY+0x25d>
// 163: 83 fb 02                      cmpl    $0x2, %ebx
// 166: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 16c: 44 0f 43 eb                   cmovael %ebx, %r13d
// 170: 31 db                         xorl    %ebx, %ebx
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 48 ff c3                      incq    %rbx
// 183: 49 39 dd                      cmpq    %rbx, %r13
// 186: 0f 84 38 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 18c: 4c 8b 7c dd 00                movq    (%rbp,%rbx,8), %r15
// 191: 49 8b 07                      movq    (%r15), %rax
// 194: 48 85 c0                      testq   %rax, %rax
// 197: 7e 07                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 199: 85 c0                         testl   %eax, %eax
// 19b: 78 e3                         js      0x180 <_JIT_ENTRY+0x180>
// 19d: eb 26                         jmp     0x1c5 <_JIT_ENTRY+0x1c5>
// 19f: 90                            nop
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 fa                      movq    %r15, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 07                      movq    (%r15), %rax
// 1c1: 85 c0                         testl   %eax, %eax
// 1c3: 78 bb                         js      0x180 <_JIT_ENTRY+0x180>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 ff 0f                      decq    (%r15)
// 1d4: 75 aa                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d6: 4c 89 ff                      movq    %r15, %rdi
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_Dealloc
// 1e3: ff d0                         callq   *%rax
// 1e5: eb 99                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _JIT_OPARG
// 1f1: f7 d0                         notl    %eax
// 1f3: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f8: 48 98                         cltq
// 1fa: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1ff: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000201:  R_X86_64_64  PyBool_Type
// 209: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 20d: 74 6e                         je      0x27d <_JIT_ENTRY+0x27d>
// 20f: 4d 89 e6                      movq    %r12, %r14
// 212: 4d 29 fe                      subq    %r15, %r14
// 215: 49 83 c6 b8                   addq    $-0x48, %r14
// 219: 49 c1 ee 03                   shrq    $0x3, %r14
// 21d: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 221: 49 8b 07                      movq    (%r15), %rax
// 224: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000226:  R_X86_64_64  _JIT_TARGET
// 22e: 89 c9                         movl    %ecx, %ecx
// 230: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 234: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 23a: eb 32                         jmp     0x26e <_JIT_ENTRY+0x26e>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_Dealloc
// 246: 4c 89 e7                      movq    %r12, %rdi
// 249: ff d0                         callq   *%rax
// 24b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 250: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 254: 48 85 ed                      testq   %rbp, %rbp
// 257: 0f 85 d1 fe ff ff             jne     0x12e <_JIT_ENTRY+0x12e>
// 25d: 4c 29 f8                      subq    %r15, %rax
// 260: 48 83 c0 b8                   addq    $-0x48, %rax
// 264: 48 c1 e8 03                   shrq    $0x3, %rax
// 268: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 26c: 31 c0                         xorl    %eax, %eax
// 26e: 48 83 c4 28                   addq    $0x28, %rsp
// 272: 5b                            popq    %rbx
// 273: 41 5c                         popq    %r12
// 275: 41 5d                         popq    %r13
// 277: 41 5e                         popq    %r14
// 279: 41 5f                         popq    %r15
// 27b: 5d                            popq    %rbp
// 27c: c3                            retq
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _JIT_CONTINUE
// 287: 4c 89 ff                      movq    %r15, %rdi
// 28a: 4c 89 e6                      movq    %r12, %rsi
// 28d: 48 89 da                      movq    %rbx, %rdx
// 290: 48 83 c4 28                   addq    $0x28, %rsp
// 294: 5b                            popq    %rbx
// 295: 41 5c                         popq    %r12
// 297: 41 5d                         popq    %r13
// 299: 41 5e                         popq    %r14
// 29b: 41 5f                         popq    %r15
// 29d: 5d                            popq    %rbp
// 29e: ff e0                         jmpq    *%rax
// 2a0: 
static const unsigned char _CALL_BUILTIN_CLASSplus_TO_BOOL_BOOL_code_body[673] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xa8, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x97, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x20, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x2f, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0xfa, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xeb, 0x31, 0xdb, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x7c, 0xdd, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x6e, 0x4d, 0x89, 0xe6, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xed, 0x0f, 0x85, 0xd1, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_TO_BOOL_BOOL_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_TO_BOOL_BOOL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_TO_BOOL_BOOL_data_holes[1];

// _CALL_BUILTIN_CLASSplus_TO_BOOL_INT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_TO_BOOL_INT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 fd                      movq    %rdi, %r13
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 aa 01 00 00             je      0x214 <_JIT_ENTRY+0x214>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 99 01 00 00             je      0x214 <_JIT_ENTRY+0x214>
// 7b: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 80: 4c 89 0c 24                   movq    %r9, (%rsp)
// 84: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 89: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 8e: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 41 0f 94 c7                   sete    %r15b
// 99: 89 da                         movl    %ebx, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 9f 00 00 00             je      0x163 <_JIT_ENTRY+0x163>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// d0: 7f 22                         jg      0xf4 <_JIT_ENTRY+0xf4>
// d2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d4:  R_X86_64_64  .rodata.str1.1
// dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000de:  R_X86_64_64  _Py_NegativeRefcount
// e6: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// eb: 4c 89 e2                      movq    %r12, %rdx
// ee: ff d0                         callq   *%rax
// f0: 49 8b 04 24                   movq    (%r12), %rax
// f4: 85 c0                         testl   %eax, %eax
// f6: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// fb: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 100: 78 16                         js      0x118 <_JIT_ENTRY+0x118>
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10c: ff d0                         callq   *%rax
// 10e: 49 ff 0c 24                   decq    (%r12)
// 112: 0f 84 27 01 00 00             je      0x23f <_JIT_ENTRY+0x23f>
// 118: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 11c: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 121: 48 85 d2                      testq   %rdx, %rdx
// 124: 0f 84 36 01 00 00             je      0x260 <_JIT_ENTRY+0x260>
// 12a: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12e: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 132: 48 89 10                      movq    %rdx, (%rax)
// 135: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 139: 48 8b 00                      movq    (%rax), %rax
// 13c: 84 c0                         testb   %al, %al
// 13e: 0f 84 a5 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_HandlePending
// 14e: 48 89 ef                      movq    %rbp, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 84 8e 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 15b: 4c 89 e0                      movq    %r12, %rax
// 15e: e9 fd 00 00 00                jmp     0x260 <_JIT_ENTRY+0x260>
// 163: 83 fb 02                      cmpl    $0x2, %ebx
// 166: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 16c: 44 0f 43 fb                   cmovael %ebx, %r15d
// 170: 31 db                         xorl    %ebx, %ebx
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 48 ff c3                      incq    %rbx
// 183: 49 39 df                      cmpq    %rbx, %r15
// 186: 0f 84 38 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 18c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 191: 49 8b 45 00                   movq    (%r13), %rax
// 195: 48 85 c0                      testq   %rax, %rax
// 198: 7e 06                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 78 e2                         js      0x180 <_JIT_ENTRY+0x180>
// 19e: eb 26                         jmp     0x1c6 <_JIT_ENTRY+0x1c6>
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 ea                      movq    %r13, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 45 00                   movq    (%r13), %rax
// 1c2: 85 c0                         testl   %eax, %eax
// 1c4: 78 ba                         js      0x180 <_JIT_ENTRY+0x180>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d0: ff d0                         callq   *%rax
// 1d2: 49 ff 4d 00                   decq    (%r13)
// 1d6: 75 a8                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d8: 4c 89 ef                      movq    %r13, %rdi
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_Dealloc
// 1e5: ff d0                         callq   *%rax
// 1e7: eb 97                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_OPARG
// 1f3: f7 d0                         notl    %eax
// 1f5: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1fa: 48 98                         cltq
// 1fc: 4d 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %r15
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  PyLong_Type
// 20b: 49 39 47 08                   cmpq    %rax, 0x8(%r15)
// 20f: 74 6f                         je      0x280 <_JIT_ENTRY+0x280>
// 211: 4d 89 e6                      movq    %r12, %r14
// 214: 4d 29 ee                      subq    %r13, %r14
// 217: 49 83 c6 b8                   addq    $-0x48, %r14
// 21b: 49 c1 ee 03                   shrq    $0x3, %r14
// 21f: 45 89 75 40                   movl    %r14d, 0x40(%r13)
// 223: 49 8b 45 00                   movq    (%r13), %rax
// 227: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000229:  R_X86_64_64  _JIT_TARGET
// 231: 89 c9                         movl    %ecx, %ecx
// 233: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 237: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 23d: eb 32                         jmp     0x271 <_JIT_ENTRY+0x271>
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _Py_Dealloc
// 249: 4c 89 e7                      movq    %r12, %rdi
// 24c: ff d0                         callq   *%rax
// 24e: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 252: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 257: 48 85 d2                      testq   %rdx, %rdx
// 25a: 0f 85 ca fe ff ff             jne     0x12a <_JIT_ENTRY+0x12a>
// 260: 4c 29 e8                      subq    %r13, %rax
// 263: 48 83 c0 b8                   addq    $-0x48, %rax
// 267: 48 c1 e8 03                   shrq    $0x3, %rax
// 26b: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 26f: 31 c0                         xorl    %eax, %eax
// 271: 48 83 c4 28                   addq    $0x28, %rsp
// 275: 5b                            popq    %rbx
// 276: 41 5c                         popq    %r12
// 278: 41 5d                         popq    %r13
// 27a: 41 5e                         popq    %r14
// 27c: 41 5f                         popq    %r15
// 27e: 5d                            popq    %rbp
// 27f: c3                            retq
// 280: 41 8b 47 10                   movl    0x10(%r15), %eax
// 284: 83 e0 03                      andl    $0x3, %eax
// 287: 83 f8 01                      cmpl    $0x1, %eax
// 28a: 75 0c                         jne     0x298 <_JIT_ENTRY+0x298>
// 28c: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000028e:  R_X86_64_64  _Py_FalseStruct
// 296: eb 57                         jmp     0x2ef <_JIT_ENTRY+0x2ef>
// 298: 49 8b 07                      movq    (%r15), %rax
// 29b: 48 85 c0                      testq   %rax, %rax
// 29e: 7f 21                         jg      0x2c1 <_JIT_ENTRY+0x2c1>
// 2a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a2:  R_X86_64_64  .rodata.str1.1
// 2aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ac:  R_X86_64_64  _Py_NegativeRefcount
// 2b4: be a0 00 00 00                movl    $0xa0, %esi
// 2b9: 4c 89 fa                      movq    %r15, %rdx
// 2bc: ff d0                         callq   *%rax
// 2be: 49 8b 07                      movq    (%r15), %rax
// 2c1: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000002c3:  R_X86_64_64  _Py_TrueStruct
// 2cb: 85 c0                         testl   %eax, %eax
// 2cd: 78 20                         js      0x2ef <_JIT_ENTRY+0x2ef>
// 2cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d9: ff d0                         callq   *%rax
// 2db: 49 ff 0f                      decq    (%r15)
// 2de: 75 0f                         jne     0x2ef <_JIT_ENTRY+0x2ef>
// 2e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e2:  R_X86_64_64  _Py_Dealloc
// 2ea: 4c 89 ff                      movq    %r15, %rdi
// 2ed: ff d0                         callq   *%rax
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  _JIT_OPARG
// 2f9: f7 d0                         notl    %eax
// 2fb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 300: 48 98                         cltq
// 302: 49 89 5c c6 f8                movq    %rbx, -0x8(%r14,%rax,8)
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  _JIT_CONTINUE
// 311: 4c 89 ef                      movq    %r13, %rdi
// 314: 4c 89 e6                      movq    %r12, %rsi
// 317: 48 89 ea                      movq    %rbp, %rdx
// 31a: 48 83 c4 28                   addq    $0x28, %rsp
// 31e: 5b                            popq    %rbx
// 31f: 41 5c                         popq    %r12
// 321: 41 5d                         popq    %r13
// 323: 41 5e                         popq    %r14
// 325: 41 5f                         popq    %r15
// 327: 5d                            popq    %rbp
// 328: ff e0                         jmpq    *%rax
// 32a: 
static const unsigned char _CALL_BUILTIN_CLASSplus_TO_BOOL_INT_code_body[811] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xaa, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x99, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x27, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x36, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8e, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0xfd, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfb, 0x31, 0xdb, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x7c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x47, 0x08, 0x74, 0x6f, 0x4d, 0x89, 0xe6, 0x4d, 0x29, 0xee, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x75, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x85, 0xca, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x8b, 0x47, 0x10, 0x83, 0xe0, 0x03, 0x83, 0xf8, 0x01, 0x75, 0x0c, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x57, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x5c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_TO_BOOL_INT_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_TO_BOOL_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_TO_BOOL_INT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_TO_BOOL_LIST
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_TO_BOOL_LIST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 fd                      movq    %rdi, %r13
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 aa 01 00 00             je      0x214 <_JIT_ENTRY+0x214>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 99 01 00 00             je      0x214 <_JIT_ENTRY+0x214>
// 7b: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 80: 4c 89 0c 24                   movq    %r9, (%rsp)
// 84: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 89: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 8e: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 41 0f 94 c7                   sete    %r15b
// 99: 89 da                         movl    %ebx, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 9f 00 00 00             je      0x163 <_JIT_ENTRY+0x163>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// d0: 7f 22                         jg      0xf4 <_JIT_ENTRY+0xf4>
// d2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d4:  R_X86_64_64  .rodata.str1.1
// dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000de:  R_X86_64_64  _Py_NegativeRefcount
// e6: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// eb: 4c 89 e2                      movq    %r12, %rdx
// ee: ff d0                         callq   *%rax
// f0: 49 8b 04 24                   movq    (%r12), %rax
// f4: 85 c0                         testl   %eax, %eax
// f6: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// fb: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 100: 78 16                         js      0x118 <_JIT_ENTRY+0x118>
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10c: ff d0                         callq   *%rax
// 10e: 49 ff 0c 24                   decq    (%r12)
// 112: 0f 84 27 01 00 00             je      0x23f <_JIT_ENTRY+0x23f>
// 118: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 11c: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 121: 48 85 d2                      testq   %rdx, %rdx
// 124: 0f 84 36 01 00 00             je      0x260 <_JIT_ENTRY+0x260>
// 12a: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12e: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 132: 48 89 10                      movq    %rdx, (%rax)
// 135: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 139: 48 8b 00                      movq    (%rax), %rax
// 13c: 84 c0                         testb   %al, %al
// 13e: 0f 84 a5 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_HandlePending
// 14e: 48 89 ef                      movq    %rbp, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 84 8e 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 15b: 4c 89 e0                      movq    %r12, %rax
// 15e: e9 fd 00 00 00                jmp     0x260 <_JIT_ENTRY+0x260>
// 163: 83 fb 02                      cmpl    $0x2, %ebx
// 166: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 16c: 44 0f 43 fb                   cmovael %ebx, %r15d
// 170: 31 db                         xorl    %ebx, %ebx
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 48 ff c3                      incq    %rbx
// 183: 49 39 df                      cmpq    %rbx, %r15
// 186: 0f 84 38 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 18c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 191: 49 8b 45 00                   movq    (%r13), %rax
// 195: 48 85 c0                      testq   %rax, %rax
// 198: 7e 06                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 78 e2                         js      0x180 <_JIT_ENTRY+0x180>
// 19e: eb 26                         jmp     0x1c6 <_JIT_ENTRY+0x1c6>
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 ea                      movq    %r13, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 45 00                   movq    (%r13), %rax
// 1c2: 85 c0                         testl   %eax, %eax
// 1c4: 78 ba                         js      0x180 <_JIT_ENTRY+0x180>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d0: ff d0                         callq   *%rax
// 1d2: 49 ff 4d 00                   decq    (%r13)
// 1d6: 75 a8                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d8: 4c 89 ef                      movq    %r13, %rdi
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_Dealloc
// 1e5: ff d0                         callq   *%rax
// 1e7: eb 97                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_OPARG
// 1f3: f7 d0                         notl    %eax
// 1f5: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1fa: 48 98                         cltq
// 1fc: 4d 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %r15
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  PyList_Type
// 20b: 49 39 47 08                   cmpq    %rax, 0x8(%r15)
// 20f: 74 6f                         je      0x280 <_JIT_ENTRY+0x280>
// 211: 4d 89 e6                      movq    %r12, %r14
// 214: 4d 29 ee                      subq    %r13, %r14
// 217: 49 83 c6 b8                   addq    $-0x48, %r14
// 21b: 49 c1 ee 03                   shrq    $0x3, %r14
// 21f: 45 89 75 40                   movl    %r14d, 0x40(%r13)
// 223: 49 8b 45 00                   movq    (%r13), %rax
// 227: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000229:  R_X86_64_64  _JIT_TARGET
// 231: 89 c9                         movl    %ecx, %ecx
// 233: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 237: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 23d: eb 32                         jmp     0x271 <_JIT_ENTRY+0x271>
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _Py_Dealloc
// 249: 4c 89 e7                      movq    %r12, %rdi
// 24c: ff d0                         callq   *%rax
// 24e: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 252: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 257: 48 85 d2                      testq   %rdx, %rdx
// 25a: 0f 85 ca fe ff ff             jne     0x12a <_JIT_ENTRY+0x12a>
// 260: 4c 29 e8                      subq    %r13, %rax
// 263: 48 83 c0 b8                   addq    $-0x48, %rax
// 267: 48 c1 e8 03                   shrq    $0x3, %rax
// 26b: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 26f: 31 c0                         xorl    %eax, %eax
// 271: 48 83 c4 28                   addq    $0x28, %rsp
// 275: 5b                            popq    %rbx
// 276: 41 5c                         popq    %r12
// 278: 41 5d                         popq    %r13
// 27a: 41 5e                         popq    %r14
// 27c: 41 5f                         popq    %r15
// 27e: 5d                            popq    %rbp
// 27f: c3                            retq
// 280: 49 8b 07                      movq    (%r15), %rax
// 283: 49 8b 5f 10                   movq    0x10(%r15), %rbx
// 287: 48 85 c0                      testq   %rax, %rax
// 28a: 7f 21                         jg      0x2ad <_JIT_ENTRY+0x2ad>
// 28c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028e:  R_X86_64_64  .rodata.str1.1
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _Py_NegativeRefcount
// 2a0: be ae 00 00 00                movl    $0xae, %esi
// 2a5: 4c 89 fa                      movq    %r15, %rdx
// 2a8: ff d0                         callq   *%rax
// 2aa: 49 8b 07                      movq    (%r15), %rax
// 2ad: 85 c0                         testl   %eax, %eax
// 2af: 78 20                         js      0x2d1 <_JIT_ENTRY+0x2d1>
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2bb: ff d0                         callq   *%rax
// 2bd: 49 ff 0f                      decq    (%r15)
// 2c0: 75 0f                         jne     0x2d1 <_JIT_ENTRY+0x2d1>
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_Dealloc
// 2cc: 4c 89 ff                      movq    %r15, %rdi
// 2cf: ff d0                         callq   *%rax
// 2d1: 48 85 db                      testq   %rbx, %rbx
// 2d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d6:  R_X86_64_64  _Py_FalseStruct
// 2de: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002e0:  R_X86_64_64  _Py_TrueStruct
// 2e8: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  _JIT_OPARG
// 2f6: f7 d0                         notl    %eax
// 2f8: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2fd: 48 98                         cltq
// 2ff: 49 89 4c c6 f8                movq    %rcx, -0x8(%r14,%rax,8)
// 304: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000306:  R_X86_64_64  _JIT_CONTINUE
// 30e: 4c 89 ef                      movq    %r13, %rdi
// 311: 4c 89 e6                      movq    %r12, %rsi
// 314: 48 89 ea                      movq    %rbp, %rdx
// 317: 48 83 c4 28                   addq    $0x28, %rsp
// 31b: 5b                            popq    %rbx
// 31c: 41 5c                         popq    %r12
// 31e: 41 5d                         popq    %r13
// 320: 41 5e                         popq    %r14
// 322: 41 5f                         popq    %r15
// 324: 5d                            popq    %rbp
// 325: ff e0                         jmpq    *%rax
// 327: 
static const unsigned char _CALL_BUILTIN_CLASSplus_TO_BOOL_LIST_code_body[808] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xaa, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x99, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x27, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x36, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8e, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0xfd, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfb, 0x31, 0xdb, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x7c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x47, 0x08, 0x74, 0x6f, 0x4d, 0x89, 0xe6, 0x4d, 0x29, 0xee, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x75, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x85, 0xca, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x07, 0x49, 0x8b, 0x5f, 0x10, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xdb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x4c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_TO_BOOL_LIST_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x306, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_TO_BOOL_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_TO_BOOL_LIST_data_holes[1];

// _CALL_BUILTIN_CLASSplus_TO_BOOL_NONE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_TO_BOOL_NONE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 45 8d 78 01                   leal    0x1(%r8), %r15d
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 45 0f 44 f8                   cmovel  %r8d, %r15d
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 c8 01 00 00             je      0x232 <_JIT_ENTRY+0x232>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 b7 01 00 00             je      0x232 <_JIT_ENTRY+0x232>
// 7b: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 80: 4c 89 0c 24                   movq    %r9, (%rsp)
// 84: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 89: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 8e: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 0f 94 c3                      sete    %bl
// 98: 44 89 fa                      movl    %r15d, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 84 c3                         testb   %al, %bl
// bd: 74 24                         je      0xe3 <_JIT_ENTRY+0xe3>
// bf: 49 8b 04 24                   movq    (%r12), %rax
// c3: 48 85 c0                      testq   %rax, %rax
// c6: 0f 8e 9d 00 00 00             jle     0x169 <_JIT_ENTRY+0x169>
// cc: 85 c0                         testl   %eax, %eax
// ce: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// d3: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// d8: 0f 89 bb 00 00 00             jns     0x199 <_JIT_ENTRY+0x199>
// de: e9 d7 00 00 00                jmp     0x1ba <_JIT_ENTRY+0x1ba>
// e3: 41 83 ff 02                   cmpl    $0x2, %r15d
// e7: bb 01 00 00 00                movl    $0x1, %ebx
// ec: 41 0f 43 df                   cmovael %r15d, %ebx
// f0: 45 31 ff                      xorl    %r15d, %r15d
// f3: eb 13                         jmp     0x108 <_JIT_ENTRY+0x108>
// f5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 100: 49 ff c7                      incq    %r15
// 103: 4c 39 fb                      cmpq    %r15, %rbx
// 106: 74 b7                         je      0xbf <_JIT_ENTRY+0xbf>
// 108: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 10d: 49 8b 45 00                   movq    (%r13), %rax
// 111: 48 85 c0                      testq   %rax, %rax
// 114: 7e 0a                         jle     0x120 <_JIT_ENTRY+0x120>
// 116: 85 c0                         testl   %eax, %eax
// 118: 78 e6                         js      0x100 <_JIT_ENTRY+0x100>
// 11a: eb 2a                         jmp     0x146 <_JIT_ENTRY+0x146>
// 11c: 0f 1f 40 00                   nopl    (%rax)
// 120: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000122:  R_X86_64_64  .rodata.str1.1
// 12a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 12f: 4c 89 ea                      movq    %r13, %rdx
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _Py_NegativeRefcount
// 13c: ff d0                         callq   *%rax
// 13e: 49 8b 45 00                   movq    (%r13), %rax
// 142: 85 c0                         testl   %eax, %eax
// 144: 78 ba                         js      0x100 <_JIT_ENTRY+0x100>
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 150: ff d0                         callq   *%rax
// 152: 49 ff 4d 00                   decq    (%r13)
// 156: 75 a8                         jne     0x100 <_JIT_ENTRY+0x100>
// 158: 4c 89 ef                      movq    %r13, %rdi
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_Dealloc
// 165: ff d0                         callq   *%rax
// 167: eb 97                         jmp     0x100 <_JIT_ENTRY+0x100>
// 169: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000016b:  R_X86_64_64  .rodata.str1.1
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_NegativeRefcount
// 17d: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 182: 4c 89 e2                      movq    %r12, %rdx
// 185: ff d0                         callq   *%rax
// 187: 49 8b 04 24                   movq    (%r12), %rax
// 18b: 85 c0                         testl   %eax, %eax
// 18d: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 192: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 197: 78 21                         js      0x1ba <_JIT_ENTRY+0x1ba>
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 ff 0c 24                   decq    (%r12)
// 1a9: 75 0f                         jne     0x1ba <_JIT_ENTRY+0x1ba>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_Dealloc
// 1b5: 4c 89 e7                      movq    %r12, %rdi
// 1b8: ff d0                         callq   *%rax
// 1ba: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1bf: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1c3: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1c8: 48 85 d2                      testq   %rdx, %rdx
// 1cb: 74 2c                         je      0x1f9 <_JIT_ENTRY+0x1f9>
// 1cd: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1d1: 4d 8d 3c ce                   leaq    (%r14,%rcx,8), %r15
// 1d5: 48 89 10                      movq    %rdx, (%rax)
// 1d8: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1dc: 48 8b 00                      movq    (%rax), %rax
// 1df: 84 c0                         testb   %al, %al
// 1e1: 74 28                         je      0x20b <_JIT_ENTRY+0x20b>
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _Py_HandlePending
// 1ed: 4c 89 ef                      movq    %r13, %rdi
// 1f0: ff d0                         callq   *%rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 74 15                         je      0x20b <_JIT_ENTRY+0x20b>
// 1f6: 4c 89 f8                      movq    %r15, %rax
// 1f9: 48 29 d8                      subq    %rbx, %rax
// 1fc: 48 83 c0 b8                   addq    $-0x48, %rax
// 200: 48 c1 e8 03                   shrq    $0x3, %rax
// 204: 89 43 40                      movl    %eax, 0x40(%rbx)
// 207: 31 c0                         xorl    %eax, %eax
// 209: eb 4f                         jmp     0x25a <_JIT_ENTRY+0x25a>
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _JIT_OPARG
// 215: f7 d0                         notl    %eax
// 217: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21c: 48 98                         cltq
// 21e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000220:  R_X86_64_64  _Py_NoneStruct
// 228: 49 39 4c c6 f8                cmpq    %rcx, -0x8(%r14,%rax,8)
// 22d: 74 3a                         je      0x269 <_JIT_ENTRY+0x269>
// 22f: 4d 89 fe                      movq    %r15, %r14
// 232: 49 29 de                      subq    %rbx, %r14
// 235: 49 83 c6 b8                   addq    $-0x48, %r14
// 239: 49 c1 ee 03                   shrq    $0x3, %r14
// 23d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 241: 48 8b 03                      movq    (%rbx), %rax
// 244: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000246:  R_X86_64_64  _JIT_TARGET
// 24e: 89 c9                         movl    %ecx, %ecx
// 250: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 254: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 25a: 48 83 c4 28                   addq    $0x28, %rsp
// 25e: 5b                            popq    %rbx
// 25f: 41 5c                         popq    %r12
// 261: 41 5d                         popq    %r13
// 263: 41 5e                         popq    %r14
// 265: 41 5f                         popq    %r15
// 267: 5d                            popq    %rbp
// 268: c3                            retq
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _JIT_OPARG
// 273: f7 d0                         notl    %eax
// 275: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 27a: 48 98                         cltq
// 27c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027e:  R_X86_64_64  _Py_FalseStruct
// 286: 49 89 4c c6 f8                movq    %rcx, -0x8(%r14,%rax,8)
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _JIT_CONTINUE
// 295: 48 89 df                      movq    %rbx, %rdi
// 298: 4c 89 fe                      movq    %r15, %rsi
// 29b: 4c 89 ea                      movq    %r13, %rdx
// 29e: 48 83 c4 28                   addq    $0x28, %rsp
// 2a2: 5b                            popq    %rbx
// 2a3: 41 5c                         popq    %r12
// 2a5: 41 5d                         popq    %r13
// 2a7: 41 5e                         popq    %r14
// 2a9: 41 5f                         popq    %r15
// 2ab: 5d                            popq    %rbp
// 2ac: ff e0                         jmpq    *%rax
// 2ae: 
static const unsigned char _CALL_BUILTIN_CLASSplus_TO_BOOL_NONE_code_body[687] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x45, 0x8d, 0x78, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xc8, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xb7, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x74, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x9d, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x0f, 0x89, 0xbb, 0x00, 0x00, 0x00, 0xe9, 0xd7, 0x00, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdf, 0x45, 0x31, 0xff, 0xeb, 0x13, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x74, 0xb7, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x85, 0xc0, 0x78, 0xe6, 0xeb, 0x2a, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x2c, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x15, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0x4f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc6, 0xf8, 0x74, 0x3a, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x4c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_TO_BOOL_NONE_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_TO_BOOL_NONE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_TO_BOOL_NONE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_TO_BOOL_STR
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_TO_BOOL_STR.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 fd                      movq    %rdi, %r13
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 aa 01 00 00             je      0x214 <_JIT_ENTRY+0x214>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 99 01 00 00             je      0x214 <_JIT_ENTRY+0x214>
// 7b: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 80: 4c 89 0c 24                   movq    %r9, (%rsp)
// 84: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 89: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 8e: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 41 0f 94 c7                   sete    %r15b
// 99: 89 da                         movl    %ebx, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 9f 00 00 00             je      0x163 <_JIT_ENTRY+0x163>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// d0: 7f 22                         jg      0xf4 <_JIT_ENTRY+0xf4>
// d2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d4:  R_X86_64_64  .rodata.str1.1
// dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000de:  R_X86_64_64  _Py_NegativeRefcount
// e6: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// eb: 4c 89 e2                      movq    %r12, %rdx
// ee: ff d0                         callq   *%rax
// f0: 49 8b 04 24                   movq    (%r12), %rax
// f4: 85 c0                         testl   %eax, %eax
// f6: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// fb: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 100: 78 16                         js      0x118 <_JIT_ENTRY+0x118>
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10c: ff d0                         callq   *%rax
// 10e: 49 ff 0c 24                   decq    (%r12)
// 112: 0f 84 27 01 00 00             je      0x23f <_JIT_ENTRY+0x23f>
// 118: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 11c: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 121: 48 85 d2                      testq   %rdx, %rdx
// 124: 0f 84 36 01 00 00             je      0x260 <_JIT_ENTRY+0x260>
// 12a: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12e: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 132: 48 89 10                      movq    %rdx, (%rax)
// 135: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 139: 48 8b 00                      movq    (%rax), %rax
// 13c: 84 c0                         testb   %al, %al
// 13e: 0f 84 a5 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_HandlePending
// 14e: 48 89 ef                      movq    %rbp, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 84 8e 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 15b: 4c 89 e0                      movq    %r12, %rax
// 15e: e9 fd 00 00 00                jmp     0x260 <_JIT_ENTRY+0x260>
// 163: 83 fb 02                      cmpl    $0x2, %ebx
// 166: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 16c: 44 0f 43 fb                   cmovael %ebx, %r15d
// 170: 31 db                         xorl    %ebx, %ebx
// 172: eb 18                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 174: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 180: 48 ff c3                      incq    %rbx
// 183: 49 39 df                      cmpq    %rbx, %r15
// 186: 0f 84 38 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 18c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 191: 49 8b 45 00                   movq    (%r13), %rax
// 195: 48 85 c0                      testq   %rax, %rax
// 198: 7e 06                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 78 e2                         js      0x180 <_JIT_ENTRY+0x180>
// 19e: eb 26                         jmp     0x1c6 <_JIT_ENTRY+0x1c6>
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1af: 4c 89 ea                      movq    %r13, %rdx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 45 00                   movq    (%r13), %rax
// 1c2: 85 c0                         testl   %eax, %eax
// 1c4: 78 ba                         js      0x180 <_JIT_ENTRY+0x180>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d0: ff d0                         callq   *%rax
// 1d2: 49 ff 4d 00                   decq    (%r13)
// 1d6: 75 a8                         jne     0x180 <_JIT_ENTRY+0x180>
// 1d8: 4c 89 ef                      movq    %r13, %rdi
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_Dealloc
// 1e5: ff d0                         callq   *%rax
// 1e7: eb 97                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_OPARG
// 1f3: f7 d0                         notl    %eax
// 1f5: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1fa: 48 98                         cltq
// 1fc: 4d 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %r15
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  PyUnicode_Type
// 20b: 49 39 47 08                   cmpq    %rax, 0x8(%r15)
// 20f: 74 6f                         je      0x280 <_JIT_ENTRY+0x280>
// 211: 4d 89 e6                      movq    %r12, %r14
// 214: 4d 29 ee                      subq    %r13, %r14
// 217: 49 83 c6 b8                   addq    $-0x48, %r14
// 21b: 49 c1 ee 03                   shrq    $0x3, %r14
// 21f: 45 89 75 40                   movl    %r14d, 0x40(%r13)
// 223: 49 8b 45 00                   movq    (%r13), %rax
// 227: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000229:  R_X86_64_64  _JIT_TARGET
// 231: 89 c9                         movl    %ecx, %ecx
// 233: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 237: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 23d: eb 32                         jmp     0x271 <_JIT_ENTRY+0x271>
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _Py_Dealloc
// 249: 4c 89 e7                      movq    %r12, %rdi
// 24c: ff d0                         callq   *%rax
// 24e: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 252: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 257: 48 85 d2                      testq   %rdx, %rdx
// 25a: 0f 85 ca fe ff ff             jne     0x12a <_JIT_ENTRY+0x12a>
// 260: 4c 29 e8                      subq    %r13, %rax
// 263: 48 83 c0 b8                   addq    $-0x48, %rax
// 267: 48 c1 e8 03                   shrq    $0x3, %rax
// 26b: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 26f: 31 c0                         xorl    %eax, %eax
// 271: 48 83 c4 28                   addq    $0x28, %rsp
// 275: 5b                            popq    %rbx
// 276: 41 5c                         popq    %r12
// 278: 41 5d                         popq    %r13
// 27a: 41 5e                         popq    %r14
// 27c: 41 5f                         popq    %r15
// 27e: 5d                            popq    %rbp
// 27f: c3                            retq
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _PyRuntime
// 28a: 48 05 00 a1 00 00             addq    $0xa100, %rax           # imm = 0xA100
// 290: 49 39 c7                      cmpq    %rax, %r15
// 293: 74 59                         je      0x2ee <_JIT_ENTRY+0x2ee>
// 295: 49 8b 07                      movq    (%r15), %rax
// 298: 48 85 c0                      testq   %rax, %rax
// 29b: 7f 21                         jg      0x2be <_JIT_ENTRY+0x2be>
// 29d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029f:  R_X86_64_64  .rodata.str1.1
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _Py_NegativeRefcount
// 2b1: be cb 00 00 00                movl    $0xcb, %esi
// 2b6: 4c 89 fa                      movq    %r15, %rdx
// 2b9: ff d0                         callq   *%rax
// 2bb: 49 8b 07                      movq    (%r15), %rax
// 2be: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000002c0:  R_X86_64_64  _Py_TrueStruct
// 2c8: 85 c0                         testl   %eax, %eax
// 2ca: 78 2c                         js      0x2f8 <_JIT_ENTRY+0x2f8>
// 2cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ce:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d6: ff d0                         callq   *%rax
// 2d8: 49 ff 0f                      decq    (%r15)
// 2db: 75 1b                         jne     0x2f8 <_JIT_ENTRY+0x2f8>
// 2dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002df:  R_X86_64_64  _Py_Dealloc
// 2e7: 4c 89 ff                      movq    %r15, %rdi
// 2ea: ff d0                         callq   *%rax
// 2ec: eb 0a                         jmp     0x2f8 <_JIT_ENTRY+0x2f8>
// 2ee: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000002f0:  R_X86_64_64  _Py_FalseStruct
// 2f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fa:  R_X86_64_64  _JIT_OPARG
// 302: f7 d0                         notl    %eax
// 304: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 309: 48 98                         cltq
// 30b: 49 89 5c c6 f8                movq    %rbx, -0x8(%r14,%rax,8)
// 310: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000312:  R_X86_64_64  _JIT_CONTINUE
// 31a: 4c 89 ef                      movq    %r13, %rdi
// 31d: 4c 89 e6                      movq    %r12, %rsi
// 320: 48 89 ea                      movq    %rbp, %rdx
// 323: 48 83 c4 28                   addq    $0x28, %rsp
// 327: 5b                            popq    %rbx
// 328: 41 5c                         popq    %r12
// 32a: 41 5d                         popq    %r13
// 32c: 41 5e                         popq    %r14
// 32e: 41 5f                         popq    %r15
// 330: 5d                            popq    %rbp
// 331: ff e0                         jmpq    *%rax
// 333: 
static const unsigned char _CALL_BUILTIN_CLASSplus_TO_BOOL_STR_code_body[820] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xaa, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x99, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x27, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x36, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8e, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0xfd, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfb, 0x31, 0xdb, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x7c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x47, 0x08, 0x74, 0x6f, 0x4d, 0x89, 0xe6, 0x4d, 0x29, 0xee, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x75, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x85, 0xca, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x05, 0x00, 0xa1, 0x00, 0x00, 0x49, 0x39, 0xc7, 0x74, 0x59, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x0a, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x5c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_TO_BOOL_STR_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x312, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_TO_BOOL_STR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_TO_BOOL_STR_data_holes[1];

// _CALL_BUILTIN_CLASSplus_UNARY_INVERT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_UNARY_INVERT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f8 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e7 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 78: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 7d: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 82: 48 89 14 24                   movq    %rdx, (%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 cc 00 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// f2: 48 8b 1c 24                   movq    (%rsp), %rbx
// f6: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// fb: 78 16                         js      0x113 <_JIT_ENTRY+0x113>
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 107: ff d0                         callq   *%rax
// 109: 49 ff 0c 24                   decq    (%r12)
// 10d: 0f 84 a5 01 00 00             je      0x2b8 <_JIT_ENTRY+0x2b8>
// 113: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 118: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 11c: 4d 85 f6                      testq   %r14, %r14
// 11f: 0f 84 b4 01 00 00             je      0x2d9 <_JIT_ENTRY+0x2d9>
// 125: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 12a: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 12e: 4c 89 30                      movq    %r14, (%rax)
// 131: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 0f 84 c9 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_HandlePending
// 14a: 48 89 df                      movq    %rbx, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 0f 84 b2 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 157: 4c 89 e0                      movq    %r12, %rax
// 15a: e9 7a 01 00 00                jmp     0x2d9 <_JIT_ENTRY+0x2d9>
// 15f: 49 29 ff                      subq    %rdi, %r15
// 162: 49 83 c7 b8                   addq    $-0x48, %r15
// 166: 49 c1 ef 03                   shrq    $0x3, %r15
// 16a: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 16e: 48 8b 07                      movq    (%rdi), %rax
// 171: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000173:  R_X86_64_64  _JIT_TARGET
// 17b: 89 c9                         movl    %ecx, %ecx
// 17d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 181: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 187: e9 5d 01 00 00                jmp     0x2e9 <_JIT_ENTRY+0x2e9>
// 18c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 190: 41 be 01 00 00 00             movl    $0x1, %r14d
// 196: 45 0f 43 f5                   cmovael %r13d, %r14d
// 19a: 31 db                         xorl    %ebx, %ebx
// 19c: eb 0e                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19e: 66 90                         nop
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 de                      cmpq    %rbx, %r14
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 63 d8                      movslq  %eax, %rbx
// 21d: 4d 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %r13
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  PyNumber_Invert
// 22c: 4c 89 ef                      movq    %r13, %rdi
// 22f: ff d0                         callq   *%rax
// 231: 49 89 c6                      movq    %rax, %r14
// 234: 49 8b 45 00                   movq    (%r13), %rax
// 238: 48 85 c0                      testq   %rax, %rax
// 23b: 7f 22                         jg      0x25f <_JIT_ENTRY+0x25f>
// 23d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023f:  R_X86_64_64  .rodata.str1.1
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _Py_NegativeRefcount
// 251: be e6 00 00 00                movl    $0xe6, %esi
// 256: 4c 89 ea                      movq    %r13, %rdx
// 259: ff d0                         callq   *%rax
// 25b: 49 8b 45 00                   movq    (%r13), %rax
// 25f: 85 c0                         testl   %eax, %eax
// 261: 78 21                         js      0x284 <_JIT_ENTRY+0x284>
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26d: ff d0                         callq   *%rax
// 26f: 49 ff 4d 00                   decq    (%r13)
// 273: 75 0f                         jne     0x284 <_JIT_ENTRY+0x284>
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  _Py_Dealloc
// 27f: 4c 89 ef                      movq    %r13, %rdi
// 282: ff d0                         callq   *%rax
// 284: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 288: 48 83 c0 f8                   addq    $-0x8, %rax
// 28c: 4d 85 f6                      testq   %r14, %r14
// 28f: 74 48                         je      0x2d9 <_JIT_ENTRY+0x2d9>
// 291: 4c 89 30                      movq    %r14, (%rax)
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _JIT_CONTINUE
// 29e: 48 89 ef                      movq    %rbp, %rdi
// 2a1: 4c 89 e6                      movq    %r12, %rsi
// 2a4: 48 8b 14 24                   movq    (%rsp), %rdx
// 2a8: 48 83 c4 28                   addq    $0x28, %rsp
// 2ac: 5b                            popq    %rbx
// 2ad: 41 5c                         popq    %r12
// 2af: 41 5d                         popq    %r13
// 2b1: 41 5e                         popq    %r14
// 2b3: 41 5f                         popq    %r15
// 2b5: 5d                            popq    %rbp
// 2b6: ff e0                         jmpq    *%rax
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _Py_Dealloc
// 2c2: 4c 89 e7                      movq    %r12, %rdi
// 2c5: ff d0                         callq   *%rax
// 2c7: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 2cc: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 2d0: 4d 85 f6                      testq   %r14, %r14
// 2d3: 0f 85 4c fe ff ff             jne     0x125 <_JIT_ENTRY+0x125>
// 2d9: 48 29 e8                      subq    %rbp, %rax
// 2dc: 48 83 c0 b8                   addq    $-0x48, %rax
// 2e0: 48 c1 e8 03                   shrq    $0x3, %rax
// 2e4: 89 45 40                      movl    %eax, 0x40(%rbp)
// 2e7: 31 c0                         xorl    %eax, %eax
// 2e9: 48 83 c4 28                   addq    $0x28, %rsp
// 2ed: 5b                            popq    %rbx
// 2ee: 41 5c                         popq    %r12
// 2f0: 41 5d                         popq    %r13
// 2f2: 41 5e                         popq    %r14
// 2f4: 41 5f                         popq    %r15
// 2f6: 5d                            popq    %rbp
// 2f7: c3                            retq
// 2f8: 
static const unsigned char _CALL_BUILTIN_CLASSplus_UNARY_INVERT_code_body[761] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xa5, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0xb4, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x30, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x7a, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x5d, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xdf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc6, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x83, 0xc0, 0xf8, 0x4d, 0x85, 0xf6, 0x74, 0x48, 0x4c, 0x89, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xf6, 0x0f, 0x85, 0x4c, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_UNARY_INVERT_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Invert, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_UNARY_INVERT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_UNARY_INVERT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_UNARY_NEGATIVE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_UNARY_NEGATIVE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f8 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e7 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 78: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 7d: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 82: 48 89 14 24                   movq    %rdx, (%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 cc 00 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// f2: 48 8b 1c 24                   movq    (%rsp), %rbx
// f6: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// fb: 78 16                         js      0x113 <_JIT_ENTRY+0x113>
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 107: ff d0                         callq   *%rax
// 109: 49 ff 0c 24                   decq    (%r12)
// 10d: 0f 84 a5 01 00 00             je      0x2b8 <_JIT_ENTRY+0x2b8>
// 113: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 118: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 11c: 4d 85 f6                      testq   %r14, %r14
// 11f: 0f 84 b4 01 00 00             je      0x2d9 <_JIT_ENTRY+0x2d9>
// 125: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 12a: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 12e: 4c 89 30                      movq    %r14, (%rax)
// 131: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 0f 84 c9 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_HandlePending
// 14a: 48 89 df                      movq    %rbx, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 0f 84 b2 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 157: 4c 89 e0                      movq    %r12, %rax
// 15a: e9 7a 01 00 00                jmp     0x2d9 <_JIT_ENTRY+0x2d9>
// 15f: 49 29 ff                      subq    %rdi, %r15
// 162: 49 83 c7 b8                   addq    $-0x48, %r15
// 166: 49 c1 ef 03                   shrq    $0x3, %r15
// 16a: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 16e: 48 8b 07                      movq    (%rdi), %rax
// 171: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000173:  R_X86_64_64  _JIT_TARGET
// 17b: 89 c9                         movl    %ecx, %ecx
// 17d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 181: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 187: e9 5d 01 00 00                jmp     0x2e9 <_JIT_ENTRY+0x2e9>
// 18c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 190: 41 be 01 00 00 00             movl    $0x1, %r14d
// 196: 45 0f 43 f5                   cmovael %r13d, %r14d
// 19a: 31 db                         xorl    %ebx, %ebx
// 19c: eb 0e                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19e: 66 90                         nop
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 de                      cmpq    %rbx, %r14
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1b1: 49 8b 45 00                   movq    (%r13), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 e2                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1be: eb 26                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 ba                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 75 a8                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: ff d0                         callq   *%rax
// 207: eb 97                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 63 d8                      movslq  %eax, %rbx
// 21d: 4d 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %r13
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  PyNumber_Negative
// 22c: 4c 89 ef                      movq    %r13, %rdi
// 22f: ff d0                         callq   *%rax
// 231: 49 89 c6                      movq    %rax, %r14
// 234: 49 8b 45 00                   movq    (%r13), %rax
// 238: 48 85 c0                      testq   %rax, %rax
// 23b: 7f 22                         jg      0x25f <_JIT_ENTRY+0x25f>
// 23d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023f:  R_X86_64_64  .rodata.str1.1
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _Py_NegativeRefcount
// 251: be 71 00 00 00                movl    $0x71, %esi
// 256: 4c 89 ea                      movq    %r13, %rdx
// 259: ff d0                         callq   *%rax
// 25b: 49 8b 45 00                   movq    (%r13), %rax
// 25f: 85 c0                         testl   %eax, %eax
// 261: 78 21                         js      0x284 <_JIT_ENTRY+0x284>
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26d: ff d0                         callq   *%rax
// 26f: 49 ff 4d 00                   decq    (%r13)
// 273: 75 0f                         jne     0x284 <_JIT_ENTRY+0x284>
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  _Py_Dealloc
// 27f: 4c 89 ef                      movq    %r13, %rdi
// 282: ff d0                         callq   *%rax
// 284: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 288: 48 83 c0 f8                   addq    $-0x8, %rax
// 28c: 4d 85 f6                      testq   %r14, %r14
// 28f: 74 48                         je      0x2d9 <_JIT_ENTRY+0x2d9>
// 291: 4c 89 30                      movq    %r14, (%rax)
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _JIT_CONTINUE
// 29e: 48 89 ef                      movq    %rbp, %rdi
// 2a1: 4c 89 e6                      movq    %r12, %rsi
// 2a4: 48 8b 14 24                   movq    (%rsp), %rdx
// 2a8: 48 83 c4 28                   addq    $0x28, %rsp
// 2ac: 5b                            popq    %rbx
// 2ad: 41 5c                         popq    %r12
// 2af: 41 5d                         popq    %r13
// 2b1: 41 5e                         popq    %r14
// 2b3: 41 5f                         popq    %r15
// 2b5: 5d                            popq    %rbp
// 2b6: ff e0                         jmpq    *%rax
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _Py_Dealloc
// 2c2: 4c 89 e7                      movq    %r12, %rdi
// 2c5: ff d0                         callq   *%rax
// 2c7: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 2cc: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 2d0: 4d 85 f6                      testq   %r14, %r14
// 2d3: 0f 85 4c fe ff ff             jne     0x125 <_JIT_ENTRY+0x125>
// 2d9: 48 29 e8                      subq    %rbp, %rax
// 2dc: 48 83 c0 b8                   addq    $-0x48, %rax
// 2e0: 48 c1 e8 03                   shrq    $0x3, %rax
// 2e4: 89 45 40                      movl    %eax, 0x40(%rbp)
// 2e7: 31 c0                         xorl    %eax, %eax
// 2e9: 48 83 c4 28                   addq    $0x28, %rsp
// 2ed: 5b                            popq    %rbx
// 2ee: 41 5c                         popq    %r12
// 2f0: 41 5d                         popq    %r13
// 2f2: 41 5e                         popq    %r14
// 2f4: 41 5f                         popq    %r15
// 2f6: 5d                            popq    %rbp
// 2f7: c3                            retq
// 2f8: 
static const unsigned char _CALL_BUILTIN_CLASSplus_UNARY_NEGATIVE_code_body[761] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xa5, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0xb4, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x30, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x7a, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x5d, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xdf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc6, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x83, 0xc0, 0xf8, 0x4d, 0x85, 0xf6, 0x74, 0x48, 0x4c, 0x89, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xf6, 0x0f, 0x85, 0x4c, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_UNARY_NEGATIVE_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Negative, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_UNARY_NEGATIVE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_UNARY_NEGATIVE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_UNARY_NOT
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_UNARY_NOT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 79 01                   leal    0x1(%r9), %r15d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 f9                   cmovel  %r9d, %r15d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 f8 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 e7 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 fa                      movl    %r15d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 cc 00 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// f2: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// f7: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// fc: 78 16                         js      0x114 <_JIT_ENTRY+0x114>
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 108: ff d0                         callq   *%rax
// 10a: 49 ff 0c 24                   decq    (%r12)
// 10e: 0f 84 4b 01 00 00             je      0x25f <_JIT_ENTRY+0x25f>
// 114: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 119: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 11d: 4d 85 ed                      testq   %r13, %r13
// 120: 0f 84 5a 01 00 00             je      0x280 <_JIT_ENTRY+0x280>
// 126: 48 8b 0c 24                   movq    (%rsp), %rcx
// 12a: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 12e: 4c 89 28                      movq    %r13, (%rax)
// 131: 49 8b 47 10                   movq    0x10(%r15), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 84 c0                         testb   %al, %al
// 13a: 0f 84 c7 00 00 00             je      0x207 <_JIT_ENTRY+0x207>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_HandlePending
// 14a: 4c 89 ff                      movq    %r15, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 0f 84 b0 00 00 00             je      0x207 <_JIT_ENTRY+0x207>
// 157: 4c 89 e0                      movq    %r12, %rax
// 15a: e9 21 01 00 00                jmp     0x280 <_JIT_ENTRY+0x280>
// 15f: 49 29 fe                      subq    %rdi, %r14
// 162: 49 83 c6 b8                   addq    $-0x48, %r14
// 166: 49 c1 ee 03                   shrq    $0x3, %r14
// 16a: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 16e: 48 8b 07                      movq    (%rdi), %rax
// 171: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000173:  R_X86_64_64  _JIT_TARGET
// 17b: 89 c9                         movl    %ecx, %ecx
// 17d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 181: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 187: e9 04 01 00 00                jmp     0x290 <_JIT_ENTRY+0x290>
// 18c: 41 83 ff 02                   cmpl    $0x2, %r15d
// 190: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 196: 45 0f 43 ef                   cmovael %r15d, %r13d
// 19a: 31 db                         xorl    %ebx, %ebx
// 19c: eb 0e                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 19e: 66 90                         nop
// 1a0: 48 ff c3                      incq    %rbx
// 1a3: 49 39 dd                      cmpq    %rbx, %r13
// 1a6: 0f 84 14 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1ac: 4c 8b 7c dd 00                movq    (%rbp,%rbx,8), %r15
// 1b1: 49 8b 07                      movq    (%r15), %rax
// 1b4: 48 85 c0                      testq   %rax, %rax
// 1b7: 7e 07                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1b9: 85 c0                         testl   %eax, %eax
// 1bb: 78 e3                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1bd: eb 26                         jmp     0x1e5 <_JIT_ENTRY+0x1e5>
// 1bf: 90                            nop
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1cf: 4c 89 fa                      movq    %r15, %rdx
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 07                      movq    (%r15), %rax
// 1e1: 85 c0                         testl   %eax, %eax
// 1e3: 78 bb                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ef: ff d0                         callq   *%rax
// 1f1: 49 ff 0f                      decq    (%r15)
// 1f4: 75 aa                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1f6: 4c 89 ff                      movq    %r15, %rdi
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_Dealloc
// 203: ff d0                         callq   *%rax
// 205: eb 99                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  _JIT_OPARG
// 211: f7 d0                         notl    %eax
// 213: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 218: 48 98                         cltq
// 21a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021c:  R_X86_64_64  _Py_FalseStruct
// 224: 49 39 4c c6 f8                cmpq    %rcx, -0x8(%r14,%rax,8)
// 229: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000022b:  R_X86_64_64  _Py_TrueStruct
// 233: 48 0f 45 d1                   cmovneq %rcx, %rdx
// 237: 49 89 54 c6 f8                movq    %rdx, -0x8(%r14,%rax,8)
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _JIT_CONTINUE
// 246: 48 89 df                      movq    %rbx, %rdi
// 249: 4c 89 e6                      movq    %r12, %rsi
// 24c: 4c 89 fa                      movq    %r15, %rdx
// 24f: 48 83 c4 28                   addq    $0x28, %rsp
// 253: 5b                            popq    %rbx
// 254: 41 5c                         popq    %r12
// 256: 41 5d                         popq    %r13
// 258: 41 5e                         popq    %r14
// 25a: 41 5f                         popq    %r15
// 25c: 5d                            popq    %rbp
// 25d: ff e0                         jmpq    *%rax
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _Py_Dealloc
// 269: 4c 89 e7                      movq    %r12, %rdi
// 26c: ff d0                         callq   *%rax
// 26e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 273: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 277: 4d 85 ed                      testq   %r13, %r13
// 27a: 0f 85 a6 fe ff ff             jne     0x126 <_JIT_ENTRY+0x126>
// 280: 48 29 d8                      subq    %rbx, %rax
// 283: 48 83 c0 b8                   addq    $-0x48, %rax
// 287: 48 c1 e8 03                   shrq    $0x3, %rax
// 28b: 89 43 40                      movl    %eax, 0x40(%rbx)
// 28e: 31 c0                         xorl    %eax, %eax
// 290: 48 83 c4 28                   addq    $0x28, %rsp
// 294: 5b                            popq    %rbx
// 295: 41 5c                         popq    %r12
// 297: 41 5d                         popq    %r13
// 299: 41 5e                         popq    %r14
// 29b: 41 5f                         popq    %r15
// 29d: 5d                            popq    %rbp
// 29e: c3                            retq
// 29f: 
static const unsigned char _CALL_BUILTIN_CLASSplus_UNARY_NOT_code_body[672] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x79, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x4b, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x21, 0x01, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x04, 0x01, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xef, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x7c, 0xdd, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc6, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x45, 0xd1, 0x49, 0x89, 0x54, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x0f, 0x85, 0xa6, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_UNARY_NOT_code_holes[17] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_UNARY_NOT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_UNARY_NOT_data_holes[1];

// _CALL_BUILTIN_CLASSplus_UNPACK_EX
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_UNPACK_EX.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 03 01 00 00             je      0x16a <_JIT_ENTRY+0x16a>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 f2 00 00 00             je      0x16a <_JIT_ENTRY+0x16a>
// 78: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 7d: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 82: 48 89 14 24                   movq    %rdx, (%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 d7 00 00 00             je      0x197 <_JIT_ENTRY+0x197>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 4c 8b 2c 24                   movq    (%rsp), %r13
// f1: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// f6: 78 21                         js      0x119 <_JIT_ENTRY+0x119>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 102: ff d0                         callq   *%rax
// 104: 49 ff 0c 24                   decq    (%r12)
// 108: 75 0f                         jne     0x119 <_JIT_ENTRY+0x119>
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: 4c 89 e7                      movq    %r12, %rdi
// 117: ff d0                         callq   *%rax
// 119: 49 8d 34 df                   leaq    (%r15,%rbx,8), %rsi
// 11d: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 122: 48 85 c9                      testq   %rcx, %rcx
// 125: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 12a: 0f 84 cb 01 00 00             je      0x2fb <_JIT_ENTRY+0x2fb>
// 130: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 135: 49 8d 1c c7                   leaq    (%r15,%rax,8), %rbx
// 139: 48 89 0e                      movq    %rcx, (%rsi)
// 13c: 49 8b 45 10                   movq    0x10(%r13), %rax
// 140: 48 8b 00                      movq    (%rax), %rax
// 143: 84 c0                         testb   %al, %al
// 145: 0f 84 ce 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_HandlePending
// 155: 4c 89 ef                      movq    %r13, %rdi
// 158: ff d0                         callq   *%rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 84 b7 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 162: 48 89 de                      movq    %rbx, %rsi
// 165: e9 91 01 00 00                jmp     0x2fb <_JIT_ENTRY+0x2fb>
// 16a: 49 29 ff                      subq    %rdi, %r15
// 16d: 49 83 c7 b8                   addq    $-0x48, %r15
// 171: 49 c1 ef 03                   shrq    $0x3, %r15
// 175: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 179: 48 8b 07                      movq    (%rdi), %rax
// 17c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017e:  R_X86_64_64  _JIT_TARGET
// 186: 89 c9                         movl    %ecx, %ecx
// 188: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 18c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 192: e9 75 01 00 00                jmp     0x30c <_JIT_ENTRY+0x30c>
// 197: 41 83 fd 02                   cmpl    $0x2, %r13d
// 19b: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1a1: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1a5: 31 db                         xorl    %ebx, %ebx
// 1a7: eb 13                         jmp     0x1bc <_JIT_ENTRY+0x1bc>
// 1a9: 0f 1f 80 00 00 00 00          nopl    (%rax)
// 1b0: 48 ff c3                      incq    %rbx
// 1b3: 49 39 de                      cmpq    %rbx, %r14
// 1b6: 0f 84 04 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1bc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1c1: 49 8b 45 00                   movq    (%r13), %rax
// 1c5: 48 85 c0                      testq   %rax, %rax
// 1c8: 7e 06                         jle     0x1d0 <_JIT_ENTRY+0x1d0>
// 1ca: 85 c0                         testl   %eax, %eax
// 1cc: 78 e2                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1ce: eb 26                         jmp     0x1f6 <_JIT_ENTRY+0x1f6>
// 1d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1
// 1da: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1df: 4c 89 ea                      movq    %r13, %rdx
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_NegativeRefcount
// 1ec: ff d0                         callq   *%rax
// 1ee: 49 8b 45 00                   movq    (%r13), %rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 78 ba                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 200: ff d0                         callq   *%rax
// 202: 49 ff 4d 00                   decq    (%r13)
// 206: 75 a8                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 208: 4c 89 ef                      movq    %r13, %rdi
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_Dealloc
// 215: ff d0                         callq   *%rax
// 217: eb 97                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_OPARG
// 223: 0f b7 c8                      movzwl  %ax, %ecx
// 226: 89 ca                         movl    %ecx, %edx
// 228: f7 d2                         notl    %edx
// 22a: 48 63 f2                      movslq  %edx, %rsi
// 22d: 4d 8b 64 f7 f8                movq    -0x8(%r15,%rsi,8), %r12
// 232: 0f b6 d0                      movzbl  %al, %edx
// 235: c1 e9 08                      shrl    $0x8, %ecx
// 238: 8d 04 0a                      leal    (%rdx,%rcx), %eax
// 23b: ff c0                         incl    %eax
// 23d: 48 01 f0                      addq    %rsi, %rax
// 240: 4d 8d 04 c7                   leaq    (%r15,%rax,8), %r8
// 244: 49 83 c0 f8                   addq    $-0x8, %r8
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _PyEval_UnpackIterable
// 252: 4c 89 ef                      movq    %r13, %rdi
// 255: 4c 89 e6                      movq    %r12, %rsi
// 258: ff d0                         callq   *%rax
// 25a: 89 c5                         movl    %eax, %ebp
// 25c: 49 8b 04 24                   movq    (%r12), %rax
// 260: 48 85 c0                      testq   %rax, %rax
// 263: 7f 22                         jg      0x287 <_JIT_ENTRY+0x287>
// 265: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000267:  R_X86_64_64  .rodata.str1.1
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  _Py_NegativeRefcount
// 279: be b7 03 00 00                movl    $0x3b7, %esi            # imm = 0x3B7
// 27e: 4c 89 e2                      movq    %r12, %rdx
// 281: ff d0                         callq   *%rax
// 283: 49 8b 04 24                   movq    (%r12), %rax
// 287: 85 c0                         testl   %eax, %eax
// 289: 78 21                         js      0x2ac <_JIT_ENTRY+0x2ac>
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 295: ff d0                         callq   *%rax
// 297: 49 ff 0c 24                   decq    (%r12)
// 29b: 75 0f                         jne     0x2ac <_JIT_ENTRY+0x2ac>
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _Py_Dealloc
// 2a7: 4c 89 e7                      movq    %r12, %rdi
// 2aa: ff d0                         callq   *%rax
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  _JIT_OPARG
// 2b6: 0f b6 c8                      movzbl  %al, %ecx
// 2b9: 0f b7 c0                      movzwl  %ax, %eax
// 2bc: 89 c2                         movl    %eax, %edx
// 2be: c1 ea 08                      shrl    $0x8, %edx
// 2c1: 01 ca                         addl    %ecx, %edx
// 2c3: f7 d0                         notl    %eax
// 2c5: 48 98                         cltq
// 2c7: 48 01 d0                      addq    %rdx, %rax
// 2ca: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 2ce: 85 ed                         testl   %ebp, %ebp
// 2d0: 48 0f 44 f3                   cmoveq  %rbx, %rsi
// 2d4: 74 21                         je      0x2f7 <_JIT_ENTRY+0x2f7>
// 2d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d8:  R_X86_64_64  _JIT_CONTINUE
// 2e0: 4c 89 f7                      movq    %r14, %rdi
// 2e3: 48 8b 14 24                   movq    (%rsp), %rdx
// 2e7: 48 83 c4 28                   addq    $0x28, %rsp
// 2eb: 5b                            popq    %rbx
// 2ec: 41 5c                         popq    %r12
// 2ee: 41 5d                         popq    %r13
// 2f0: 41 5e                         popq    %r14
// 2f2: 41 5f                         popq    %r15
// 2f4: 5d                            popq    %rbp
// 2f5: ff e0                         jmpq    *%rax
// 2f7: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2fb: 4c 29 f6                      subq    %r14, %rsi
// 2fe: 48 83 c6 b8                   addq    $-0x48, %rsi
// 302: 48 c1 ee 03                   shrq    $0x3, %rsi
// 306: 41 89 76 40                   movl    %esi, 0x40(%r14)
// 30a: 31 c0                         xorl    %eax, %eax
// 30c: 48 83 c4 28                   addq    $0x28, %rsp
// 310: 5b                            popq    %rbx
// 311: 41 5c                         popq    %r12
// 313: 41 5d                         popq    %r13
// 315: 41 5e                         popq    %r14
// 317: 41 5f                         popq    %r15
// 319: 5d                            popq    %rbp
// 31a: c3                            retq
// 31b: 
static const unsigned char _CALL_BUILTIN_CLASSplus_UNPACK_EX_code_body[796] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x03, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xf2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x2c, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x34, 0xdf, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x0f, 0x84, 0xcb, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x1c, 0xc7, 0x48, 0x89, 0x0e, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xce, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x48, 0x89, 0xde, 0xe9, 0x91, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x75, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x13, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x04, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xf2, 0x4d, 0x8b, 0x64, 0xf7, 0xf8, 0x0f, 0xb6, 0xd0, 0xc1, 0xe9, 0x08, 0x8d, 0x04, 0x0a, 0xff, 0xc0, 0x48, 0x01, 0xf0, 0x4d, 0x8d, 0x04, 0xc7, 0x49, 0x83, 0xc0, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0xc8, 0x0f, 0xb7, 0xc0, 0x89, 0xc2, 0xc1, 0xea, 0x08, 0x01, 0xca, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xd0, 0x49, 0x8d, 0x34, 0xc7, 0x85, 0xed, 0x48, 0x0f, 0x44, 0xf3, 0x74, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x83, 0xc6, 0xf8, 0x4c, 0x29, 0xf6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x41, 0x89, 0x76, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_UNPACK_EX_code_holes[21] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_UNPACK_EX_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_UNPACK_EX_data_holes[1];

// _CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 03 01 00 00             je      0x16a <_JIT_ENTRY+0x16a>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 f2 00 00 00             je      0x16a <_JIT_ENTRY+0x16a>
// 78: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 7d: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 82: 48 89 14 24                   movq    %rdx, (%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 0f 94 c3                      sete    %bl
// 95: 44 89 ea                      movl    %r13d, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 84 c3                         testb   %al, %bl
// ba: 0f 84 d7 00 00 00             je      0x197 <_JIT_ENTRY+0x197>
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 22                         jg      0xeb <_JIT_ENTRY+0xeb>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 4c 8b 2c 24                   movq    (%rsp), %r13
// f1: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// f6: 78 21                         js      0x119 <_JIT_ENTRY+0x119>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 102: ff d0                         callq   *%rax
// 104: 49 ff 0c 24                   decq    (%r12)
// 108: 75 0f                         jne     0x119 <_JIT_ENTRY+0x119>
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: 4c 89 e7                      movq    %r12, %rdi
// 117: ff d0                         callq   *%rax
// 119: 49 8d 34 df                   leaq    (%r15,%rbx,8), %rsi
// 11d: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 122: 48 85 c9                      testq   %rcx, %rcx
// 125: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 12a: 0f 84 c7 01 00 00             je      0x2f7 <_JIT_ENTRY+0x2f7>
// 130: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 135: 49 8d 1c c7                   leaq    (%r15,%rax,8), %rbx
// 139: 48 89 0e                      movq    %rcx, (%rsi)
// 13c: 49 8b 45 10                   movq    0x10(%r13), %rax
// 140: 48 8b 00                      movq    (%rax), %rax
// 143: 84 c0                         testb   %al, %al
// 145: 0f 84 ce 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_HandlePending
// 155: 4c 89 ef                      movq    %r13, %rdi
// 158: ff d0                         callq   *%rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 84 b7 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 162: 48 89 de                      movq    %rbx, %rsi
// 165: e9 8d 01 00 00                jmp     0x2f7 <_JIT_ENTRY+0x2f7>
// 16a: 49 29 ff                      subq    %rdi, %r15
// 16d: 49 83 c7 b8                   addq    $-0x48, %r15
// 171: 49 c1 ef 03                   shrq    $0x3, %r15
// 175: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 179: 48 8b 07                      movq    (%rdi), %rax
// 17c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017e:  R_X86_64_64  _JIT_TARGET
// 186: 89 c9                         movl    %ecx, %ecx
// 188: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 18c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 192: e9 71 01 00 00                jmp     0x308 <_JIT_ENTRY+0x308>
// 197: 41 83 fd 02                   cmpl    $0x2, %r13d
// 19b: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1a1: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1a5: 31 db                         xorl    %ebx, %ebx
// 1a7: eb 13                         jmp     0x1bc <_JIT_ENTRY+0x1bc>
// 1a9: 0f 1f 80 00 00 00 00          nopl    (%rax)
// 1b0: 48 ff c3                      incq    %rbx
// 1b3: 49 39 de                      cmpq    %rbx, %r14
// 1b6: 0f 84 04 ff ff ff             je      0xc0 <_JIT_ENTRY+0xc0>
// 1bc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1c1: 49 8b 45 00                   movq    (%r13), %rax
// 1c5: 48 85 c0                      testq   %rax, %rax
// 1c8: 7e 06                         jle     0x1d0 <_JIT_ENTRY+0x1d0>
// 1ca: 85 c0                         testl   %eax, %eax
// 1cc: 78 e2                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1ce: eb 26                         jmp     0x1f6 <_JIT_ENTRY+0x1f6>
// 1d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1
// 1da: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1df: 4c 89 ea                      movq    %r13, %rdx
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_NegativeRefcount
// 1ec: ff d0                         callq   *%rax
// 1ee: 49 8b 45 00                   movq    (%r13), %rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 78 ba                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 200: ff d0                         callq   *%rax
// 202: 49 ff 4d 00                   decq    (%r13)
// 206: 75 a8                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 208: 4c 89 ef                      movq    %r13, %rdi
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_Dealloc
// 215: ff d0                         callq   *%rax
// 217: eb 97                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_OPARG
// 223: 0f b7 d0                      movzwl  %ax, %edx
// 226: 89 d1                         movl    %edx, %ecx
// 228: f7 d1                         notl    %ecx
// 22a: 48 63 c9                      movslq  %ecx, %rcx
// 22d: 4d 8b 64 cf f8                movq    -0x8(%r15,%rcx,8), %r12
// 232: 0f b7 c0                      movzwl  %ax, %eax
// 235: 48 01 c8                      addq    %rcx, %rax
// 238: 4d 8d 04 c7                   leaq    (%r15,%rax,8), %r8
// 23c: 49 83 c0 f8                   addq    $-0x8, %r8
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _PyEval_UnpackIterable
// 24a: 4c 89 ef                      movq    %r13, %rdi
// 24d: 4c 89 e6                      movq    %r12, %rsi
// 250: b9 ff ff ff ff                movl    $0xffffffff, %ecx       # imm = 0xFFFFFFFF
// 255: ff d0                         callq   *%rax
// 257: 89 c5                         movl    %eax, %ebp
// 259: 49 8b 04 24                   movq    (%r12), %rax
// 25d: 48 85 c0                      testq   %rax, %rax
// 260: 7f 22                         jg      0x284 <_JIT_ENTRY+0x284>
// 262: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000264:  R_X86_64_64  .rodata.str1.1
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _Py_NegativeRefcount
// 276: be 75 03 00 00                movl    $0x375, %esi            # imm = 0x375
// 27b: 4c 89 e2                      movq    %r12, %rdx
// 27e: ff d0                         callq   *%rax
// 280: 49 8b 04 24                   movq    (%r12), %rax
// 284: 85 c0                         testl   %eax, %eax
// 286: 78 21                         js      0x2a9 <_JIT_ENTRY+0x2a9>
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 292: ff d0                         callq   *%rax
// 294: 49 ff 0c 24                   decq    (%r12)
// 298: 75 0f                         jne     0x2a9 <_JIT_ENTRY+0x2a9>
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _Py_Dealloc
// 2a4: 4c 89 e7                      movq    %r12, %rdi
// 2a7: ff d0                         callq   *%rax
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _JIT_OPARG
// 2b3: 0f b7 c8                      movzwl  %ax, %ecx
// 2b6: f7 d0                         notl    %eax
// 2b8: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2bd: 48 98                         cltq
// 2bf: 48 01 c8                      addq    %rcx, %rax
// 2c2: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 2c6: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2ca: 85 ed                         testl   %ebp, %ebp
// 2cc: 48 0f 44 f3                   cmoveq  %rbx, %rsi
// 2d0: 74 21                         je      0x2f3 <_JIT_ENTRY+0x2f3>
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _JIT_CONTINUE
// 2dc: 4c 89 f7                      movq    %r14, %rdi
// 2df: 48 8b 14 24                   movq    (%rsp), %rdx
// 2e3: 48 83 c4 28                   addq    $0x28, %rsp
// 2e7: 5b                            popq    %rbx
// 2e8: 41 5c                         popq    %r12
// 2ea: 41 5d                         popq    %r13
// 2ec: 41 5e                         popq    %r14
// 2ee: 41 5f                         popq    %r15
// 2f0: 5d                            popq    %rbp
// 2f1: ff e0                         jmpq    *%rax
// 2f3: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2f7: 4c 29 f6                      subq    %r14, %rsi
// 2fa: 48 83 c6 b8                   addq    $-0x48, %rsi
// 2fe: 48 c1 ee 03                   shrq    $0x3, %rsi
// 302: 41 89 76 40                   movl    %esi, 0x40(%r14)
// 306: 31 c0                         xorl    %eax, %eax
// 308: 48 83 c4 28                   addq    $0x28, %rsp
// 30c: 5b                            popq    %rbx
// 30d: 41 5c                         popq    %r12
// 30f: 41 5d                         popq    %r13
// 311: 41 5e                         popq    %r14
// 313: 41 5f                         popq    %r15
// 315: 5d                            popq    %rbp
// 316: c3                            retq
// 317: 
static const unsigned char _CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_code_body[792] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x45, 0x8d, 0x69, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x03, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xf2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xea, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x2c, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x34, 0xdf, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x0f, 0x84, 0xc7, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x1c, 0xc7, 0x48, 0x89, 0x0e, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xce, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x48, 0x89, 0xde, 0xe9, 0x8d, 0x01, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x71, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x13, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x04, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x89, 0xd1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4d, 0x8b, 0x64, 0xcf, 0xf8, 0x0f, 0xb7, 0xc0, 0x48, 0x01, 0xc8, 0x4d, 0x8d, 0x04, 0xc7, 0x49, 0x83, 0xc0, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xb9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0xf8, 0x85, 0xed, 0x48, 0x0f, 0x44, 0xf3, 0x74, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x83, 0xc6, 0xf8, 0x4c, 0x29, 0xf6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x41, 0x89, 0x76, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_code_holes[21] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_LIST
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_LIST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 45 8d 78 01                   leal    0x1(%r8), %r15d
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 45 0f 44 f8                   cmovel  %r8d, %r15d
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4e 8b 24 d3                   movq    (%rbx,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 37 02 00 00             je      0x2a1 <_JIT_ENTRY+0x2a1>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 26 02 00 00             je      0x2a1 <_JIT_ENTRY+0x2a1>
// 7b: 4c 89 54 24 30                movq    %r10, 0x30(%rsp)
// 80: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 85: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 8a: 4c 89 74 24 18                movq    %r14, 0x18(%rsp)
// 8f: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 94: 48 8d 2c cb                   leaq    (%rbx,%rcx,8), %rbp
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 0f 94 c3                      sete    %bl
// 9e: 44 89 fa                      movl    %r15d, %edx
// a1: 4c 89 e7                      movq    %r12, %rdi
// a4: 48 89 ee                      movq    %rbp, %rsi
// a7: 31 c9                         xorl    %ecx, %ecx
// a9: 41 ff d0                      callq   *%r8
// ac: 48 89 44 24 28                movq    %rax, 0x28(%rsp)
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _JIT_OPARG
// bb: 66 85 c0                      testw   %ax, %ax
// be: 0f 94 c0                      sete    %al
// c1: 84 c3                         testb   %al, %bl
// c3: 0f 84 cb 00 00 00             je      0x194 <_JIT_ENTRY+0x194>
// c9: 49 8b 04 24                   movq    (%r12), %rax
// cd: 48 85 c0                      testq   %rax, %rax
// d0: 7f 22                         jg      0xf4 <_JIT_ENTRY+0xf4>
// d2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d4:  R_X86_64_64  .rodata.str1.1
// dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000de:  R_X86_64_64  _Py_NegativeRefcount
// e6: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// eb: 4c 89 e2                      movq    %r12, %rdx
// ee: ff d0                         callq   *%rax
// f0: 49 8b 04 24                   movq    (%r12), %rax
// f4: 85 c0                         testl   %eax, %eax
// f6: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// fb: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 100: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 105: 78 21                         js      0x128 <_JIT_ENTRY+0x128>
// 107: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000109:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 111: ff d0                         callq   *%rax
// 113: 49 ff 0c 24                   decq    (%r12)
// 117: 75 0f                         jne     0x128 <_JIT_ENTRY+0x128>
// 119: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011b:  R_X86_64_64  _Py_Dealloc
// 123: 4c 89 e7                      movq    %r12, %rdi
// 126: ff d0                         callq   *%rax
// 128: 48 8b 44 24 30                movq    0x30(%rsp), %rax
// 12d: 48 8d 04 c5 00 00 00 00       leaq    (,%rax,8), %rax
// 135: 4c 01 e8                      addq    %r13, %rax
// 138: 48 8b 54 24 28                movq    0x28(%rsp), %rdx
// 13d: 48 85 d2                      testq   %rdx, %rdx
// 140: 74 3c                         je      0x17e <_JIT_ENTRY+0x17e>
// 142: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 147: 48 8d 1c cd 00 00 00 00       leaq    (,%rcx,8), %rbx
// 14f: 4c 01 eb                      addq    %r13, %rbx
// 152: 48 89 10                      movq    %rdx, (%rax)
// 155: 49 8b 47 10                   movq    0x10(%r15), %rax
// 159: 48 8b 00                      movq    (%rax), %rax
// 15c: 84 c0                         testb   %al, %al
// 15e: 0f 84 bb 00 00 00             je      0x21f <_JIT_ENTRY+0x21f>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_HandlePending
// 16e: 4c 89 ff                      movq    %r15, %rdi
// 171: ff d0                         callq   *%rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 0f 84 a4 00 00 00             je      0x21f <_JIT_ENTRY+0x21f>
// 17b: 48 89 d8                      movq    %rbx, %rax
// 17e: 4c 29 f0                      subq    %r14, %rax
// 181: 48 83 c0 b8                   addq    $-0x48, %rax
// 185: 48 c1 e8 03                   shrq    $0x3, %rax
// 189: 41 89 46 40                   movl    %eax, 0x40(%r14)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: e9 35 01 00 00                jmp     0x2c9 <_JIT_ENTRY+0x2c9>
// 194: 41 83 ff 02                   cmpl    $0x2, %r15d
// 198: 41 be 01 00 00 00             movl    $0x1, %r14d
// 19e: 45 0f 43 f7                   cmovael %r15d, %r14d
// 1a2: 45 31 ff                      xorl    %r15d, %r15d
// 1a5: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: eb 1b                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1b1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 1c0: 49 ff c7                      incq    %r15
// 1c3: 4d 39 fe                      cmpq    %r15, %r14
// 1c6: 0f 84 fd fe ff ff             je      0xc9 <_JIT_ENTRY+0xc9>
// 1cc: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: ff d3                         callq   *%rbx
// 208: 49 ff 4d 00                   decq    (%r13)
// 20c: 75 b2                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 20e: 4c 89 ef                      movq    %r13, %rdi
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _Py_Dealloc
// 21b: ff d0                         callq   *%rax
// 21d: eb a1                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _JIT_OPARG
// 229: f7 d0                         notl    %eax
// 22b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 230: 48 98                         cltq
// 232: 4d 8b 64 c5 f8                movq    -0x8(%r13,%rax,8), %r12
// 237: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000239:  R_X86_64_64  PyList_Type
// 241: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 246: 75 59                         jne     0x2a1 <_JIT_ENTRY+0x2a1>
// 248: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024a:  R_X86_64_64  _JIT_OPARG
// 252: 0f b7 c9                      movzwl  %cx, %ecx
// 255: 49 39 4c 24 10                cmpq    %rcx, 0x10(%r12)
// 25a: 75 45                         jne     0x2a1 <_JIT_ENTRY+0x2a1>
// 25c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025e:  R_X86_64_64  _JIT_OPARG
// 266: f7 c1 ff ff 00 00             testl   $0xffff, %ecx           # imm = 0xFFFF
// 26c: 0f 8e 95 00 00 00             jle     0x307 <_JIT_ENTRY+0x307>
// 272: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 277: 48 8d 1c c1                   leaq    (%rcx,%rax,8), %rbx
// 27b: 48 83 c3 f8                   addq    $-0x8, %rbx
// 27f: 4d 8b 74 24 18                movq    0x18(%r12), %r14
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _JIT_OPARG
// 28e: 44 0f b7 f8                   movzwl  %ax, %r15d
// 292: 49 ff c7                      incq    %r15
// 295: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000297:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 29f: eb 4f                         jmp     0x2f0 <_JIT_ENTRY+0x2f0>
// 2a1: 4c 29 f3                      subq    %r14, %rbx
// 2a4: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2a8: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2ac: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2b0: 49 8b 06                      movq    (%r14), %rax
// 2b3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002b5:  R_X86_64_64  _JIT_TARGET
// 2bd: 89 c9                         movl    %ecx, %ecx
// 2bf: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2c3: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2c9: 48 83 c4 38                   addq    $0x38, %rsp
// 2cd: 5b                            popq    %rbx
// 2ce: 41 5c                         popq    %r12
// 2d0: 41 5d                         popq    %r13
// 2d2: 41 5e                         popq    %r14
// 2d4: 41 5f                         popq    %r15
// 2d6: 5d                            popq    %rbp
// 2d7: c3                            retq
// 2d8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 2e0: 48 89 2b                      movq    %rbp, (%rbx)
// 2e3: 48 83 c3 08                   addq    $0x8, %rbx
// 2e7: 49 ff cf                      decq    %r15
// 2ea: 49 83 ff 01                   cmpq    $0x1, %r15
// 2ee: 7e 17                         jle     0x307 <_JIT_ENTRY+0x307>
// 2f0: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// 2f4: 49 8b 2c c6                   movq    (%r14,%rax,8), %rbp
// 2f8: 8b 45 00                      movl    (%rbp), %eax
// 2fb: ff c0                         incl    %eax
// 2fd: 74 e1                         je      0x2e0 <_JIT_ENTRY+0x2e0>
// 2ff: 89 45 00                      movl    %eax, (%rbp)
// 302: 41 ff d5                      callq   *%r13
// 305: eb d9                         jmp     0x2e0 <_JIT_ENTRY+0x2e0>
// 307: 49 8b 04 24                   movq    (%r12), %rax
// 30b: 48 85 c0                      testq   %rax, %rax
// 30e: 7f 22                         jg      0x332 <_JIT_ENTRY+0x332>
// 310: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000312:  R_X86_64_64  .rodata.str1.1
// 31a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031c:  R_X86_64_64  _Py_NegativeRefcount
// 324: be ab 03 00 00                movl    $0x3ab, %esi            # imm = 0x3AB
// 329: 4c 89 e2                      movq    %r12, %rdx
// 32c: ff d0                         callq   *%rax
// 32e: 49 8b 04 24                   movq    (%r12), %rax
// 332: 85 c0                         testl   %eax, %eax
// 334: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 339: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 33e: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 343: 78 21                         js      0x366 <_JIT_ENTRY+0x366>
// 345: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000347:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 34f: ff d0                         callq   *%rax
// 351: 49 ff 0c 24                   decq    (%r12)
// 355: 75 0f                         jne     0x366 <_JIT_ENTRY+0x366>
// 357: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000359:  R_X86_64_64  _Py_Dealloc
// 361: 4c 89 e7                      movq    %r12, %rdi
// 364: ff d0                         callq   *%rax
// 366: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000368:  R_X86_64_64  _JIT_OPARG
// 370: 0f b7 c8                      movzwl  %ax, %ecx
// 373: f7 d0                         notl    %eax
// 375: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 37a: 48 98                         cltq
// 37c: 48 01 c8                      addq    %rcx, %rax
// 37f: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 383: 48 83 c6 f8                   addq    $-0x8, %rsi
// 387: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000389:  R_X86_64_64  _JIT_CONTINUE
// 391: 48 89 df                      movq    %rbx, %rdi
// 394: 4c 89 f2                      movq    %r14, %rdx
// 397: 48 83 c4 38                   addq    $0x38, %rsp
// 39b: 5b                            popq    %rbx
// 39c: 41 5c                         popq    %r12
// 39e: 41 5d                         popq    %r13
// 3a0: 41 5e                         popq    %r14
// 3a2: 41 5f                         popq    %r15
// 3a4: 5d                            popq    %rbp
// 3a5: ff e0                         jmpq    *%rax
// 3a7: 
static const unsigned char _CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_LIST_code_body[936] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x45, 0x8d, 0x78, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4e, 0x8b, 0x24, 0xd3, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x37, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x26, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x30, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x74, 0x24, 0x18, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0x8d, 0x2c, 0xcb, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xcb, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x30, 0x48, 0x8d, 0x04, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xe8, 0x48, 0x8b, 0x54, 0x24, 0x28, 0x48, 0x85, 0xd2, 0x74, 0x3c, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x48, 0x8d, 0x1c, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xeb, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xbb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x4c, 0x29, 0xf0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x46, 0x40, 0x31, 0xc0, 0xe9, 0x35, 0x01, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf7, 0x45, 0x31, 0xff, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4d, 0x39, 0xfe, 0x0f, 0x84, 0xfd, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0xff, 0xd3, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xb2, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xa1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc5, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x59, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x49, 0x39, 0x4c, 0x24, 0x10, 0x75, 0x45, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xc1, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x95, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x8d, 0x1c, 0xc1, 0x48, 0x83, 0xc3, 0xf8, 0x4d, 0x8b, 0x74, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x4f, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x2b, 0x48, 0x83, 0xc3, 0x08, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x17, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x2c, 0xc6, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0xe1, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd5, 0xeb, 0xd9, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xab, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_LIST_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x312, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x31c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x347, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x359, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x368, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x389, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_LIST_data_holes[1];

// _CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_TUPLE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_TUPLE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 48 89 fd                      movq    %rdi, %rbp
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 45 8d 78 01                   leal    0x1(%r8), %r15d
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 45 0f 44 f8                   cmovel  %r8d, %r15d
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4e 8b 24 d3                   movq    (%rbx,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 22 02 00 00             je      0x28c <_JIT_ENTRY+0x28c>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 11 02 00 00             je      0x28c <_JIT_ENTRY+0x28c>
// 7b: 4c 89 54 24 28                movq    %r10, 0x28(%rsp)
// 80: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 85: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 8a: 48 89 6c 24 30                movq    %rbp, 0x30(%rsp)
// 8f: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 94: 48 8d 2c cb                   leaq    (%rbx,%rcx,8), %rbp
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 0f 94 c3                      sete    %bl
// 9e: 44 89 fa                      movl    %r15d, %edx
// a1: 4c 89 e7                      movq    %r12, %rdi
// a4: 48 89 ee                      movq    %rbp, %rsi
// a7: 31 c9                         xorl    %ecx, %ecx
// a9: 41 ff d0                      callq   *%r8
// ac: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _JIT_OPARG
// bb: 66 85 c0                      testw   %ax, %ax
// be: 0f 94 c0                      sete    %al
// c1: 84 c3                         testb   %al, %bl
// c3: 0f 84 bc 00 00 00             je      0x185 <_JIT_ENTRY+0x185>
// c9: 49 8b 04 24                   movq    (%r12), %rax
// cd: 48 85 c0                      testq   %rax, %rax
// d0: 7f 22                         jg      0xf4 <_JIT_ENTRY+0xf4>
// d2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d4:  R_X86_64_64  .rodata.str1.1
// dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000de:  R_X86_64_64  _Py_NegativeRefcount
// e6: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// eb: 4c 89 e2                      movq    %r12, %rdx
// ee: ff d0                         callq   *%rax
// f0: 49 8b 04 24                   movq    (%r12), %rax
// f4: 85 c0                         testl   %eax, %eax
// f6: 48 8b 6c 24 30                movq    0x30(%rsp), %rbp
// fb: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 100: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 105: 78 21                         js      0x128 <_JIT_ENTRY+0x128>
// 107: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000109:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 111: ff d0                         callq   *%rax
// 113: 49 ff 0c 24                   decq    (%r12)
// 117: 75 0f                         jne     0x128 <_JIT_ENTRY+0x128>
// 119: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011b:  R_X86_64_64  _Py_Dealloc
// 123: 4c 89 e7                      movq    %r12, %rdi
// 126: ff d0                         callq   *%rax
// 128: 48 8b 44 24 28                movq    0x28(%rsp), %rax
// 12d: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 131: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 136: 48 85 d2                      testq   %rdx, %rdx
// 139: 74 35                         je      0x170 <_JIT_ENTRY+0x170>
// 13b: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 140: 49 8d 1c cf                   leaq    (%r15,%rcx,8), %rbx
// 144: 48 89 10                      movq    %rdx, (%rax)
// 147: 49 8b 46 10                   movq    0x10(%r14), %rax
// 14b: 48 8b 00                      movq    (%rax), %rax
// 14e: 84 c0                         testb   %al, %al
// 150: 0f 84 b9 00 00 00             je      0x20f <_JIT_ENTRY+0x20f>
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _Py_HandlePending
// 160: 4c 89 f7                      movq    %r14, %rdi
// 163: ff d0                         callq   *%rax
// 165: 85 c0                         testl   %eax, %eax
// 167: 0f 84 a2 00 00 00             je      0x20f <_JIT_ENTRY+0x20f>
// 16d: 48 89 d8                      movq    %rbx, %rax
// 170: 48 29 e8                      subq    %rbp, %rax
// 173: 48 83 c0 b8                   addq    $-0x48, %rax
// 177: 48 c1 e8 03                   shrq    $0x3, %rax
// 17b: 89 45 40                      movl    %eax, 0x40(%rbp)
// 17e: 31 c0                         xorl    %eax, %eax
// 180: e9 2f 01 00 00                jmp     0x2b4 <_JIT_ENTRY+0x2b4>
// 185: 41 83 ff 02                   cmpl    $0x2, %r15d
// 189: 41 be 01 00 00 00             movl    $0x1, %r14d
// 18f: 45 0f 43 f7                   cmovael %r15d, %r14d
// 193: 45 31 ff                      xorl    %r15d, %r15d
// 196: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000198:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a0: eb 1a                         jmp     0x1bc <_JIT_ENTRY+0x1bc>
// 1a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 1b0: 49 ff c7                      incq    %r15
// 1b3: 4d 39 fe                      cmpq    %r15, %r14
// 1b6: 0f 84 0d ff ff ff             je      0xc9 <_JIT_ENTRY+0xc9>
// 1bc: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 1c1: 49 8b 45 00                   movq    (%r13), %rax
// 1c5: 48 85 c0                      testq   %rax, %rax
// 1c8: 7e 06                         jle     0x1d0 <_JIT_ENTRY+0x1d0>
// 1ca: 85 c0                         testl   %eax, %eax
// 1cc: 78 e2                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1ce: eb 26                         jmp     0x1f6 <_JIT_ENTRY+0x1f6>
// 1d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1
// 1da: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1df: 4c 89 ea                      movq    %r13, %rdx
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_NegativeRefcount
// 1ec: ff d0                         callq   *%rax
// 1ee: 49 8b 45 00                   movq    (%r13), %rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 78 ba                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 1f6: ff d3                         callq   *%rbx
// 1f8: 49 ff 4d 00                   decq    (%r13)
// 1fc: 75 b2                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 1fe: 4c 89 ef                      movq    %r13, %rdi
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_Dealloc
// 20b: ff d0                         callq   *%rax
// 20d: eb a1                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _JIT_OPARG
// 219: f7 d0                         notl    %eax
// 21b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 220: 48 98                         cltq
// 222: 4d 8b 64 c7 f8                movq    -0x8(%r15,%rax,8), %r12
// 227: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000229:  R_X86_64_64  PyTuple_Type
// 231: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 236: 75 54                         jne     0x28c <_JIT_ENTRY+0x28c>
// 238: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023a:  R_X86_64_64  _JIT_OPARG
// 242: 0f b7 c9                      movzwl  %cx, %ecx
// 245: 49 39 4c 24 10                cmpq    %rcx, 0x10(%r12)
// 24a: 75 40                         jne     0x28c <_JIT_ENTRY+0x28c>
// 24c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024e:  R_X86_64_64  _JIT_OPARG
// 256: f7 c1 ff ff 00 00             testl   $0xffff, %ecx           # imm = 0xFFFF
// 25c: 0f 8e 98 00 00 00             jle     0x2fa <_JIT_ENTRY+0x2fa>
// 262: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 267: 48 8d 1c c1                   leaq    (%rcx,%rax,8), %rbx
// 26b: 48 83 c3 f8                   addq    $-0x8, %rbx
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  _JIT_OPARG
// 279: 44 0f b7 f0                   movzwl  %ax, %r14d
// 27d: 49 ff c6                      incq    %r14
// 280: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000282:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 28a: eb 54                         jmp     0x2e0 <_JIT_ENTRY+0x2e0>
// 28c: 48 29 eb                      subq    %rbp, %rbx
// 28f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 293: 48 c1 eb 03                   shrq    $0x3, %rbx
// 297: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 29a: 48 8b 45 00                   movq    (%rbp), %rax
// 29e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002a0:  R_X86_64_64  _JIT_TARGET
// 2a8: 89 c9                         movl    %ecx, %ecx
// 2aa: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2ae: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2b4: 48 83 c4 38                   addq    $0x38, %rsp
// 2b8: 5b                            popq    %rbx
// 2b9: 41 5c                         popq    %r12
// 2bb: 41 5d                         popq    %r13
// 2bd: 41 5e                         popq    %r14
// 2bf: 41 5f                         popq    %r15
// 2c1: 5d                            popq    %rbp
// 2c2: c3                            retq
// 2c3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 2d0: 4c 89 2b                      movq    %r13, (%rbx)
// 2d3: 48 83 c3 08                   addq    $0x8, %rbx
// 2d7: 49 ff ce                      decq    %r14
// 2da: 49 83 fe 01                   cmpq    $0x1, %r14
// 2de: 7e 1a                         jle     0x2fa <_JIT_ENTRY+0x2fa>
// 2e0: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// 2e4: 4d 8b 6c c4 18                movq    0x18(%r12,%rax,8), %r13
// 2e9: 41 8b 45 00                   movl    (%r13), %eax
// 2ed: ff c0                         incl    %eax
// 2ef: 74 df                         je      0x2d0 <_JIT_ENTRY+0x2d0>
// 2f1: 41 89 45 00                   movl    %eax, (%r13)
// 2f5: 41 ff d7                      callq   *%r15
// 2f8: eb d6                         jmp     0x2d0 <_JIT_ENTRY+0x2d0>
// 2fa: 49 8b 04 24                   movq    (%r12), %rax
// 2fe: 48 85 c0                      testq   %rax, %rax
// 301: 7f 22                         jg      0x325 <_JIT_ENTRY+0x325>
// 303: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000305:  R_X86_64_64  .rodata.str1.1
// 30d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030f:  R_X86_64_64  _Py_NegativeRefcount
// 317: be 99 03 00 00                movl    $0x399, %esi            # imm = 0x399
// 31c: 4c 89 e2                      movq    %r12, %rdx
// 31f: ff d0                         callq   *%rax
// 321: 49 8b 04 24                   movq    (%r12), %rax
// 325: 85 c0                         testl   %eax, %eax
// 327: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 32c: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 331: 78 21                         js      0x354 <_JIT_ENTRY+0x354>
// 333: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000335:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 33d: ff d0                         callq   *%rax
// 33f: 49 ff 0c 24                   decq    (%r12)
// 343: 75 0f                         jne     0x354 <_JIT_ENTRY+0x354>
// 345: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000347:  R_X86_64_64  _Py_Dealloc
// 34f: 4c 89 e7                      movq    %r12, %rdi
// 352: ff d0                         callq   *%rax
// 354: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000356:  R_X86_64_64  _JIT_OPARG
// 35e: 0f b7 c8                      movzwl  %ax, %ecx
// 361: f7 d0                         notl    %eax
// 363: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 368: 48 98                         cltq
// 36a: 48 01 c8                      addq    %rcx, %rax
// 36d: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 371: 48 83 c6 f8                   addq    $-0x8, %rsi
// 375: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000377:  R_X86_64_64  _JIT_CONTINUE
// 37f: 48 89 ef                      movq    %rbp, %rdi
// 382: 48 89 da                      movq    %rbx, %rdx
// 385: 48 83 c4 38                   addq    $0x38, %rsp
// 389: 5b                            popq    %rbx
// 38a: 41 5c                         popq    %r12
// 38c: 41 5d                         popq    %r13
// 38e: 41 5e                         popq    %r14
// 390: 41 5f                         popq    %r15
// 392: 5d                            popq    %rbp
// 393: ff e0                         jmpq    *%rax
// 395: 
static const unsigned char _CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_TUPLE_code_body[918] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x48, 0x89, 0xf3, 0x48, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x45, 0x8d, 0x78, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xf8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4e, 0x8b, 0x24, 0xd3, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x22, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x11, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x28, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x6c, 0x24, 0x30, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0x8d, 0x2c, 0xcb, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xfa, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xbc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x30, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x28, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x49, 0x8d, 0x1c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xb9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xa2, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xe9, 0x2f, 0x01, 0x00, 0x00, 0x41, 0x83, 0xff, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf7, 0x45, 0x31, 0xff, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1a, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4d, 0x39, 0xfe, 0x0f, 0x84, 0x0d, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0xff, 0xd3, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xb2, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xa1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc7, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x54, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x49, 0x39, 0x4c, 0x24, 0x10, 0x75, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xc1, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x98, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x8d, 0x1c, 0xc1, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x54, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x2b, 0x48, 0x83, 0xc3, 0x08, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x7e, 0x1a, 0x41, 0x8d, 0x46, 0xfe, 0x4d, 0x8b, 0x6c, 0xc4, 0x18, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0xdf, 0x41, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd7, 0xeb, 0xd6, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_TUPLE_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x305, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x30f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x335, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x347, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x356, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x377, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_TUPLE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_TWO_TUPLE
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_TWO_TUPLE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fd                      movq    %rdi, %rbp
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 44 0f b7 c1                   movzwl  %cx, %r8d
// 22: 44 89 c0                      movl    %r8d, %eax
// 25: f7 d0                         notl    %eax
// 27: 4c 63 c8                      movslq  %eax, %r9
// 2a: 4a 8b 04 ce                   movq    (%rsi,%r9,8), %rax
// 2e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 33: 44 29 c6                      subl    %r8d, %esi
// 36: 41 8d 58 01                   leal    0x1(%r8), %ebx
// 3a: 0f b7 c9                      movzwl  %cx, %ecx
// 3d: 48 89 cf                      movq    %rcx, %rdi
// 40: 48 f7 df                      negq    %rdi
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 41 0f 44 d8                   cmovel  %r8d, %ebx
// 4a: 4c 63 d6                      movslq  %esi, %r10
// 4d: 48 f7 d1                      notq    %rcx
// 50: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 54: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 58: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5d: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 64: 0f 84 1f 02 00 00             je      0x289 <_JIT_ENTRY+0x289>
// 6a: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 72: 4d 85 c0                      testq   %r8, %r8
// 75: 0f 84 0e 02 00 00             je      0x289 <_JIT_ENTRY+0x289>
// 7b: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 80: 4c 89 4c 24 08                movq    %r9, 0x8(%rsp)
// 85: 48 89 14 24                   movq    %rdx, (%rsp)
// 89: 48 89 6c 24 20                movq    %rbp, 0x20(%rsp)
// 8e: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 41 0f 94 c7                   sete    %r15b
// 99: 89 da                         movl    %ebx, %edx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: 48 89 ee                      movq    %rbp, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: 41 ff d0                      callq   *%r8
// a6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: 66 85 c0                      testw   %ax, %ax
// b8: 0f 94 c0                      sete    %al
// bb: 41 84 c7                      testb   %al, %r15b
// be: 0f 84 b6 00 00 00             je      0x17a <_JIT_ENTRY+0x17a>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f 22                         jg      0xef <_JIT_ENTRY+0xef>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_NegativeRefcount
// e1: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// f6: 4c 8b 3c 24                   movq    (%rsp), %r15
// fa: 78 21                         js      0x11d <_JIT_ENTRY+0x11d>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 106: ff d0                         callq   *%rax
// 108: 49 ff 0c 24                   decq    (%r12)
// 10c: 75 0f                         jne     0x11d <_JIT_ENTRY+0x11d>
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_Dealloc
// 118: 4c 89 e7                      movq    %r12, %rdi
// 11b: ff d0                         callq   *%rax
// 11d: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 122: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 126: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 12b: 48 85 d2                      testq   %rdx, %rdx
// 12e: 74 35                         je      0x165 <_JIT_ENTRY+0x165>
// 130: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 135: 49 8d 1c ce                   leaq    (%r14,%rcx,8), %rbx
// 139: 48 89 10                      movq    %rdx, (%rax)
// 13c: 49 8b 47 10                   movq    0x10(%r15), %rax
// 140: 48 8b 00                      movq    (%rax), %rax
// 143: 84 c0                         testb   %al, %al
// 145: 0f 84 ae 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_HandlePending
// 155: 4c 89 ff                      movq    %r15, %rdi
// 158: ff d0                         callq   *%rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 84 97 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 162: 48 89 d8                      movq    %rbx, %rax
// 165: 48 29 e8                      subq    %rbp, %rax
// 168: 48 83 c0 b8                   addq    $-0x48, %rax
// 16c: 48 c1 e8 03                   shrq    $0x3, %rax
// 170: 89 45 40                      movl    %eax, 0x40(%rbp)
// 173: 31 c0                         xorl    %eax, %eax
// 175: e9 38 01 00 00                jmp     0x2b2 <_JIT_ENTRY+0x2b2>
// 17a: 83 fb 02                      cmpl    $0x2, %ebx
// 17d: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 183: 44 0f 43 fb                   cmovael %ebx, %r15d
// 187: 31 db                         xorl    %ebx, %ebx
// 189: eb 11                         jmp     0x19c <_JIT_ENTRY+0x19c>
// 18b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 190: 48 ff c3                      incq    %rbx
// 193: 49 39 df                      cmpq    %rbx, %r15
// 196: 0f 84 28 ff ff ff             je      0xc4 <_JIT_ENTRY+0xc4>
// 19c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1a1: 49 8b 45 00                   movq    (%r13), %rax
// 1a5: 48 85 c0                      testq   %rax, %rax
// 1a8: 7e 06                         jle     0x1b0 <_JIT_ENTRY+0x1b0>
// 1aa: 85 c0                         testl   %eax, %eax
// 1ac: 78 e2                         js      0x190 <_JIT_ENTRY+0x190>
// 1ae: eb 26                         jmp     0x1d6 <_JIT_ENTRY+0x1d6>
// 1b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1
// 1ba: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1bf: 4c 89 ea                      movq    %r13, %rdx
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _Py_NegativeRefcount
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 8b 45 00                   movq    (%r13), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 ba                         js      0x190 <_JIT_ENTRY+0x190>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 ff 4d 00                   decq    (%r13)
// 1e6: 75 a8                         jne     0x190 <_JIT_ENTRY+0x190>
// 1e8: 4c 89 ef                      movq    %r13, %rdi
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: ff d0                         callq   *%rax
// 1f7: eb 97                         jmp     0x190 <_JIT_ENTRY+0x190>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _JIT_OPARG
// 203: f7 d0                         notl    %eax
// 205: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 20a: 48 98                         cltq
// 20c: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  PyTuple_Type
// 21b: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 220: 75 64                         jne     0x286 <_JIT_ENTRY+0x286>
// 222: 49 83 7c 24 10 02             cmpq    $0x2, 0x10(%r12)
// 228: 75 5c                         jne     0x286 <_JIT_ENTRY+0x286>
// 22a: 4d 8b 6c 24 20                movq    0x20(%r12), %r13
// 22f: 41 8b 45 00                   movl    (%r13), %eax
// 233: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000235:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 23d: ff c0                         incl    %eax
// 23f: 74 07                         je      0x248 <_JIT_ENTRY+0x248>
// 241: 41 89 45 00                   movl    %eax, (%r13)
// 245: 41 ff d7                      callq   *%r15
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _JIT_OPARG
// 252: f7 d0                         notl    %eax
// 254: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 259: 48 98                         cltq
// 25b: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 260: 4d 8b 6c 24 18                movq    0x18(%r12), %r13
// 265: 41 8b 45 00                   movl    (%r13), %eax
// 269: ff c0                         incl    %eax
// 26b: 75 54                         jne     0x2c1 <_JIT_ENTRY+0x2c1>
// 26d: 4c 89 2b                      movq    %r13, (%rbx)
// 270: 49 8b 04 24                   movq    (%r12), %rax
// 274: 48 85 c0                      testq   %rax, %rax
// 277: 7e 5b                         jle     0x2d4 <_JIT_ENTRY+0x2d4>
// 279: 85 c0                         testl   %eax, %eax
// 27b: 48 8b 1c 24                   movq    (%rsp), %rbx
// 27f: 79 7d                         jns     0x2fe <_JIT_ENTRY+0x2fe>
// 281: e9 99 00 00 00                jmp     0x31f <_JIT_ENTRY+0x31f>
// 286: 49 89 de                      movq    %rbx, %r14
// 289: 49 29 ee                      subq    %rbp, %r14
// 28c: 49 83 c6 b8                   addq    $-0x48, %r14
// 290: 49 c1 ee 03                   shrq    $0x3, %r14
// 294: 44 89 75 40                   movl    %r14d, 0x40(%rbp)
// 298: 48 8b 45 00                   movq    (%rbp), %rax
// 29c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000029e:  R_X86_64_64  _JIT_TARGET
// 2a6: 89 c9                         movl    %ecx, %ecx
// 2a8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2ac: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2b2: 48 83 c4 28                   addq    $0x28, %rsp
// 2b6: 5b                            popq    %rbx
// 2b7: 41 5c                         popq    %r12
// 2b9: 41 5d                         popq    %r13
// 2bb: 41 5e                         popq    %r14
// 2bd: 41 5f                         popq    %r15
// 2bf: 5d                            popq    %rbp
// 2c0: c3                            retq
// 2c1: 41 89 45 00                   movl    %eax, (%r13)
// 2c5: 41 ff d7                      callq   *%r15
// 2c8: 4c 89 2b                      movq    %r13, (%rbx)
// 2cb: 49 8b 04 24                   movq    (%r12), %rax
// 2cf: 48 85 c0                      testq   %rax, %rax
// 2d2: 7f a5                         jg      0x279 <_JIT_ENTRY+0x279>
// 2d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d6:  R_X86_64_64  .rodata.str1.1
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _Py_NegativeRefcount
// 2e8: be 87 03 00 00                movl    $0x387, %esi            # imm = 0x387
// 2ed: 4c 89 e2                      movq    %r12, %rdx
// 2f0: ff d0                         callq   *%rax
// 2f2: 49 8b 04 24                   movq    (%r12), %rax
// 2f6: 85 c0                         testl   %eax, %eax
// 2f8: 48 8b 1c 24                   movq    (%rsp), %rbx
// 2fc: 78 21                         js      0x31f <_JIT_ENTRY+0x31f>
// 2fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000300:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 308: ff d0                         callq   *%rax
// 30a: 49 ff 0c 24                   decq    (%r12)
// 30e: 75 0f                         jne     0x31f <_JIT_ENTRY+0x31f>
// 310: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000312:  R_X86_64_64  _Py_Dealloc
// 31a: 4c 89 e7                      movq    %r12, %rdi
// 31d: ff d0                         callq   *%rax
// 31f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000321:  R_X86_64_64  _JIT_OPARG
// 329: 0f b7 c8                      movzwl  %ax, %ecx
// 32c: f7 d0                         notl    %eax
// 32e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 333: 48 98                         cltq
// 335: 48 01 c8                      addq    %rcx, %rax
// 338: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 33c: 48 83 c6 f8                   addq    $-0x8, %rsi
// 340: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000342:  R_X86_64_64  _JIT_CONTINUE
// 34a: 48 89 ef                      movq    %rbp, %rdi
// 34d: 48 89 da                      movq    %rbx, %rdx
// 350: 48 83 c4 28                   addq    $0x28, %rsp
// 354: 5b                            popq    %rbx
// 355: 41 5c                         popq    %r12
// 357: 41 5d                         popq    %r13
// 359: 41 5e                         popq    %r14
// 35b: 41 5f                         popq    %r15
// 35d: 5d                            popq    %rbp
// 35e: ff e0                         jmpq    *%rax
// 360: 
static const unsigned char _CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_TWO_TUPLE_code_body[865] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4a, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc6, 0x41, 0x8d, 0x58, 0x01, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd8, 0x4c, 0x63, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x4f, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x1f, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x0e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x6c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x4c, 0x8b, 0x3c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x8d, 0x1c, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xe9, 0x38, 0x01, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfb, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x64, 0x49, 0x83, 0x7c, 0x24, 0x10, 0x02, 0x75, 0x5c, 0x4d, 0x8b, 0x6c, 0x24, 0x20, 0x41, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x07, 0x41, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x4d, 0x8b, 0x6c, 0x24, 0x18, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x54, 0x4c, 0x89, 0x2b, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x5b, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x79, 0x7d, 0xe9, 0x99, 0x00, 0x00, 0x00, 0x49, 0x89, 0xde, 0x49, 0x29, 0xee, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x75, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd7, 0x4c, 0x89, 0x2b, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa5, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_TWO_TUPLE_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x300, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x312, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x321, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x342, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_TWO_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_TWO_TUPLE_data_holes[1];

// _CALL_BUILTIN_CLASSplus_WITH_EXCEPT_START
// 
// /tmp/tmpk6qx1qvd/_CALL_BUILTIN_CLASSplus_WITH_EXCEPT_START.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 58                   subq    $0x58, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 ce                   movq    (%r14,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 92 01 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 81 01 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 78: 4c 89 4c 24 28                movq    %r9, 0x28(%rsp)
// 7d: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 82: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 87: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 8c: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 90: 48 85 c0                      testq   %rax, %rax
// 93: 41 0f 94 c7                   sete    %r15b
// 97: 89 da                         movl    %ebx, %edx
// 99: 4c 89 e7                      movq    %r12, %rdi
// 9c: 48 89 ee                      movq    %rbp, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: 41 ff d0                      callq   *%r8
// a4: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _JIT_OPARG
// b3: 66 85 c0                      testw   %ax, %ax
// b6: 0f 94 c0                      sete    %al
// b9: 41 84 c7                      testb   %al, %r15b
// bc: 0f 84 64 01 00 00             je      0x226 <_JIT_ENTRY+0x226>
// c2: 49 8b 04 24                   movq    (%r12), %rax
// c6: 48 85 c0                      testq   %rax, %rax
// c9: 7f 22                         jg      0xed <_JIT_ENTRY+0xed>
// cb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cd:  R_X86_64_64  .rodata.str1.1
// d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d7:  R_X86_64_64  _Py_NegativeRefcount
// df: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e4: 4c 89 e2                      movq    %r12, %rdx
// e7: ff d0                         callq   *%rax
// e9: 49 8b 04 24                   movq    (%r12), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// f4: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 49 ff 0c 24                   decq    (%r12)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 4c 89 e7                      movq    %r12, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 48 8b 44 24 28                movq    0x28(%rsp), %rax
// 121: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 125: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 12a: 48 85 d2                      testq   %rdx, %rdx
// 12d: 0f 84 76 01 00 00             je      0x2a9 <_JIT_ENTRY+0x2a9>
// 133: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 138: 49 8d 1c ce                   leaq    (%r14,%rcx,8), %rbx
// 13c: 48 89 10                      movq    %rdx, (%rax)
// 13f: 49 8b 45 10                   movq    0x10(%r13), %rax
// 143: 48 8b 00                      movq    (%rax), %rax
// 146: 84 c0                         testb   %al, %al
// 148: 74 17                         je      0x161 <_JIT_ENTRY+0x161>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_HandlePending
// 154: 4c 89 ef                      movq    %r13, %rdi
// 157: ff d0                         callq   *%rax
// 159: 85 c0                         testl   %eax, %eax
// 15b: 0f 85 e1 01 00 00             jne     0x342 <_JIT_ENTRY+0x342>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _JIT_OPARG
// 16b: f7 d0                         notl    %eax
// 16d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 172: 48 98                         cltq
// 174: 4d 8b 64 c6 e0                movq    -0x20(%r14,%rax,8), %r12
// 179: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 17e: 4d 8b 7d 08                   movq    0x8(%r13), %r15
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  PyException_GetTraceback
// 18c: 4c 89 ef                      movq    %r13, %rdi
// 18f: ff d0                         callq   *%rax
// 191: 48 85 c0                      testq   %rax, %rax
// 194: 0f 84 17 01 00 00             je      0x2b1 <_JIT_ENTRY+0x2b1>
// 19a: 48 89 c5                      movq    %rax, %rbp
// 19d: 48 8b 00                      movq    (%rax), %rax
// 1a0: 48 85 c0                      testq   %rax, %rax
// 1a3: 7f 22                         jg      0x1c7 <_JIT_ENTRY+0x1c7>
// 1a5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a7:  R_X86_64_64  .rodata.str1.1
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_NegativeRefcount
// 1b9: be 64 09 00 00                movl    $0x964, %esi            # imm = 0x964
// 1be: 48 89 ea                      movq    %rbp, %rdx
// 1c1: ff d0                         callq   *%rax
// 1c3: 48 8b 45 00                   movq    (%rbp), %rax
// 1c7: 85 c0                         testl   %eax, %eax
// 1c9: 0f 88 ec 00 00 00             js      0x2bb <_JIT_ENTRY+0x2bb>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d9: ff d0                         callq   *%rax
// 1db: 48 ff 4d 00                   decq    (%rbp)
// 1df: 0f 85 d6 00 00 00             jne     0x2bb <_JIT_ENTRY+0x2bb>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_Dealloc
// 1ef: 48 89 ef                      movq    %rbp, %rdi
// 1f2: ff d0                         callq   *%rax
// 1f4: e9 c2 00 00 00                jmp     0x2bb <_JIT_ENTRY+0x2bb>
// 1f9: 49 29 fe                      subq    %rdi, %r14
// 1fc: 49 83 c6 b8                   addq    $-0x48, %r14
// 200: 49 c1 ee 03                   shrq    $0x3, %r14
// 204: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 208: 48 8b 07                      movq    (%rdi), %rax
// 20b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020d:  R_X86_64_64  _JIT_TARGET
// 215: 89 c9                         movl    %ecx, %ecx
// 217: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 21b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 221: e9 2d 01 00 00                jmp     0x353 <_JIT_ENTRY+0x353>
// 226: 83 fb 02                      cmpl    $0x2, %ebx
// 229: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 22f: 44 0f 43 fb                   cmovael %ebx, %r15d
// 233: 31 db                         xorl    %ebx, %ebx
// 235: eb 15                         jmp     0x24c <_JIT_ENTRY+0x24c>
// 237: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 240: 48 ff c3                      incq    %rbx
// 243: 49 39 df                      cmpq    %rbx, %r15
// 246: 0f 84 76 fe ff ff             je      0xc2 <_JIT_ENTRY+0xc2>
// 24c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 251: 49 8b 45 00                   movq    (%r13), %rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 7e 06                         jle     0x260 <_JIT_ENTRY+0x260>
// 25a: 85 c0                         testl   %eax, %eax
// 25c: 78 e2                         js      0x240 <_JIT_ENTRY+0x240>
// 25e: eb 26                         jmp     0x286 <_JIT_ENTRY+0x286>
// 260: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000262:  R_X86_64_64  .rodata.str1.1
// 26a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 26f: 4c 89 ea                      movq    %r13, %rdx
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_NegativeRefcount
// 27c: ff d0                         callq   *%rax
// 27e: 49 8b 45 00                   movq    (%r13), %rax
// 282: 85 c0                         testl   %eax, %eax
// 284: 78 ba                         js      0x240 <_JIT_ENTRY+0x240>
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 290: ff d0                         callq   *%rax
// 292: 49 ff 4d 00                   decq    (%r13)
// 296: 75 a8                         jne     0x240 <_JIT_ENTRY+0x240>
// 298: 4c 89 ef                      movq    %r13, %rdi
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_Dealloc
// 2a5: ff d0                         callq   *%rax
// 2a7: eb 97                         jmp     0x240 <_JIT_ENTRY+0x240>
// 2a9: 48 89 c3                      movq    %rax, %rbx
// 2ac: e9 91 00 00 00                jmp     0x342 <_JIT_ENTRY+0x342>
// 2b1: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000002b3:  R_X86_64_64  _Py_NoneStruct
// 2bb: 48 c7 44 24 30 00 00 00 00    movq    $0x0, 0x30(%rsp)
// 2c4: 48 8d 74 24 38                leaq    0x38(%rsp), %rsi
// 2c9: 4c 89 7c 24 38                movq    %r15, 0x38(%rsp)
// 2ce: 4c 89 6c 24 40                movq    %r13, 0x40(%rsp)
// 2d3: 48 89 6c 24 48                movq    %rbp, 0x48(%rsp)
// 2d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002da:  R_X86_64_64  PyObject_Vectorcall
// 2e2: 48 ba 03 00 00 00 00 00 00 80 movabsq $-0x7ffffffffffffffd, %rdx # imm = 0x8000000000000003
// 2ec: 4c 89 e7                      movq    %r12, %rdi
// 2ef: 31 c9                         xorl    %ecx, %ecx
// 2f1: ff d0                         callq   *%rax
// 2f3: 48 85 c0                      testq   %rax, %rax
// 2f6: 74 45                         je      0x33d <_JIT_ENTRY+0x33d>
// 2f8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002fa:  R_X86_64_64  _JIT_OPARG
// 302: f7 d1                         notl    %ecx
// 304: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 30a: 48 63 c9                      movslq  %ecx, %rcx
// 30d: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 311: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 315: 48 83 c6 08                   addq    $0x8, %rsi
// 319: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031b:  R_X86_64_64  _JIT_CONTINUE
// 323: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 328: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 32d: 48 83 c4 58                   addq    $0x58, %rsp
// 331: 5b                            popq    %rbx
// 332: 41 5c                         popq    %r12
// 334: 41 5d                         popq    %r13
// 336: 41 5e                         popq    %r14
// 338: 41 5f                         popq    %r15
// 33a: 5d                            popq    %rbp
// 33b: ff e0                         jmpq    *%rax
// 33d: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 342: 4c 29 fb                      subq    %r15, %rbx
// 345: 48 83 c3 b8                   addq    $-0x48, %rbx
// 349: 48 c1 eb 03                   shrq    $0x3, %rbx
// 34d: 41 89 5f 40                   movl    %ebx, 0x40(%r15)
// 351: 31 c0                         xorl    %eax, %eax
// 353: 48 83 c4 58                   addq    $0x58, %rsp
// 357: 5b                            popq    %rbx
// 358: 41 5c                         popq    %r12
// 35a: 41 5d                         popq    %r13
// 35c: 41 5e                         popq    %r14
// 35e: 41 5f                         popq    %r15
// 360: 5d                            popq    %rbp
// 361: c3                            retq
// 362: 
static const unsigned char _CALL_BUILTIN_CLASSplus_WITH_EXCEPT_START_code_body[867] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x58, 0x49, 0x89, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x92, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x81, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x28, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0x64, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x28, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x76, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x49, 0x8d, 0x1c, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xe1, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xe0, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x4d, 0x8b, 0x7d, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x17, 0x01, 0x00, 0x00, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x64, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xec, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0xd6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0xe9, 0xc2, 0x00, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x2d, 0x01, 0x00, 0x00, 0x83, 0xfb, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfb, 0x31, 0xdb, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x76, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0x89, 0xc3, 0xe9, 0x91, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x30, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x74, 0x24, 0x38, 0x4c, 0x89, 0x7c, 0x24, 0x38, 0x4c, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0x6c, 0x24, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x4c, 0x89, 0xe7, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x45, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x58, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x29, 0xfb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5f, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x58, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CALL_BUILTIN_CLASSplus_WITH_EXCEPT_START_code_holes[23] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyException_GetTraceback, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x2da, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Vectorcall, 0x0},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASSplus_WITH_EXCEPT_START_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASSplus_WITH_EXCEPT_START_data_holes[1];

#define INIT_STENCIL(STENCIL) {                         \
    .body_size = Py_ARRAY_LENGTH(STENCIL##_body) - 1,   \
    .body = STENCIL##_body,                             \
    .holes_size = Py_ARRAY_LENGTH(STENCIL##_holes) - 1, \
    .holes = STENCIL##_holes,                           \
}

#define INIT_STENCIL_GROUP(OP) {     \
    .code = INIT_STENCIL(OP##_code), \
    .data = INIT_STENCIL(OP##_data), \
}

static const StencilGroup stencil_groups[512] = {
    [_CALL_BUILTIN_CLASSplus_BEFORE_ASYNC_WITH] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_BEFORE_ASYNC_WITH),
    [_CALL_BUILTIN_CLASSplus_BEFORE_WITH] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_BEFORE_WITH),
    [_CALL_BUILTIN_CLASSplus_BINARY_OP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_BINARY_OP),
    [_CALL_BUILTIN_CLASSplus_BINARY_OP_ADD_FLOAT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_BINARY_OP_ADD_FLOAT),
    [_CALL_BUILTIN_CLASSplus_BINARY_OP_ADD_INT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_BINARY_OP_ADD_INT),
    [_CALL_BUILTIN_CLASSplus_BINARY_OP_ADD_UNICODE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_BINARY_OP_ADD_UNICODE),
    [_CALL_BUILTIN_CLASSplus_BINARY_OP_MULTIPLY_FLOAT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_BINARY_OP_MULTIPLY_FLOAT),
    [_CALL_BUILTIN_CLASSplus_BINARY_OP_MULTIPLY_INT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_BINARY_OP_MULTIPLY_INT),
    [_CALL_BUILTIN_CLASSplus_BINARY_OP_SUBTRACT_FLOAT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_BINARY_OP_SUBTRACT_FLOAT),
    [_CALL_BUILTIN_CLASSplus_BINARY_OP_SUBTRACT_INT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_BINARY_OP_SUBTRACT_INT),
    [_CALL_BUILTIN_CLASSplus_BINARY_SLICE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_BINARY_SLICE),
    [_CALL_BUILTIN_CLASSplus_BINARY_SUBSCR] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_BINARY_SUBSCR),
    [_CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_DICT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_DICT),
    [_CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_LIST_INT),
    [_CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_STR_INT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_STR_INT),
    [_CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_TUPLE_INT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_BINARY_SUBSCR_TUPLE_INT),
    [_CALL_BUILTIN_CLASSplus_BUILD_CONST_KEY_MAP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_BUILD_CONST_KEY_MAP),
    [_CALL_BUILTIN_CLASSplus_BUILD_LIST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_BUILD_LIST),
    [_CALL_BUILTIN_CLASSplus_BUILD_MAP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_BUILD_MAP),
    [_CALL_BUILTIN_CLASSplus_BUILD_SET] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_BUILD_SET),
    [_CALL_BUILTIN_CLASSplus_BUILD_SLICE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_BUILD_SLICE),
    [_CALL_BUILTIN_CLASSplus_BUILD_STRING] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_BUILD_STRING),
    [_CALL_BUILTIN_CLASSplus_BUILD_TUPLE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_BUILD_TUPLE),
    [_CALL_BUILTIN_CLASSplus_CALL_BUILTIN_CLASS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CALL_BUILTIN_CLASS),
    [_CALL_BUILTIN_CLASSplus_CALL_BUILTIN_FAST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CALL_BUILTIN_FAST),
    [_CALL_BUILTIN_CLASSplus_CALL_BUILTIN_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CALL_BUILTIN_FAST_WITH_KEYWORDS),
    [_CALL_BUILTIN_CLASSplus_CALL_BUILTIN_O] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CALL_BUILTIN_O),
    [_CALL_BUILTIN_CLASSplus_CALL_INTRINSIC_1] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CALL_INTRINSIC_1),
    [_CALL_BUILTIN_CLASSplus_CALL_INTRINSIC_2] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CALL_INTRINSIC_2),
    [_CALL_BUILTIN_CLASSplus_CALL_ISINSTANCE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CALL_ISINSTANCE),
    [_CALL_BUILTIN_CLASSplus_CALL_LEN] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CALL_LEN),
    [_CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_FAST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_FAST),
    [_CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS),
    [_CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_NOARGS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_NOARGS),
    [_CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_O] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CALL_METHOD_DESCRIPTOR_O),
    [_CALL_BUILTIN_CLASSplus_CALL_STR_1] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CALL_STR_1),
    [_CALL_BUILTIN_CLASSplus_CALL_TUPLE_1] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CALL_TUPLE_1),
    [_CALL_BUILTIN_CLASSplus_CALL_TYPE_1] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CALL_TYPE_1),
    [_CALL_BUILTIN_CLASSplus_CHECK_ATTR_CLASS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CHECK_ATTR_CLASS),
    [_CALL_BUILTIN_CLASSplus_CHECK_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CHECK_ATTR_METHOD_LAZY_DICT),
    [_CALL_BUILTIN_CLASSplus_CHECK_ATTR_MODULE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CHECK_ATTR_MODULE),
    [_CALL_BUILTIN_CLASSplus_CHECK_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CHECK_ATTR_WITH_HINT),
    [_CALL_BUILTIN_CLASSplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS),
    [_CALL_BUILTIN_CLASSplus_CHECK_EG_MATCH] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CHECK_EG_MATCH),
    [_CALL_BUILTIN_CLASSplus_CHECK_EXC_MATCH] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CHECK_EXC_MATCH),
    [_CALL_BUILTIN_CLASSplus_CHECK_FUNCTION_EXACT_ARGS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CHECK_FUNCTION_EXACT_ARGS),
    [_CALL_BUILTIN_CLASSplus_CHECK_MANAGED_OBJECT_HAS_VALUES] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CHECK_MANAGED_OBJECT_HAS_VALUES),
    [_CALL_BUILTIN_CLASSplus_CHECK_PEP_523] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CHECK_PEP_523),
    [_CALL_BUILTIN_CLASSplus_CHECK_STACK_SPACE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CHECK_STACK_SPACE),
    [_CALL_BUILTIN_CLASSplus_CHECK_VALIDITY] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CHECK_VALIDITY),
    [_CALL_BUILTIN_CLASSplus_COMPARE_OP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_COMPARE_OP),
    [_CALL_BUILTIN_CLASSplus_COMPARE_OP_FLOAT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_COMPARE_OP_FLOAT),
    [_CALL_BUILTIN_CLASSplus_COMPARE_OP_INT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_COMPARE_OP_INT),
    [_CALL_BUILTIN_CLASSplus_COMPARE_OP_STR] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_COMPARE_OP_STR),
    [_CALL_BUILTIN_CLASSplus_CONTAINS_OP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CONTAINS_OP),
    [_CALL_BUILTIN_CLASSplus_CONVERT_VALUE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_CONVERT_VALUE),
    [_CALL_BUILTIN_CLASSplus_COPY] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_COPY),
    [_CALL_BUILTIN_CLASSplus_COPY_FREE_VARS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_COPY_FREE_VARS),
    [_CALL_BUILTIN_CLASSplus_DELETE_ATTR] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_DELETE_ATTR),
    [_CALL_BUILTIN_CLASSplus_DELETE_DEREF] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_DELETE_DEREF),
    [_CALL_BUILTIN_CLASSplus_DELETE_FAST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_DELETE_FAST),
    [_CALL_BUILTIN_CLASSplus_DELETE_GLOBAL] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_DELETE_GLOBAL),
    [_CALL_BUILTIN_CLASSplus_DELETE_NAME] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_DELETE_NAME),
    [_CALL_BUILTIN_CLASSplus_DELETE_SUBSCR] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_DELETE_SUBSCR),
    [_CALL_BUILTIN_CLASSplus_DICT_MERGE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_DICT_MERGE),
    [_CALL_BUILTIN_CLASSplus_DICT_UPDATE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_DICT_UPDATE),
    [_CALL_BUILTIN_CLASSplus_END_SEND] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_END_SEND),
    [_CALL_BUILTIN_CLASSplus_EXIT_INIT_CHECK] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_EXIT_INIT_CHECK),
    [_CALL_BUILTIN_CLASSplus_EXIT_TRACE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_EXIT_TRACE),
    [_CALL_BUILTIN_CLASSplus_FORMAT_SIMPLE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_FORMAT_SIMPLE),
    [_CALL_BUILTIN_CLASSplus_FORMAT_WITH_SPEC] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_FORMAT_WITH_SPEC),
    [_CALL_BUILTIN_CLASSplus_FOR_ITER_TIER_TWO] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_FOR_ITER_TIER_TWO),
    [_CALL_BUILTIN_CLASSplus_GET_AITER] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_GET_AITER),
    [_CALL_BUILTIN_CLASSplus_GET_ANEXT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_GET_ANEXT),
    [_CALL_BUILTIN_CLASSplus_GET_AWAITABLE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_GET_AWAITABLE),
    [_CALL_BUILTIN_CLASSplus_GET_ITER] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_GET_ITER),
    [_CALL_BUILTIN_CLASSplus_GET_LEN] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_GET_LEN),
    [_CALL_BUILTIN_CLASSplus_GET_YIELD_FROM_ITER] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_GET_YIELD_FROM_ITER),
    [_CALL_BUILTIN_CLASSplus_GUARD_BOTH_FLOAT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_GUARD_BOTH_FLOAT),
    [_CALL_BUILTIN_CLASSplus_GUARD_BOTH_INT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_GUARD_BOTH_INT),
    [_CALL_BUILTIN_CLASSplus_GUARD_BOTH_UNICODE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_GUARD_BOTH_UNICODE),
    [_CALL_BUILTIN_CLASSplus_GUARD_BUILTINS_VERSION] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_GUARD_BUILTINS_VERSION),
    [_CALL_BUILTIN_CLASSplus_GUARD_DORV_VALUES] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_GUARD_DORV_VALUES),
    [_CALL_BUILTIN_CLASSplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT),
    [_CALL_BUILTIN_CLASSplus_GUARD_GLOBALS_VERSION] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_GUARD_GLOBALS_VERSION),
    [_CALL_BUILTIN_CLASSplus_GUARD_IS_FALSE_POP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_GUARD_IS_FALSE_POP),
    [_CALL_BUILTIN_CLASSplus_GUARD_IS_NONE_POP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_GUARD_IS_NONE_POP),
    [_CALL_BUILTIN_CLASSplus_GUARD_IS_NOT_NONE_POP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_GUARD_IS_NOT_NONE_POP),
    [_CALL_BUILTIN_CLASSplus_GUARD_IS_TRUE_POP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_GUARD_IS_TRUE_POP),
    [_CALL_BUILTIN_CLASSplus_GUARD_KEYS_VERSION] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_GUARD_KEYS_VERSION),
    [_CALL_BUILTIN_CLASSplus_GUARD_NOT_EXHAUSTED_LIST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_GUARD_NOT_EXHAUSTED_LIST),
    [_CALL_BUILTIN_CLASSplus_GUARD_NOT_EXHAUSTED_RANGE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_GUARD_NOT_EXHAUSTED_RANGE),
    [_CALL_BUILTIN_CLASSplus_GUARD_NOT_EXHAUSTED_TUPLE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_GUARD_NOT_EXHAUSTED_TUPLE),
    [_CALL_BUILTIN_CLASSplus_GUARD_TYPE_VERSION] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_GUARD_TYPE_VERSION),
    [_CALL_BUILTIN_CLASSplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS),
    [_CALL_BUILTIN_CLASSplus_INIT_CALL_PY_EXACT_ARGS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_INIT_CALL_PY_EXACT_ARGS),
    [_CALL_BUILTIN_CLASSplus_INSERT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_INSERT),
    [_CALL_BUILTIN_CLASSplus_IS_NONE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_IS_NONE),
    [_CALL_BUILTIN_CLASSplus_IS_OP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_IS_OP),
    [_CALL_BUILTIN_CLASSplus_ITER_CHECK_LIST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_ITER_CHECK_LIST),
    [_CALL_BUILTIN_CLASSplus_ITER_CHECK_RANGE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_ITER_CHECK_RANGE),
    [_CALL_BUILTIN_CLASSplus_ITER_CHECK_TUPLE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_ITER_CHECK_TUPLE),
    [_CALL_BUILTIN_CLASSplus_ITER_NEXT_LIST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_ITER_NEXT_LIST),
    [_CALL_BUILTIN_CLASSplus_ITER_NEXT_RANGE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_ITER_NEXT_RANGE),
    [_CALL_BUILTIN_CLASSplus_ITER_NEXT_TUPLE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_ITER_NEXT_TUPLE),
    [_CALL_BUILTIN_CLASSplus_JUMP_TO_TOP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_JUMP_TO_TOP),
    [_CALL_BUILTIN_CLASSplus_LIST_APPEND] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LIST_APPEND),
    [_CALL_BUILTIN_CLASSplus_LIST_EXTEND] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LIST_EXTEND),
    [_CALL_BUILTIN_CLASSplus_LOAD_ASSERTION_ERROR] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_ASSERTION_ERROR),
    [_CALL_BUILTIN_CLASSplus_LOAD_ATTR] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_ATTR),
    [_CALL_BUILTIN_CLASSplus_LOAD_ATTR_CLASS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_ATTR_CLASS),
    [_CALL_BUILTIN_CLASSplus_LOAD_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_ATTR_INSTANCE_VALUE),
    [_CALL_BUILTIN_CLASSplus_LOAD_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_ATTR_METHOD_LAZY_DICT),
    [_CALL_BUILTIN_CLASSplus_LOAD_ATTR_METHOD_NO_DICT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_ATTR_METHOD_NO_DICT),
    [_CALL_BUILTIN_CLASSplus_LOAD_ATTR_METHOD_WITH_VALUES] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_ATTR_METHOD_WITH_VALUES),
    [_CALL_BUILTIN_CLASSplus_LOAD_ATTR_MODULE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_ATTR_MODULE),
    [_CALL_BUILTIN_CLASSplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT),
    [_CALL_BUILTIN_CLASSplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES),
    [_CALL_BUILTIN_CLASSplus_LOAD_ATTR_SLOT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_ATTR_SLOT),
    [_CALL_BUILTIN_CLASSplus_LOAD_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_ATTR_WITH_HINT),
    [_CALL_BUILTIN_CLASSplus_LOAD_BUILD_CLASS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_BUILD_CLASS),
    [_CALL_BUILTIN_CLASSplus_LOAD_CONST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_CONST),
    [_CALL_BUILTIN_CLASSplus_LOAD_DEREF] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_DEREF),
    [_CALL_BUILTIN_CLASSplus_LOAD_FAST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_FAST),
    [_CALL_BUILTIN_CLASSplus_LOAD_FAST_AND_CLEAR] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_FAST_AND_CLEAR),
    [_CALL_BUILTIN_CLASSplus_LOAD_FAST_CHECK] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_FAST_CHECK),
    [_CALL_BUILTIN_CLASSplus_LOAD_FROM_DICT_OR_DEREF] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_FROM_DICT_OR_DEREF),
    [_CALL_BUILTIN_CLASSplus_LOAD_FROM_DICT_OR_GLOBALS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_FROM_DICT_OR_GLOBALS),
    [_CALL_BUILTIN_CLASSplus_LOAD_GLOBAL] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_GLOBAL),
    [_CALL_BUILTIN_CLASSplus_LOAD_GLOBAL_BUILTINS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_GLOBAL_BUILTINS),
    [_CALL_BUILTIN_CLASSplus_LOAD_GLOBAL_MODULE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_GLOBAL_MODULE),
    [_CALL_BUILTIN_CLASSplus_LOAD_LOCALS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_LOCALS),
    [_CALL_BUILTIN_CLASSplus_LOAD_NAME] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_NAME),
    [_CALL_BUILTIN_CLASSplus_LOAD_SUPER_ATTR_ATTR] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_SUPER_ATTR_ATTR),
    [_CALL_BUILTIN_CLASSplus_LOAD_SUPER_ATTR_METHOD] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_LOAD_SUPER_ATTR_METHOD),
    [_CALL_BUILTIN_CLASSplus_MAKE_CELL] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_MAKE_CELL),
    [_CALL_BUILTIN_CLASSplus_MAKE_FUNCTION] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_MAKE_FUNCTION),
    [_CALL_BUILTIN_CLASSplus_MAP_ADD] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_MAP_ADD),
    [_CALL_BUILTIN_CLASSplus_MATCH_CLASS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_MATCH_CLASS),
    [_CALL_BUILTIN_CLASSplus_MATCH_KEYS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_MATCH_KEYS),
    [_CALL_BUILTIN_CLASSplus_MATCH_MAPPING] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_MATCH_MAPPING),
    [_CALL_BUILTIN_CLASSplus_MATCH_SEQUENCE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_MATCH_SEQUENCE),
    [_CALL_BUILTIN_CLASSplus_NOP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_NOP),
    [_CALL_BUILTIN_CLASSplus_POP_EXCEPT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_POP_EXCEPT),
    [_CALL_BUILTIN_CLASSplus_POP_FRAME] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_POP_FRAME),
    [_CALL_BUILTIN_CLASSplus_POP_TOP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_POP_TOP),
    [_CALL_BUILTIN_CLASSplus_PUSH_EXC_INFO] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_PUSH_EXC_INFO),
    [_CALL_BUILTIN_CLASSplus_PUSH_FRAME] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_PUSH_FRAME),
    [_CALL_BUILTIN_CLASSplus_PUSH_NULL] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_PUSH_NULL),
    [_CALL_BUILTIN_CLASSplus_RESUME_CHECK] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_RESUME_CHECK),
    [_CALL_BUILTIN_CLASSplus_SAVE_RETURN_OFFSET] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_SAVE_RETURN_OFFSET),
    [_CALL_BUILTIN_CLASSplus_SETUP_ANNOTATIONS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_SETUP_ANNOTATIONS),
    [_CALL_BUILTIN_CLASSplus_SET_ADD] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_SET_ADD),
    [_CALL_BUILTIN_CLASSplus_SET_FUNCTION_ATTRIBUTE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_SET_FUNCTION_ATTRIBUTE),
    [_CALL_BUILTIN_CLASSplus_SET_IP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_SET_IP),
    [_CALL_BUILTIN_CLASSplus_SET_UPDATE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_SET_UPDATE),
    [_CALL_BUILTIN_CLASSplus_STORE_ATTR] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_STORE_ATTR),
    [_CALL_BUILTIN_CLASSplus_STORE_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_STORE_ATTR_INSTANCE_VALUE),
    [_CALL_BUILTIN_CLASSplus_STORE_ATTR_SLOT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_STORE_ATTR_SLOT),
    [_CALL_BUILTIN_CLASSplus_STORE_DEREF] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_STORE_DEREF),
    [_CALL_BUILTIN_CLASSplus_STORE_FAST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_STORE_FAST),
    [_CALL_BUILTIN_CLASSplus_STORE_GLOBAL] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_STORE_GLOBAL),
    [_CALL_BUILTIN_CLASSplus_STORE_NAME] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_STORE_NAME),
    [_CALL_BUILTIN_CLASSplus_STORE_SLICE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_STORE_SLICE),
    [_CALL_BUILTIN_CLASSplus_STORE_SUBSCR] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_STORE_SUBSCR),
    [_CALL_BUILTIN_CLASSplus_STORE_SUBSCR_DICT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_STORE_SUBSCR_DICT),
    [_CALL_BUILTIN_CLASSplus_STORE_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_STORE_SUBSCR_LIST_INT),
    [_CALL_BUILTIN_CLASSplus_SWAP] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_SWAP),
    [_CALL_BUILTIN_CLASSplus_TO_BOOL] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_TO_BOOL),
    [_CALL_BUILTIN_CLASSplus_TO_BOOL_ALWAYS_TRUE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_TO_BOOL_ALWAYS_TRUE),
    [_CALL_BUILTIN_CLASSplus_TO_BOOL_BOOL] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_TO_BOOL_BOOL),
    [_CALL_BUILTIN_CLASSplus_TO_BOOL_INT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_TO_BOOL_INT),
    [_CALL_BUILTIN_CLASSplus_TO_BOOL_LIST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_TO_BOOL_LIST),
    [_CALL_BUILTIN_CLASSplus_TO_BOOL_NONE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_TO_BOOL_NONE),
    [_CALL_BUILTIN_CLASSplus_TO_BOOL_STR] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_TO_BOOL_STR),
    [_CALL_BUILTIN_CLASSplus_UNARY_INVERT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_UNARY_INVERT),
    [_CALL_BUILTIN_CLASSplus_UNARY_NEGATIVE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_UNARY_NEGATIVE),
    [_CALL_BUILTIN_CLASSplus_UNARY_NOT] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_UNARY_NOT),
    [_CALL_BUILTIN_CLASSplus_UNPACK_EX] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_UNPACK_EX),
    [_CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE),
    [_CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_LIST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_LIST),
    [_CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_TUPLE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_TUPLE),
    [_CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_TWO_TUPLE] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_UNPACK_SEQUENCE_TWO_TUPLE),
    [_CALL_BUILTIN_CLASSplus_WITH_EXCEPT_START] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASSplus_WITH_EXCEPT_START),
};

#define GET_PATCHES() { \
    [HoleValue_CODE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_CONTINUE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_DATA] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_EXECUTOR] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_GOT] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPARG] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPERAND] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TARGET] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TOP] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_ZERO] = (uint64_t)0xBADBADBADBADBADB, \
}
