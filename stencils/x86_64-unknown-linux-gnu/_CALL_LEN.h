// $ /home/jglass/.pyenv/versions/3.12.1/bin/python Tools/jit/build_two_reuse.py x86_64-unknown-linux-gnu --all_ops

typedef enum {
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGE21,
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGEOFF12,
    HoleKind_ARM64_RELOC_UNSIGNED,
    HoleKind_IMAGE_REL_AMD64_ADDR64,
    HoleKind_IMAGE_REL_I386_DIR32,
    HoleKind_R_AARCH64_ABS64,
    HoleKind_R_AARCH64_CALL26,
    HoleKind_R_AARCH64_JUMP26,
    HoleKind_R_AARCH64_MOVW_UABS_G0_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G1_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G2_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G3,
    HoleKind_R_X86_64_64,
    HoleKind_X86_64_RELOC_UNSIGNED,
} HoleKind;

typedef enum {
    HoleValue_CODE,
    HoleValue_CONTINUE,
    HoleValue_DATA,
    HoleValue_EXECUTOR,
    HoleValue_GOT,
    HoleValue_OPARG,
    HoleValue_OPERAND,
    HoleValue_TARGET,
    HoleValue_TOP,
    HoleValue_ZERO,
} HoleValue;

typedef struct {
    const uint64_t offset;
    const HoleKind kind;
    const HoleValue value;
    const void *symbol;
    const uint64_t addend;
} Hole;

typedef struct {
    const size_t body_size;
    const unsigned char * const body;
    const size_t holes_size;
    const Hole * const holes;
} Stencil;

typedef struct {
    const Stencil code;
    const Stencil data;
} StencilGroup;

// _CALL_LENplus_BEFORE_ASYNC_WITH
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_BEFORE_ASYNC_WITH.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e7 00                cmpq    $0x0, (%r15,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 f6                      movslq  %esi, %r14
// 65: 4b 8b 2c f7                   movq    (%r15,%r14,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 df                      subq    %rbx, %r15
// 79: 49 83 c7 b8                   addq    $-0x48, %r15
// 7d: 49 c1 ef 03                   shrq    $0x3, %r15
// 81: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 14 24                   movq    %rdx, (%rsp)
// b1: 4d 8b 2c cf                   movq    (%r15,%rcx,8), %r13
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  PyObject_Size
// bf: 4c 89 ef                      movq    %r13, %rdi
// c2: ff d0                         callq   *%rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 0f 88 d7 01 00 00             js      0x2a4 <_JIT_ENTRY+0x2a4>
// cd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cf:  R_X86_64_64  PyLong_FromSsize_t
// d7: 48 89 c7                      movq    %rax, %rdi
// da: ff d1                         callq   *%rcx
// dc: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// e1: 48 8b 45 00                   movq    (%rbp), %rax
// e5: 48 85 c0                      testq   %rax, %rax
// e8: 7f 22                         jg      0x10c <_JIT_ENTRY+0x10c>
// ea: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_NegativeRefcount
// fe: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 103: 48 89 ea                      movq    %rbp, %rdx
// 106: ff d0                         callq   *%rax
// 108: 48 8b 45 00                   movq    (%rbp), %rax
// 10c: 85 c0                         testl   %eax, %eax
// 10e: 78 21                         js      0x131 <_JIT_ENTRY+0x131>
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11a: ff d0                         callq   *%rax
// 11c: 48 ff 4d 00                   decq    (%rbp)
// 120: 75 0f                         jne     0x131 <_JIT_ENTRY+0x131>
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  _Py_Dealloc
// 12c: 48 89 ef                      movq    %rbp, %rdi
// 12f: ff d0                         callq   *%rax
// 131: 49 8b 45 00                   movq    (%r13), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_NegativeRefcount
// 14e: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 153: 4c 89 ea                      movq    %r13, %rdx
// 156: ff d0                         callq   *%rax
// 158: 49 8b 45 00                   movq    (%r13), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 4d 00                   decq    (%r13)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: 4c 89 ef                      movq    %r13, %rdi
// 17f: ff d0                         callq   *%rax
// 181: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 186: 48 85 d2                      testq   %rdx, %rdx
// 189: 0f 84 1d 01 00 00             je      0x2ac <_JIT_ENTRY+0x2ac>
// 18f: 4b 8d 2c e7                   leaq    (%r15,%r12,8), %rbp
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _JIT_OPARG
// 19d: 0f b7 c0                      movzwl  %ax, %eax
// 1a0: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a5: 29 c1                         subl    %eax, %ecx
// 1a7: 48 63 c9                      movslq  %ecx, %rcx
// 1aa: 49 89 14 cf                   movq    %rdx, (%r15,%rcx,8)
// 1ae: f7 d0                         notl    %eax
// 1b0: 48 98                         cltq
// 1b2: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 1b7: 4d 8b 64 c7 f8                movq    -0x8(%r15,%rax,8), %r12
// 1bc: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000001be:  R_X86_64_64  _PyObject_LookupSpecial
// 1c6: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001c8:  R_X86_64_64  _PyRuntime
// 1d0: 49 8d b5 68 a6 00 00          leaq    0xa668(%r13), %rsi
// 1d7: 4c 89 e7                      movq    %r12, %rdi
// 1da: 41 ff d6                      callq   *%r14
// 1dd: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1e2: 48 85 c0                      testq   %rax, %rax
// 1e5: 0f 84 ca 00 00 00             je      0x2b5 <_JIT_ENTRY+0x2b5>
// 1eb: 49 81 c5 a0 a6 00 00          addq    $0xa6a0, %r13           # imm = 0xA6A0
// 1f2: 4c 89 e7                      movq    %r12, %rdi
// 1f5: 4c 89 ee                      movq    %r13, %rsi
// 1f8: 41 ff d6                      callq   *%r14
// 1fb: 48 85 c0                      testq   %rax, %rax
// 1fe: 0f 84 b1 01 00 00             je      0x3b5 <_JIT_ENTRY+0x3b5>
// 204: 49 89 c5                      movq    %rax, %r13
// 207: 49 8b 04 24                   movq    (%r12), %rax
// 20b: 48 85 c0                      testq   %rax, %rax
// 20e: 7f 22                         jg      0x232 <_JIT_ENTRY+0x232>
// 210: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000212:  R_X86_64_64  .rodata.str1.1
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_NegativeRefcount
// 224: be 14 09 00 00                movl    $0x914, %esi            # imm = 0x914
// 229: 4c 89 e2                      movq    %r12, %rdx
// 22c: ff d0                         callq   *%rax
// 22e: 49 8b 04 24                   movq    (%r12), %rax
// 232: 85 c0                         testl   %eax, %eax
// 234: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 239: 78 21                         js      0x25c <_JIT_ENTRY+0x25c>
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 245: ff d0                         callq   *%rax
// 247: 49 ff 0c 24                   decq    (%r12)
// 24b: 75 0f                         jne     0x25c <_JIT_ENTRY+0x25c>
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_Dealloc
// 257: 4c 89 e7                      movq    %r12, %rdi
// 25a: ff d0                         callq   *%rax
// 25c: 49 8b 46 08                   movq    0x8(%r14), %rax
// 260: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 267: 0f 84 94 00 00 00             je      0x301 <_JIT_ENTRY+0x301>
// 26d: 48 8b 40 38                   movq    0x38(%rax), %rax
// 271: 49 8b 04 06                   movq    (%r14,%rax), %rax
// 275: 48 85 c0                      testq   %rax, %rax
// 278: 0f 84 83 00 00 00             je      0x301 <_JIT_ENTRY+0x301>
// 27e: 4c 89 f7                      movq    %r14, %rdi
// 281: 31 f6                         xorl    %esi, %esi
// 283: 31 d2                         xorl    %edx, %edx
// 285: 31 c9                         xorl    %ecx, %ecx
// 287: ff d0                         callq   *%rax
// 289: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000028b:  R_X86_64_64  _Py_CheckFunctionResult
// 293: 48 8b 3c 24                   movq    (%rsp), %rdi
// 297: 4c 89 f6                      movq    %r14, %rsi
// 29a: 48 89 c2                      movq    %rax, %rdx
// 29d: 31 c9                         xorl    %ecx, %ecx
// 29f: 41 ff d0                      callq   *%r8
// 2a2: eb 77                         jmp     0x31b <_JIT_ENTRY+0x31b>
// 2a4: 4c 89 fd                      movq    %r15, %rbp
// 2a7: e9 30 02 00 00                jmp     0x4dc <_JIT_ENTRY+0x4dc>
// 2ac: 4b 8d 2c f7                   leaq    (%r15,%r14,8), %rbp
// 2b0: e9 27 02 00 00                jmp     0x4dc <_JIT_ENTRY+0x4dc>
// 2b5: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2b9: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 2bd: 48 85 c0                      testq   %rax, %rax
// 2c0: 74 0b                         je      0x2cd <_JIT_ENTRY+0x2cd>
// 2c2: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 2c7: 0f 85 0f 02 00 00             jne     0x4dc <_JIT_ENTRY+0x4dc>
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  PyExc_TypeError
// 2d7: 48 8b 30                      movq    (%rax), %rsi
// 2da: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 2df: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2e3: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002e5:  R_X86_64_64  .rodata.str1.1+0x39
// 2ed: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002ef:  R_X86_64_64  _PyErr_Format
// 2f7: 31 c0                         xorl    %eax, %eax
// 2f9: 41 ff d0                      callq   *%r8
// 2fc: e9 db 01 00 00                jmp     0x4dc <_JIT_ENTRY+0x4dc>
// 301: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000303:  R_X86_64_64  _PyObject_MakeTpCall
// 30b: 48 8b 3c 24                   movq    (%rsp), %rdi
// 30f: 4c 89 f6                      movq    %r14, %rsi
// 312: 31 d2                         xorl    %edx, %edx
// 314: 31 c9                         xorl    %ecx, %ecx
// 316: 45 31 c0                      xorl    %r8d, %r8d
// 319: ff d0                         callq   *%rax
// 31b: 48 89 c5                      movq    %rax, %rbp
// 31e: 49 8b 06                      movq    (%r14), %rax
// 321: 48 85 c0                      testq   %rax, %rax
// 324: 7f 21                         jg      0x347 <_JIT_ENTRY+0x347>
// 326: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000328:  R_X86_64_64  .rodata.str1.1
// 330: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000332:  R_X86_64_64  _Py_NegativeRefcount
// 33a: be 16 09 00 00                movl    $0x916, %esi            # imm = 0x916
// 33f: 4c 89 f2                      movq    %r14, %rdx
// 342: ff d0                         callq   *%rax
// 344: 49 8b 06                      movq    (%r14), %rax
// 347: 85 c0                         testl   %eax, %eax
// 349: 78 20                         js      0x36b <_JIT_ENTRY+0x36b>
// 34b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 355: ff d0                         callq   *%rax
// 357: 49 ff 0e                      decq    (%r14)
// 35a: 75 0f                         jne     0x36b <_JIT_ENTRY+0x36b>
// 35c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035e:  R_X86_64_64  _Py_Dealloc
// 366: 4c 89 f7                      movq    %r14, %rdi
// 369: ff d0                         callq   *%rax
// 36b: 48 85 ed                      testq   %rbp, %rbp
// 36e: 74 7f                         je      0x3ef <_JIT_ENTRY+0x3ef>
// 370: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000372:  R_X86_64_64  _JIT_OPARG
// 37a: f7 d0                         notl    %eax
// 37c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 381: 48 98                         cltq
// 383: 4d 89 6c c7 f8                movq    %r13, -0x8(%r15,%rax,8)
// 388: 49 89 2c c7                   movq    %rbp, (%r15,%rax,8)
// 38c: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 390: 48 83 c6 08                   addq    $0x8, %rsi
// 394: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000396:  R_X86_64_64  _JIT_CONTINUE
// 39e: 48 89 df                      movq    %rbx, %rdi
// 3a1: 48 8b 14 24                   movq    (%rsp), %rdx
// 3a5: 48 83 c4 18                   addq    $0x18, %rsp
// 3a9: 5b                            popq    %rbx
// 3aa: 41 5c                         popq    %r12
// 3ac: 41 5d                         popq    %r13
// 3ae: 41 5e                         popq    %r14
// 3b0: 41 5f                         popq    %r15
// 3b2: 5d                            popq    %rbp
// 3b3: ff e0                         jmpq    *%rax
// 3b5: 48 8b 3c 24                   movq    (%rsp), %rdi
// 3b9: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 3bd: 48 85 c0                      testq   %rax, %rax
// 3c0: 0f 84 91 00 00 00             je      0x457 <_JIT_ENTRY+0x457>
// 3c6: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 3cb: 0f 84 86 00 00 00             je      0x457 <_JIT_ENTRY+0x457>
// 3d1: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 3d6: 49 8b 06                      movq    (%r14), %rax
// 3d9: 48 85 c0                      testq   %rax, %rax
// 3dc: 0f 8e b5 00 00 00             jle     0x497 <_JIT_ENTRY+0x497>
// 3e2: 85 c0                         testl   %eax, %eax
// 3e4: 0f 89 d2 00 00 00             jns     0x4bc <_JIT_ENTRY+0x4bc>
// 3ea: e9 ed 00 00 00                jmp     0x4dc <_JIT_ENTRY+0x4dc>
// 3ef: 49 8b 45 00                   movq    (%r13), %rax
// 3f3: 48 85 c0                      testq   %rax, %rax
// 3f6: 7f 22                         jg      0x41a <_JIT_ENTRY+0x41a>
// 3f8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003fa:  R_X86_64_64  .rodata.str1.1
// 402: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000404:  R_X86_64_64  _Py_NegativeRefcount
// 40c: be 18 09 00 00                movl    $0x918, %esi            # imm = 0x918
// 411: 4c 89 ea                      movq    %r13, %rdx
// 414: ff d0                         callq   *%rax
// 416: 49 8b 45 00                   movq    (%r13), %rax
// 41a: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 41f: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 423: 48 83 c5 f8                   addq    $-0x8, %rbp
// 427: 85 c0                         testl   %eax, %eax
// 429: 0f 88 ad 00 00 00             js      0x4dc <_JIT_ENTRY+0x4dc>
// 42f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000431:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 439: ff d0                         callq   *%rax
// 43b: 49 ff 4d 00                   decq    (%r13)
// 43f: 0f 85 97 00 00 00             jne     0x4dc <_JIT_ENTRY+0x4dc>
// 445: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000447:  R_X86_64_64  _Py_Dealloc
// 44f: 4c 89 ef                      movq    %r13, %rdi
// 452: e9 83 00 00 00                jmp     0x4da <_JIT_ENTRY+0x4da>
// 457: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000459:  R_X86_64_64  PyExc_TypeError
// 461: 48 8b 30                      movq    (%rax), %rsi
// 464: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 469: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 46d: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000046f:  R_X86_64_64  .rodata.str1.1+0x84
// 477: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000479:  R_X86_64_64  _PyErr_Format
// 481: 31 c0                         xorl    %eax, %eax
// 483: 41 ff d0                      callq   *%r8
// 486: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 48b: 49 8b 06                      movq    (%r14), %rax
// 48e: 48 85 c0                      testq   %rax, %rax
// 491: 0f 8f 4b ff ff ff             jg      0x3e2 <_JIT_ENTRY+0x3e2>
// 497: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000499:  R_X86_64_64  .rodata.str1.1
// 4a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004a3:  R_X86_64_64  _Py_NegativeRefcount
// 4ab: be 11 09 00 00                movl    $0x911, %esi            # imm = 0x911
// 4b0: 4c 89 f2                      movq    %r14, %rdx
// 4b3: ff d0                         callq   *%rax
// 4b5: 49 8b 06                      movq    (%r14), %rax
// 4b8: 85 c0                         testl   %eax, %eax
// 4ba: 78 20                         js      0x4dc <_JIT_ENTRY+0x4dc>
// 4bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004be:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4c6: ff d0                         callq   *%rax
// 4c8: 49 ff 0e                      decq    (%r14)
// 4cb: 75 0f                         jne     0x4dc <_JIT_ENTRY+0x4dc>
// 4cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004cf:  R_X86_64_64  _Py_Dealloc
// 4d7: 4c 89 f7                      movq    %r14, %rdi
// 4da: ff d0                         callq   *%rax
// 4dc: 48 29 dd                      subq    %rbx, %rbp
// 4df: 48 83 c5 b8                   addq    $-0x48, %rbp
// 4e3: 48 c1 ed 03                   shrq    $0x3, %rbp
// 4e7: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 4ea: 31 c0                         xorl    %eax, %eax
// 4ec: e9 ad fb ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 4f1: 
static const unsigned char _CALL_LENplus_BEFORE_ASYNC_WITH_code_body[1266] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe7, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xf6, 0x4b, 0x8b, 0x2c, 0xf7, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x2c, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xd7, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x1d, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xcf, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x89, 0x44, 0x24, 0x10, 0x4d, 0x8b, 0x64, 0xc7, 0xf8, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb5, 0x68, 0xa6, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x41, 0xff, 0xd6, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xca, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xa0, 0xa6, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0x41, 0xff, 0xd6, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xb1, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x46, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x0f, 0x84, 0x94, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x04, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0xeb, 0x77, 0x4c, 0x89, 0xfd, 0xe9, 0x30, 0x02, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xf7, 0xe9, 0x27, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x0b, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x85, 0x0f, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0xdb, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x7f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x6c, 0xc7, 0xf8, 0x49, 0x89, 0x2c, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x91, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x84, 0x86, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xd2, 0x00, 0x00, 0x00, 0xe9, 0xed, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x0f, 0x88, 0xad, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x97, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x4b, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xad, 0xfb, 0xff, 0xff};
static const Hole _CALL_LENplus_BEFORE_ASYNC_WITH_code_holes[42] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2e5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x303, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x332, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x34d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x35e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x372, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x396, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3fa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x404, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x431, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x447, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x459, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x46f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x84},
    {0x479, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x499, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x4a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x4be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x4cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the asynchronous context manager protocol\x00'%.200s' object does not support the asynchronous context manager protocol (missed __aexit__ method)\x00"
// e9: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_BEFORE_ASYNC_WITH_data_body[241] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x61, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_BEFORE_ASYNC_WITH_data_holes[1];

// _CALL_LENplus_BEFORE_WITH
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_BEFORE_WITH.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e7 00                cmpq    $0x0, (%r15,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 f6                      movslq  %esi, %r14
// 65: 4b 8b 2c f7                   movq    (%r15,%r14,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 df                      subq    %rbx, %r15
// 79: 49 83 c7 b8                   addq    $-0x48, %r15
// 7d: 49 c1 ef 03                   shrq    $0x3, %r15
// 81: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 14 24                   movq    %rdx, (%rsp)
// b1: 4d 8b 2c cf                   movq    (%r15,%rcx,8), %r13
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  PyObject_Size
// bf: 4c 89 ef                      movq    %r13, %rdi
// c2: ff d0                         callq   *%rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 0f 88 d7 01 00 00             js      0x2a4 <_JIT_ENTRY+0x2a4>
// cd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cf:  R_X86_64_64  PyLong_FromSsize_t
// d7: 48 89 c7                      movq    %rax, %rdi
// da: ff d1                         callq   *%rcx
// dc: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// e1: 48 8b 45 00                   movq    (%rbp), %rax
// e5: 48 85 c0                      testq   %rax, %rax
// e8: 7f 22                         jg      0x10c <_JIT_ENTRY+0x10c>
// ea: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_NegativeRefcount
// fe: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 103: 48 89 ea                      movq    %rbp, %rdx
// 106: ff d0                         callq   *%rax
// 108: 48 8b 45 00                   movq    (%rbp), %rax
// 10c: 85 c0                         testl   %eax, %eax
// 10e: 78 21                         js      0x131 <_JIT_ENTRY+0x131>
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11a: ff d0                         callq   *%rax
// 11c: 48 ff 4d 00                   decq    (%rbp)
// 120: 75 0f                         jne     0x131 <_JIT_ENTRY+0x131>
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  _Py_Dealloc
// 12c: 48 89 ef                      movq    %rbp, %rdi
// 12f: ff d0                         callq   *%rax
// 131: 49 8b 45 00                   movq    (%r13), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_NegativeRefcount
// 14e: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 153: 4c 89 ea                      movq    %r13, %rdx
// 156: ff d0                         callq   *%rax
// 158: 49 8b 45 00                   movq    (%r13), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 4d 00                   decq    (%r13)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: 4c 89 ef                      movq    %r13, %rdi
// 17f: ff d0                         callq   *%rax
// 181: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 186: 48 85 d2                      testq   %rdx, %rdx
// 189: 0f 84 1d 01 00 00             je      0x2ac <_JIT_ENTRY+0x2ac>
// 18f: 4b 8d 2c e7                   leaq    (%r15,%r12,8), %rbp
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _JIT_OPARG
// 19d: 0f b7 c0                      movzwl  %ax, %eax
// 1a0: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a5: 29 c1                         subl    %eax, %ecx
// 1a7: 48 63 c9                      movslq  %ecx, %rcx
// 1aa: 49 89 14 cf                   movq    %rdx, (%r15,%rcx,8)
// 1ae: f7 d0                         notl    %eax
// 1b0: 48 98                         cltq
// 1b2: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 1b7: 4d 8b 64 c7 f8                movq    -0x8(%r15,%rax,8), %r12
// 1bc: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000001be:  R_X86_64_64  _PyObject_LookupSpecial
// 1c6: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001c8:  R_X86_64_64  _PyRuntime
// 1d0: 49 8d b5 50 ae 00 00          leaq    0xae50(%r13), %rsi
// 1d7: 4c 89 e7                      movq    %r12, %rdi
// 1da: 41 ff d6                      callq   *%r14
// 1dd: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1e2: 48 85 c0                      testq   %rax, %rax
// 1e5: 0f 84 ca 00 00 00             je      0x2b5 <_JIT_ENTRY+0x2b5>
// 1eb: 49 81 c5 b8 ae 00 00          addq    $0xaeb8, %r13           # imm = 0xAEB8
// 1f2: 4c 89 e7                      movq    %r12, %rdi
// 1f5: 4c 89 ee                      movq    %r13, %rsi
// 1f8: 41 ff d6                      callq   *%r14
// 1fb: 48 85 c0                      testq   %rax, %rax
// 1fe: 0f 84 b1 01 00 00             je      0x3b5 <_JIT_ENTRY+0x3b5>
// 204: 49 89 c5                      movq    %rax, %r13
// 207: 49 8b 04 24                   movq    (%r12), %rax
// 20b: 48 85 c0                      testq   %rax, %rax
// 20e: 7f 22                         jg      0x232 <_JIT_ENTRY+0x232>
// 210: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000212:  R_X86_64_64  .rodata.str1.1
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_NegativeRefcount
// 224: be 3f 09 00 00                movl    $0x93f, %esi            # imm = 0x93F
// 229: 4c 89 e2                      movq    %r12, %rdx
// 22c: ff d0                         callq   *%rax
// 22e: 49 8b 04 24                   movq    (%r12), %rax
// 232: 85 c0                         testl   %eax, %eax
// 234: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 239: 78 21                         js      0x25c <_JIT_ENTRY+0x25c>
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 245: ff d0                         callq   *%rax
// 247: 49 ff 0c 24                   decq    (%r12)
// 24b: 75 0f                         jne     0x25c <_JIT_ENTRY+0x25c>
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_Dealloc
// 257: 4c 89 e7                      movq    %r12, %rdi
// 25a: ff d0                         callq   *%rax
// 25c: 49 8b 46 08                   movq    0x8(%r14), %rax
// 260: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 267: 0f 84 94 00 00 00             je      0x301 <_JIT_ENTRY+0x301>
// 26d: 48 8b 40 38                   movq    0x38(%rax), %rax
// 271: 49 8b 04 06                   movq    (%r14,%rax), %rax
// 275: 48 85 c0                      testq   %rax, %rax
// 278: 0f 84 83 00 00 00             je      0x301 <_JIT_ENTRY+0x301>
// 27e: 4c 89 f7                      movq    %r14, %rdi
// 281: 31 f6                         xorl    %esi, %esi
// 283: 31 d2                         xorl    %edx, %edx
// 285: 31 c9                         xorl    %ecx, %ecx
// 287: ff d0                         callq   *%rax
// 289: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000028b:  R_X86_64_64  _Py_CheckFunctionResult
// 293: 48 8b 3c 24                   movq    (%rsp), %rdi
// 297: 4c 89 f6                      movq    %r14, %rsi
// 29a: 48 89 c2                      movq    %rax, %rdx
// 29d: 31 c9                         xorl    %ecx, %ecx
// 29f: 41 ff d0                      callq   *%r8
// 2a2: eb 77                         jmp     0x31b <_JIT_ENTRY+0x31b>
// 2a4: 4c 89 fd                      movq    %r15, %rbp
// 2a7: e9 30 02 00 00                jmp     0x4dc <_JIT_ENTRY+0x4dc>
// 2ac: 4b 8d 2c f7                   leaq    (%r15,%r14,8), %rbp
// 2b0: e9 27 02 00 00                jmp     0x4dc <_JIT_ENTRY+0x4dc>
// 2b5: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2b9: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 2bd: 48 85 c0                      testq   %rax, %rax
// 2c0: 74 0b                         je      0x2cd <_JIT_ENTRY+0x2cd>
// 2c2: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 2c7: 0f 85 0f 02 00 00             jne     0x4dc <_JIT_ENTRY+0x4dc>
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  PyExc_TypeError
// 2d7: 48 8b 30                      movq    (%rax), %rsi
// 2da: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 2df: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2e3: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002e5:  R_X86_64_64  .rodata.str1.1+0x39
// 2ed: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002ef:  R_X86_64_64  _PyErr_Format
// 2f7: 31 c0                         xorl    %eax, %eax
// 2f9: 41 ff d0                      callq   *%r8
// 2fc: e9 db 01 00 00                jmp     0x4dc <_JIT_ENTRY+0x4dc>
// 301: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000303:  R_X86_64_64  _PyObject_MakeTpCall
// 30b: 48 8b 3c 24                   movq    (%rsp), %rdi
// 30f: 4c 89 f6                      movq    %r14, %rsi
// 312: 31 d2                         xorl    %edx, %edx
// 314: 31 c9                         xorl    %ecx, %ecx
// 316: 45 31 c0                      xorl    %r8d, %r8d
// 319: ff d0                         callq   *%rax
// 31b: 48 89 c5                      movq    %rax, %rbp
// 31e: 49 8b 06                      movq    (%r14), %rax
// 321: 48 85 c0                      testq   %rax, %rax
// 324: 7f 21                         jg      0x347 <_JIT_ENTRY+0x347>
// 326: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000328:  R_X86_64_64  .rodata.str1.1
// 330: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000332:  R_X86_64_64  _Py_NegativeRefcount
// 33a: be 41 09 00 00                movl    $0x941, %esi            # imm = 0x941
// 33f: 4c 89 f2                      movq    %r14, %rdx
// 342: ff d0                         callq   *%rax
// 344: 49 8b 06                      movq    (%r14), %rax
// 347: 85 c0                         testl   %eax, %eax
// 349: 78 20                         js      0x36b <_JIT_ENTRY+0x36b>
// 34b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 355: ff d0                         callq   *%rax
// 357: 49 ff 0e                      decq    (%r14)
// 35a: 75 0f                         jne     0x36b <_JIT_ENTRY+0x36b>
// 35c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035e:  R_X86_64_64  _Py_Dealloc
// 366: 4c 89 f7                      movq    %r14, %rdi
// 369: ff d0                         callq   *%rax
// 36b: 48 85 ed                      testq   %rbp, %rbp
// 36e: 74 7f                         je      0x3ef <_JIT_ENTRY+0x3ef>
// 370: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000372:  R_X86_64_64  _JIT_OPARG
// 37a: f7 d0                         notl    %eax
// 37c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 381: 48 98                         cltq
// 383: 4d 89 6c c7 f8                movq    %r13, -0x8(%r15,%rax,8)
// 388: 49 89 2c c7                   movq    %rbp, (%r15,%rax,8)
// 38c: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 390: 48 83 c6 08                   addq    $0x8, %rsi
// 394: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000396:  R_X86_64_64  _JIT_CONTINUE
// 39e: 48 89 df                      movq    %rbx, %rdi
// 3a1: 48 8b 14 24                   movq    (%rsp), %rdx
// 3a5: 48 83 c4 18                   addq    $0x18, %rsp
// 3a9: 5b                            popq    %rbx
// 3aa: 41 5c                         popq    %r12
// 3ac: 41 5d                         popq    %r13
// 3ae: 41 5e                         popq    %r14
// 3b0: 41 5f                         popq    %r15
// 3b2: 5d                            popq    %rbp
// 3b3: ff e0                         jmpq    *%rax
// 3b5: 48 8b 3c 24                   movq    (%rsp), %rdi
// 3b9: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 3bd: 48 85 c0                      testq   %rax, %rax
// 3c0: 0f 84 91 00 00 00             je      0x457 <_JIT_ENTRY+0x457>
// 3c6: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 3cb: 0f 84 86 00 00 00             je      0x457 <_JIT_ENTRY+0x457>
// 3d1: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 3d6: 49 8b 06                      movq    (%r14), %rax
// 3d9: 48 85 c0                      testq   %rax, %rax
// 3dc: 0f 8e b5 00 00 00             jle     0x497 <_JIT_ENTRY+0x497>
// 3e2: 85 c0                         testl   %eax, %eax
// 3e4: 0f 89 d2 00 00 00             jns     0x4bc <_JIT_ENTRY+0x4bc>
// 3ea: e9 ed 00 00 00                jmp     0x4dc <_JIT_ENTRY+0x4dc>
// 3ef: 49 8b 45 00                   movq    (%r13), %rax
// 3f3: 48 85 c0                      testq   %rax, %rax
// 3f6: 7f 22                         jg      0x41a <_JIT_ENTRY+0x41a>
// 3f8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003fa:  R_X86_64_64  .rodata.str1.1
// 402: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000404:  R_X86_64_64  _Py_NegativeRefcount
// 40c: be 43 09 00 00                movl    $0x943, %esi            # imm = 0x943
// 411: 4c 89 ea                      movq    %r13, %rdx
// 414: ff d0                         callq   *%rax
// 416: 49 8b 45 00                   movq    (%r13), %rax
// 41a: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 41f: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 423: 48 83 c5 f8                   addq    $-0x8, %rbp
// 427: 85 c0                         testl   %eax, %eax
// 429: 0f 88 ad 00 00 00             js      0x4dc <_JIT_ENTRY+0x4dc>
// 42f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000431:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 439: ff d0                         callq   *%rax
// 43b: 49 ff 4d 00                   decq    (%r13)
// 43f: 0f 85 97 00 00 00             jne     0x4dc <_JIT_ENTRY+0x4dc>
// 445: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000447:  R_X86_64_64  _Py_Dealloc
// 44f: 4c 89 ef                      movq    %r13, %rdi
// 452: e9 83 00 00 00                jmp     0x4da <_JIT_ENTRY+0x4da>
// 457: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000459:  R_X86_64_64  PyExc_TypeError
// 461: 48 8b 30                      movq    (%rax), %rsi
// 464: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 469: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 46d: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000046f:  R_X86_64_64  .rodata.str1.1+0x77
// 477: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000479:  R_X86_64_64  _PyErr_Format
// 481: 31 c0                         xorl    %eax, %eax
// 483: 41 ff d0                      callq   *%r8
// 486: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 48b: 49 8b 06                      movq    (%r14), %rax
// 48e: 48 85 c0                      testq   %rax, %rax
// 491: 0f 8f 4b ff ff ff             jg      0x3e2 <_JIT_ENTRY+0x3e2>
// 497: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000499:  R_X86_64_64  .rodata.str1.1
// 4a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004a3:  R_X86_64_64  _Py_NegativeRefcount
// 4ab: be 3c 09 00 00                movl    $0x93c, %esi            # imm = 0x93C
// 4b0: 4c 89 f2                      movq    %r14, %rdx
// 4b3: ff d0                         callq   *%rax
// 4b5: 49 8b 06                      movq    (%r14), %rax
// 4b8: 85 c0                         testl   %eax, %eax
// 4ba: 78 20                         js      0x4dc <_JIT_ENTRY+0x4dc>
// 4bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004be:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4c6: ff d0                         callq   *%rax
// 4c8: 49 ff 0e                      decq    (%r14)
// 4cb: 75 0f                         jne     0x4dc <_JIT_ENTRY+0x4dc>
// 4cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004cf:  R_X86_64_64  _Py_Dealloc
// 4d7: 4c 89 f7                      movq    %r14, %rdi
// 4da: ff d0                         callq   *%rax
// 4dc: 48 29 dd                      subq    %rbx, %rbp
// 4df: 48 83 c5 b8                   addq    $-0x48, %rbp
// 4e3: 48 c1 ed 03                   shrq    $0x3, %rbp
// 4e7: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 4ea: 31 c0                         xorl    %eax, %eax
// 4ec: e9 ad fb ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 4f1: 
static const unsigned char _CALL_LENplus_BEFORE_WITH_code_body[1266] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe7, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xf6, 0x4b, 0x8b, 0x2c, 0xf7, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x2c, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xd7, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x1d, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xcf, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x89, 0x44, 0x24, 0x10, 0x4d, 0x8b, 0x64, 0xc7, 0xf8, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb5, 0x50, 0xae, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x41, 0xff, 0xd6, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xca, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xb8, 0xae, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0x41, 0xff, 0xd6, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xb1, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3f, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x46, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x0f, 0x84, 0x94, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x04, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0xeb, 0x77, 0x4c, 0x89, 0xfd, 0xe9, 0x30, 0x02, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xf7, 0xe9, 0x27, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x0b, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x85, 0x0f, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0xdb, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x41, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x7f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x6c, 0xc7, 0xf8, 0x49, 0x89, 0x2c, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x91, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x84, 0x86, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xd2, 0x00, 0x00, 0x00, 0xe9, 0xed, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x0f, 0x88, 0xad, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x97, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x4b, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3c, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xad, 0xfb, 0xff, 0xff};
static const Hole _CALL_LENplus_BEFORE_WITH_code_holes[42] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2e5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x303, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x332, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x34d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x35e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x372, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x396, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3fa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x404, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x431, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x447, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x459, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x46f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x77},
    {0x479, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x499, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x4a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x4be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x4cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the context manager protocol\x00'%.200s' object does not support the context manager protocol (missed __exit__ method)\x00"
// ce: 00 00
static const unsigned char _CALL_LENplus_BEFORE_WITH_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_BEFORE_WITH_data_holes[1];

// _CALL_LENplus_BINARY_OP
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_BINARY_OP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 e9 01 00 00             js      0x2b0 <_JIT_ENTRY+0x2b0>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 34 24                   movq    (%rsp), %rsi
// 17e: 48 85 f6                      testq   %rsi, %rsi
// 181: 0f 84 20 01 00 00             je      0x2a7 <_JIT_ENTRY+0x2a7>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c8                      movzwl  %ax, %ecx
// 194: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 199: 29 ca                         subl    %ecx, %edx
// 19b: 48 63 d2                      movslq  %edx, %rdx
// 19e: 49 89 34 d6                   movq    %rsi, (%r14,%rdx,8)
// 1a2: f7 d1                         notl    %ecx
// 1a4: 4c 63 e9                      movslq  %ecx, %r13
// 1a7: 4b 8b 6c ee f0                movq    -0x10(%r14,%r13,8), %rbp
// 1ac: 4f 8b 64 ee f8                movq    -0x8(%r14,%r13,8), %r12
// 1b1: 0f b7 c0                      movzwl  %ax, %eax
// 1b4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b6:  R_X86_64_64  _PyEval_BinaryOps
// 1be: 48 89 ef                      movq    %rbp, %rdi
// 1c1: 4c 89 e6                      movq    %r12, %rsi
// 1c4: ff 14 c1                      callq   *(%rcx,%rax,8)
// 1c7: 48 89 04 24                   movq    %rax, (%rsp)
// 1cb: 48 8b 45 00                   movq    (%rbp), %rax
// 1cf: 48 85 c0                      testq   %rax, %rax
// 1d2: 7f 22                         jg      0x1f6 <_JIT_ENTRY+0x1f6>
// 1d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d6:  R_X86_64_64  .rodata.str1.1
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _Py_NegativeRefcount
// 1e8: be d4 0c 00 00                movl    $0xcd4, %esi            # imm = 0xCD4
// 1ed: 48 89 ea                      movq    %rbp, %rdx
// 1f0: ff d0                         callq   *%rax
// 1f2: 48 8b 45 00                   movq    (%rbp), %rax
// 1f6: 85 c0                         testl   %eax, %eax
// 1f8: 78 21                         js      0x21b <_JIT_ENTRY+0x21b>
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 204: ff d0                         callq   *%rax
// 206: 48 ff 4d 00                   decq    (%rbp)
// 20a: 75 0f                         jne     0x21b <_JIT_ENTRY+0x21b>
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_Dealloc
// 216: 48 89 ef                      movq    %rbp, %rdi
// 219: ff d0                         callq   *%rax
// 21b: 49 8b 04 24                   movq    (%r12), %rax
// 21f: 48 85 c0                      testq   %rax, %rax
// 222: 7f 22                         jg      0x246 <_JIT_ENTRY+0x246>
// 224: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000226:  R_X86_64_64  .rodata.str1.1
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _Py_NegativeRefcount
// 238: be d5 0c 00 00                movl    $0xcd5, %esi            # imm = 0xCD5
// 23d: 4c 89 e2                      movq    %r12, %rdx
// 240: ff d0                         callq   *%rax
// 242: 49 8b 04 24                   movq    (%r12), %rax
// 246: 85 c0                         testl   %eax, %eax
// 248: 78 21                         js      0x26b <_JIT_ENTRY+0x26b>
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 254: ff d0                         callq   *%rax
// 256: 49 ff 0c 24                   decq    (%r12)
// 25a: 75 0f                         jne     0x26b <_JIT_ENTRY+0x26b>
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  _Py_Dealloc
// 266: 4c 89 e7                      movq    %r12, %rdi
// 269: ff d0                         callq   *%rax
// 26b: 4b 8d 04 ee                   leaq    (%r14,%r13,8), %rax
// 26f: 48 83 c0 f0                   addq    $-0x10, %rax
// 273: 48 8b 0c 24                   movq    (%rsp), %rcx
// 277: 48 85 c9                      testq   %rcx, %rcx
// 27a: 74 31                         je      0x2ad <_JIT_ENTRY+0x2ad>
// 27c: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 280: 48 83 c6 f8                   addq    $-0x8, %rsi
// 284: 48 89 08                      movq    %rcx, (%rax)
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _JIT_CONTINUE
// 291: 48 89 df                      movq    %rbx, %rdi
// 294: 4c 89 fa                      movq    %r15, %rdx
// 297: 48 83 c4 08                   addq    $0x8, %rsp
// 29b: 5b                            popq    %rbx
// 29c: 41 5c                         popq    %r12
// 29e: 41 5d                         popq    %r13
// 2a0: 41 5e                         popq    %r14
// 2a2: 41 5f                         popq    %r15
// 2a4: 5d                            popq    %rbp
// 2a5: ff e0                         jmpq    *%rax
// 2a7: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 2ab: eb 03                         jmp     0x2b0 <_JIT_ENTRY+0x2b0>
// 2ad: 49 89 c6                      movq    %rax, %r14
// 2b0: 49 29 de                      subq    %rbx, %r14
// 2b3: 49 83 c6 b8                   addq    $-0x48, %r14
// 2b7: 49 c1 ee 03                   shrq    $0x3, %r14
// 2bb: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2bf: 31 c0                         xorl    %eax, %eax
// 2c1: e9 d6 fd ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 2c6: 
static const unsigned char _CALL_LENplus_BINARY_OP_code_body[711] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xe9, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x20, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd6, 0xf7, 0xd1, 0x4c, 0x63, 0xe9, 0x4b, 0x8b, 0x6c, 0xee, 0xf0, 0x4f, 0x8b, 0x64, 0xee, 0xf8, 0x0f, 0xb7, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0x14, 0xc1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd4, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd5, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xee, 0x48, 0x83, 0xc0, 0xf0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x4b, 0x8d, 0x34, 0xee, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xd6, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_BINARY_OP_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_BinaryOps, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_BINARY_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_BINARY_OP_data_holes[1];

// _CALL_LENplus_BINARY_OP_ADD_FLOAT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_BINARY_OP_ADD_FLOAT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 de                      subq    %rbx, %r14
// 79: 49 83 c6 b8                   addq    $-0x48, %r14
// 7d: 49 c1 ee 03                   shrq    $0x3, %r14
// 81: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// b2: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 3d 01 00 00             js      0x20b <_JIT_ENTRY+0x20b>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 04 24                   movq    (%r12), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 e2                      movq    %r12, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 04 24                   movq    (%r12), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 21                         js      0x182 <_JIT_ENTRY+0x182>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 0c 24                   decq    (%r12)
// 171: 75 0f                         jne     0x182 <_JIT_ENTRY+0x182>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: ff d0                         callq   *%rax
// 182: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 187: 48 85 d2                      testq   %rdx, %rdx
// 18a: 74 7b                         je      0x207 <_JIT_ENTRY+0x207>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c0                      movzwl  %ax, %eax
// 199: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 19e: 29 c1                         subl    %eax, %ecx
// 1a0: 48 63 c9                      movslq  %ecx, %rcx
// 1a3: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a7: f7 d0                         notl    %eax
// 1a9: 48 63 e8                      movslq  %eax, %rbp
// 1ac: 4d 8b 7c ee f0                movq    -0x10(%r14,%rbp,8), %r15
// 1b1: 4d 8b 64 ee f8                movq    -0x8(%r14,%rbp,8), %r12
// 1b6: f2 41 0f 10 47 10             movsd   0x10(%r15), %xmm0       # xmm0 = mem[0],zero
// 1bc: f2 41 0f 58 44 24 10          addsd   0x10(%r12), %xmm0
// 1c3: 49 83 3f 01                   cmpq    $0x1, (%r15)
// 1c7: 75 58                         jne     0x221 <_JIT_ENTRY+0x221>
// 1c9: f2 41 0f 11 47 10             movsd   %xmm0, 0x10(%r15)
// 1cf: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1d5: 75 28                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  PyInterpreterState_Get
// 1e1: ff d0                         callq   *%rax
// 1e3: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1ea: 49 ff 0c 24                   decq    (%r12)
// 1ee: 75 0f                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _PyFloat_ExactDealloc
// 1fa: 4c 89 e7                      movq    %r12, %rdi
// 1fd: ff d0                         callq   *%rax
// 1ff: 4d 89 fc                      movq    %r15, %r12
// 202: e9 f6 00 00 00                jmp     0x2fd <_JIT_ENTRY+0x2fd>
// 207: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 20b: 49 29 de                      subq    %rbx, %r14
// 20e: 49 83 c6 b8                   addq    $-0x48, %r14
// 212: 49 c1 ee 03                   shrq    $0x3, %r14
// 216: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 21a: 31 c0                         xorl    %eax, %eax
// 21c: e9 7d fe ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 221: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 226: 75 31                         jne     0x259 <_JIT_ENTRY+0x259>
// 228: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 22f: 41 f6 47 03 80                testb   $-0x80, 0x3(%r15)
// 234: 0f 85 c3 00 00 00             jne     0x2fd <_JIT_ENTRY+0x2fd>
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  PyInterpreterState_Get
// 244: ff d0                         callq   *%rax
// 246: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 24d: 49 8b 07                      movq    (%r15), %rax
// 250: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 254: 49 89 0f                      movq    %rcx, (%r15)
// 257: eb 72                         jmp     0x2cb <_JIT_ENTRY+0x2cb>
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  PyFloat_FromDouble
// 263: ff d0                         callq   *%rax
// 265: 48 85 c0                      testq   %rax, %rax
// 268: 0f 84 83 00 00 00             je      0x2f1 <_JIT_ENTRY+0x2f1>
// 26e: 41 f6 47 03 80                testb   $-0x80, 0x3(%r15)
// 273: 75 29                         jne     0x29e <_JIT_ENTRY+0x29e>
// 275: 49 89 c5                      movq    %rax, %r13
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  PyInterpreterState_Get
// 282: ff d0                         callq   *%rax
// 284: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 28b: 49 8b 07                      movq    (%r15), %rax
// 28e: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 292: 49 89 0f                      movq    %rcx, (%r15)
// 295: 48 83 f8 01                   cmpq    $0x1, %rax
// 299: 4c 89 e8                      movq    %r13, %rax
// 29c: 7e 33                         jle     0x2d1 <_JIT_ENTRY+0x2d1>
// 29e: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 2a4: 75 54                         jne     0x2fa <_JIT_ENTRY+0x2fa>
// 2a6: 49 89 c7                      movq    %rax, %r15
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  PyInterpreterState_Get
// 2b3: ff d0                         callq   *%rax
// 2b5: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2bc: 49 8b 04 24                   movq    (%r12), %rax
// 2c0: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2c4: 49 89 0c 24                   movq    %rcx, (%r12)
// 2c8: 4d 89 fc                      movq    %r15, %r12
// 2cb: 48 83 f8 01                   cmpq    $0x1, %rax
// 2cf: 7f 2c                         jg      0x2fd <_JIT_ENTRY+0x2fd>
// 2d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d3:  R_X86_64_64  .rodata.str1.1+0x39
// 2db: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002dd:  R_X86_64_64  .rodata.str1.1+0x4f
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 2ef: ff d0                         callq   *%rax
// 2f1: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 2f5: e9 11 ff ff ff                jmp     0x20b <_JIT_ENTRY+0x20b>
// 2fa: 49 89 c4                      movq    %rax, %r12
// 2fd: 49 8d 34 ee                   leaq    (%r14,%rbp,8), %rsi
// 301: 48 83 c6 f8                   addq    $-0x8, %rsi
// 305: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000307:  R_X86_64_64  _JIT_OPARG
// 30f: f7 d0                         notl    %eax
// 311: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 316: 48 98                         cltq
// 318: 4d 89 64 c6 f0                movq    %r12, -0x10(%r14,%rax,8)
// 31d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031f:  R_X86_64_64  _JIT_CONTINUE
// 327: 48 89 df                      movq    %rbx, %rdi
// 32a: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 32f: 48 83 c4 18                   addq    $0x18, %rsp
// 333: 5b                            popq    %rbx
// 334: 41 5c                         popq    %r12
// 336: 41 5d                         popq    %r13
// 338: 41 5e                         popq    %r14
// 33a: 41 5f                         popq    %r15
// 33c: 5d                            popq    %rbp
// 33d: ff e0                         jmpq    *%rax
// 33f: 
static const unsigned char _CALL_LENplus_BINARY_OP_ADD_FLOAT_code_body[832] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x3d, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x7b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x63, 0xe8, 0x4d, 0x8b, 0x7c, 0xee, 0xf0, 0x4d, 0x8b, 0x64, 0xee, 0xf8, 0xf2, 0x41, 0x0f, 0x10, 0x47, 0x10, 0xf2, 0x41, 0x0f, 0x58, 0x44, 0x24, 0x10, 0x49, 0x83, 0x3f, 0x01, 0x75, 0x58, 0xf2, 0x41, 0x0f, 0x11, 0x47, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0xe9, 0xf6, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x7d, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x31, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0x41, 0xf6, 0x47, 0x03, 0x80, 0x0f, 0x85, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0f, 0xeb, 0x72, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x47, 0x03, 0x80, 0x75, 0x29, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0f, 0x48, 0x83, 0xf8, 0x01, 0x4c, 0x89, 0xe8, 0x7e, 0x33, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x54, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xfc, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x2c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0x11, 0xff, 0xff, 0xff, 0x49, 0x89, 0xc4, 0x49, 0x8d, 0x34, 0xee, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x64, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_BINARY_OP_ADD_FLOAT_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x307, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _CALL_LENplus_BINARY_OP_ADD_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_BINARY_OP_ADD_FLOAT_data_holes[1];

// _CALL_LENplus_BINARY_OP_ADD_INT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_BINARY_OP_ADD_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 b6 01 00 00             js      0x27d <_JIT_ENTRY+0x27d>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 ed 00 00 00             je      0x274 <_JIT_ENTRY+0x274>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a2: f7 d0                         notl    %eax
// 1a4: 4c 63 e0                      movslq  %eax, %r12
// 1a7: 4f 8b 6c e6 f0                movq    -0x10(%r14,%r12,8), %r13
// 1ac: 4b 8b 6c e6 f8                movq    -0x8(%r14,%r12,8), %rbp
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _PyLong_Add
// 1bb: 4c 89 ef                      movq    %r13, %rdi
// 1be: 48 89 ee                      movq    %rbp, %rsi
// 1c1: ff d0                         callq   *%rax
// 1c3: 48 89 04 24                   movq    %rax, (%rsp)
// 1c7: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 1cb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cd:  R_X86_64_64  PyInterpreterState_Get
// 1d5: 75 3c                         jne     0x213 <_JIT_ENTRY+0x213>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  PyInterpreterState_Get
// 1e1: ff d0                         callq   *%rax
// 1e3: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ec:  R_X86_64_64  PyInterpreterState_Get
// 1f4: 48 ff 4d 00                   decq    (%rbp)
// 1f8: 75 19                         jne     0x213 <_JIT_ENTRY+0x213>
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  PyObject_Free
// 204: 48 89 ef                      movq    %rbp, %rdi
// 207: ff d0                         callq   *%rax
// 209: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020b:  R_X86_64_64  PyInterpreterState_Get
// 213: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 218: 75 1e                         jne     0x238 <_JIT_ENTRY+0x238>
// 21a: ff d1                         callq   *%rcx
// 21c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 223: 49 ff 4d 00                   decq    (%r13)
// 227: 75 0f                         jne     0x238 <_JIT_ENTRY+0x238>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  PyObject_Free
// 233: 4c 89 ef                      movq    %r13, %rdi
// 236: ff d0                         callq   *%rax
// 238: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 23c: 48 83 c0 f0                   addq    $-0x10, %rax
// 240: 48 8b 0c 24                   movq    (%rsp), %rcx
// 244: 48 85 c9                      testq   %rcx, %rcx
// 247: 74 31                         je      0x27a <_JIT_ENTRY+0x27a>
// 249: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 24d: 48 83 c6 f8                   addq    $-0x8, %rsi
// 251: 48 89 08                      movq    %rcx, (%rax)
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _JIT_CONTINUE
// 25e: 48 89 df                      movq    %rbx, %rdi
// 261: 4c 89 fa                      movq    %r15, %rdx
// 264: 48 83 c4 08                   addq    $0x8, %rsp
// 268: 5b                            popq    %rbx
// 269: 41 5c                         popq    %r12
// 26b: 41 5d                         popq    %r13
// 26d: 41 5e                         popq    %r14
// 26f: 41 5f                         popq    %r15
// 271: 5d                            popq    %rbp
// 272: ff e0                         jmpq    *%rax
// 274: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 278: eb 03                         jmp     0x27d <_JIT_ENTRY+0x27d>
// 27a: 49 89 c6                      movq    %rax, %r14
// 27d: 49 29 de                      subq    %rbx, %r14
// 280: 49 83 c6 b8                   addq    $-0x48, %r14
// 284: 49 c1 ee 03                   shrq    $0x3, %r14
// 288: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 28c: 31 c0                         xorl    %eax, %eax
// 28e: e9 09 fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 293: 
static const unsigned char _CALL_LENplus_BINARY_OP_ADD_INT_code_body[660] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xb6, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x4c, 0x63, 0xe0, 0x4f, 0x8b, 0x6c, 0xe6, 0xf0, 0x4b, 0x8b, 0x6c, 0xe6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x83, 0xc0, 0xf0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x09, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_BINARY_OP_ADD_INT_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Add, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_BINARY_OP_ADD_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_BINARY_OP_ADD_INT_data_holes[1];

// _CALL_LENplus_BINARY_OP_ADD_UNICODE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_BINARY_OP_ADD_UNICODE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 b6 01 00 00             js      0x27d <_JIT_ENTRY+0x27d>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 ed 00 00 00             je      0x274 <_JIT_ENTRY+0x274>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a2: f7 d0                         notl    %eax
// 1a4: 4c 63 e0                      movslq  %eax, %r12
// 1a7: 4b 8b 6c e6 f0                movq    -0x10(%r14,%r12,8), %rbp
// 1ac: 4f 8b 6c e6 f8                movq    -0x8(%r14,%r12,8), %r13
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  PyUnicode_Concat
// 1bb: 48 89 ef                      movq    %rbp, %rdi
// 1be: 4c 89 ee                      movq    %r13, %rsi
// 1c1: ff d0                         callq   *%rax
// 1c3: 48 89 04 24                   movq    %rax, (%rsp)
// 1c7: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 1cb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cd:  R_X86_64_64  PyInterpreterState_Get
// 1d5: 75 3c                         jne     0x213 <_JIT_ENTRY+0x213>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  PyInterpreterState_Get
// 1e1: ff d0                         callq   *%rax
// 1e3: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ec:  R_X86_64_64  PyInterpreterState_Get
// 1f4: 48 ff 4d 00                   decq    (%rbp)
// 1f8: 75 19                         jne     0x213 <_JIT_ENTRY+0x213>
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _PyUnicode_ExactDealloc
// 204: 48 89 ef                      movq    %rbp, %rdi
// 207: ff d0                         callq   *%rax
// 209: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020b:  R_X86_64_64  PyInterpreterState_Get
// 213: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 218: 75 1e                         jne     0x238 <_JIT_ENTRY+0x238>
// 21a: ff d1                         callq   *%rcx
// 21c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 223: 49 ff 4d 00                   decq    (%r13)
// 227: 75 0f                         jne     0x238 <_JIT_ENTRY+0x238>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _PyUnicode_ExactDealloc
// 233: 4c 89 ef                      movq    %r13, %rdi
// 236: ff d0                         callq   *%rax
// 238: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 23c: 48 83 c0 f0                   addq    $-0x10, %rax
// 240: 48 8b 0c 24                   movq    (%rsp), %rcx
// 244: 48 85 c9                      testq   %rcx, %rcx
// 247: 74 31                         je      0x27a <_JIT_ENTRY+0x27a>
// 249: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 24d: 48 83 c6 f8                   addq    $-0x8, %rsi
// 251: 48 89 08                      movq    %rcx, (%rax)
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _JIT_CONTINUE
// 25e: 48 89 df                      movq    %rbx, %rdi
// 261: 4c 89 fa                      movq    %r15, %rdx
// 264: 48 83 c4 08                   addq    $0x8, %rsp
// 268: 5b                            popq    %rbx
// 269: 41 5c                         popq    %r12
// 26b: 41 5d                         popq    %r13
// 26d: 41 5e                         popq    %r14
// 26f: 41 5f                         popq    %r15
// 271: 5d                            popq    %rbp
// 272: ff e0                         jmpq    *%rax
// 274: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 278: eb 03                         jmp     0x27d <_JIT_ENTRY+0x27d>
// 27a: 49 89 c6                      movq    %rax, %r14
// 27d: 49 29 de                      subq    %rbx, %r14
// 280: 49 83 c6 b8                   addq    $-0x48, %r14
// 284: 49 c1 ee 03                   shrq    $0x3, %r14
// 288: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 28c: 31 c0                         xorl    %eax, %eax
// 28e: e9 09 fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 293: 
static const unsigned char _CALL_LENplus_BINARY_OP_ADD_UNICODE_code_body[660] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xb6, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x4c, 0x63, 0xe0, 0x4b, 0x8b, 0x6c, 0xe6, 0xf0, 0x4f, 0x8b, 0x6c, 0xe6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x83, 0xc0, 0xf0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x09, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_BINARY_OP_ADD_UNICODE_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Concat, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_BINARY_OP_ADD_UNICODE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_BINARY_OP_ADD_UNICODE_data_holes[1];

// _CALL_LENplus_BINARY_OP_MULTIPLY_FLOAT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_BINARY_OP_MULTIPLY_FLOAT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 de                      subq    %rbx, %r14
// 79: 49 83 c6 b8                   addq    $-0x48, %r14
// 7d: 49 c1 ee 03                   shrq    $0x3, %r14
// 81: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// b2: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 3d 01 00 00             js      0x20b <_JIT_ENTRY+0x20b>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 04 24                   movq    (%r12), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 e2                      movq    %r12, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 04 24                   movq    (%r12), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 21                         js      0x182 <_JIT_ENTRY+0x182>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 0c 24                   decq    (%r12)
// 171: 75 0f                         jne     0x182 <_JIT_ENTRY+0x182>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: ff d0                         callq   *%rax
// 182: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 187: 48 85 d2                      testq   %rdx, %rdx
// 18a: 74 7b                         je      0x207 <_JIT_ENTRY+0x207>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c0                      movzwl  %ax, %eax
// 199: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 19e: 29 c1                         subl    %eax, %ecx
// 1a0: 48 63 c9                      movslq  %ecx, %rcx
// 1a3: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a7: f7 d0                         notl    %eax
// 1a9: 48 63 e8                      movslq  %eax, %rbp
// 1ac: 4d 8b 7c ee f0                movq    -0x10(%r14,%rbp,8), %r15
// 1b1: 4d 8b 64 ee f8                movq    -0x8(%r14,%rbp,8), %r12
// 1b6: f2 41 0f 10 47 10             movsd   0x10(%r15), %xmm0       # xmm0 = mem[0],zero
// 1bc: f2 41 0f 59 44 24 10          mulsd   0x10(%r12), %xmm0
// 1c3: 49 83 3f 01                   cmpq    $0x1, (%r15)
// 1c7: 75 58                         jne     0x221 <_JIT_ENTRY+0x221>
// 1c9: f2 41 0f 11 47 10             movsd   %xmm0, 0x10(%r15)
// 1cf: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1d5: 75 28                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  PyInterpreterState_Get
// 1e1: ff d0                         callq   *%rax
// 1e3: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1ea: 49 ff 0c 24                   decq    (%r12)
// 1ee: 75 0f                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _PyFloat_ExactDealloc
// 1fa: 4c 89 e7                      movq    %r12, %rdi
// 1fd: ff d0                         callq   *%rax
// 1ff: 4d 89 fc                      movq    %r15, %r12
// 202: e9 f6 00 00 00                jmp     0x2fd <_JIT_ENTRY+0x2fd>
// 207: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 20b: 49 29 de                      subq    %rbx, %r14
// 20e: 49 83 c6 b8                   addq    $-0x48, %r14
// 212: 49 c1 ee 03                   shrq    $0x3, %r14
// 216: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 21a: 31 c0                         xorl    %eax, %eax
// 21c: e9 7d fe ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 221: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 226: 75 31                         jne     0x259 <_JIT_ENTRY+0x259>
// 228: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 22f: 41 f6 47 03 80                testb   $-0x80, 0x3(%r15)
// 234: 0f 85 c3 00 00 00             jne     0x2fd <_JIT_ENTRY+0x2fd>
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  PyInterpreterState_Get
// 244: ff d0                         callq   *%rax
// 246: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 24d: 49 8b 07                      movq    (%r15), %rax
// 250: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 254: 49 89 0f                      movq    %rcx, (%r15)
// 257: eb 72                         jmp     0x2cb <_JIT_ENTRY+0x2cb>
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  PyFloat_FromDouble
// 263: ff d0                         callq   *%rax
// 265: 48 85 c0                      testq   %rax, %rax
// 268: 0f 84 83 00 00 00             je      0x2f1 <_JIT_ENTRY+0x2f1>
// 26e: 41 f6 47 03 80                testb   $-0x80, 0x3(%r15)
// 273: 75 29                         jne     0x29e <_JIT_ENTRY+0x29e>
// 275: 49 89 c5                      movq    %rax, %r13
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  PyInterpreterState_Get
// 282: ff d0                         callq   *%rax
// 284: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 28b: 49 8b 07                      movq    (%r15), %rax
// 28e: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 292: 49 89 0f                      movq    %rcx, (%r15)
// 295: 48 83 f8 01                   cmpq    $0x1, %rax
// 299: 4c 89 e8                      movq    %r13, %rax
// 29c: 7e 33                         jle     0x2d1 <_JIT_ENTRY+0x2d1>
// 29e: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 2a4: 75 54                         jne     0x2fa <_JIT_ENTRY+0x2fa>
// 2a6: 49 89 c7                      movq    %rax, %r15
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  PyInterpreterState_Get
// 2b3: ff d0                         callq   *%rax
// 2b5: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2bc: 49 8b 04 24                   movq    (%r12), %rax
// 2c0: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2c4: 49 89 0c 24                   movq    %rcx, (%r12)
// 2c8: 4d 89 fc                      movq    %r15, %r12
// 2cb: 48 83 f8 01                   cmpq    $0x1, %rax
// 2cf: 7f 2c                         jg      0x2fd <_JIT_ENTRY+0x2fd>
// 2d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d3:  R_X86_64_64  .rodata.str1.1+0x39
// 2db: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002dd:  R_X86_64_64  .rodata.str1.1+0x4f
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 2ef: ff d0                         callq   *%rax
// 2f1: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 2f5: e9 11 ff ff ff                jmp     0x20b <_JIT_ENTRY+0x20b>
// 2fa: 49 89 c4                      movq    %rax, %r12
// 2fd: 49 8d 34 ee                   leaq    (%r14,%rbp,8), %rsi
// 301: 48 83 c6 f8                   addq    $-0x8, %rsi
// 305: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000307:  R_X86_64_64  _JIT_OPARG
// 30f: f7 d0                         notl    %eax
// 311: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 316: 48 98                         cltq
// 318: 4d 89 64 c6 f0                movq    %r12, -0x10(%r14,%rax,8)
// 31d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031f:  R_X86_64_64  _JIT_CONTINUE
// 327: 48 89 df                      movq    %rbx, %rdi
// 32a: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 32f: 48 83 c4 18                   addq    $0x18, %rsp
// 333: 5b                            popq    %rbx
// 334: 41 5c                         popq    %r12
// 336: 41 5d                         popq    %r13
// 338: 41 5e                         popq    %r14
// 33a: 41 5f                         popq    %r15
// 33c: 5d                            popq    %rbp
// 33d: ff e0                         jmpq    *%rax
// 33f: 
static const unsigned char _CALL_LENplus_BINARY_OP_MULTIPLY_FLOAT_code_body[832] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x3d, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x7b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x63, 0xe8, 0x4d, 0x8b, 0x7c, 0xee, 0xf0, 0x4d, 0x8b, 0x64, 0xee, 0xf8, 0xf2, 0x41, 0x0f, 0x10, 0x47, 0x10, 0xf2, 0x41, 0x0f, 0x59, 0x44, 0x24, 0x10, 0x49, 0x83, 0x3f, 0x01, 0x75, 0x58, 0xf2, 0x41, 0x0f, 0x11, 0x47, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0xe9, 0xf6, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x7d, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x31, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0x41, 0xf6, 0x47, 0x03, 0x80, 0x0f, 0x85, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0f, 0xeb, 0x72, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x47, 0x03, 0x80, 0x75, 0x29, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0f, 0x48, 0x83, 0xf8, 0x01, 0x4c, 0x89, 0xe8, 0x7e, 0x33, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x54, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xfc, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x2c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0x11, 0xff, 0xff, 0xff, 0x49, 0x89, 0xc4, 0x49, 0x8d, 0x34, 0xee, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x64, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_BINARY_OP_MULTIPLY_FLOAT_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x307, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _CALL_LENplus_BINARY_OP_MULTIPLY_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_BINARY_OP_MULTIPLY_FLOAT_data_holes[1];

// _CALL_LENplus_BINARY_OP_MULTIPLY_INT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_BINARY_OP_MULTIPLY_INT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 b6 01 00 00             js      0x27d <_JIT_ENTRY+0x27d>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 ed 00 00 00             je      0x274 <_JIT_ENTRY+0x274>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a2: f7 d0                         notl    %eax
// 1a4: 4c 63 e0                      movslq  %eax, %r12
// 1a7: 4f 8b 6c e6 f0                movq    -0x10(%r14,%r12,8), %r13
// 1ac: 4b 8b 6c e6 f8                movq    -0x8(%r14,%r12,8), %rbp
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _PyLong_Multiply
// 1bb: 4c 89 ef                      movq    %r13, %rdi
// 1be: 48 89 ee                      movq    %rbp, %rsi
// 1c1: ff d0                         callq   *%rax
// 1c3: 48 89 04 24                   movq    %rax, (%rsp)
// 1c7: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 1cb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cd:  R_X86_64_64  PyInterpreterState_Get
// 1d5: 75 3c                         jne     0x213 <_JIT_ENTRY+0x213>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  PyInterpreterState_Get
// 1e1: ff d0                         callq   *%rax
// 1e3: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ec:  R_X86_64_64  PyInterpreterState_Get
// 1f4: 48 ff 4d 00                   decq    (%rbp)
// 1f8: 75 19                         jne     0x213 <_JIT_ENTRY+0x213>
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  PyObject_Free
// 204: 48 89 ef                      movq    %rbp, %rdi
// 207: ff d0                         callq   *%rax
// 209: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020b:  R_X86_64_64  PyInterpreterState_Get
// 213: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 218: 75 1e                         jne     0x238 <_JIT_ENTRY+0x238>
// 21a: ff d1                         callq   *%rcx
// 21c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 223: 49 ff 4d 00                   decq    (%r13)
// 227: 75 0f                         jne     0x238 <_JIT_ENTRY+0x238>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  PyObject_Free
// 233: 4c 89 ef                      movq    %r13, %rdi
// 236: ff d0                         callq   *%rax
// 238: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 23c: 48 83 c0 f0                   addq    $-0x10, %rax
// 240: 48 8b 0c 24                   movq    (%rsp), %rcx
// 244: 48 85 c9                      testq   %rcx, %rcx
// 247: 74 31                         je      0x27a <_JIT_ENTRY+0x27a>
// 249: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 24d: 48 83 c6 f8                   addq    $-0x8, %rsi
// 251: 48 89 08                      movq    %rcx, (%rax)
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _JIT_CONTINUE
// 25e: 48 89 df                      movq    %rbx, %rdi
// 261: 4c 89 fa                      movq    %r15, %rdx
// 264: 48 83 c4 08                   addq    $0x8, %rsp
// 268: 5b                            popq    %rbx
// 269: 41 5c                         popq    %r12
// 26b: 41 5d                         popq    %r13
// 26d: 41 5e                         popq    %r14
// 26f: 41 5f                         popq    %r15
// 271: 5d                            popq    %rbp
// 272: ff e0                         jmpq    *%rax
// 274: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 278: eb 03                         jmp     0x27d <_JIT_ENTRY+0x27d>
// 27a: 49 89 c6                      movq    %rax, %r14
// 27d: 49 29 de                      subq    %rbx, %r14
// 280: 49 83 c6 b8                   addq    $-0x48, %r14
// 284: 49 c1 ee 03                   shrq    $0x3, %r14
// 288: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 28c: 31 c0                         xorl    %eax, %eax
// 28e: e9 09 fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 293: 
static const unsigned char _CALL_LENplus_BINARY_OP_MULTIPLY_INT_code_body[660] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xb6, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x4c, 0x63, 0xe0, 0x4f, 0x8b, 0x6c, 0xe6, 0xf0, 0x4b, 0x8b, 0x6c, 0xe6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x83, 0xc0, 0xf0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x09, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_BINARY_OP_MULTIPLY_INT_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Multiply, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_BINARY_OP_MULTIPLY_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_BINARY_OP_MULTIPLY_INT_data_holes[1];

// _CALL_LENplus_BINARY_OP_SUBTRACT_FLOAT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_BINARY_OP_SUBTRACT_FLOAT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 de                      subq    %rbx, %r14
// 79: 49 83 c6 b8                   addq    $-0x48, %r14
// 7d: 49 c1 ee 03                   shrq    $0x3, %r14
// 81: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// b2: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 3d 01 00 00             js      0x20b <_JIT_ENTRY+0x20b>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 04 24                   movq    (%r12), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 e2                      movq    %r12, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 04 24                   movq    (%r12), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 21                         js      0x182 <_JIT_ENTRY+0x182>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 0c 24                   decq    (%r12)
// 171: 75 0f                         jne     0x182 <_JIT_ENTRY+0x182>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: ff d0                         callq   *%rax
// 182: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 187: 48 85 d2                      testq   %rdx, %rdx
// 18a: 74 7b                         je      0x207 <_JIT_ENTRY+0x207>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c0                      movzwl  %ax, %eax
// 199: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 19e: 29 c1                         subl    %eax, %ecx
// 1a0: 48 63 c9                      movslq  %ecx, %rcx
// 1a3: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a7: f7 d0                         notl    %eax
// 1a9: 48 63 e8                      movslq  %eax, %rbp
// 1ac: 4d 8b 7c ee f0                movq    -0x10(%r14,%rbp,8), %r15
// 1b1: 4d 8b 64 ee f8                movq    -0x8(%r14,%rbp,8), %r12
// 1b6: f2 41 0f 10 47 10             movsd   0x10(%r15), %xmm0       # xmm0 = mem[0],zero
// 1bc: f2 41 0f 5c 44 24 10          subsd   0x10(%r12), %xmm0
// 1c3: 49 83 3f 01                   cmpq    $0x1, (%r15)
// 1c7: 75 58                         jne     0x221 <_JIT_ENTRY+0x221>
// 1c9: f2 41 0f 11 47 10             movsd   %xmm0, 0x10(%r15)
// 1cf: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1d5: 75 28                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  PyInterpreterState_Get
// 1e1: ff d0                         callq   *%rax
// 1e3: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1ea: 49 ff 0c 24                   decq    (%r12)
// 1ee: 75 0f                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _PyFloat_ExactDealloc
// 1fa: 4c 89 e7                      movq    %r12, %rdi
// 1fd: ff d0                         callq   *%rax
// 1ff: 4d 89 fc                      movq    %r15, %r12
// 202: e9 f6 00 00 00                jmp     0x2fd <_JIT_ENTRY+0x2fd>
// 207: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 20b: 49 29 de                      subq    %rbx, %r14
// 20e: 49 83 c6 b8                   addq    $-0x48, %r14
// 212: 49 c1 ee 03                   shrq    $0x3, %r14
// 216: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 21a: 31 c0                         xorl    %eax, %eax
// 21c: e9 7d fe ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 221: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 226: 75 31                         jne     0x259 <_JIT_ENTRY+0x259>
// 228: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 22f: 41 f6 47 03 80                testb   $-0x80, 0x3(%r15)
// 234: 0f 85 c3 00 00 00             jne     0x2fd <_JIT_ENTRY+0x2fd>
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  PyInterpreterState_Get
// 244: ff d0                         callq   *%rax
// 246: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 24d: 49 8b 07                      movq    (%r15), %rax
// 250: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 254: 49 89 0f                      movq    %rcx, (%r15)
// 257: eb 72                         jmp     0x2cb <_JIT_ENTRY+0x2cb>
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  PyFloat_FromDouble
// 263: ff d0                         callq   *%rax
// 265: 48 85 c0                      testq   %rax, %rax
// 268: 0f 84 83 00 00 00             je      0x2f1 <_JIT_ENTRY+0x2f1>
// 26e: 41 f6 47 03 80                testb   $-0x80, 0x3(%r15)
// 273: 75 29                         jne     0x29e <_JIT_ENTRY+0x29e>
// 275: 49 89 c5                      movq    %rax, %r13
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  PyInterpreterState_Get
// 282: ff d0                         callq   *%rax
// 284: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 28b: 49 8b 07                      movq    (%r15), %rax
// 28e: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 292: 49 89 0f                      movq    %rcx, (%r15)
// 295: 48 83 f8 01                   cmpq    $0x1, %rax
// 299: 4c 89 e8                      movq    %r13, %rax
// 29c: 7e 33                         jle     0x2d1 <_JIT_ENTRY+0x2d1>
// 29e: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 2a4: 75 54                         jne     0x2fa <_JIT_ENTRY+0x2fa>
// 2a6: 49 89 c7                      movq    %rax, %r15
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  PyInterpreterState_Get
// 2b3: ff d0                         callq   *%rax
// 2b5: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2bc: 49 8b 04 24                   movq    (%r12), %rax
// 2c0: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2c4: 49 89 0c 24                   movq    %rcx, (%r12)
// 2c8: 4d 89 fc                      movq    %r15, %r12
// 2cb: 48 83 f8 01                   cmpq    $0x1, %rax
// 2cf: 7f 2c                         jg      0x2fd <_JIT_ENTRY+0x2fd>
// 2d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d3:  R_X86_64_64  .rodata.str1.1+0x39
// 2db: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002dd:  R_X86_64_64  .rodata.str1.1+0x4f
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 2ef: ff d0                         callq   *%rax
// 2f1: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 2f5: e9 11 ff ff ff                jmp     0x20b <_JIT_ENTRY+0x20b>
// 2fa: 49 89 c4                      movq    %rax, %r12
// 2fd: 49 8d 34 ee                   leaq    (%r14,%rbp,8), %rsi
// 301: 48 83 c6 f8                   addq    $-0x8, %rsi
// 305: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000307:  R_X86_64_64  _JIT_OPARG
// 30f: f7 d0                         notl    %eax
// 311: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 316: 48 98                         cltq
// 318: 4d 89 64 c6 f0                movq    %r12, -0x10(%r14,%rax,8)
// 31d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031f:  R_X86_64_64  _JIT_CONTINUE
// 327: 48 89 df                      movq    %rbx, %rdi
// 32a: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 32f: 48 83 c4 18                   addq    $0x18, %rsp
// 333: 5b                            popq    %rbx
// 334: 41 5c                         popq    %r12
// 336: 41 5d                         popq    %r13
// 338: 41 5e                         popq    %r14
// 33a: 41 5f                         popq    %r15
// 33c: 5d                            popq    %rbp
// 33d: ff e0                         jmpq    *%rax
// 33f: 
static const unsigned char _CALL_LENplus_BINARY_OP_SUBTRACT_FLOAT_code_body[832] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x3d, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x7b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x63, 0xe8, 0x4d, 0x8b, 0x7c, 0xee, 0xf0, 0x4d, 0x8b, 0x64, 0xee, 0xf8, 0xf2, 0x41, 0x0f, 0x10, 0x47, 0x10, 0xf2, 0x41, 0x0f, 0x5c, 0x44, 0x24, 0x10, 0x49, 0x83, 0x3f, 0x01, 0x75, 0x58, 0xf2, 0x41, 0x0f, 0x11, 0x47, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0xe9, 0xf6, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x7d, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x31, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0x41, 0xf6, 0x47, 0x03, 0x80, 0x0f, 0x85, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0f, 0xeb, 0x72, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x47, 0x03, 0x80, 0x75, 0x29, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0f, 0x48, 0x83, 0xf8, 0x01, 0x4c, 0x89, 0xe8, 0x7e, 0x33, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x54, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xfc, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x2c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0x11, 0xff, 0xff, 0xff, 0x49, 0x89, 0xc4, 0x49, 0x8d, 0x34, 0xee, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x64, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_BINARY_OP_SUBTRACT_FLOAT_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x307, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _CALL_LENplus_BINARY_OP_SUBTRACT_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_BINARY_OP_SUBTRACT_FLOAT_data_holes[1];

// _CALL_LENplus_BINARY_OP_SUBTRACT_INT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_BINARY_OP_SUBTRACT_INT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 b6 01 00 00             js      0x27d <_JIT_ENTRY+0x27d>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 ed 00 00 00             je      0x274 <_JIT_ENTRY+0x274>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a2: f7 d0                         notl    %eax
// 1a4: 4c 63 e0                      movslq  %eax, %r12
// 1a7: 4f 8b 6c e6 f0                movq    -0x10(%r14,%r12,8), %r13
// 1ac: 4b 8b 6c e6 f8                movq    -0x8(%r14,%r12,8), %rbp
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _PyLong_Subtract
// 1bb: 4c 89 ef                      movq    %r13, %rdi
// 1be: 48 89 ee                      movq    %rbp, %rsi
// 1c1: ff d0                         callq   *%rax
// 1c3: 48 89 04 24                   movq    %rax, (%rsp)
// 1c7: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 1cb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cd:  R_X86_64_64  PyInterpreterState_Get
// 1d5: 75 3c                         jne     0x213 <_JIT_ENTRY+0x213>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  PyInterpreterState_Get
// 1e1: ff d0                         callq   *%rax
// 1e3: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ec:  R_X86_64_64  PyInterpreterState_Get
// 1f4: 48 ff 4d 00                   decq    (%rbp)
// 1f8: 75 19                         jne     0x213 <_JIT_ENTRY+0x213>
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  PyObject_Free
// 204: 48 89 ef                      movq    %rbp, %rdi
// 207: ff d0                         callq   *%rax
// 209: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020b:  R_X86_64_64  PyInterpreterState_Get
// 213: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 218: 75 1e                         jne     0x238 <_JIT_ENTRY+0x238>
// 21a: ff d1                         callq   *%rcx
// 21c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 223: 49 ff 4d 00                   decq    (%r13)
// 227: 75 0f                         jne     0x238 <_JIT_ENTRY+0x238>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  PyObject_Free
// 233: 4c 89 ef                      movq    %r13, %rdi
// 236: ff d0                         callq   *%rax
// 238: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 23c: 48 83 c0 f0                   addq    $-0x10, %rax
// 240: 48 8b 0c 24                   movq    (%rsp), %rcx
// 244: 48 85 c9                      testq   %rcx, %rcx
// 247: 74 31                         je      0x27a <_JIT_ENTRY+0x27a>
// 249: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 24d: 48 83 c6 f8                   addq    $-0x8, %rsi
// 251: 48 89 08                      movq    %rcx, (%rax)
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _JIT_CONTINUE
// 25e: 48 89 df                      movq    %rbx, %rdi
// 261: 4c 89 fa                      movq    %r15, %rdx
// 264: 48 83 c4 08                   addq    $0x8, %rsp
// 268: 5b                            popq    %rbx
// 269: 41 5c                         popq    %r12
// 26b: 41 5d                         popq    %r13
// 26d: 41 5e                         popq    %r14
// 26f: 41 5f                         popq    %r15
// 271: 5d                            popq    %rbp
// 272: ff e0                         jmpq    *%rax
// 274: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 278: eb 03                         jmp     0x27d <_JIT_ENTRY+0x27d>
// 27a: 49 89 c6                      movq    %rax, %r14
// 27d: 49 29 de                      subq    %rbx, %r14
// 280: 49 83 c6 b8                   addq    $-0x48, %r14
// 284: 49 c1 ee 03                   shrq    $0x3, %r14
// 288: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 28c: 31 c0                         xorl    %eax, %eax
// 28e: e9 09 fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 293: 
static const unsigned char _CALL_LENplus_BINARY_OP_SUBTRACT_INT_code_body[660] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xb6, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x4c, 0x63, 0xe0, 0x4f, 0x8b, 0x6c, 0xe6, 0xf0, 0x4b, 0x8b, 0x6c, 0xe6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x83, 0xc0, 0xf0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x09, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_BINARY_OP_SUBTRACT_INT_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Subtract, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_BINARY_OP_SUBTRACT_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_BINARY_OP_SUBTRACT_INT_data_holes[1];

// _CALL_LENplus_BINARY_SLICE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_BINARY_SLICE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 12 02 00 00             js      0x2d9 <_JIT_ENTRY+0x2d9>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 39 01 00 00             je      0x2c0 <_JIT_ENTRY+0x2c0>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a2: f7 d0                         notl    %eax
// 1a4: 4c 63 e8                      movslq  %eax, %r13
// 1a7: 4b 8b 74 ee f8                movq    -0x8(%r14,%r13,8), %rsi
// 1ac: 4f 8b 64 ee e8                movq    -0x18(%r14,%r13,8), %r12
// 1b1: 4b 8b 7c ee f0                movq    -0x10(%r14,%r13,8), %rdi
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 1c0: ff d0                         callq   *%rax
// 1c2: 48 85 c0                      testq   %rax, %rax
// 1c5: 0f 84 fb 00 00 00             je      0x2c6 <_JIT_ENTRY+0x2c6>
// 1cb: 48 89 c5                      movq    %rax, %rbp
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  PyObject_GetItem
// 1d8: 4c 89 e7                      movq    %r12, %rdi
// 1db: 48 89 ee                      movq    %rbp, %rsi
// 1de: ff d0                         callq   *%rax
// 1e0: 48 89 04 24                   movq    %rax, (%rsp)
// 1e4: 48 8b 45 00                   movq    (%rbp), %rax
// 1e8: 48 85 c0                      testq   %rax, %rax
// 1eb: 7f 22                         jg      0x20f <_JIT_ENTRY+0x20f>
// 1ed: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ef:  R_X86_64_64  .rodata.str1.1
// 1f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f9:  R_X86_64_64  _Py_NegativeRefcount
// 201: be 99 01 00 00                movl    $0x199, %esi            # imm = 0x199
// 206: 48 89 ea                      movq    %rbp, %rdx
// 209: ff d0                         callq   *%rax
// 20b: 48 8b 45 00                   movq    (%rbp), %rax
// 20f: 85 c0                         testl   %eax, %eax
// 211: 78 21                         js      0x234 <_JIT_ENTRY+0x234>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21d: ff d0                         callq   *%rax
// 21f: 48 ff 4d 00                   decq    (%rbp)
// 223: 75 0f                         jne     0x234 <_JIT_ENTRY+0x234>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _Py_Dealloc
// 22f: 48 89 ef                      movq    %rbp, %rdi
// 232: ff d0                         callq   *%rax
// 234: 48 8b 2c 24                   movq    (%rsp), %rbp
// 238: 49 8b 04 24                   movq    (%r12), %rax
// 23c: 48 85 c0                      testq   %rax, %rax
// 23f: 7f 22                         jg      0x263 <_JIT_ENTRY+0x263>
// 241: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000243:  R_X86_64_64  .rodata.str1.1
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_NegativeRefcount
// 255: be 9b 01 00 00                movl    $0x19b, %esi            # imm = 0x19B
// 25a: 4c 89 e2                      movq    %r12, %rdx
// 25d: ff d0                         callq   *%rax
// 25f: 49 8b 04 24                   movq    (%r12), %rax
// 263: 85 c0                         testl   %eax, %eax
// 265: 78 21                         js      0x288 <_JIT_ENTRY+0x288>
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 271: ff d0                         callq   *%rax
// 273: 49 ff 0c 24                   decq    (%r12)
// 277: 75 0f                         jne     0x288 <_JIT_ENTRY+0x288>
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_Dealloc
// 283: 4c 89 e7                      movq    %r12, %rdi
// 286: ff d0                         callq   *%rax
// 288: 4b 8d 04 ee                   leaq    (%r14,%r13,8), %rax
// 28c: 48 83 c0 e8                   addq    $-0x18, %rax
// 290: 48 85 ed                      testq   %rbp, %rbp
// 293: 74 41                         je      0x2d6 <_JIT_ENTRY+0x2d6>
// 295: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 299: 48 83 c6 f0                   addq    $-0x10, %rsi
// 29d: 48 89 28                      movq    %rbp, (%rax)
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _JIT_CONTINUE
// 2aa: 48 89 df                      movq    %rbx, %rdi
// 2ad: 4c 89 fa                      movq    %r15, %rdx
// 2b0: 48 83 c4 08                   addq    $0x8, %rsp
// 2b4: 5b                            popq    %rbx
// 2b5: 41 5c                         popq    %r12
// 2b7: 41 5d                         popq    %r13
// 2b9: 41 5e                         popq    %r14
// 2bb: 41 5f                         popq    %r15
// 2bd: 5d                            popq    %rbp
// 2be: ff e0                         jmpq    *%rax
// 2c0: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 2c4: eb 13                         jmp     0x2d9 <_JIT_ENTRY+0x2d9>
// 2c6: 31 ed                         xorl    %ebp, %ebp
// 2c8: 49 8b 04 24                   movq    (%r12), %rax
// 2cc: 48 85 c0                      testq   %rax, %rax
// 2cf: 7f 92                         jg      0x263 <_JIT_ENTRY+0x263>
// 2d1: e9 6b ff ff ff                jmp     0x241 <_JIT_ENTRY+0x241>
// 2d6: 49 89 c6                      movq    %rax, %r14
// 2d9: 49 29 de                      subq    %rbx, %r14
// 2dc: 49 83 c6 b8                   addq    $-0x48, %r14
// 2e0: 49 c1 ee 03                   shrq    $0x3, %r14
// 2e4: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2e8: 31 c0                         xorl    %eax, %eax
// 2ea: e9 ad fd ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 2ef: 
static const unsigned char _CALL_LENplus_BINARY_SLICE_code_body[752] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x12, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x39, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x4c, 0x63, 0xe8, 0x4b, 0x8b, 0x74, 0xee, 0xf8, 0x4f, 0x8b, 0x64, 0xee, 0xe8, 0x4b, 0x8b, 0x7c, 0xee, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xfb, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x2c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x9b, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xee, 0x48, 0x83, 0xc0, 0xe8, 0x48, 0x85, 0xed, 0x74, 0x41, 0x4b, 0x8d, 0x34, 0xee, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x13, 0x31, 0xed, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x92, 0xe9, 0x6b, 0xff, 0xff, 0xff, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xad, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_BINARY_SLICE_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_BINARY_SLICE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_BINARY_SLICE_data_holes[1];

// _CALL_LENplus_BINARY_SUBSCR
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_BINARY_SUBSCR.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 e5 01 00 00             js      0x2ac <_JIT_ENTRY+0x2ac>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 1c 01 00 00             je      0x2a3 <_JIT_ENTRY+0x2a3>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a2: f7 d0                         notl    %eax
// 1a4: 4c 63 e0                      movslq  %eax, %r12
// 1a7: 4b 8b 6c e6 f0                movq    -0x10(%r14,%r12,8), %rbp
// 1ac: 4f 8b 6c e6 f8                movq    -0x8(%r14,%r12,8), %r13
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  PyObject_GetItem
// 1bb: 48 89 ef                      movq    %rbp, %rdi
// 1be: 4c 89 ee                      movq    %r13, %rsi
// 1c1: ff d0                         callq   *%rax
// 1c3: 48 89 04 24                   movq    %rax, (%rsp)
// 1c7: 48 8b 45 00                   movq    (%rbp), %rax
// 1cb: 48 85 c0                      testq   %rax, %rax
// 1ce: 7f 22                         jg      0x1f2 <_JIT_ENTRY+0x1f2>
// 1d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _Py_NegativeRefcount
// 1e4: be 81 01 00 00                movl    $0x181, %esi            # imm = 0x181
// 1e9: 48 89 ea                      movq    %rbp, %rdx
// 1ec: ff d0                         callq   *%rax
// 1ee: 48 8b 45 00                   movq    (%rbp), %rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 78 21                         js      0x217 <_JIT_ENTRY+0x217>
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 200: ff d0                         callq   *%rax
// 202: 48 ff 4d 00                   decq    (%rbp)
// 206: 75 0f                         jne     0x217 <_JIT_ENTRY+0x217>
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _Py_Dealloc
// 212: 48 89 ef                      movq    %rbp, %rdi
// 215: ff d0                         callq   *%rax
// 217: 49 8b 45 00                   movq    (%r13), %rax
// 21b: 48 85 c0                      testq   %rax, %rax
// 21e: 7f 22                         jg      0x242 <_JIT_ENTRY+0x242>
// 220: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000222:  R_X86_64_64  .rodata.str1.1
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _Py_NegativeRefcount
// 234: be 82 01 00 00                movl    $0x182, %esi            # imm = 0x182
// 239: 4c 89 ea                      movq    %r13, %rdx
// 23c: ff d0                         callq   *%rax
// 23e: 49 8b 45 00                   movq    (%r13), %rax
// 242: 85 c0                         testl   %eax, %eax
// 244: 78 21                         js      0x267 <_JIT_ENTRY+0x267>
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 250: ff d0                         callq   *%rax
// 252: 49 ff 4d 00                   decq    (%r13)
// 256: 75 0f                         jne     0x267 <_JIT_ENTRY+0x267>
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _Py_Dealloc
// 262: 4c 89 ef                      movq    %r13, %rdi
// 265: ff d0                         callq   *%rax
// 267: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 26b: 48 83 c0 f0                   addq    $-0x10, %rax
// 26f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 273: 48 85 c9                      testq   %rcx, %rcx
// 276: 74 31                         je      0x2a9 <_JIT_ENTRY+0x2a9>
// 278: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 27c: 48 83 c6 f8                   addq    $-0x8, %rsi
// 280: 48 89 08                      movq    %rcx, (%rax)
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _JIT_CONTINUE
// 28d: 48 89 df                      movq    %rbx, %rdi
// 290: 4c 89 fa                      movq    %r15, %rdx
// 293: 48 83 c4 08                   addq    $0x8, %rsp
// 297: 5b                            popq    %rbx
// 298: 41 5c                         popq    %r12
// 29a: 41 5d                         popq    %r13
// 29c: 41 5e                         popq    %r14
// 29e: 41 5f                         popq    %r15
// 2a0: 5d                            popq    %rbp
// 2a1: ff e0                         jmpq    *%rax
// 2a3: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 2a7: eb 03                         jmp     0x2ac <_JIT_ENTRY+0x2ac>
// 2a9: 49 89 c6                      movq    %rax, %r14
// 2ac: 49 29 de                      subq    %rbx, %r14
// 2af: 49 83 c6 b8                   addq    $-0x48, %r14
// 2b3: 49 c1 ee 03                   shrq    $0x3, %r14
// 2b7: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2bb: 31 c0                         xorl    %eax, %eax
// 2bd: e9 da fd ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 2c2: 
static const unsigned char _CALL_LENplus_BINARY_SUBSCR_code_body[707] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xe5, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x1c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x4c, 0x63, 0xe0, 0x4b, 0x8b, 0x6c, 0xe6, 0xf0, 0x4f, 0x8b, 0x6c, 0xe6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x81, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x82, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x83, 0xc0, 0xf0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xda, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_BINARY_SUBSCR_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_BINARY_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_BINARY_SUBSCR_data_holes[1];

// _CALL_LENplus_BINARY_SUBSCR_DICT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_BINARY_SUBSCR_DICT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 de                      subq    %rbx, %r14
// 79: 49 83 c6 b8                   addq    $-0x48, %r14
// 7d: 49 c1 ee 03                   shrq    $0x3, %r14
// 81: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 14 24                   movq    %rdx, (%rsp)
// b1: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  PyObject_Size
// bf: 4c 89 e7                      movq    %r12, %rdi
// c2: ff d0                         callq   *%rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 0f 88 fc 00 00 00             js      0x1c9 <_JIT_ENTRY+0x1c9>
// cd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cf:  R_X86_64_64  PyLong_FromSsize_t
// d7: 48 89 c7                      movq    %rax, %rdi
// da: ff d1                         callq   *%rcx
// dc: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// e1: 48 8b 45 00                   movq    (%rbp), %rax
// e5: 48 85 c0                      testq   %rax, %rax
// e8: 7f 22                         jg      0x10c <_JIT_ENTRY+0x10c>
// ea: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_NegativeRefcount
// fe: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 103: 48 89 ea                      movq    %rbp, %rdx
// 106: ff d0                         callq   *%rax
// 108: 48 8b 45 00                   movq    (%rbp), %rax
// 10c: 85 c0                         testl   %eax, %eax
// 10e: 78 21                         js      0x131 <_JIT_ENTRY+0x131>
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11a: ff d0                         callq   *%rax
// 11c: 48 ff 4d 00                   decq    (%rbp)
// 120: 75 0f                         jne     0x131 <_JIT_ENTRY+0x131>
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  _Py_Dealloc
// 12c: 48 89 ef                      movq    %rbp, %rdi
// 12f: ff d0                         callq   *%rax
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_NegativeRefcount
// 14e: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 153: 4c 89 e2                      movq    %r12, %rdx
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: 4c 89 e7                      movq    %r12, %rdi
// 17f: ff d0                         callq   *%rax
// 181: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 186: 48 85 d2                      testq   %rdx, %rdx
// 189: 74 43                         je      0x1ce <_JIT_ENTRY+0x1ce>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _JIT_OPARG
// 195: 0f b7 c0                      movzwl  %ax, %eax
// 198: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 19d: 29 c1                         subl    %eax, %ecx
// 19f: 48 63 c9                      movslq  %ecx, %rcx
// 1a2: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a6: f7 d0                         notl    %eax
// 1a8: 4c 63 e0                      movslq  %eax, %r12
// 1ab: 4b 8b 6c e6 f0                movq    -0x10(%r14,%r12,8), %rbp
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  PyDict_Type
// 1ba: 48 39 45 08                   cmpq    %rax, 0x8(%rbp)
// 1be: 74 27                         je      0x1e7 <_JIT_ENTRY+0x1e7>
// 1c0: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1c4: e9 ad fe ff ff                jmp     0x76 <_JIT_ENTRY+0x76>
// 1c9: 4c 89 f0                      movq    %r14, %rax
// 1cc: eb 04                         jmp     0x1d2 <_JIT_ENTRY+0x1d2>
// 1ce: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1d2: 48 29 d8                      subq    %rbx, %rax
// 1d5: 48 83 c0 b8                   addq    $-0x48, %rax
// 1d9: 48 c1 e8 03                   shrq    $0x3, %rax
// 1dd: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1e0: 31 c0                         xorl    %eax, %eax
// 1e2: e9 b7 fe ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 1e7: 4f 8b 6c e6 f8                movq    -0x8(%r14,%r12,8), %r13
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  PyDict_GetItemRef
// 1f6: 48 8d 54 24 10                leaq    0x10(%rsp), %rdx
// 1fb: 48 89 ef                      movq    %rbp, %rdi
// 1fe: 4c 89 ee                      movq    %r13, %rsi
// 201: ff d0                         callq   *%rax
// 203: 41 89 c7                      movl    %eax, %r15d
// 206: 85 c0                         testl   %eax, %eax
// 208: 74 0f                         je      0x219 <_JIT_ENTRY+0x219>
// 20a: 48 8b 45 00                   movq    (%rbp), %rax
// 20e: 48 85 c0                      testq   %rax, %rax
// 211: 7e 1e                         jle     0x231 <_JIT_ENTRY+0x231>
// 213: 85 c0                         testl   %eax, %eax
// 215: 79 40                         jns     0x257 <_JIT_ENTRY+0x257>
// 217: eb 5f                         jmp     0x278 <_JIT_ENTRY+0x278>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _PyErr_SetKeyError
// 223: 4c 89 ef                      movq    %r13, %rdi
// 226: ff d0                         callq   *%rax
// 228: 48 8b 45 00                   movq    (%rbp), %rax
// 22c: 48 85 c0                      testq   %rax, %rax
// 22f: 7f e2                         jg      0x213 <_JIT_ENTRY+0x213>
// 231: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000233:  R_X86_64_64  .rodata.str1.1
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_NegativeRefcount
// 245: be 0c 02 00 00                movl    $0x20c, %esi            # imm = 0x20C
// 24a: 48 89 ea                      movq    %rbp, %rdx
// 24d: ff d0                         callq   *%rax
// 24f: 48 8b 45 00                   movq    (%rbp), %rax
// 253: 85 c0                         testl   %eax, %eax
// 255: 78 21                         js      0x278 <_JIT_ENTRY+0x278>
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 261: ff d0                         callq   *%rax
// 263: 48 ff 4d 00                   decq    (%rbp)
// 267: 75 0f                         jne     0x278 <_JIT_ENTRY+0x278>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_Dealloc
// 273: 48 89 ef                      movq    %rbp, %rdi
// 276: ff d0                         callq   *%rax
// 278: 49 8b 45 00                   movq    (%r13), %rax
// 27c: 48 85 c0                      testq   %rax, %rax
// 27f: 7f 22                         jg      0x2a3 <_JIT_ENTRY+0x2a3>
// 281: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000283:  R_X86_64_64  .rodata.str1.1
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_NegativeRefcount
// 295: be 0d 02 00 00                movl    $0x20d, %esi            # imm = 0x20D
// 29a: 4c 89 ea                      movq    %r13, %rdx
// 29d: ff d0                         callq   *%rax
// 29f: 49 8b 45 00                   movq    (%r13), %rax
// 2a3: 85 c0                         testl   %eax, %eax
// 2a5: 78 21                         js      0x2c8 <_JIT_ENTRY+0x2c8>
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b1: ff d0                         callq   *%rax
// 2b3: 49 ff 4d 00                   decq    (%r13)
// 2b7: 75 0f                         jne     0x2c8 <_JIT_ENTRY+0x2c8>
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_Dealloc
// 2c3: 4c 89 ef                      movq    %r13, %rdi
// 2c6: ff d0                         callq   *%rax
// 2c8: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 2cc: 48 83 c0 f0                   addq    $-0x10, %rax
// 2d0: 45 85 ff                      testl   %r15d, %r15d
// 2d3: 0f 8e f9 fe ff ff             jle     0x1d2 <_JIT_ENTRY+0x1d2>
// 2d9: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 2dd: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2e1: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 2e6: 48 89 08                      movq    %rcx, (%rax)
// 2e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002eb:  R_X86_64_64  _JIT_CONTINUE
// 2f3: 48 89 df                      movq    %rbx, %rdi
// 2f6: 48 8b 14 24                   movq    (%rsp), %rdx
// 2fa: 48 83 c4 18                   addq    $0x18, %rsp
// 2fe: 5b                            popq    %rbx
// 2ff: 41 5c                         popq    %r12
// 301: 41 5d                         popq    %r13
// 303: 41 5e                         popq    %r14
// 305: 41 5f                         popq    %r15
// 307: 5d                            popq    %rbp
// 308: ff e0                         jmpq    *%rax
// 30a: 
static const unsigned char _CALL_LENplus_BINARY_SUBSCR_DICT_code_body[779] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xfc, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x43, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x4c, 0x63, 0xe0, 0x4b, 0x8b, 0x6c, 0xe6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x45, 0x08, 0x74, 0x27, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0xad, 0xfe, 0xff, 0xff, 0x4c, 0x89, 0xf0, 0xeb, 0x04, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xb7, 0xfe, 0xff, 0xff, 0x4f, 0x8b, 0x6c, 0xe6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x10, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x41, 0x89, 0xc7, 0x85, 0xc0, 0x74, 0x0f, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0d, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x83, 0xc0, 0xf0, 0x45, 0x85, 0xff, 0x0f, 0x8e, 0xf9, 0xfe, 0xff, 0xff, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_BINARY_SUBSCR_DICT_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetKeyError, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_BINARY_SUBSCR_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_BINARY_SUBSCR_DICT_data_holes[1];

// _CALL_LENplus_BINARY_SUBSCR_LIST_INT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_BINARY_SUBSCR_LIST_INT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 39                         je      0xaf <_JIT_ENTRY+0xaf>
// 76: 4c 89 f0                      movq    %r14, %rax
// 79: 48 29 d8                      subq    %rbx, %rax
// 7c: 48 83 c0 b8                   addq    $-0x48, %rax
// 80: 48 c1 e8 03                   shrq    $0x3, %rax
// 84: 89 43 40                      movl    %eax, 0x40(%rbx)
// 87: 48 8b 03                      movq    (%rbx), %rax
// 8a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008c:  R_X86_64_64  _JIT_TARGET
// 94: 89 c9                         movl    %ecx, %ecx
// 96: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 9a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a0: 48 83 c4 18                   addq    $0x18, %rsp
// a4: 5b                            popq    %rbx
// a5: 41 5c                         popq    %r12
// a7: 41 5d                         popq    %r13
// a9: 41 5e                         popq    %r14
// ab: 41 5f                         popq    %r15
// ad: 5d                            popq    %rbp
// ae: c3                            retq
// af: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b4: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  PyObject_Size
// c2: 4c 89 ef                      movq    %r13, %rdi
// c5: ff d0                         callq   *%rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 0f 88 1a 02 00 00             js      0x2ea <_JIT_ENTRY+0x2ea>
// d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d2:  R_X86_64_64  PyLong_FromSsize_t
// da: 48 89 c7                      movq    %rax, %rdi
// dd: ff d1                         callq   *%rcx
// df: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e4: 48 8b 45 00                   movq    (%rbp), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7f 22                         jg      0x10f <_JIT_ENTRY+0x10f>
// ed: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ef:  R_X86_64_64  .rodata.str1.1
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_NegativeRefcount
// 101: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 106: 48 89 ea                      movq    %rbp, %rdx
// 109: ff d0                         callq   *%rax
// 10b: 48 8b 45 00                   movq    (%rbp), %rax
// 10f: 85 c0                         testl   %eax, %eax
// 111: 78 21                         js      0x134 <_JIT_ENTRY+0x134>
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11d: ff d0                         callq   *%rax
// 11f: 48 ff 4d 00                   decq    (%rbp)
// 123: 75 0f                         jne     0x134 <_JIT_ENTRY+0x134>
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_Dealloc
// 12f: 48 89 ef                      movq    %rbp, %rdi
// 132: ff d0                         callq   *%rax
// 134: 49 8b 45 00                   movq    (%r13), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 156: 4c 89 ea                      movq    %r13, %rdx
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 45 00                   movq    (%r13), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 78 21                         js      0x184 <_JIT_ENTRY+0x184>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 4d 00                   decq    (%r13)
// 173: 75 0f                         jne     0x184 <_JIT_ENTRY+0x184>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 ef                      movq    %r13, %rdi
// 182: ff d0                         callq   *%rax
// 184: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 189: 48 85 f6                      testq   %rsi, %rsi
// 18c: 0f 84 54 01 00 00             je      0x2e6 <_JIT_ENTRY+0x2e6>
// 192: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 196: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000198:  R_X86_64_64  _JIT_OPARG
// 1a0: 0f b7 c9                      movzwl  %cx, %ecx
// 1a3: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1a8: 29 ca                         subl    %ecx, %edx
// 1aa: 48 63 d2                      movslq  %edx, %rdx
// 1ad: 49 89 34 d6                   movq    %rsi, (%r14,%rdx,8)
// 1b1: f7 d1                         notl    %ecx
// 1b3: 48 63 e9                      movslq  %ecx, %rbp
// 1b6: 4d 8b 6c ee f8                movq    -0x8(%r14,%rbp,8), %r13
// 1bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bd:  R_X86_64_64  PyLong_Type
// 1c5: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 1c9: 0f 85 aa fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1cf: 4d 8b 64 ee f0                movq    -0x10(%r14,%rbp,8), %r12
// 1d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d6:  R_X86_64_64  PyList_Type
// 1de: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 1e3: 0f 85 90 fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1e9: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 1ee: 0f 87 85 fe ff ff             ja      0x79 <_JIT_ENTRY+0x79>
// 1f4: 41 8b 4d 18                   movl    0x18(%r13), %ecx
// 1f8: 49 39 4c 24 10                cmpq    %rcx, 0x10(%r12)
// 1fd: 0f 8e 76 fe ff ff             jle     0x79 <_JIT_ENTRY+0x79>
// 203: 49 8b 44 24 18                movq    0x18(%r12), %rax
// 208: 4c 8b 3c c8                   movq    (%rax,%rcx,8), %r15
// 20c: 41 8b 07                      movl    (%r15), %eax
// 20f: ff c0                         incl    %eax
// 211: 74 0f                         je      0x222 <_JIT_ENTRY+0x222>
// 213: 41 89 07                      movl    %eax, (%r15)
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 220: ff d0                         callq   *%rax
// 222: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 227: 75 28                         jne     0x251 <_JIT_ENTRY+0x251>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  PyInterpreterState_Get
// 233: ff d0                         callq   *%rax
// 235: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 23c: 49 ff 4d 00                   decq    (%r13)
// 240: 75 0f                         jne     0x251 <_JIT_ENTRY+0x251>
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  PyObject_Free
// 24c: 4c 89 ef                      movq    %r13, %rdi
// 24f: ff d0                         callq   *%rax
// 251: 49 8b 04 24                   movq    (%r12), %rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 7f 22                         jg      0x27c <_JIT_ENTRY+0x27c>
// 25a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025c:  R_X86_64_64  .rodata.str1.1
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_NegativeRefcount
// 26e: be cc 01 00 00                movl    $0x1cc, %esi            # imm = 0x1CC
// 273: 4c 89 e2                      movq    %r12, %rdx
// 276: ff d0                         callq   *%rax
// 278: 49 8b 04 24                   movq    (%r12), %rax
// 27c: 4d 8d 2c ee                   leaq    (%r14,%rbp,8), %r13
// 280: 49 83 c5 f8                   addq    $-0x8, %r13
// 284: 85 c0                         testl   %eax, %eax
// 286: 78 21                         js      0x2a9 <_JIT_ENTRY+0x2a9>
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 292: ff d0                         callq   *%rax
// 294: 49 ff 0c 24                   decq    (%r12)
// 298: 75 0f                         jne     0x2a9 <_JIT_ENTRY+0x2a9>
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _Py_Dealloc
// 2a4: 4c 89 e7                      movq    %r12, %rdi
// 2a7: ff d0                         callq   *%rax
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _JIT_OPARG
// 2b3: f7 d0                         notl    %eax
// 2b5: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2ba: 48 98                         cltq
// 2bc: 4d 89 7c c6 f0                movq    %r15, -0x10(%r14,%rax,8)
// 2c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c3:  R_X86_64_64  _JIT_CONTINUE
// 2cb: 48 89 df                      movq    %rbx, %rdi
// 2ce: 4c 89 ee                      movq    %r13, %rsi
// 2d1: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2d6: 48 83 c4 18                   addq    $0x18, %rsp
// 2da: 5b                            popq    %rbx
// 2db: 41 5c                         popq    %r12
// 2dd: 41 5d                         popq    %r13
// 2df: 41 5e                         popq    %r14
// 2e1: 41 5f                         popq    %r15
// 2e3: 5d                            popq    %rbp
// 2e4: ff e0                         jmpq    *%rax
// 2e6: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 2ea: 49 29 de                      subq    %rbx, %r14
// 2ed: 49 83 c6 b8                   addq    $-0x48, %r14
// 2f1: 49 c1 ee 03                   shrq    $0x3, %r14
// 2f5: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2f9: 31 c0                         xorl    %eax, %eax
// 2fb: e9 a0 fd ff ff                jmp     0xa0 <_JIT_ENTRY+0xa0>
// 300: 
static const unsigned char _CALL_LENplus_BINARY_SUBSCR_LIST_INT_code_body[769] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x1a, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x54, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd6, 0xf7, 0xd1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x6c, 0xee, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0xaa, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x64, 0xee, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x90, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x85, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x4d, 0x18, 0x49, 0x39, 0x4c, 0x24, 0x10, 0x0f, 0x8e, 0x76, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x44, 0x24, 0x18, 0x4c, 0x8b, 0x3c, 0xc8, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcc, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x2c, 0xee, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x7c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xa0, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_BINARY_SUBSCR_LIST_INT_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_BINARY_SUBSCR_LIST_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_BINARY_SUBSCR_LIST_INT_data_holes[1];

// _CALL_LENplus_BINARY_SUBSCR_STR_INT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_BINARY_SUBSCR_STR_INT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 39                         je      0xaf <_JIT_ENTRY+0xaf>
// 76: 4c 89 f0                      movq    %r14, %rax
// 79: 48 29 d8                      subq    %rbx, %rax
// 7c: 48 83 c0 b8                   addq    $-0x48, %rax
// 80: 48 c1 e8 03                   shrq    $0x3, %rax
// 84: 89 43 40                      movl    %eax, 0x40(%rbx)
// 87: 48 8b 03                      movq    (%rbx), %rax
// 8a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008c:  R_X86_64_64  _JIT_TARGET
// 94: 89 c9                         movl    %ecx, %ecx
// 96: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 9a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a0: 48 83 c4 18                   addq    $0x18, %rsp
// a4: 5b                            popq    %rbx
// a5: 41 5c                         popq    %r12
// a7: 41 5d                         popq    %r13
// a9: 41 5e                         popq    %r14
// ab: 41 5f                         popq    %r15
// ad: 5d                            popq    %rbp
// ae: c3                            retq
// af: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b4: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  PyObject_Size
// c2: 4c 89 ef                      movq    %r13, %rdi
// c5: ff d0                         callq   *%rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 0f 88 66 01 00 00             js      0x236 <_JIT_ENTRY+0x236>
// d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d2:  R_X86_64_64  PyLong_FromSsize_t
// da: 48 89 c7                      movq    %rax, %rdi
// dd: ff d1                         callq   *%rcx
// df: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e4: 48 8b 45 00                   movq    (%rbp), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7f 22                         jg      0x10f <_JIT_ENTRY+0x10f>
// ed: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ef:  R_X86_64_64  .rodata.str1.1
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_NegativeRefcount
// 101: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 106: 48 89 ea                      movq    %rbp, %rdx
// 109: ff d0                         callq   *%rax
// 10b: 48 8b 45 00                   movq    (%rbp), %rax
// 10f: 85 c0                         testl   %eax, %eax
// 111: 78 21                         js      0x134 <_JIT_ENTRY+0x134>
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11d: ff d0                         callq   *%rax
// 11f: 48 ff 4d 00                   decq    (%rbp)
// 123: 75 0f                         jne     0x134 <_JIT_ENTRY+0x134>
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_Dealloc
// 12f: 48 89 ef                      movq    %rbp, %rdi
// 132: ff d0                         callq   *%rax
// 134: 49 8b 45 00                   movq    (%r13), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 156: 4c 89 ea                      movq    %r13, %rdx
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 45 00                   movq    (%r13), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 78 21                         js      0x184 <_JIT_ENTRY+0x184>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 4d 00                   decq    (%r13)
// 173: 75 0f                         jne     0x184 <_JIT_ENTRY+0x184>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 ef                      movq    %r13, %rdi
// 182: ff d0                         callq   *%rax
// 184: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 189: 48 85 f6                      testq   %rsi, %rsi
// 18c: 0f 84 a0 00 00 00             je      0x232 <_JIT_ENTRY+0x232>
// 192: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 196: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000198:  R_X86_64_64  _JIT_OPARG
// 1a0: 0f b7 c9                      movzwl  %cx, %ecx
// 1a3: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1a8: 29 ca                         subl    %ecx, %edx
// 1aa: 48 63 d2                      movslq  %edx, %rdx
// 1ad: 49 89 34 d6                   movq    %rsi, (%r14,%rdx,8)
// 1b1: f7 d1                         notl    %ecx
// 1b3: 48 63 c9                      movslq  %ecx, %rcx
// 1b6: 49 8b 7c ce f8                movq    -0x8(%r14,%rcx,8), %rdi
// 1bb: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001bd:  R_X86_64_64  PyLong_Type
// 1c5: 48 39 57 08                   cmpq    %rdx, 0x8(%rdi)
// 1c9: 0f 85 aa fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1cf: 4d 8b 64 ce f0                movq    -0x10(%r14,%rcx,8), %r12
// 1d4: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001d6:  R_X86_64_64  PyUnicode_Type
// 1de: 49 39 54 24 08                cmpq    %rdx, 0x8(%r12)
// 1e3: 0f 85 90 fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1e9: 48 83 7f 10 08                cmpq    $0x8, 0x10(%rdi)
// 1ee: 0f 87 85 fe ff ff             ja      0x79 <_JIT_ENTRY+0x79>
// 1f4: 8b 57 18                      movl    0x18(%rdi), %edx
// 1f7: 49 39 54 24 10                cmpq    %rdx, 0x10(%r12)
// 1fc: 0f 8e 77 fe ff ff             jle     0x79 <_JIT_ENTRY+0x79>
// 202: 41 8b 74 24 20                movl    0x20(%r12), %esi
// 207: 41 89 f0                      movl    %esi, %r8d
// 20a: 41 c1 e8 02                   shrl    $0x2, %r8d
// 20e: 41 83 e0 07                   andl    $0x7, %r8d
// 212: 41 83 f8 02                   cmpl    $0x2, %r8d
// 216: 74 34                         je      0x24c <_JIT_ENTRY+0x24c>
// 218: 41 83 f8 01                   cmpl    $0x1, %r8d
// 21c: 75 3f                         jne     0x25d <_JIT_ENTRY+0x25d>
// 21e: 40 f6 c6 20                   testb   $0x20, %sil
// 222: 75 46                         jne     0x26a <_JIT_ENTRY+0x26a>
// 224: 49 8b 74 24 38                movq    0x38(%r12), %rsi
// 229: 0f b6 14 16                   movzbl  (%rsi,%rdx), %edx
// 22d: e9 8c 00 00 00                jmp     0x2be <_JIT_ENTRY+0x2be>
// 232: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 236: 49 29 de                      subq    %rbx, %r14
// 239: 49 83 c6 b8                   addq    $-0x48, %r14
// 23d: 49 c1 ee 03                   shrq    $0x3, %r14
// 241: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 245: 31 c0                         xorl    %eax, %eax
// 247: e9 54 fe ff ff                jmp     0xa0 <_JIT_ENTRY+0xa0>
// 24c: 40 f6 c6 20                   testb   $0x20, %sil
// 250: 75 35                         jne     0x287 <_JIT_ENTRY+0x287>
// 252: 49 8b 74 24 38                movq    0x38(%r12), %rsi
// 257: 0f b7 14 56                   movzwl  (%rsi,%rdx,2), %edx
// 25b: eb 61                         jmp     0x2be <_JIT_ENTRY+0x2be>
// 25d: 40 f6 c6 20                   testb   $0x20, %sil
// 261: 75 41                         jne     0x2a4 <_JIT_ENTRY+0x2a4>
// 263: 49 8b 74 24 38                movq    0x38(%r12), %rsi
// 268: eb 51                         jmp     0x2bb <_JIT_ENTRY+0x2bb>
// 26a: 45 31 c0                      xorl    %r8d, %r8d
// 26d: 40 f6 c6 40                   testb   $0x40, %sil
// 271: 41 0f 94 c0                   sete    %r8b
// 275: 49 c1 e0 04                   shlq    $0x4, %r8
// 279: 4b 8d 34 20                   leaq    (%r8,%r12), %rsi
// 27d: 48 83 c6 28                   addq    $0x28, %rsi
// 281: 0f b6 14 16                   movzbl  (%rsi,%rdx), %edx
// 285: eb 37                         jmp     0x2be <_JIT_ENTRY+0x2be>
// 287: 45 31 c0                      xorl    %r8d, %r8d
// 28a: 40 f6 c6 40                   testb   $0x40, %sil
// 28e: 41 0f 94 c0                   sete    %r8b
// 292: 49 c1 e0 04                   shlq    $0x4, %r8
// 296: 4b 8d 34 20                   leaq    (%r8,%r12), %rsi
// 29a: 48 83 c6 28                   addq    $0x28, %rsi
// 29e: 0f b7 14 56                   movzwl  (%rsi,%rdx,2), %edx
// 2a2: eb 1a                         jmp     0x2be <_JIT_ENTRY+0x2be>
// 2a4: 45 31 c0                      xorl    %r8d, %r8d
// 2a7: 40 f6 c6 40                   testb   $0x40, %sil
// 2ab: 41 0f 94 c0                   sete    %r8b
// 2af: 49 c1 e0 04                   shlq    $0x4, %r8
// 2b3: 4b 8d 34 20                   leaq    (%r8,%r12), %rsi
// 2b7: 48 83 c6 28                   addq    $0x28, %rsi
// 2bb: 8b 14 96                      movl    (%rsi,%rdx,4), %edx
// 2be: 83 fa 7f                      cmpl    $0x7f, %edx
// 2c1: 0f 87 b2 fd ff ff             ja      0x79 <_JIT_ENTRY+0x79>
// 2c7: 4d 8d 2c ce                   leaq    (%r14,%rcx,8), %r13
// 2cb: 49 83 c5 f8                   addq    $-0x8, %r13
// 2cf: 89 d0                         movl    %edx, %eax
// 2d1: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 2d5: 48 c1 e0 04                   shlq    $0x4, %rax
// 2d9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002db:  R_X86_64_64  _PyRuntime
// 2e3: 4c 8d 3c 01                   leaq    (%rcx,%rax), %r15
// 2e7: 49 81 c7 a0 32 01 00          addq    $0x132a0, %r15          # imm = 0x132A0
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  .text+0x3b0
// 2f8: ff d0                         callq   *%rax
// 2fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fc:  R_X86_64_64  .text+0x350
// 304: bf e3 01 00 00                movl    $0x1e3, %edi            # imm = 0x1E3
// 309: 4c 89 e6                      movq    %r12, %rsi
// 30c: ff d0                         callq   *%rax
// 30e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000310:  R_X86_64_64  _JIT_OPARG
// 318: f7 d0                         notl    %eax
// 31a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 31f: 48 98                         cltq
// 321: 4d 89 7c c6 f0                movq    %r15, -0x10(%r14,%rax,8)
// 326: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000328:  R_X86_64_64  _JIT_CONTINUE
// 330: 48 89 df                      movq    %rbx, %rdi
// 333: 4c 89 ee                      movq    %r13, %rsi
// 336: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 33b: 48 83 c4 18                   addq    $0x18, %rsp
// 33f: 5b                            popq    %rbx
// 340: 41 5c                         popq    %r12
// 342: 41 5d                         popq    %r13
// 344: 41 5e                         popq    %r14
// 346: 41 5f                         popq    %r15
// 348: 5d                            popq    %rbp
// 349: ff e0                         jmpq    *%rax
// 34b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 
// 0000000000000350 <Py_DECREF>:
// 350: 53                            pushq   %rbx
// 351: 48 89 f3                      movq    %rsi, %rbx
// 354: 48 8b 06                      movq    (%rsi), %rax
// 357: 48 85 c0                      testq   %rax, %rax
// 35a: 7e 06                         jle     0x362 <Py_DECREF+0x12>
// 35c: 85 c0                         testl   %eax, %eax
// 35e: 79 24                         jns     0x384 <Py_DECREF+0x34>
// 360: eb 33                         jmp     0x395 <Py_DECREF+0x45>
// 362: 89 fe                         movl    %edi, %esi
// 364: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000366:  R_X86_64_64  .rodata.str1.1
// 36e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000370:  R_X86_64_64  _Py_NegativeRefcount
// 378: 48 89 da                      movq    %rbx, %rdx
// 37b: ff d0                         callq   *%rax
// 37d: 48 8b 03                      movq    (%rbx), %rax
// 380: 85 c0                         testl   %eax, %eax
// 382: 78 11                         js      0x395 <Py_DECREF+0x45>
// 384: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000386:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 38e: ff d0                         callq   *%rax
// 390: 48 ff 0b                      decq    (%rbx)
// 393: 74 02                         je      0x397 <Py_DECREF+0x47>
// 395: 5b                            popq    %rbx
// 396: c3                            retq
// 397: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000399:  R_X86_64_64  _Py_Dealloc
// 3a1: 48 89 df                      movq    %rbx, %rdi
// 3a4: 5b                            popq    %rbx
// 3a5: ff e0                         jmpq    *%rax
// 3a7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 
// 00000000000003b0 <_Py_DECREF_SPECIALIZED>:
// 3b0: 53                            pushq   %rbx
// 3b1: f6 47 03 80                   testb   $-0x80, 0x3(%rdi)
// 3b5: 75 1b                         jne     0x3d2 <_Py_DECREF_SPECIALIZED+0x22>
// 3b7: 48 89 fb                      movq    %rdi, %rbx
// 3ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bc:  R_X86_64_64  PyInterpreterState_Get
// 3c4: ff d0                         callq   *%rax
// 3c6: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 3cd: 48 ff 0b                      decq    (%rbx)
// 3d0: 74 02                         je      0x3d4 <_Py_DECREF_SPECIALIZED+0x24>
// 3d2: 5b                            popq    %rbx
// 3d3: c3                            retq
// 3d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d6:  R_X86_64_64  PyObject_Free
// 3de: 48 89 df                      movq    %rbx, %rdi
// 3e1: 5b                            popq    %rbx
// 3e2: ff e0                         jmpq    *%rax
// 3e4: 
static const unsigned char _CALL_LENplus_BINARY_SUBSCR_STR_INT_code_body[997] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x66, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xa0, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd6, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x49, 0x8b, 0x7c, 0xce, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x57, 0x08, 0x0f, 0x85, 0xaa, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x64, 0xce, 0xf0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x54, 0x24, 0x08, 0x0f, 0x85, 0x90, 0xfe, 0xff, 0xff, 0x48, 0x83, 0x7f, 0x10, 0x08, 0x0f, 0x87, 0x85, 0xfe, 0xff, 0xff, 0x8b, 0x57, 0x18, 0x49, 0x39, 0x54, 0x24, 0x10, 0x0f, 0x8e, 0x77, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x74, 0x24, 0x20, 0x41, 0x89, 0xf0, 0x41, 0xc1, 0xe8, 0x02, 0x41, 0x83, 0xe0, 0x07, 0x41, 0x83, 0xf8, 0x02, 0x74, 0x34, 0x41, 0x83, 0xf8, 0x01, 0x75, 0x3f, 0x40, 0xf6, 0xc6, 0x20, 0x75, 0x46, 0x49, 0x8b, 0x74, 0x24, 0x38, 0x0f, 0xb6, 0x14, 0x16, 0xe9, 0x8c, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x54, 0xfe, 0xff, 0xff, 0x40, 0xf6, 0xc6, 0x20, 0x75, 0x35, 0x49, 0x8b, 0x74, 0x24, 0x38, 0x0f, 0xb7, 0x14, 0x56, 0xeb, 0x61, 0x40, 0xf6, 0xc6, 0x20, 0x75, 0x41, 0x49, 0x8b, 0x74, 0x24, 0x38, 0xeb, 0x51, 0x45, 0x31, 0xc0, 0x40, 0xf6, 0xc6, 0x40, 0x41, 0x0f, 0x94, 0xc0, 0x49, 0xc1, 0xe0, 0x04, 0x4b, 0x8d, 0x34, 0x20, 0x48, 0x83, 0xc6, 0x28, 0x0f, 0xb6, 0x14, 0x16, 0xeb, 0x37, 0x45, 0x31, 0xc0, 0x40, 0xf6, 0xc6, 0x40, 0x41, 0x0f, 0x94, 0xc0, 0x49, 0xc1, 0xe0, 0x04, 0x4b, 0x8d, 0x34, 0x20, 0x48, 0x83, 0xc6, 0x28, 0x0f, 0xb7, 0x14, 0x56, 0xeb, 0x1a, 0x45, 0x31, 0xc0, 0x40, 0xf6, 0xc6, 0x40, 0x41, 0x0f, 0x94, 0xc0, 0x49, 0xc1, 0xe0, 0x04, 0x4b, 0x8d, 0x34, 0x20, 0x48, 0x83, 0xc6, 0x28, 0x8b, 0x14, 0x96, 0x83, 0xfa, 0x7f, 0x0f, 0x87, 0xb2, 0xfd, 0xff, 0xff, 0x4d, 0x8d, 0x2c, 0xce, 0x49, 0x83, 0xc5, 0xf8, 0x89, 0xd0, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8d, 0x3c, 0x01, 0x49, 0x81, 0xc7, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x7c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0xf6, 0x47, 0x03, 0x80, 0x75, 0x1b, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CALL_LENplus_BINARY_SUBSCR_STR_INT_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x3b0},
    {0x2fc, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x350},
    {0x310, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x366, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x370, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x386, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x399, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x3d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_BINARY_SUBSCR_STR_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_BINARY_SUBSCR_STR_INT_data_holes[1];

// _CALL_LENplus_BINARY_SUBSCR_TUPLE_INT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_BINARY_SUBSCR_TUPLE_INT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 39                         je      0xaf <_JIT_ENTRY+0xaf>
// 76: 4c 89 f0                      movq    %r14, %rax
// 79: 48 29 d8                      subq    %rbx, %rax
// 7c: 48 83 c0 b8                   addq    $-0x48, %rax
// 80: 48 c1 e8 03                   shrq    $0x3, %rax
// 84: 89 43 40                      movl    %eax, 0x40(%rbx)
// 87: 48 8b 03                      movq    (%rbx), %rax
// 8a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008c:  R_X86_64_64  _JIT_TARGET
// 94: 89 c9                         movl    %ecx, %ecx
// 96: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 9a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a0: 48 83 c4 18                   addq    $0x18, %rsp
// a4: 5b                            popq    %rbx
// a5: 41 5c                         popq    %r12
// a7: 41 5d                         popq    %r13
// a9: 41 5e                         popq    %r14
// ab: 41 5f                         popq    %r15
// ad: 5d                            popq    %rbp
// ae: c3                            retq
// af: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b4: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  PyObject_Size
// c2: 4c 89 ef                      movq    %r13, %rdi
// c5: ff d0                         callq   *%rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 0f 88 16 02 00 00             js      0x2e6 <_JIT_ENTRY+0x2e6>
// d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d2:  R_X86_64_64  PyLong_FromSsize_t
// da: 48 89 c7                      movq    %rax, %rdi
// dd: ff d1                         callq   *%rcx
// df: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e4: 48 8b 45 00                   movq    (%rbp), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7f 22                         jg      0x10f <_JIT_ENTRY+0x10f>
// ed: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ef:  R_X86_64_64  .rodata.str1.1
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_NegativeRefcount
// 101: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 106: 48 89 ea                      movq    %rbp, %rdx
// 109: ff d0                         callq   *%rax
// 10b: 48 8b 45 00                   movq    (%rbp), %rax
// 10f: 85 c0                         testl   %eax, %eax
// 111: 78 21                         js      0x134 <_JIT_ENTRY+0x134>
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11d: ff d0                         callq   *%rax
// 11f: 48 ff 4d 00                   decq    (%rbp)
// 123: 75 0f                         jne     0x134 <_JIT_ENTRY+0x134>
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_Dealloc
// 12f: 48 89 ef                      movq    %rbp, %rdi
// 132: ff d0                         callq   *%rax
// 134: 49 8b 45 00                   movq    (%r13), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 156: 4c 89 ea                      movq    %r13, %rdx
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 45 00                   movq    (%r13), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 78 21                         js      0x184 <_JIT_ENTRY+0x184>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 4d 00                   decq    (%r13)
// 173: 75 0f                         jne     0x184 <_JIT_ENTRY+0x184>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 ef                      movq    %r13, %rdi
// 182: ff d0                         callq   *%rax
// 184: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 189: 48 85 f6                      testq   %rsi, %rsi
// 18c: 0f 84 50 01 00 00             je      0x2e2 <_JIT_ENTRY+0x2e2>
// 192: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 196: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000198:  R_X86_64_64  _JIT_OPARG
// 1a0: 0f b7 c9                      movzwl  %cx, %ecx
// 1a3: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1a8: 29 ca                         subl    %ecx, %edx
// 1aa: 48 63 d2                      movslq  %edx, %rdx
// 1ad: 49 89 34 d6                   movq    %rsi, (%r14,%rdx,8)
// 1b1: f7 d1                         notl    %ecx
// 1b3: 48 63 e9                      movslq  %ecx, %rbp
// 1b6: 4d 8b 6c ee f8                movq    -0x8(%r14,%rbp,8), %r13
// 1bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bd:  R_X86_64_64  PyLong_Type
// 1c5: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 1c9: 0f 85 aa fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1cf: 4d 8b 64 ee f0                movq    -0x10(%r14,%rbp,8), %r12
// 1d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d6:  R_X86_64_64  PyTuple_Type
// 1de: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 1e3: 0f 85 90 fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1e9: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 1ee: 0f 87 85 fe ff ff             ja      0x79 <_JIT_ENTRY+0x79>
// 1f4: 41 8b 4d 18                   movl    0x18(%r13), %ecx
// 1f8: 49 39 4c 24 10                cmpq    %rcx, 0x10(%r12)
// 1fd: 0f 8e 76 fe ff ff             jle     0x79 <_JIT_ENTRY+0x79>
// 203: 4d 8b 7c cc 18                movq    0x18(%r12,%rcx,8), %r15
// 208: 41 8b 07                      movl    (%r15), %eax
// 20b: ff c0                         incl    %eax
// 20d: 74 0f                         je      0x21e <_JIT_ENTRY+0x21e>
// 20f: 41 89 07                      movl    %eax, (%r15)
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 21c: ff d0                         callq   *%rax
// 21e: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 223: 75 28                         jne     0x24d <_JIT_ENTRY+0x24d>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  PyInterpreterState_Get
// 22f: ff d0                         callq   *%rax
// 231: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 238: 49 ff 4d 00                   decq    (%r13)
// 23c: 75 0f                         jne     0x24d <_JIT_ENTRY+0x24d>
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  PyObject_Free
// 248: 4c 89 ef                      movq    %r13, %rdi
// 24b: ff d0                         callq   *%rax
// 24d: 49 8b 04 24                   movq    (%r12), %rax
// 251: 48 85 c0                      testq   %rax, %rax
// 254: 7f 22                         jg      0x278 <_JIT_ENTRY+0x278>
// 256: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000258:  R_X86_64_64  .rodata.str1.1
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _Py_NegativeRefcount
// 26a: be fa 01 00 00                movl    $0x1fa, %esi            # imm = 0x1FA
// 26f: 4c 89 e2                      movq    %r12, %rdx
// 272: ff d0                         callq   *%rax
// 274: 49 8b 04 24                   movq    (%r12), %rax
// 278: 4d 8d 2c ee                   leaq    (%r14,%rbp,8), %r13
// 27c: 49 83 c5 f8                   addq    $-0x8, %r13
// 280: 85 c0                         testl   %eax, %eax
// 282: 78 21                         js      0x2a5 <_JIT_ENTRY+0x2a5>
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28e: ff d0                         callq   *%rax
// 290: 49 ff 0c 24                   decq    (%r12)
// 294: 75 0f                         jne     0x2a5 <_JIT_ENTRY+0x2a5>
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _Py_Dealloc
// 2a0: 4c 89 e7                      movq    %r12, %rdi
// 2a3: ff d0                         callq   *%rax
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _JIT_OPARG
// 2af: f7 d0                         notl    %eax
// 2b1: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2b6: 48 98                         cltq
// 2b8: 4d 89 7c c6 f0                movq    %r15, -0x10(%r14,%rax,8)
// 2bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bf:  R_X86_64_64  _JIT_CONTINUE
// 2c7: 48 89 df                      movq    %rbx, %rdi
// 2ca: 4c 89 ee                      movq    %r13, %rsi
// 2cd: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2d2: 48 83 c4 18                   addq    $0x18, %rsp
// 2d6: 5b                            popq    %rbx
// 2d7: 41 5c                         popq    %r12
// 2d9: 41 5d                         popq    %r13
// 2db: 41 5e                         popq    %r14
// 2dd: 41 5f                         popq    %r15
// 2df: 5d                            popq    %rbp
// 2e0: ff e0                         jmpq    *%rax
// 2e2: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 2e6: 49 29 de                      subq    %rbx, %r14
// 2e9: 49 83 c6 b8                   addq    $-0x48, %r14
// 2ed: 49 c1 ee 03                   shrq    $0x3, %r14
// 2f1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2f5: 31 c0                         xorl    %eax, %eax
// 2f7: e9 a4 fd ff ff                jmp     0xa0 <_JIT_ENTRY+0xa0>
// 2fc: 
static const unsigned char _CALL_LENplus_BINARY_SUBSCR_TUPLE_INT_code_body[765] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x16, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd6, 0xf7, 0xd1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x6c, 0xee, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0xaa, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x64, 0xee, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x90, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x85, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x4d, 0x18, 0x49, 0x39, 0x4c, 0x24, 0x10, 0x0f, 0x8e, 0x76, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x7c, 0xcc, 0x18, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfa, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x2c, 0xee, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x7c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xa4, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_BINARY_SUBSCR_TUPLE_INT_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_BINARY_SUBSCR_TUPLE_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_BINARY_SUBSCR_TUPLE_INT_data_holes[1];

// _CALL_LENplus_BUILD_CONST_KEY_MAP
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_BUILD_CONST_KEY_MAP.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 f6                      movslq  %esi, %r14
// 65: 4b 8b 2c f7                   movq    (%r15,%r14,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 df                      subq    %rbx, %r15
// 79: 49 83 c7 b8                   addq    $-0x48, %r15
// 7d: 49 c1 ef 03                   shrq    $0x3, %r15
// 81: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b2: 4d 8b 24 cf                   movq    (%r15,%rcx,8), %r12
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 e0 01 00 00             js      0x2ae <_JIT_ENTRY+0x2ae>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 04 24                   movq    %rax, (%rsp)
// e1: 48 8b 45 00                   movq    (%rbp), %rax
// e5: 48 85 c0                      testq   %rax, %rax
// e8: 7f 22                         jg      0x10c <_JIT_ENTRY+0x10c>
// ea: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_NegativeRefcount
// fe: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 103: 48 89 ea                      movq    %rbp, %rdx
// 106: ff d0                         callq   *%rax
// 108: 48 8b 45 00                   movq    (%rbp), %rax
// 10c: 85 c0                         testl   %eax, %eax
// 10e: 78 21                         js      0x131 <_JIT_ENTRY+0x131>
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11a: ff d0                         callq   *%rax
// 11c: 48 ff 4d 00                   decq    (%rbp)
// 120: 75 0f                         jne     0x131 <_JIT_ENTRY+0x131>
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  _Py_Dealloc
// 12c: 48 89 ef                      movq    %rbp, %rdi
// 12f: ff d0                         callq   *%rax
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_NegativeRefcount
// 14e: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 153: 4c 89 e2                      movq    %r12, %rdx
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: 4c 89 e7                      movq    %r12, %rdi
// 17f: ff d0                         callq   *%rax
// 181: 48 8b 14 24                   movq    (%rsp), %rdx
// 185: 48 85 d2                      testq   %rdx, %rdx
// 188: 0f 84 53 01 00 00             je      0x2e1 <_JIT_ENTRY+0x2e1>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _JIT_OPARG
// 198: 0f b7 c0                      movzwl  %ax, %eax
// 19b: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a0: 29 c1                         subl    %eax, %ecx
// 1a2: 48 63 c9                      movslq  %ecx, %rcx
// 1a5: 49 89 14 cf                   movq    %rdx, (%r15,%rcx,8)
// 1a9: f7 d0                         notl    %eax
// 1ab: 48 98                         cltq
// 1ad: 49 8b 54 c7 f8                movq    -0x8(%r15,%rax,8), %rdx
// 1b2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b4:  R_X86_64_64  PyTuple_Type
// 1bc: 48 39 4a 08                   cmpq    %rcx, 0x8(%rdx)
// 1c0: 0f 85 ed 00 00 00             jne     0x2b3 <_JIT_ENTRY+0x2b3>
// 1c6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c8:  R_X86_64_64  _JIT_OPARG
// 1d0: 0f b7 c9                      movzwl  %cx, %ecx
// 1d3: 48 39 4a 10                   cmpq    %rcx, 0x10(%rdx)
// 1d7: 0f 85 d6 00 00 00             jne     0x2b3 <_JIT_ENTRY+0x2b3>
// 1dd: 48 01 c0                      addq    %rax, %rax
// 1e0: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 1e4: 48 89 14 24                   movq    %rdx, (%rsp)
// 1e8: 48 8d 7a 18                   leaq    0x18(%rdx), %rdi
// 1ec: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000001ee:  R_X86_64_64  _JIT_OPARG
// 1f6: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _PyDict_FromItems
// 204: be 01 00 00 00                movl    $0x1, %esi
// 209: b9 01 00 00 00                movl    $0x1, %ecx
// 20e: 4c 89 e2                      movq    %r12, %rdx
// 211: ff d0                         callq   *%rax
// 213: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 218: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 21f: 0f 8e d6 00 00 00             jle     0x2fb <_JIT_ENTRY+0x2fb>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _JIT_OPARG
// 22f: 44 0f b7 e8                   movzwl  %ax, %r13d
// 233: 49 ff c5                      incq    %r13
// 236: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000238:  R_X86_64_64  _Py_NegativeRefcount
// 240: eb 1b                         jmp     0x25d <_JIT_ENTRY+0x25d>
// 242: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 250: 49 ff cd                      decq    %r13
// 253: 49 83 fd 01                   cmpq    $0x1, %r13
// 257: 0f 8e 9e 00 00 00             jle     0x2fb <_JIT_ENTRY+0x2fb>
// 25d: 41 8d 45 fe                   leal    -0x2(%r13), %eax
// 261: 49 8b 2c c4                   movq    (%r12,%rax,8), %rbp
// 265: 48 8b 45 00                   movq    (%rbp), %rax
// 269: 48 85 c0                      testq   %rax, %rax
// 26c: 7f 19                         jg      0x287 <_JIT_ENTRY+0x287>
// 26e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000270:  R_X86_64_64  .rodata.str1.1
// 278: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 27d: 48 89 ea                      movq    %rbp, %rdx
// 280: 41 ff d6                      callq   *%r14
// 283: 48 8b 45 00                   movq    (%rbp), %rax
// 287: 85 c0                         testl   %eax, %eax
// 289: 78 c5                         js      0x250 <_JIT_ENTRY+0x250>
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 295: ff d0                         callq   *%rax
// 297: 48 ff 4d 00                   decq    (%rbp)
// 29b: 75 b3                         jne     0x250 <_JIT_ENTRY+0x250>
// 29d: 48 89 ef                      movq    %rbp, %rdi
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _Py_Dealloc
// 2aa: ff d0                         callq   *%rax
// 2ac: eb a2                         jmp     0x250 <_JIT_ENTRY+0x250>
// 2ae: 4d 89 fc                      movq    %r15, %r12
// 2b1: eb 32                         jmp     0x2e5 <_JIT_ENTRY+0x2e5>
// 2b3: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 2b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b9:  R_X86_64_64  PyExc_SystemError
// 2c1: 48 8b 30                      movq    (%rax), %rsi
// 2c4: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002c6:  R_X86_64_64  .rodata.str1.1+0x39
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _PyErr_SetString
// 2d8: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2dd: ff d0                         callq   *%rax
// 2df: eb 04                         jmp     0x2e5 <_JIT_ENTRY+0x2e5>
// 2e1: 4f 8d 24 f7                   leaq    (%r15,%r14,8), %r12
// 2e5: 49 29 dc                      subq    %rbx, %r12
// 2e8: 49 83 c4 b8                   addq    $-0x48, %r12
// 2ec: 49 c1 ec 03                   shrq    $0x3, %r12
// 2f0: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2f4: 31 c0                         xorl    %eax, %eax
// 2f6: e9 a3 fd ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 2fb: 4c 8b 34 24                   movq    (%rsp), %r14
// 2ff: 49 8b 06                      movq    (%r14), %rax
// 302: 48 85 c0                      testq   %rax, %rax
// 305: 7f 21                         jg      0x328 <_JIT_ENTRY+0x328>
// 307: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000309:  R_X86_64_64  .rodata.str1.1
// 311: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000313:  R_X86_64_64  _Py_NegativeRefcount
// 31b: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 320: 4c 89 f2                      movq    %r14, %rdx
// 323: ff d0                         callq   *%rax
// 325: 49 8b 06                      movq    (%r14), %rax
// 328: 85 c0                         testl   %eax, %eax
// 32a: 78 20                         js      0x34c <_JIT_ENTRY+0x34c>
// 32c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 336: ff d0                         callq   *%rax
// 338: 49 ff 0e                      decq    (%r14)
// 33b: 75 0f                         jne     0x34c <_JIT_ENTRY+0x34c>
// 33d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033f:  R_X86_64_64  _Py_Dealloc
// 347: 4c 89 f7                      movq    %r14, %rdi
// 34a: ff d0                         callq   *%rax
// 34c: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 351: 48 85 f6                      testq   %rsi, %rsi
// 354: 74 8f                         je      0x2e5 <_JIT_ENTRY+0x2e5>
// 356: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000358:  R_X86_64_64  _JIT_OPARG
// 360: 0f b7 c8                      movzwl  %ax, %ecx
// 363: f7 d0                         notl    %eax
// 365: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 36a: 48 98                         cltq
// 36c: 48 8d 14 00                   leaq    (%rax,%rax), %rdx
// 370: 49 89 34 d7                   movq    %rsi, (%r15,%rdx,8)
// 374: 48 29 c8                      subq    %rcx, %rax
// 377: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 37b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037d:  R_X86_64_64  _JIT_CONTINUE
// 385: 48 89 df                      movq    %rbx, %rdi
// 388: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 38d: 48 83 c4 18                   addq    $0x18, %rsp
// 391: 5b                            popq    %rbx
// 392: 41 5c                         popq    %r12
// 394: 41 5d                         popq    %r13
// 396: 41 5e                         popq    %r14
// 398: 41 5f                         popq    %r15
// 39a: 5d                            popq    %rbp
// 39b: ff e0                         jmpq    *%rax
// 39d: 
static const unsigned char _CALL_LENplus_BUILD_CONST_KEY_MAP_code_body[926] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xf6, 0x4b, 0x8b, 0x2c, 0xf7, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x24, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xe0, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x53, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xcf, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x54, 0xc7, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4a, 0x08, 0x0f, 0x85, 0xed, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x39, 0x4a, 0x10, 0x0f, 0x85, 0xd6, 0x00, 0x00, 0x00, 0x48, 0x01, 0xc0, 0x4d, 0x8d, 0x24, 0xc7, 0x48, 0x89, 0x14, 0x24, 0x48, 0x8d, 0x7a, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe8, 0x49, 0xff, 0xc5, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcd, 0x49, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0x9e, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x45, 0xfe, 0x49, 0x8b, 0x2c, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x19, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x41, 0xff, 0xd6, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0xb3, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xa2, 0x4d, 0x89, 0xfc, 0xeb, 0x32, 0x4f, 0x8d, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0xeb, 0x04, 0x4f, 0x8d, 0x24, 0xf7, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xa3, 0xfd, 0xff, 0xff, 0x4c, 0x8b, 0x34, 0x24, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x85, 0xf6, 0x74, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x8d, 0x14, 0x00, 0x49, 0x89, 0x34, 0xd7, 0x48, 0x29, 0xc8, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_BUILD_CONST_KEY_MAP_code_holes[32] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x313, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x32e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x33f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x358, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x37d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _CALL_LENplus_BUILD_CONST_KEY_MAP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _CALL_LENplus_BUILD_CONST_KEY_MAP_data_holes[1];

// _CALL_LENplus_BUILD_LIST
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_BUILD_LIST.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 4b 01 00 00             js      0x212 <_JIT_ENTRY+0x212>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 34 24                   movq    (%rsp), %rsi
// 17e: 48 85 f6                      testq   %rsi, %rsi
// 181: 0f 84 90 00 00 00             je      0x217 <_JIT_ENTRY+0x217>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c8                      movzwl  %ax, %ecx
// 194: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 199: 29 ca                         subl    %ecx, %edx
// 19b: 48 63 d2                      movslq  %edx, %rdx
// 19e: 49 89 34 d6                   movq    %rsi, (%r14,%rdx,8)
// 1a2: f7 d1                         notl    %ecx
// 1a4: 48 63 c9                      movslq  %ecx, %rcx
// 1a7: 0f b7 f0                      movzwl  %ax, %esi
// 1aa: 48 29 f1                      subq    %rsi, %rcx
// 1ad: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _PyList_FromArraySteal
// 1bb: 4c 89 e7                      movq    %r12, %rdi
// 1be: ff d0                         callq   *%rax
// 1c0: 48 85 c0                      testq   %rax, %rax
// 1c3: 74 56                         je      0x21b <_JIT_ENTRY+0x21b>
// 1c5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c7:  R_X86_64_64  _JIT_OPARG
// 1cf: 0f b7 d1                      movzwl  %cx, %edx
// 1d2: 0f b7 c9                      movzwl  %cx, %ecx
// 1d5: be 01 00 00 00                movl    $0x1, %esi
// 1da: 29 ce                         subl    %ecx, %esi
// 1dc: f7 d1                         notl    %ecx
// 1de: 48 63 c9                      movslq  %ecx, %rcx
// 1e1: 48 63 f6                      movslq  %esi, %rsi
// 1e4: 48 01 ce                      addq    %rcx, %rsi
// 1e7: 48 29 d1                      subq    %rdx, %rcx
// 1ea: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 1ee: 49 8d 34 f6                   leaq    (%r14,%rsi,8), %rsi
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _JIT_CONTINUE
// 1fc: 48 89 df                      movq    %rbx, %rdi
// 1ff: 4c 89 fa                      movq    %r15, %rdx
// 202: 48 83 c4 08                   addq    $0x8, %rsp
// 206: 5b                            popq    %rbx
// 207: 41 5c                         popq    %r12
// 209: 41 5d                         popq    %r13
// 20b: 41 5e                         popq    %r14
// 20d: 41 5f                         popq    %r15
// 20f: 5d                            popq    %rbp
// 210: ff e0                         jmpq    *%rax
// 212: 4d 89 f4                      movq    %r14, %r12
// 215: eb 04                         jmp     0x21b <_JIT_ENTRY+0x21b>
// 217: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 21b: 49 29 dc                      subq    %rbx, %r12
// 21e: 49 83 c4 b8                   addq    $-0x48, %r12
// 222: 49 c1 ec 03                   shrq    $0x3, %r12
// 226: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 22a: 31 c0                         xorl    %eax, %eax
// 22c: e9 6b fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 231: 
static const unsigned char _CALL_LENplus_BUILD_LIST_code_body[562] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x4b, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd6, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x0f, 0xb7, 0xf0, 0x48, 0x29, 0xf1, 0x4d, 0x8d, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x56, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xc9, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xce, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x63, 0xf6, 0x48, 0x01, 0xce, 0x48, 0x29, 0xd1, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xf4, 0xeb, 0x04, 0x4f, 0x8d, 0x24, 0xee, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x6b, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_BUILD_LIST_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_FromArraySteal, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_BUILD_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_BUILD_LIST_data_holes[1];

// _CALL_LENplus_BUILD_MAP
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_BUILD_MAP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 12 02 00 00             js      0x2d9 <_JIT_ENTRY+0x2d9>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 57 01 00 00             je      0x2de <_JIT_ENTRY+0x2de>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 e8                      movzwl  %ax, %ebp
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 e9                         subl    %ebp, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a2: 89 e9                         movl    %ebp, %ecx
// 1a4: f7 d1                         notl    %ecx
// 1a6: 48 63 c9                      movslq  %ecx, %rcx
// 1a9: 89 ea                         movl    %ebp, %edx
// 1ab: f7 da                         negl    %edx
// 1ad: 01 d2                         addl    %edx, %edx
// 1af: 48 63 d2                      movslq  %edx, %rdx
// 1b2: 48 01 ca                      addq    %rcx, %rdx
// 1b5: 4d 8d 24 d6                   leaq    (%r14,%rdx,8), %r12
// 1b9: 49 8d 14 d6                   leaq    (%r14,%rdx,8), %rdx
// 1bd: 48 83 c2 08                   addq    $0x8, %rdx
// 1c1: 44 0f b7 c0                   movzwl  %ax, %r8d
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _PyDict_FromItems
// 1cf: be 02 00 00 00                movl    $0x2, %esi
// 1d4: b9 02 00 00 00                movl    $0x2, %ecx
// 1d9: 4c 89 e7                      movq    %r12, %rdi
// 1dc: ff d0                         callq   *%rax
// 1de: 48 89 04 24                   movq    %rax, (%rsp)
// 1e2: 01 ed                         addl    %ebp, %ebp
// 1e4: 85 ed                         testl   %ebp, %ebp
// 1e6: 0f 8e 8d 00 00 00             jle     0x279 <_JIT_ENTRY+0x279>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _JIT_OPARG
// 1f6: 0f b7 c0                      movzwl  %ax, %eax
// 1f9: 48 8d 2c 00                   leaq    (%rax,%rax), %rbp
// 1fd: 48 ff c5                      incq    %rbp
// 200: eb 17                         jmp     0x219 <_JIT_ENTRY+0x219>
// 202: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 210: 48 ff cd                      decq    %rbp
// 213: 48 83 fd 01                   cmpq    $0x1, %rbp
// 217: 7e 60                         jle     0x279 <_JIT_ENTRY+0x279>
// 219: 8d 45 fe                      leal    -0x2(%rbp), %eax
// 21c: 4d 8b 2c c4                   movq    (%r12,%rax,8), %r13
// 220: 49 8b 45 00                   movq    (%r13), %rax
// 224: 48 85 c0                      testq   %rax, %rax
// 227: 7e 07                         jle     0x230 <_JIT_ENTRY+0x230>
// 229: 85 c0                         testl   %eax, %eax
// 22b: 78 e3                         js      0x210 <_JIT_ENTRY+0x210>
// 22d: eb 27                         jmp     0x256 <_JIT_ENTRY+0x256>
// 22f: 90                            nop
// 230: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000232:  R_X86_64_64  .rodata.str1.1
// 23a: be 7b 05 00 00                movl    $0x57b, %esi            # imm = 0x57B
// 23f: 4c 89 ea                      movq    %r13, %rdx
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _Py_NegativeRefcount
// 24c: ff d0                         callq   *%rax
// 24e: 49 8b 45 00                   movq    (%r13), %rax
// 252: 85 c0                         testl   %eax, %eax
// 254: 78 ba                         js      0x210 <_JIT_ENTRY+0x210>
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 260: ff d0                         callq   *%rax
// 262: 49 ff 4d 00                   decq    (%r13)
// 266: 75 a8                         jne     0x210 <_JIT_ENTRY+0x210>
// 268: 4c 89 ef                      movq    %r13, %rdi
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _Py_Dealloc
// 275: ff d0                         callq   *%rax
// 277: eb 97                         jmp     0x210 <_JIT_ENTRY+0x210>
// 279: 48 8b 34 24                   movq    (%rsp), %rsi
// 27d: 48 85 f6                      testq   %rsi, %rsi
// 280: 74 60                         je      0x2e2 <_JIT_ENTRY+0x2e2>
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _JIT_OPARG
// 28c: 0f b7 c0                      movzwl  %ax, %eax
// 28f: 89 c1                         movl    %eax, %ecx
// 291: f7 d1                         notl    %ecx
// 293: 48 63 c9                      movslq  %ecx, %rcx
// 296: 89 c2                         movl    %eax, %edx
// 298: f7 da                         negl    %edx
// 29a: 01 d2                         addl    %edx, %edx
// 29c: 48 63 d2                      movslq  %edx, %rdx
// 29f: 48 01 ca                      addq    %rcx, %rdx
// 2a2: 49 89 34 d6                   movq    %rsi, (%r14,%rdx,8)
// 2a6: 01 c0                         addl    %eax, %eax
// 2a8: ba 01 00 00 00                movl    $0x1, %edx
// 2ad: 29 c2                         subl    %eax, %edx
// 2af: 48 63 c2                      movslq  %edx, %rax
// 2b2: 48 01 c8                      addq    %rcx, %rax
// 2b5: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _JIT_CONTINUE
// 2c3: 48 89 df                      movq    %rbx, %rdi
// 2c6: 4c 89 fa                      movq    %r15, %rdx
// 2c9: 48 83 c4 08                   addq    $0x8, %rsp
// 2cd: 5b                            popq    %rbx
// 2ce: 41 5c                         popq    %r12
// 2d0: 41 5d                         popq    %r13
// 2d2: 41 5e                         popq    %r14
// 2d4: 41 5f                         popq    %r15
// 2d6: 5d                            popq    %rbp
// 2d7: ff e0                         jmpq    *%rax
// 2d9: 4d 89 f4                      movq    %r14, %r12
// 2dc: eb 04                         jmp     0x2e2 <_JIT_ENTRY+0x2e2>
// 2de: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 2e2: 49 29 dc                      subq    %rbx, %r12
// 2e5: 49 83 c4 b8                   addq    $-0x48, %r12
// 2e9: 49 c1 ec 03                   shrq    $0x3, %r12
// 2ed: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2f1: 31 c0                         xorl    %eax, %eax
// 2f3: e9 a4 fd ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 2f8: 
static const unsigned char _CALL_LENplus_BUILD_MAP_code_body[761] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x12, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x57, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xe9, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0x89, 0xe9, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x89, 0xea, 0xf7, 0xda, 0x01, 0xd2, 0x48, 0x63, 0xd2, 0x48, 0x01, 0xca, 0x4d, 0x8d, 0x24, 0xd6, 0x49, 0x8d, 0x14, 0xd6, 0x48, 0x83, 0xc2, 0x08, 0x44, 0x0f, 0xb7, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x01, 0xed, 0x85, 0xed, 0x0f, 0x8e, 0x8d, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x2c, 0x00, 0x48, 0xff, 0xc5, 0xeb, 0x17, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x7e, 0x60, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x2c, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7b, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x74, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x89, 0xc2, 0xf7, 0xda, 0x01, 0xd2, 0x48, 0x63, 0xd2, 0x48, 0x01, 0xca, 0x49, 0x89, 0x34, 0xd6, 0x01, 0xc0, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc2, 0x48, 0x63, 0xc2, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xf4, 0xeb, 0x04, 0x4f, 0x8d, 0x24, 0xee, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xa4, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_BUILD_MAP_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_BUILD_MAP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_BUILD_MAP_data_holes[1];

// _CALL_LENplus_BUILD_SET
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_BUILD_SET.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 de                      subq    %rbx, %r14
// 79: 49 83 c6 b8                   addq    $-0x48, %r14
// 7d: 49 c1 ee 03                   shrq    $0x3, %r14
// 81: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// b2: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 e0 01 00 00             js      0x2ae <_JIT_ENTRY+0x2ae>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 04 24                   movq    (%r12), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 e2                      movq    %r12, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 04 24                   movq    (%r12), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 21                         js      0x182 <_JIT_ENTRY+0x182>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 0c 24                   decq    (%r12)
// 171: 75 0f                         jne     0x182 <_JIT_ENTRY+0x182>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: ff d0                         callq   *%rax
// 182: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 187: 48 85 c9                      testq   %rcx, %rcx
// 18a: 0f 84 23 01 00 00             je      0x2b3 <_JIT_ENTRY+0x2b3>
// 190: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000192:  R_X86_64_64  _JIT_OPARG
// 19a: 41 0f b7 ef                   movzwl  %r15w, %ebp
// 19e: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
// 1a3: 29 e8                         subl    %ebp, %eax
// 1a5: 48 98                         cltq
// 1a7: 49 89 0c c6                   movq    %rcx, (%r14,%rax,8)
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  PySet_New
// 1b5: 31 ff                         xorl    %edi, %edi
// 1b7: ff d0                         callq   *%rax
// 1b9: 48 89 04 24                   movq    %rax, (%rsp)
// 1bd: 48 85 c0                      testq   %rax, %rax
// 1c0: 0f 84 f3 00 00 00             je      0x2b9 <_JIT_ENTRY+0x2b9>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _JIT_OPARG
// 1d0: 66 85 c0                      testw   %ax, %ax
// 1d3: 0f 84 51 01 00 00             je      0x32a <_JIT_ENTRY+0x32a>
// 1d9: 41 0f b7 c7                   movzwl  %r15w, %eax
// 1dd: f7 d5                         notl    %ebp
// 1df: 48 63 cd                      movslq  %ebp, %rcx
// 1e2: 48 29 c1                      subq    %rax, %rcx
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _JIT_OPARG
// 1ef: 0f b7 c0                      movzwl  %ax, %eax
// 1f2: 83 f8 02                      cmpl    $0x2, %eax
// 1f5: ba 01 00 00 00                movl    $0x1, %edx
// 1fa: 0f 43 d0                      cmovael %eax, %edx
// 1fd: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 202: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 206: 45 31 ff                      xorl    %r15d, %r15d
// 209: 31 ed                         xorl    %ebp, %ebp
// 20b: eb 11                         jmp     0x21e <_JIT_ENTRY+0x21e>
// 20d: 0f 1f 00                      nopl    (%rax)
// 210: 49 ff c7                      incq    %r15
// 213: 4c 39 7c 24 08                cmpq    %r15, 0x8(%rsp)
// 218: 0f 84 a1 00 00 00             je      0x2bf <_JIT_ENTRY+0x2bf>
// 21e: 4f 8b 2c fc                   movq    (%r12,%r15,8), %r13
// 222: 85 ed                         testl   %ebp, %ebp
// 224: 74 1a                         je      0x240 <_JIT_ENTRY+0x240>
// 226: 49 8b 45 00                   movq    (%r13), %rax
// 22a: 48 85 c0                      testq   %rax, %rax
// 22d: 7e 2f                         jle     0x25e <_JIT_ENTRY+0x25e>
// 22f: 85 c0                         testl   %eax, %eax
// 231: 78 dd                         js      0x210 <_JIT_ENTRY+0x210>
// 233: eb 4f                         jmp     0x284 <_JIT_ENTRY+0x284>
// 235: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 240: 48 8b 3c 24                   movq    (%rsp), %rdi
// 244: 4c 89 ee                      movq    %r13, %rsi
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  PySet_Add
// 251: ff d0                         callq   *%rax
// 253: 89 c5                         movl    %eax, %ebp
// 255: 49 8b 45 00                   movq    (%r13), %rax
// 259: 48 85 c0                      testq   %rax, %rax
// 25c: 7f d1                         jg      0x22f <_JIT_ENTRY+0x22f>
// 25e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000260:  R_X86_64_64  .rodata.str1.1
// 268: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// 26d: 4c 89 ea                      movq    %r13, %rdx
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_NegativeRefcount
// 27a: ff d0                         callq   *%rax
// 27c: 49 8b 45 00                   movq    (%r13), %rax
// 280: 85 c0                         testl   %eax, %eax
// 282: 78 8c                         js      0x210 <_JIT_ENTRY+0x210>
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28e: ff d0                         callq   *%rax
// 290: 49 ff 4d 00                   decq    (%r13)
// 294: 0f 85 76 ff ff ff             jne     0x210 <_JIT_ENTRY+0x210>
// 29a: 4c 89 ef                      movq    %r13, %rdi
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _Py_Dealloc
// 2a7: ff d0                         callq   *%rax
// 2a9: e9 62 ff ff ff                jmp     0x210 <_JIT_ENTRY+0x210>
// 2ae: 4d 89 f4                      movq    %r14, %r12
// 2b1: eb 61                         jmp     0x314 <_JIT_ENTRY+0x314>
// 2b3: 4f 8d 24 fe                   leaq    (%r14,%r15,8), %r12
// 2b7: eb 5b                         jmp     0x314 <_JIT_ENTRY+0x314>
// 2b9: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 2bd: eb 55                         jmp     0x314 <_JIT_ENTRY+0x314>
// 2bf: 85 ed                         testl   %ebp, %ebp
// 2c1: 74 67                         je      0x32a <_JIT_ENTRY+0x32a>
// 2c3: 4c 8b 34 24                   movq    (%rsp), %r14
// 2c7: 49 8b 06                      movq    (%r14), %rax
// 2ca: 48 85 c0                      testq   %rax, %rax
// 2cd: 7f 21                         jg      0x2f0 <_JIT_ENTRY+0x2f0>
// 2cf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d1:  R_X86_64_64  .rodata.str1.1
// 2d9: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 2de: 4c 89 f2                      movq    %r14, %rdx
// 2e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e3:  R_X86_64_64  _Py_NegativeRefcount
// 2eb: ff d0                         callq   *%rax
// 2ed: 49 8b 06                      movq    (%r14), %rax
// 2f0: 85 c0                         testl   %eax, %eax
// 2f2: 78 20                         js      0x314 <_JIT_ENTRY+0x314>
// 2f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2fe: ff d0                         callq   *%rax
// 300: 49 ff 0e                      decq    (%r14)
// 303: 75 0f                         jne     0x314 <_JIT_ENTRY+0x314>
// 305: 4c 89 f7                      movq    %r14, %rdi
// 308: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030a:  R_X86_64_64  _Py_Dealloc
// 312: ff d0                         callq   *%rax
// 314: 49 29 dc                      subq    %rbx, %r12
// 317: 49 83 c4 b8                   addq    $-0x48, %r12
// 31b: 49 c1 ec 03                   shrq    $0x3, %r12
// 31f: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 323: 31 c0                         xorl    %eax, %eax
// 325: e9 74 fd ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 32a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032c:  R_X86_64_64  _JIT_OPARG
// 334: 0f b7 c8                      movzwl  %ax, %ecx
// 337: 0f b7 c0                      movzwl  %ax, %eax
// 33a: ba 01 00 00 00                movl    $0x1, %edx
// 33f: 29 c2                         subl    %eax, %edx
// 341: f7 d0                         notl    %eax
// 343: 48 98                         cltq
// 345: 48 63 d2                      movslq  %edx, %rdx
// 348: 48 01 c2                      addq    %rax, %rdx
// 34b: 48 29 c8                      subq    %rcx, %rax
// 34e: 48 8b 0c 24                   movq    (%rsp), %rcx
// 352: 49 89 0c c6                   movq    %rcx, (%r14,%rax,8)
// 356: 49 8d 34 d6                   leaq    (%r14,%rdx,8), %rsi
// 35a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035c:  R_X86_64_64  _JIT_CONTINUE
// 364: 48 89 df                      movq    %rbx, %rdi
// 367: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 36c: 48 83 c4 18                   addq    $0x18, %rsp
// 370: 5b                            popq    %rbx
// 371: 41 5c                         popq    %r12
// 373: 41 5d                         popq    %r13
// 375: 41 5e                         popq    %r14
// 377: 41 5f                         popq    %r15
// 379: 5d                            popq    %rbp
// 37a: ff e0                         jmpq    *%rax
// 37c: 
static const unsigned char _CALL_LENplus_BUILD_SET_code_body[893] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xe0, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x23, 0x01, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xef, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xe8, 0x48, 0x98, 0x49, 0x89, 0x0c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xf3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x51, 0x01, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xc7, 0xf7, 0xd5, 0x48, 0x63, 0xcd, 0x48, 0x29, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xba, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xd0, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xce, 0x45, 0x31, 0xff, 0x31, 0xed, 0xeb, 0x11, 0x0f, 0x1f, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0x7c, 0x24, 0x08, 0x0f, 0x84, 0xa1, 0x00, 0x00, 0x00, 0x4f, 0x8b, 0x2c, 0xfc, 0x85, 0xed, 0x74, 0x1a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x2f, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x4f, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xd1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x8c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x76, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x62, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf4, 0xeb, 0x61, 0x4f, 0x8d, 0x24, 0xfe, 0xeb, 0x5b, 0x4f, 0x8d, 0x24, 0xee, 0xeb, 0x55, 0x85, 0xed, 0x74, 0x67, 0x4c, 0x8b, 0x34, 0x24, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x74, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc2, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x63, 0xd2, 0x48, 0x01, 0xc2, 0x48, 0x29, 0xc8, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x89, 0x0c, 0xc6, 0x49, 0x8d, 0x34, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_BUILD_SET_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x30a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x32c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x35c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_BUILD_SET_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_BUILD_SET_data_holes[1];

// _CALL_LENplus_BUILD_SLICE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_BUILD_SLICE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 48 63 d2                      movslq  %edx, %rdx
// 2b: 31 f6                         xorl    %esi, %esi
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 40 0f 94 c6                   sete    %sil
// 34: 31 ff                         xorl    %edi, %edi
// 36: 66 83 f9 01                   cmpw    $0x1, %cx
// 3a: 40 0f 94 c7                   sete    %dil
// 3e: 0f b7 c9                      movzwl  %cx, %ecx
// 41: 49 89 c8                      movq    %rcx, %r8
// 44: 49 f7 d8                      negq    %r8
// 47: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 4c: 0f 44 f7                      cmovel  %edi, %esi
// 4f: 48 f7 d1                      notq    %rcx
// 52: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 56: 40 80 fe 01                   cmpb    $0x1, %sil
// 5a: 75 1b                         jne     0x77 <_JIT_ENTRY+0x77>
// 5c: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 61: 29 c2                         subl    %eax, %edx
// 63: 4c 63 ea                      movslq  %edx, %r13
// 66: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 6a: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6e: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 75: 74 37                         je      0xae <_JIT_ENTRY+0xae>
// 77: 49 29 de                      subq    %rbx, %r14
// 7a: 49 83 c6 b8                   addq    $-0x48, %r14
// 7e: 49 c1 ee 03                   shrq    $0x3, %r14
// 82: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 86: 48 8b 03                      movq    (%rbx), %rax
// 89: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008b:  R_X86_64_64  _JIT_TARGET
// 93: 89 c9                         movl    %ecx, %ecx
// 95: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 99: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9f: 48 83 c4 18                   addq    $0x18, %rsp
// a3: 5b                            popq    %rbx
// a4: 41 5c                         popq    %r12
// a6: 41 5d                         popq    %r13
// a8: 41 5e                         popq    %r14
// aa: 41 5f                         popq    %r15
// ac: 5d                            popq    %rbp
// ad: c3                            retq
// ae: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  PyObject_Size
// bc: 4c 89 e7                      movq    %r12, %rdi
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 84 02 00 00             js      0x34e <_JIT_ENTRY+0x34e>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 04 24                   movq    %rax, (%rsp)
// dd: 48 8b 45 00                   movq    (%rbp), %rax
// e1: 48 85 c0                      testq   %rax, %rax
// e4: 7f 22                         jg      0x108 <_JIT_ENTRY+0x108>
// e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_NegativeRefcount
// fa: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: ff d0                         callq   *%rax
// 104: 48 8b 45 00                   movq    (%rbp), %rax
// 108: 85 c0                         testl   %eax, %eax
// 10a: 78 21                         js      0x12d <_JIT_ENTRY+0x12d>
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 116: ff d0                         callq   *%rax
// 118: 48 ff 4d 00                   decq    (%rbp)
// 11c: 75 0f                         jne     0x12d <_JIT_ENTRY+0x12d>
// 11e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000120:  R_X86_64_64  _Py_Dealloc
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: ff d0                         callq   *%rax
// 12d: 49 8b 04 24                   movq    (%r12), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7f 22                         jg      0x158 <_JIT_ENTRY+0x158>
// 136: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000138:  R_X86_64_64  .rodata.str1.1
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_NegativeRefcount
// 14a: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14f: 4c 89 e2                      movq    %r12, %rdx
// 152: ff d0                         callq   *%rax
// 154: 49 8b 04 24                   movq    (%r12), %rax
// 158: 85 c0                         testl   %eax, %eax
// 15a: 78 21                         js      0x17d <_JIT_ENTRY+0x17d>
// 15c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 166: ff d0                         callq   *%rax
// 168: 49 ff 0c 24                   decq    (%r12)
// 16c: 75 0f                         jne     0x17d <_JIT_ENTRY+0x17d>
// 16e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000170:  R_X86_64_64  _Py_Dealloc
// 178: 4c 89 e7                      movq    %r12, %rdi
// 17b: ff d0                         callq   *%rax
// 17d: 4b 8d 04 ee                   leaq    (%r14,%r13,8), %rax
// 181: 48 8b 0c 24                   movq    (%rsp), %rcx
// 185: 48 85 c9                      testq   %rcx, %rcx
// 188: 0f 84 bd 01 00 00             je      0x34b <_JIT_ENTRY+0x34b>
// 18e: 48 89 08                      movq    %rcx, (%rax)
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 66 83 f8 03                   cmpw    $0x3, %ax
// 19f: 75 1f                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 1a1: 89 c1                         movl    %eax, %ecx
// 1a3: f7 d1                         notl    %ecx
// 1a5: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1ab: 48 63 c9                      movslq  %ecx, %rcx
// 1ae: 31 d2                         xorl    %edx, %edx
// 1b0: 66 83 f8 03                   cmpw    $0x3, %ax
// 1b4: 0f 94 c2                      sete    %dl
// 1b7: 48 29 d1                      subq    %rdx, %rcx
// 1ba: 4d 8b 04 ce                   movq    (%r14,%rcx,8), %r8
// 1be: eb 03                         jmp     0x1c3 <_JIT_ENTRY+0x1c3>
// 1c0: 45 31 c0                      xorl    %r8d, %r8d
// 1c3: 89 c1                         movl    %eax, %ecx
// 1c5: f7 d1                         notl    %ecx
// 1c7: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1cd: 48 63 c9                      movslq  %ecx, %rcx
// 1d0: 31 d2                         xorl    %edx, %edx
// 1d2: 66 83 f8 03                   cmpw    $0x3, %ax
// 1d6: 0f 94 c2                      sete    %dl
// 1d9: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
// 1de: 29 d0                         subl    %edx, %eax
// 1e0: f7 d2                         notl    %edx
// 1e2: 48 63 d2                      movslq  %edx, %rdx
// 1e5: 48 01 ca                      addq    %rcx, %rdx
// 1e8: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 1ed: 49 8b 2c d6                   movq    (%r14,%rdx,8), %rbp
// 1f1: 4c 63 e0                      movslq  %eax, %r12
// 1f4: 49 01 cc                      addq    %rcx, %r12
// 1f7: 4f 8b 2c e6                   movq    (%r14,%r12,8), %r13
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  PySlice_New
// 205: 4c 89 ef                      movq    %r13, %rdi
// 208: 48 89 ee                      movq    %rbp, %rsi
// 20b: 4c 89 04 24                   movq    %r8, (%rsp)
// 20f: 4c 89 c2                      movq    %r8, %rdx
// 212: ff d0                         callq   *%rax
// 214: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 219: 49 8b 45 00                   movq    (%r13), %rax
// 21d: 48 85 c0                      testq   %rax, %rax
// 220: 7f 22                         jg      0x244 <_JIT_ENTRY+0x244>
// 222: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000224:  R_X86_64_64  .rodata.str1.1
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _Py_NegativeRefcount
// 236: be 86 0c 00 00                movl    $0xc86, %esi            # imm = 0xC86
// 23b: 4c 89 ea                      movq    %r13, %rdx
// 23e: ff d0                         callq   *%rax
// 240: 49 8b 45 00                   movq    (%r13), %rax
// 244: 85 c0                         testl   %eax, %eax
// 246: 78 21                         js      0x269 <_JIT_ENTRY+0x269>
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 252: ff d0                         callq   *%rax
// 254: 49 ff 4d 00                   decq    (%r13)
// 258: 75 0f                         jne     0x269 <_JIT_ENTRY+0x269>
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  _Py_Dealloc
// 264: 4c 89 ef                      movq    %r13, %rdi
// 267: ff d0                         callq   *%rax
// 269: 48 8b 45 00                   movq    (%rbp), %rax
// 26d: 48 85 c0                      testq   %rax, %rax
// 270: 7f 22                         jg      0x294 <_JIT_ENTRY+0x294>
// 272: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000274:  R_X86_64_64  .rodata.str1.1
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_NegativeRefcount
// 286: be 87 0c 00 00                movl    $0xc87, %esi            # imm = 0xC87
// 28b: 48 89 ea                      movq    %rbp, %rdx
// 28e: ff d0                         callq   *%rax
// 290: 48 8b 45 00                   movq    (%rbp), %rax
// 294: 85 c0                         testl   %eax, %eax
// 296: 78 21                         js      0x2b9 <_JIT_ENTRY+0x2b9>
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a2: ff d0                         callq   *%rax
// 2a4: 48 ff 4d 00                   decq    (%rbp)
// 2a8: 75 0f                         jne     0x2b9 <_JIT_ENTRY+0x2b9>
// 2aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ac:  R_X86_64_64  _Py_Dealloc
// 2b4: 48 89 ef                      movq    %rbp, %rdi
// 2b7: ff d0                         callq   *%rax
// 2b9: 48 8b 14 24                   movq    (%rsp), %rdx
// 2bd: 48 85 d2                      testq   %rdx, %rdx
// 2c0: 74 4f                         je      0x311 <_JIT_ENTRY+0x311>
// 2c2: 48 8b 02                      movq    (%rdx), %rax
// 2c5: 48 85 c0                      testq   %rax, %rax
// 2c8: 7f 22                         jg      0x2ec <_JIT_ENTRY+0x2ec>
// 2ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002cc:  R_X86_64_64  .rodata.str1.1+0x39
// 2d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d6:  R_X86_64_64  _Py_NegativeRefcount
// 2de: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 2e3: ff d0                         callq   *%rax
// 2e5: 48 8b 04 24                   movq    (%rsp), %rax
// 2e9: 48 8b 00                      movq    (%rax), %rax
// 2ec: 85 c0                         testl   %eax, %eax
// 2ee: 78 21                         js      0x311 <_JIT_ENTRY+0x311>
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2fa: ff d0                         callq   *%rax
// 2fc: 48 8b 3c 24                   movq    (%rsp), %rdi
// 300: 48 ff 0f                      decq    (%rdi)
// 303: 75 0c                         jne     0x311 <_JIT_ENTRY+0x311>
// 305: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000307:  R_X86_64_64  _Py_Dealloc
// 30f: ff d0                         callq   *%rax
// 311: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 315: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 31a: 48 85 d2                      testq   %rdx, %rdx
// 31d: 74 2c                         je      0x34b <_JIT_ENTRY+0x34b>
// 31f: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 324: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 328: 48 89 10                      movq    %rdx, (%rax)
// 32b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032d:  R_X86_64_64  _JIT_CONTINUE
// 335: 48 89 df                      movq    %rbx, %rdi
// 338: 4c 89 fa                      movq    %r15, %rdx
// 33b: 48 83 c4 18                   addq    $0x18, %rsp
// 33f: 5b                            popq    %rbx
// 340: 41 5c                         popq    %r12
// 342: 41 5d                         popq    %r13
// 344: 41 5e                         popq    %r14
// 346: 41 5f                         popq    %r15
// 348: 5d                            popq    %rbp
// 349: ff e0                         jmpq    *%rax
// 34b: 49 89 c6                      movq    %rax, %r14
// 34e: 49 29 de                      subq    %rbx, %r14
// 351: 49 83 c6 b8                   addq    $-0x48, %r14
// 355: 49 c1 ee 03                   shrq    $0x3, %r14
// 359: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 35d: 31 c0                         xorl    %eax, %eax
// 35f: e9 3b fd ff ff                jmp     0x9f <_JIT_ENTRY+0x9f>
// 364: 
static const unsigned char _CALL_LENplus_BUILD_SLICE_code_body[869] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x84, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xbd, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xf8, 0x03, 0x75, 0x1f, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x31, 0xd2, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x94, 0xc2, 0x48, 0x29, 0xd1, 0x4d, 0x8b, 0x04, 0xce, 0xeb, 0x03, 0x45, 0x31, 0xc0, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x31, 0xd2, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x94, 0xc2, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd0, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x48, 0x01, 0xca, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x2c, 0xd6, 0x4c, 0x63, 0xe0, 0x49, 0x01, 0xcc, 0x4f, 0x8b, 0x2c, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0x4c, 0x89, 0x04, 0x24, 0x4c, 0x89, 0xc2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x74, 0x4f, 0x48, 0x8b, 0x02, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x2c, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x89, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x3b, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_BUILD_SLICE_code_holes[28] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySlice_New, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x307, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x32d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_BUILD_SLICE_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_BUILD_SLICE_data_holes[1];

// _CALL_LENplus_BUILD_STRING
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_BUILD_STRING.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 f7 01 00 00             js      0x2be <_JIT_ENTRY+0x2be>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 3c 01 00 00             je      0x2c3 <_JIT_ENTRY+0x2c3>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 e8                      movzwl  %ax, %ebp
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 e9                         subl    %ebp, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a2: 89 e9                         movl    %ebp, %ecx
// 1a4: f7 d1                         notl    %ecx
// 1a6: 48 63 c9                      movslq  %ecx, %rcx
// 1a9: 0f b7 d0                      movzwl  %ax, %edx
// 1ac: 48 29 d1                      subq    %rdx, %rcx
// 1af: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _PyUnicode_JoinArray
// 1bd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bf:  R_X86_64_64  _PyRuntime
// 1c7: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 1ce: 4c 89 e6                      movq    %r12, %rsi
// 1d1: ff d0                         callq   *%rax
// 1d3: 48 89 04 24                   movq    %rax, (%rsp)
// 1d7: 85 ed                         testl   %ebp, %ebp
// 1d9: 0f 8e 8a 00 00 00             jle     0x269 <_JIT_ENTRY+0x269>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _JIT_OPARG
// 1e9: 0f b7 e8                      movzwl  %ax, %ebp
// 1ec: 48 ff c5                      incq    %rbp
// 1ef: eb 18                         jmp     0x209 <_JIT_ENTRY+0x209>
// 1f1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 200: 48 ff cd                      decq    %rbp
// 203: 48 83 fd 01                   cmpq    $0x1, %rbp
// 207: 7e 60                         jle     0x269 <_JIT_ENTRY+0x269>
// 209: 8d 45 fe                      leal    -0x2(%rbp), %eax
// 20c: 4d 8b 2c c4                   movq    (%r12,%rax,8), %r13
// 210: 49 8b 45 00                   movq    (%r13), %rax
// 214: 48 85 c0                      testq   %rax, %rax
// 217: 7e 07                         jle     0x220 <_JIT_ENTRY+0x220>
// 219: 85 c0                         testl   %eax, %eax
// 21b: 78 e3                         js      0x200 <_JIT_ENTRY+0x200>
// 21d: eb 27                         jmp     0x246 <_JIT_ENTRY+0x246>
// 21f: 90                            nop
// 220: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000222:  R_X86_64_64  .rodata.str1.1
// 22a: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// 22f: 4c 89 ea                      movq    %r13, %rdx
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_NegativeRefcount
// 23c: ff d0                         callq   *%rax
// 23e: 49 8b 45 00                   movq    (%r13), %rax
// 242: 85 c0                         testl   %eax, %eax
// 244: 78 ba                         js      0x200 <_JIT_ENTRY+0x200>
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 250: ff d0                         callq   *%rax
// 252: 49 ff 4d 00                   decq    (%r13)
// 256: 75 a8                         jne     0x200 <_JIT_ENTRY+0x200>
// 258: 4c 89 ef                      movq    %r13, %rdi
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_Dealloc
// 265: ff d0                         callq   *%rax
// 267: eb 97                         jmp     0x200 <_JIT_ENTRY+0x200>
// 269: 48 8b 34 24                   movq    (%rsp), %rsi
// 26d: 48 85 f6                      testq   %rsi, %rsi
// 270: 74 55                         je      0x2c7 <_JIT_ENTRY+0x2c7>
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _JIT_OPARG
// 27c: 0f b7 c8                      movzwl  %ax, %ecx
// 27f: 0f b7 c0                      movzwl  %ax, %eax
// 282: ba 01 00 00 00                movl    $0x1, %edx
// 287: 29 c2                         subl    %eax, %edx
// 289: f7 d0                         notl    %eax
// 28b: 48 98                         cltq
// 28d: 48 63 d2                      movslq  %edx, %rdx
// 290: 48 01 c2                      addq    %rax, %rdx
// 293: 48 29 c8                      subq    %rcx, %rax
// 296: 49 89 34 c6                   movq    %rsi, (%r14,%rax,8)
// 29a: 49 8d 34 d6                   leaq    (%r14,%rdx,8), %rsi
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  _JIT_CONTINUE
// 2a8: 48 89 df                      movq    %rbx, %rdi
// 2ab: 4c 89 fa                      movq    %r15, %rdx
// 2ae: 48 83 c4 08                   addq    $0x8, %rsp
// 2b2: 5b                            popq    %rbx
// 2b3: 41 5c                         popq    %r12
// 2b5: 41 5d                         popq    %r13
// 2b7: 41 5e                         popq    %r14
// 2b9: 41 5f                         popq    %r15
// 2bb: 5d                            popq    %rbp
// 2bc: ff e0                         jmpq    *%rax
// 2be: 4d 89 f4                      movq    %r14, %r12
// 2c1: eb 04                         jmp     0x2c7 <_JIT_ENTRY+0x2c7>
// 2c3: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 2c7: 49 29 dc                      subq    %rbx, %r12
// 2ca: 49 83 c4 b8                   addq    $-0x48, %r12
// 2ce: 49 c1 ec 03                   shrq    $0x3, %r12
// 2d2: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2d6: 31 c0                         xorl    %eax, %eax
// 2d8: e9 bf fd ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 2dd: 
static const unsigned char _CALL_LENplus_BUILD_STRING_code_body[734] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xf7, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x3c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xe9, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0x89, 0xe9, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x0f, 0xb7, 0xd0, 0x48, 0x29, 0xd1, 0x4d, 0x8d, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x85, 0xed, 0x0f, 0x8e, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x7e, 0x60, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x2c, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x74, 0x55, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc2, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x63, 0xd2, 0x48, 0x01, 0xc2, 0x48, 0x29, 0xc8, 0x49, 0x89, 0x34, 0xc6, 0x49, 0x8d, 0x34, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xf4, 0xeb, 0x04, 0x4f, 0x8d, 0x24, 0xee, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xbf, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_BUILD_STRING_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_BUILD_STRING_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_BUILD_STRING_data_holes[1];

// _CALL_LENplus_BUILD_TUPLE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_BUILD_TUPLE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 4b 01 00 00             js      0x212 <_JIT_ENTRY+0x212>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 34 24                   movq    (%rsp), %rsi
// 17e: 48 85 f6                      testq   %rsi, %rsi
// 181: 0f 84 90 00 00 00             je      0x217 <_JIT_ENTRY+0x217>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c8                      movzwl  %ax, %ecx
// 194: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 199: 29 ca                         subl    %ecx, %edx
// 19b: 48 63 d2                      movslq  %edx, %rdx
// 19e: 49 89 34 d6                   movq    %rsi, (%r14,%rdx,8)
// 1a2: f7 d1                         notl    %ecx
// 1a4: 48 63 c9                      movslq  %ecx, %rcx
// 1a7: 0f b7 f0                      movzwl  %ax, %esi
// 1aa: 48 29 f1                      subq    %rsi, %rcx
// 1ad: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _PyTuple_FromArraySteal
// 1bb: 4c 89 e7                      movq    %r12, %rdi
// 1be: ff d0                         callq   *%rax
// 1c0: 48 85 c0                      testq   %rax, %rax
// 1c3: 74 56                         je      0x21b <_JIT_ENTRY+0x21b>
// 1c5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c7:  R_X86_64_64  _JIT_OPARG
// 1cf: 0f b7 d1                      movzwl  %cx, %edx
// 1d2: 0f b7 c9                      movzwl  %cx, %ecx
// 1d5: be 01 00 00 00                movl    $0x1, %esi
// 1da: 29 ce                         subl    %ecx, %esi
// 1dc: f7 d1                         notl    %ecx
// 1de: 48 63 c9                      movslq  %ecx, %rcx
// 1e1: 48 63 f6                      movslq  %esi, %rsi
// 1e4: 48 01 ce                      addq    %rcx, %rsi
// 1e7: 48 29 d1                      subq    %rdx, %rcx
// 1ea: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 1ee: 49 8d 34 f6                   leaq    (%r14,%rsi,8), %rsi
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _JIT_CONTINUE
// 1fc: 48 89 df                      movq    %rbx, %rdi
// 1ff: 4c 89 fa                      movq    %r15, %rdx
// 202: 48 83 c4 08                   addq    $0x8, %rsp
// 206: 5b                            popq    %rbx
// 207: 41 5c                         popq    %r12
// 209: 41 5d                         popq    %r13
// 20b: 41 5e                         popq    %r14
// 20d: 41 5f                         popq    %r15
// 20f: 5d                            popq    %rbp
// 210: ff e0                         jmpq    *%rax
// 212: 4d 89 f4                      movq    %r14, %r12
// 215: eb 04                         jmp     0x21b <_JIT_ENTRY+0x21b>
// 217: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 21b: 49 29 dc                      subq    %rbx, %r12
// 21e: 49 83 c4 b8                   addq    $-0x48, %r12
// 222: 49 c1 ec 03                   shrq    $0x3, %r12
// 226: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 22a: 31 c0                         xorl    %eax, %eax
// 22c: e9 6b fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 231: 
static const unsigned char _CALL_LENplus_BUILD_TUPLE_code_body[562] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x4b, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd6, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x0f, 0xb7, 0xf0, 0x48, 0x29, 0xf1, 0x4d, 0x8d, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x56, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xc9, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xce, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x63, 0xf6, 0x48, 0x01, 0xce, 0x48, 0x29, 0xd1, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xf4, 0xeb, 0x04, 0x4f, 0x8d, 0x24, 0xee, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x6b, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_BUILD_TUPLE_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyTuple_FromArraySteal, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_BUILD_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_BUILD_TUPLE_data_holes[1];

// _CALL_LENplus_CALL_BUILTIN_CLASS
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CALL_BUILTIN_CLASS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 de                      subq    %rbx, %r14
// 79: 49 83 c6 b8                   addq    $-0x48, %r14
// 7d: 49 c1 ee 03                   shrq    $0x3, %r14
// 81: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 28                   addq    $0x28, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// b2: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 ef                      movq    %r13, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 3c 02 00 00             js      0x30a <_JIT_ENTRY+0x30a>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 04 24                   movq    %rax, (%rsp)
// e1: 48 8b 45 00                   movq    (%rbp), %rax
// e5: 48 85 c0                      testq   %rax, %rax
// e8: 7f 22                         jg      0x10c <_JIT_ENTRY+0x10c>
// ea: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_NegativeRefcount
// fe: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 103: 48 89 ea                      movq    %rbp, %rdx
// 106: ff d0                         callq   *%rax
// 108: 48 8b 45 00                   movq    (%rbp), %rax
// 10c: 85 c0                         testl   %eax, %eax
// 10e: 78 21                         js      0x131 <_JIT_ENTRY+0x131>
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11a: ff d0                         callq   *%rax
// 11c: 48 ff 4d 00                   decq    (%rbp)
// 120: 75 0f                         jne     0x131 <_JIT_ENTRY+0x131>
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  _Py_Dealloc
// 12c: 48 89 ef                      movq    %rbp, %rdi
// 12f: ff d0                         callq   *%rax
// 131: 49 8b 45 00                   movq    (%r13), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_NegativeRefcount
// 14e: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 153: 4c 89 ea                      movq    %r13, %rdx
// 156: ff d0                         callq   *%rax
// 158: 49 8b 45 00                   movq    (%r13), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 4d 00                   decq    (%r13)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: 4c 89 ef                      movq    %r13, %rdi
// 17f: ff d0                         callq   *%rax
// 181: 48 8b 3c 24                   movq    (%rsp), %rdi
// 185: 48 85 ff                      testq   %rdi, %rdi
// 188: 0f 84 78 01 00 00             je      0x306 <_JIT_ENTRY+0x306>
// 18e: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 192: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000194:  R_X86_64_64  _JIT_OPARG
// 19c: 0f b7 f2                      movzwl  %dx, %esi
// 19f: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a4: 29 f1                         subl    %esi, %ecx
// 1a6: 4c 63 c9                      movslq  %ecx, %r9
// 1a9: 4b 89 3c ce                   movq    %rdi, (%r14,%r9,8)
// 1ad: 89 f1                         movl    %esi, %ecx
// 1af: f7 d1                         notl    %ecx
// 1b1: 48 63 f9                      movslq  %ecx, %rdi
// 1b4: 4c 8d 14 3f                   leaq    (%rdi,%rdi), %r10
// 1b8: 4b 8b 0c d6                   movq    (%r14,%r10,8), %rcx
// 1bc: 49 01 f9                      addq    %rdi, %r9
// 1bf: 0f b7 d2                      movzwl  %dx, %edx
// 1c2: 48 89 d7                      movq    %rdx, %rdi
// 1c5: 48 f7 df                      negq    %rdi
// 1c8: 44 8d 66 01                   leal    0x1(%rsi), %r12d
// 1cc: 48 85 c9                      testq   %rcx, %rcx
// 1cf: 48 f7 d2                      notq    %rdx
// 1d2: 48 0f 44 d7                   cmoveq  %rdi, %rdx
// 1d6: 44 0f 44 e6                   cmovel  %esi, %r12d
// 1da: 4b 8b 3c ce                   movq    (%r14,%r9,8), %rdi
// 1de: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 1e2: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 1e9: 0f 84 0f 01 00 00             je      0x2fe <_JIT_ENTRY+0x2fe>
// 1ef: 4c 8b 87 90 01 00 00          movq    0x190(%rdi), %r8
// 1f6: 4d 85 c0                      testq   %r8, %r8
// 1f9: 0f 84 ff 00 00 00             je      0x2fe <_JIT_ENTRY+0x2fe>
// 1ff: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 204: 4c 89 0c 24                   movq    %r9, (%rsp)
// 208: 48 8d 2c d0                   leaq    (%rax,%rdx,8), %rbp
// 20c: 48 85 c9                      testq   %rcx, %rcx
// 20f: 41 0f 94 c7                   sete    %r15b
// 213: 44 89 e2                      movl    %r12d, %edx
// 216: 48 89 7c 24 18                movq    %rdi, 0x18(%rsp)
// 21b: 48 89 ee                      movq    %rbp, %rsi
// 21e: 31 c9                         xorl    %ecx, %ecx
// 220: 41 ff d0                      callq   *%r8
// 223: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _JIT_OPARG
// 232: 66 85 c0                      testw   %ax, %ax
// 235: 0f 94 c0                      sete    %al
// 238: 41 84 c7                      testb   %al, %r15b
// 23b: 0f 84 df 00 00 00             je      0x320 <_JIT_ENTRY+0x320>
// 241: 4c 8b 64 24 18                movq    0x18(%rsp), %r12
// 246: 49 8b 04 24                   movq    (%r12), %rax
// 24a: 48 85 c0                      testq   %rax, %rax
// 24d: 7f 22                         jg      0x271 <_JIT_ENTRY+0x271>
// 24f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000251:  R_X86_64_64  .rodata.str1.1
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _Py_NegativeRefcount
// 263: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 268: 4c 89 e2                      movq    %r12, %rdx
// 26b: ff d0                         callq   *%rax
// 26d: 49 8b 04 24                   movq    (%r12), %rax
// 271: 85 c0                         testl   %eax, %eax
// 273: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 278: 78 21                         js      0x29b <_JIT_ENTRY+0x29b>
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 284: ff d0                         callq   *%rax
// 286: 49 ff 0c 24                   decq    (%r12)
// 28a: 75 0f                         jne     0x29b <_JIT_ENTRY+0x29b>
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _Py_Dealloc
// 296: 4c 89 e7                      movq    %r12, %rdi
// 299: ff d0                         callq   *%rax
// 29b: 48 8b 04 24                   movq    (%rsp), %rax
// 29f: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 2a3: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2a8: 48 85 d2                      testq   %rdx, %rdx
// 2ab: 0f 84 f8 00 00 00             je      0x3a9 <_JIT_ENTRY+0x3a9>
// 2b1: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 2b6: 4d 8d 34 ce                   leaq    (%r14,%rcx,8), %r14
// 2ba: 48 89 10                      movq    %rdx, (%rax)
// 2bd: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2c1: 48 8b 00                      movq    (%rax), %rax
// 2c4: 84 c0                         testb   %al, %al
// 2c6: 74 13                         je      0x2db <_JIT_ENTRY+0x2db>
// 2c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ca:  R_X86_64_64  _Py_HandlePending
// 2d2: 4c 89 ff                      movq    %r15, %rdi
// 2d5: ff d0                         callq   *%rax
// 2d7: 85 c0                         testl   %eax, %eax
// 2d9: 75 2f                         jne     0x30a <_JIT_ENTRY+0x30a>
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _JIT_CONTINUE
// 2e5: 48 89 df                      movq    %rbx, %rdi
// 2e8: 4c 89 f6                      movq    %r14, %rsi
// 2eb: 4c 89 fa                      movq    %r15, %rdx
// 2ee: 48 83 c4 28                   addq    $0x28, %rsp
// 2f2: 5b                            popq    %rbx
// 2f3: 41 5c                         popq    %r12
// 2f5: 41 5d                         popq    %r13
// 2f7: 41 5e                         popq    %r14
// 2f9: 41 5f                         popq    %r15
// 2fb: 5d                            popq    %rbp
// 2fc: ff e0                         jmpq    *%rax
// 2fe: 49 89 c6                      movq    %rax, %r14
// 301: e9 70 fd ff ff                jmp     0x76 <_JIT_ENTRY+0x76>
// 306: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 30a: 49 29 de                      subq    %rbx, %r14
// 30d: 49 83 c6 b8                   addq    $-0x48, %r14
// 311: 49 c1 ee 03                   shrq    $0x3, %r14
// 315: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 319: 31 c0                         xorl    %eax, %eax
// 31b: e9 7e fd ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 320: 41 83 fc 02                   cmpl    $0x2, %r12d
// 324: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 32a: 45 0f 43 fc                   cmovael %r12d, %r15d
// 32e: 45 31 e4                      xorl    %r12d, %r12d
// 331: eb 19                         jmp     0x34c <_JIT_ENTRY+0x34c>
// 333: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 340: 49 ff c4                      incq    %r12
// 343: 4d 39 e7                      cmpq    %r12, %r15
// 346: 0f 84 f5 fe ff ff             je      0x241 <_JIT_ENTRY+0x241>
// 34c: 4e 8b 6c e5 00                movq    (%rbp,%r12,8), %r13
// 351: 49 8b 45 00                   movq    (%r13), %rax
// 355: 48 85 c0                      testq   %rax, %rax
// 358: 7e 06                         jle     0x360 <_JIT_ENTRY+0x360>
// 35a: 85 c0                         testl   %eax, %eax
// 35c: 78 e2                         js      0x340 <_JIT_ENTRY+0x340>
// 35e: eb 26                         jmp     0x386 <_JIT_ENTRY+0x386>
// 360: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000362:  R_X86_64_64  .rodata.str1.1
// 36a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 36f: 4c 89 ea                      movq    %r13, %rdx
// 372: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000374:  R_X86_64_64  _Py_NegativeRefcount
// 37c: ff d0                         callq   *%rax
// 37e: 49 8b 45 00                   movq    (%r13), %rax
// 382: 85 c0                         testl   %eax, %eax
// 384: 78 ba                         js      0x340 <_JIT_ENTRY+0x340>
// 386: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000388:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 390: ff d0                         callq   *%rax
// 392: 49 ff 4d 00                   decq    (%r13)
// 396: 75 a8                         jne     0x340 <_JIT_ENTRY+0x340>
// 398: 4c 89 ef                      movq    %r13, %rdi
// 39b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039d:  R_X86_64_64  _Py_Dealloc
// 3a5: ff d0                         callq   *%rax
// 3a7: eb 97                         jmp     0x340 <_JIT_ENTRY+0x340>
// 3a9: 49 89 c6                      movq    %rax, %r14
// 3ac: e9 59 ff ff ff                jmp     0x30a <_JIT_ENTRY+0x30a>
// 3b1: 
static const unsigned char _CALL_LENplus_CALL_BUILTIN_CLASS_code_body[946] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x3c, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x78, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf2, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf1, 0x4c, 0x63, 0xc9, 0x4b, 0x89, 0x3c, 0xce, 0x89, 0xf1, 0xf7, 0xd1, 0x48, 0x63, 0xf9, 0x4c, 0x8d, 0x14, 0x3f, 0x4b, 0x8b, 0x0c, 0xd6, 0x49, 0x01, 0xf9, 0x0f, 0xb7, 0xd2, 0x48, 0x89, 0xd7, 0x48, 0xf7, 0xdf, 0x44, 0x8d, 0x66, 0x01, 0x48, 0x85, 0xc9, 0x48, 0xf7, 0xd2, 0x48, 0x0f, 0x44, 0xd7, 0x44, 0x0f, 0x44, 0xe6, 0x4b, 0x8b, 0x3c, 0xce, 0x48, 0x8b, 0x77, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x0f, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x87, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xff, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x8d, 0x2c, 0xd0, 0x48, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc7, 0x44, 0x89, 0xe2, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xdf, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x24, 0x18, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x34, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xe9, 0x70, 0xfd, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x7e, 0xfd, 0xff, 0xff, 0x41, 0x83, 0xfc, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfc, 0x45, 0x31, 0xe4, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc4, 0x4d, 0x39, 0xe7, 0x0f, 0x84, 0xf5, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xe5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc6, 0xe9, 0x59, 0xff, 0xff, 0xff};
static const Hole _CALL_LENplus_CALL_BUILTIN_CLASS_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x362, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x374, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x388, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x39d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CALL_BUILTIN_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CALL_BUILTIN_CLASS_data_holes[1];

// _CALL_LENplus_CALL_BUILTIN_FAST
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CALL_BUILTIN_FAST.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 de                      subq    %rbx, %r14
// 79: 49 83 c6 b8                   addq    $-0x48, %r14
// 7d: 49 c1 ee 03                   shrq    $0x3, %r14
// 81: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 28                   addq    $0x28, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// b2: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 ef                      movq    %r13, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 44 02 00 00             js      0x312 <_JIT_ENTRY+0x312>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 04 24                   movq    %rax, (%rsp)
// e1: 48 8b 45 00                   movq    (%rbp), %rax
// e5: 48 85 c0                      testq   %rax, %rax
// e8: 7f 22                         jg      0x10c <_JIT_ENTRY+0x10c>
// ea: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_NegativeRefcount
// fe: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 103: 48 89 ea                      movq    %rbp, %rdx
// 106: ff d0                         callq   *%rax
// 108: 48 8b 45 00                   movq    (%rbp), %rax
// 10c: 85 c0                         testl   %eax, %eax
// 10e: 78 21                         js      0x131 <_JIT_ENTRY+0x131>
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11a: ff d0                         callq   *%rax
// 11c: 48 ff 4d 00                   decq    (%rbp)
// 120: 75 0f                         jne     0x131 <_JIT_ENTRY+0x131>
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  _Py_Dealloc
// 12c: 48 89 ef                      movq    %rbp, %rdi
// 12f: ff d0                         callq   *%rax
// 131: 49 8b 45 00                   movq    (%r13), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_NegativeRefcount
// 14e: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 153: 4c 89 ea                      movq    %r13, %rdx
// 156: ff d0                         callq   *%rax
// 158: 49 8b 45 00                   movq    (%r13), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 4d 00                   decq    (%r13)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: 4c 89 ef                      movq    %r13, %rdi
// 17f: ff d0                         callq   *%rax
// 181: 48 8b 3c 24                   movq    (%rsp), %rdi
// 185: 48 85 ff                      testq   %rdi, %rdi
// 188: 0f 84 80 01 00 00             je      0x30e <_JIT_ENTRY+0x30e>
// 18e: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 192: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000194:  R_X86_64_64  _JIT_OPARG
// 19c: 0f b7 f2                      movzwl  %dx, %esi
// 19f: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a4: 29 f1                         subl    %esi, %ecx
// 1a6: 4c 63 c9                      movslq  %ecx, %r9
// 1a9: 4b 89 3c ce                   movq    %rdi, (%r14,%r9,8)
// 1ad: 89 f1                         movl    %esi, %ecx
// 1af: f7 d1                         notl    %ecx
// 1b1: 48 63 f9                      movslq  %ecx, %rdi
// 1b4: 4c 8d 14 3f                   leaq    (%rdi,%rdi), %r10
// 1b8: 4b 8b 0c d6                   movq    (%r14,%r10,8), %rcx
// 1bc: 49 01 f9                      addq    %rdi, %r9
// 1bf: 0f b7 d2                      movzwl  %dx, %edx
// 1c2: 48 89 d7                      movq    %rdx, %rdi
// 1c5: 48 f7 df                      negq    %rdi
// 1c8: 44 8d 66 01                   leal    0x1(%rsi), %r12d
// 1cc: 48 85 c9                      testq   %rcx, %rcx
// 1cf: 48 f7 d2                      notq    %rdx
// 1d2: 48 0f 44 d7                   cmoveq  %rdi, %rdx
// 1d6: 44 0f 44 e6                   cmovel  %esi, %r12d
// 1da: 4b 8b 3c ce                   movq    (%r14,%r9,8), %rdi
// 1de: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001e0:  R_X86_64_64  PyCFunction_Type
// 1e8: 48 39 77 08                   cmpq    %rsi, 0x8(%rdi)
// 1ec: 0f 85 14 01 00 00             jne     0x306 <_JIT_ENTRY+0x306>
// 1f2: 4c 8b 47 10                   movq    0x10(%rdi), %r8
// 1f6: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 1fe: 0f 85 02 01 00 00             jne     0x306 <_JIT_ENTRY+0x306>
// 204: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 209: 4c 89 0c 24                   movq    %r9, (%rsp)
// 20d: 48 8d 2c d0                   leaq    (%rax,%rdx,8), %rbp
// 211: 48 85 c9                      testq   %rcx, %rcx
// 214: 41 0f 94 c7                   sete    %r15b
// 218: 48 89 7c 24 18                movq    %rdi, 0x18(%rsp)
// 21d: 48 8b 7f 18                   movq    0x18(%rdi), %rdi
// 221: 44 89 e2                      movl    %r12d, %edx
// 224: 48 89 ee                      movq    %rbp, %rsi
// 227: 41 ff 50 08                   callq   *0x8(%r8)
// 22b: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _JIT_OPARG
// 23a: 66 85 c0                      testw   %ax, %ax
// 23d: 0f 94 c0                      sete    %al
// 240: 41 84 c7                      testb   %al, %r15b
// 243: 0f 84 df 00 00 00             je      0x328 <_JIT_ENTRY+0x328>
// 249: 4c 8b 64 24 18                movq    0x18(%rsp), %r12
// 24e: 49 8b 04 24                   movq    (%r12), %rax
// 252: 48 85 c0                      testq   %rax, %rax
// 255: 7f 22                         jg      0x279 <_JIT_ENTRY+0x279>
// 257: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000259:  R_X86_64_64  .rodata.str1.1
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_NegativeRefcount
// 26b: be 28 0b 00 00                movl    $0xb28, %esi            # imm = 0xB28
// 270: 4c 89 e2                      movq    %r12, %rdx
// 273: ff d0                         callq   *%rax
// 275: 49 8b 04 24                   movq    (%r12), %rax
// 279: 85 c0                         testl   %eax, %eax
// 27b: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 280: 78 21                         js      0x2a3 <_JIT_ENTRY+0x2a3>
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28c: ff d0                         callq   *%rax
// 28e: 49 ff 0c 24                   decq    (%r12)
// 292: 75 0f                         jne     0x2a3 <_JIT_ENTRY+0x2a3>
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _Py_Dealloc
// 29e: 4c 89 e7                      movq    %r12, %rdi
// 2a1: ff d0                         callq   *%rax
// 2a3: 48 8b 04 24                   movq    (%rsp), %rax
// 2a7: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 2ab: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2b0: 48 85 d2                      testq   %rdx, %rdx
// 2b3: 0f 84 ea 00 00 00             je      0x3a3 <_JIT_ENTRY+0x3a3>
// 2b9: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 2be: 4d 8d 34 ce                   leaq    (%r14,%rcx,8), %r14
// 2c2: 48 89 10                      movq    %rdx, (%rax)
// 2c5: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2c9: 48 8b 00                      movq    (%rax), %rax
// 2cc: 84 c0                         testb   %al, %al
// 2ce: 74 13                         je      0x2e3 <_JIT_ENTRY+0x2e3>
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _Py_HandlePending
// 2da: 4c 89 ff                      movq    %r15, %rdi
// 2dd: ff d0                         callq   *%rax
// 2df: 85 c0                         testl   %eax, %eax
// 2e1: 75 2f                         jne     0x312 <_JIT_ENTRY+0x312>
// 2e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e5:  R_X86_64_64  _JIT_CONTINUE
// 2ed: 48 89 df                      movq    %rbx, %rdi
// 2f0: 4c 89 f6                      movq    %r14, %rsi
// 2f3: 4c 89 fa                      movq    %r15, %rdx
// 2f6: 48 83 c4 28                   addq    $0x28, %rsp
// 2fa: 5b                            popq    %rbx
// 2fb: 41 5c                         popq    %r12
// 2fd: 41 5d                         popq    %r13
// 2ff: 41 5e                         popq    %r14
// 301: 41 5f                         popq    %r15
// 303: 5d                            popq    %rbp
// 304: ff e0                         jmpq    *%rax
// 306: 49 89 c6                      movq    %rax, %r14
// 309: e9 68 fd ff ff                jmp     0x76 <_JIT_ENTRY+0x76>
// 30e: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 312: 49 29 de                      subq    %rbx, %r14
// 315: 49 83 c6 b8                   addq    $-0x48, %r14
// 319: 49 c1 ee 03                   shrq    $0x3, %r14
// 31d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 321: 31 c0                         xorl    %eax, %eax
// 323: e9 76 fd ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 328: 41 83 fc 02                   cmpl    $0x2, %r12d
// 32c: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 332: 45 0f 43 fc                   cmovael %r12d, %r15d
// 336: 45 31 e4                      xorl    %r12d, %r12d
// 339: eb 11                         jmp     0x34c <_JIT_ENTRY+0x34c>
// 33b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 340: 49 ff c4                      incq    %r12
// 343: 4d 39 e7                      cmpq    %r12, %r15
// 346: 0f 84 fd fe ff ff             je      0x249 <_JIT_ENTRY+0x249>
// 34c: 4e 8b 6c e5 00                movq    (%rbp,%r12,8), %r13
// 351: 49 8b 45 00                   movq    (%r13), %rax
// 355: 48 85 c0                      testq   %rax, %rax
// 358: 7f 22                         jg      0x37c <_JIT_ENTRY+0x37c>
// 35a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000035c:  R_X86_64_64  .rodata.str1.1
// 364: be 26 0b 00 00                movl    $0xb26, %esi            # imm = 0xB26
// 369: 4c 89 ea                      movq    %r13, %rdx
// 36c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036e:  R_X86_64_64  _Py_NegativeRefcount
// 376: ff d0                         callq   *%rax
// 378: 49 8b 45 00                   movq    (%r13), %rax
// 37c: 85 c0                         testl   %eax, %eax
// 37e: 78 c0                         js      0x340 <_JIT_ENTRY+0x340>
// 380: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000382:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 38a: ff d0                         callq   *%rax
// 38c: 49 ff 4d 00                   decq    (%r13)
// 390: 75 ae                         jne     0x340 <_JIT_ENTRY+0x340>
// 392: 4c 89 ef                      movq    %r13, %rdi
// 395: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000397:  R_X86_64_64  _Py_Dealloc
// 39f: ff d0                         callq   *%rax
// 3a1: eb 9d                         jmp     0x340 <_JIT_ENTRY+0x340>
// 3a3: 49 89 c6                      movq    %rax, %r14
// 3a6: e9 67 ff ff ff                jmp     0x312 <_JIT_ENTRY+0x312>
// 3ab: 
static const unsigned char _CALL_LENplus_CALL_BUILTIN_FAST_code_body[940] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x44, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x80, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf2, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf1, 0x4c, 0x63, 0xc9, 0x4b, 0x89, 0x3c, 0xce, 0x89, 0xf1, 0xf7, 0xd1, 0x48, 0x63, 0xf9, 0x4c, 0x8d, 0x14, 0x3f, 0x4b, 0x8b, 0x0c, 0xd6, 0x49, 0x01, 0xf9, 0x0f, 0xb7, 0xd2, 0x48, 0x89, 0xd7, 0x48, 0xf7, 0xdf, 0x44, 0x8d, 0x66, 0x01, 0x48, 0x85, 0xc9, 0x48, 0xf7, 0xd2, 0x48, 0x0f, 0x44, 0xd7, 0x44, 0x0f, 0x44, 0xe6, 0x4b, 0x8b, 0x3c, 0xce, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x77, 0x08, 0x0f, 0x85, 0x14, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x47, 0x10, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x02, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x8d, 0x2c, 0xd0, 0x48, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc7, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x48, 0x8b, 0x7f, 0x18, 0x44, 0x89, 0xe2, 0x48, 0x89, 0xee, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xdf, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x24, 0x18, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x28, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xea, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x34, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xe9, 0x68, 0xfd, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x76, 0xfd, 0xff, 0xff, 0x41, 0x83, 0xfc, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfc, 0x45, 0x31, 0xe4, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xc4, 0x4d, 0x39, 0xe7, 0x0f, 0x84, 0xfd, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xe5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x26, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xae, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x9d, 0x49, 0x89, 0xc6, 0xe9, 0x67, 0xff, 0xff, 0xff};
static const Hole _CALL_LENplus_CALL_BUILTIN_FAST_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2e5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x35c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x36e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x382, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x397, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CALL_BUILTIN_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CALL_BUILTIN_FAST_data_holes[1];

// _CALL_LENplus_CALL_BUILTIN_FAST_WITH_KEYWORDS
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CALL_BUILTIN_FAST_WITH_KEYWORDS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 de                      subq    %rbx, %r14
// 79: 49 83 c6 b8                   addq    $-0x48, %r14
// 7d: 49 c1 ee 03                   shrq    $0x3, %r14
// 81: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 28                   addq    $0x28, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// b2: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 ef                      movq    %r13, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 46 02 00 00             js      0x314 <_JIT_ENTRY+0x314>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 04 24                   movq    %rax, (%rsp)
// e1: 48 8b 45 00                   movq    (%rbp), %rax
// e5: 48 85 c0                      testq   %rax, %rax
// e8: 7f 22                         jg      0x10c <_JIT_ENTRY+0x10c>
// ea: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_NegativeRefcount
// fe: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 103: 48 89 ea                      movq    %rbp, %rdx
// 106: ff d0                         callq   *%rax
// 108: 48 8b 45 00                   movq    (%rbp), %rax
// 10c: 85 c0                         testl   %eax, %eax
// 10e: 78 21                         js      0x131 <_JIT_ENTRY+0x131>
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11a: ff d0                         callq   *%rax
// 11c: 48 ff 4d 00                   decq    (%rbp)
// 120: 75 0f                         jne     0x131 <_JIT_ENTRY+0x131>
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  _Py_Dealloc
// 12c: 48 89 ef                      movq    %rbp, %rdi
// 12f: ff d0                         callq   *%rax
// 131: 49 8b 45 00                   movq    (%r13), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_NegativeRefcount
// 14e: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 153: 4c 89 ea                      movq    %r13, %rdx
// 156: ff d0                         callq   *%rax
// 158: 49 8b 45 00                   movq    (%r13), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 4d 00                   decq    (%r13)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: 4c 89 ef                      movq    %r13, %rdi
// 17f: ff d0                         callq   *%rax
// 181: 48 8b 3c 24                   movq    (%rsp), %rdi
// 185: 48 85 ff                      testq   %rdi, %rdi
// 188: 0f 84 82 01 00 00             je      0x310 <_JIT_ENTRY+0x310>
// 18e: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 192: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000194:  R_X86_64_64  _JIT_OPARG
// 19c: 0f b7 f2                      movzwl  %dx, %esi
// 19f: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a4: 29 f1                         subl    %esi, %ecx
// 1a6: 4c 63 c9                      movslq  %ecx, %r9
// 1a9: 4b 89 3c ce                   movq    %rdi, (%r14,%r9,8)
// 1ad: 89 f1                         movl    %esi, %ecx
// 1af: f7 d1                         notl    %ecx
// 1b1: 48 63 f9                      movslq  %ecx, %rdi
// 1b4: 4c 8d 14 3f                   leaq    (%rdi,%rdi), %r10
// 1b8: 4b 8b 0c d6                   movq    (%r14,%r10,8), %rcx
// 1bc: 49 01 f9                      addq    %rdi, %r9
// 1bf: 0f b7 d2                      movzwl  %dx, %edx
// 1c2: 48 89 d7                      movq    %rdx, %rdi
// 1c5: 48 f7 df                      negq    %rdi
// 1c8: 44 8d 66 01                   leal    0x1(%rsi), %r12d
// 1cc: 48 85 c9                      testq   %rcx, %rcx
// 1cf: 48 f7 d2                      notq    %rdx
// 1d2: 48 0f 44 d7                   cmoveq  %rdi, %rdx
// 1d6: 44 0f 44 e6                   cmovel  %esi, %r12d
// 1da: 4b 8b 3c ce                   movq    (%r14,%r9,8), %rdi
// 1de: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001e0:  R_X86_64_64  PyCFunction_Type
// 1e8: 48 39 77 08                   cmpq    %rsi, 0x8(%rdi)
// 1ec: 0f 85 16 01 00 00             jne     0x308 <_JIT_ENTRY+0x308>
// 1f2: 4c 8b 47 10                   movq    0x10(%rdi), %r8
// 1f6: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 1fe: 0f 85 04 01 00 00             jne     0x308 <_JIT_ENTRY+0x308>
// 204: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 209: 4c 89 0c 24                   movq    %r9, (%rsp)
// 20d: 48 8d 2c d0                   leaq    (%rax,%rdx,8), %rbp
// 211: 48 85 c9                      testq   %rcx, %rcx
// 214: 41 0f 94 c7                   sete    %r15b
// 218: 48 89 7c 24 18                movq    %rdi, 0x18(%rsp)
// 21d: 48 8b 7f 18                   movq    0x18(%rdi), %rdi
// 221: 44 89 e2                      movl    %r12d, %edx
// 224: 48 89 ee                      movq    %rbp, %rsi
// 227: 31 c9                         xorl    %ecx, %ecx
// 229: 41 ff 50 08                   callq   *0x8(%r8)
// 22d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _JIT_OPARG
// 23c: 66 85 c0                      testw   %ax, %ax
// 23f: 0f 94 c0                      sete    %al
// 242: 41 84 c7                      testb   %al, %r15b
// 245: 0f 84 df 00 00 00             je      0x32a <_JIT_ENTRY+0x32a>
// 24b: 4c 8b 64 24 18                movq    0x18(%rsp), %r12
// 250: 49 8b 04 24                   movq    (%r12), %rax
// 254: 48 85 c0                      testq   %rax, %rax
// 257: 7f 22                         jg      0x27b <_JIT_ENTRY+0x27b>
// 259: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025b:  R_X86_64_64  .rodata.str1.1
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _Py_NegativeRefcount
// 26d: be 51 0b 00 00                movl    $0xb51, %esi            # imm = 0xB51
// 272: 4c 89 e2                      movq    %r12, %rdx
// 275: ff d0                         callq   *%rax
// 277: 49 8b 04 24                   movq    (%r12), %rax
// 27b: 85 c0                         testl   %eax, %eax
// 27d: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 282: 78 21                         js      0x2a5 <_JIT_ENTRY+0x2a5>
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28e: ff d0                         callq   *%rax
// 290: 49 ff 0c 24                   decq    (%r12)
// 294: 75 0f                         jne     0x2a5 <_JIT_ENTRY+0x2a5>
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _Py_Dealloc
// 2a0: 4c 89 e7                      movq    %r12, %rdi
// 2a3: ff d0                         callq   *%rax
// 2a5: 48 8b 04 24                   movq    (%rsp), %rax
// 2a9: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 2ad: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2b2: 48 85 d2                      testq   %rdx, %rdx
// 2b5: 0f 84 e8 00 00 00             je      0x3a3 <_JIT_ENTRY+0x3a3>
// 2bb: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 2c0: 4d 8d 34 ce                   leaq    (%r14,%rcx,8), %r14
// 2c4: 48 89 10                      movq    %rdx, (%rax)
// 2c7: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2cb: 48 8b 00                      movq    (%rax), %rax
// 2ce: 84 c0                         testb   %al, %al
// 2d0: 74 13                         je      0x2e5 <_JIT_ENTRY+0x2e5>
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_HandlePending
// 2dc: 4c 89 ff                      movq    %r15, %rdi
// 2df: ff d0                         callq   *%rax
// 2e1: 85 c0                         testl   %eax, %eax
// 2e3: 75 2f                         jne     0x314 <_JIT_ENTRY+0x314>
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _JIT_CONTINUE
// 2ef: 48 89 df                      movq    %rbx, %rdi
// 2f2: 4c 89 f6                      movq    %r14, %rsi
// 2f5: 4c 89 fa                      movq    %r15, %rdx
// 2f8: 48 83 c4 28                   addq    $0x28, %rsp
// 2fc: 5b                            popq    %rbx
// 2fd: 41 5c                         popq    %r12
// 2ff: 41 5d                         popq    %r13
// 301: 41 5e                         popq    %r14
// 303: 41 5f                         popq    %r15
// 305: 5d                            popq    %rbp
// 306: ff e0                         jmpq    *%rax
// 308: 49 89 c6                      movq    %rax, %r14
// 30b: e9 66 fd ff ff                jmp     0x76 <_JIT_ENTRY+0x76>
// 310: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 314: 49 29 de                      subq    %rbx, %r14
// 317: 49 83 c6 b8                   addq    $-0x48, %r14
// 31b: 49 c1 ee 03                   shrq    $0x3, %r14
// 31f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 323: 31 c0                         xorl    %eax, %eax
// 325: e9 74 fd ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 32a: 41 83 fc 02                   cmpl    $0x2, %r12d
// 32e: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 334: 45 0f 43 fc                   cmovael %r12d, %r15d
// 338: 45 31 e4                      xorl    %r12d, %r12d
// 33b: eb 0f                         jmp     0x34c <_JIT_ENTRY+0x34c>
// 33d: 0f 1f 00                      nopl    (%rax)
// 340: 49 ff c4                      incq    %r12
// 343: 4d 39 e7                      cmpq    %r12, %r15
// 346: 0f 84 ff fe ff ff             je      0x24b <_JIT_ENTRY+0x24b>
// 34c: 4e 8b 6c e5 00                movq    (%rbp,%r12,8), %r13
// 351: 49 8b 45 00                   movq    (%r13), %rax
// 355: 48 85 c0                      testq   %rax, %rax
// 358: 7f 22                         jg      0x37c <_JIT_ENTRY+0x37c>
// 35a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000035c:  R_X86_64_64  .rodata.str1.1
// 364: be 4f 0b 00 00                movl    $0xb4f, %esi            # imm = 0xB4F
// 369: 4c 89 ea                      movq    %r13, %rdx
// 36c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036e:  R_X86_64_64  _Py_NegativeRefcount
// 376: ff d0                         callq   *%rax
// 378: 49 8b 45 00                   movq    (%r13), %rax
// 37c: 85 c0                         testl   %eax, %eax
// 37e: 78 c0                         js      0x340 <_JIT_ENTRY+0x340>
// 380: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000382:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 38a: ff d0                         callq   *%rax
// 38c: 49 ff 4d 00                   decq    (%r13)
// 390: 75 ae                         jne     0x340 <_JIT_ENTRY+0x340>
// 392: 4c 89 ef                      movq    %r13, %rdi
// 395: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000397:  R_X86_64_64  _Py_Dealloc
// 39f: ff d0                         callq   *%rax
// 3a1: eb 9d                         jmp     0x340 <_JIT_ENTRY+0x340>
// 3a3: 49 89 c6                      movq    %rax, %r14
// 3a6: e9 69 ff ff ff                jmp     0x314 <_JIT_ENTRY+0x314>
// 3ab: 
static const unsigned char _CALL_LENplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_body[940] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x46, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x82, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf2, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf1, 0x4c, 0x63, 0xc9, 0x4b, 0x89, 0x3c, 0xce, 0x89, 0xf1, 0xf7, 0xd1, 0x48, 0x63, 0xf9, 0x4c, 0x8d, 0x14, 0x3f, 0x4b, 0x8b, 0x0c, 0xd6, 0x49, 0x01, 0xf9, 0x0f, 0xb7, 0xd2, 0x48, 0x89, 0xd7, 0x48, 0xf7, 0xdf, 0x44, 0x8d, 0x66, 0x01, 0x48, 0x85, 0xc9, 0x48, 0xf7, 0xd2, 0x48, 0x0f, 0x44, 0xd7, 0x44, 0x0f, 0x44, 0xe6, 0x4b, 0x8b, 0x3c, 0xce, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x77, 0x08, 0x0f, 0x85, 0x16, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x47, 0x10, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x04, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x8d, 0x2c, 0xd0, 0x48, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc7, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x48, 0x8b, 0x7f, 0x18, 0x44, 0x89, 0xe2, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xdf, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x24, 0x18, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x51, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xe8, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x34, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xe9, 0x66, 0xfd, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x74, 0xfd, 0xff, 0xff, 0x41, 0x83, 0xfc, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfc, 0x45, 0x31, 0xe4, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x49, 0xff, 0xc4, 0x4d, 0x39, 0xe7, 0x0f, 0x84, 0xff, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xe5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4f, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xae, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x9d, 0x49, 0x89, 0xc6, 0xe9, 0x69, 0xff, 0xff, 0xff};
static const Hole _CALL_LENplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x35c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x36e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x382, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x397, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_holes[1];

// _CALL_LENplus_CALL_BUILTIN_O
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CALL_BUILTIN_O.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 de                      subq    %rbx, %r14
// 79: 49 83 c6 b8                   addq    $-0x48, %r14
// 7d: 49 c1 ee 03                   shrq    $0x3, %r14
// 81: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// b2: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 ef                      movq    %r13, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 73 01 00 00             js      0x241 <_JIT_ENTRY+0x241>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 45 00                   movq    (%r13), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 ea                      movq    %r13, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 45 00                   movq    (%r13), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 21                         js      0x182 <_JIT_ENTRY+0x182>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 4d 00                   decq    (%r13)
// 171: 75 0f                         jne     0x182 <_JIT_ENTRY+0x182>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 ef                      movq    %r13, %rdi
// 180: ff d0                         callq   *%rax
// 182: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 187: 48 85 f6                      testq   %rsi, %rsi
// 18a: 0f 84 ad 00 00 00             je      0x23d <_JIT_ENTRY+0x23d>
// 190: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000192:  R_X86_64_64  _JIT_OPARG
// 19a: 0f b7 c1                      movzwl  %cx, %eax
// 19d: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1a2: 29 c2                         subl    %eax, %edx
// 1a4: 48 63 ea                      movslq  %edx, %rbp
// 1a7: 49 89 34 ee                   movq    %rsi, (%r14,%rbp,8)
// 1ab: f7 d0                         notl    %eax
// 1ad: 48 98                         cltq
// 1af: 4c 8d 3c 00                   leaq    (%rax,%rax), %r15
// 1b3: 44 0f b7 e9                   movzwl  %cx, %r13d
// 1b7: 4c 89 e9                      movq    %r13, %rcx
// 1ba: 48 f7 d9                      negq    %rcx
// 1bd: 31 d2                         xorl    %edx, %edx
// 1bf: 66 45 85 ed                   testw   %r13w, %r13w
// 1c3: 0f 94 c2                      sete    %dl
// 1c6: 31 f6                         xorl    %esi, %esi
// 1c8: 66 41 83 fd 01                cmpw    $0x1, %r13w
// 1cd: 40 0f 94 c6                   sete    %sil
// 1d1: 4b 83 3c fe 00                cmpq    $0x0, (%r14,%r15,8)
// 1d6: 49 f7 d5                      notq    %r13
// 1d9: 4c 0f 44 e9                   cmoveq  %rcx, %r13
// 1dd: 4f 8d 24 e6                   leaq    (%r14,%r12,8), %r12
// 1e1: 0f 44 d6                      cmovel  %esi, %edx
// 1e4: 80 fa 01                      cmpb    $0x1, %dl
// 1e7: 75 4c                         jne     0x235 <_JIT_ENTRY+0x235>
// 1e9: 48 01 c5                      addq    %rax, %rbp
// 1ec: 49 8b 3c ee                   movq    (%r14,%rbp,8), %rdi
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  PyCFunction_Type
// 1fa: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 1fe: 75 35                         jne     0x235 <_JIT_ENTRY+0x235>
// 200: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 204: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 208: 75 2b                         jne     0x235 <_JIT_ENTRY+0x235>
// 20a: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 20e: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 213: 8b 4e 2c                      movl    0x2c(%rsi), %ecx
// 216: 8d 51 ff                      leal    -0x1(%rcx), %edx
// 219: 89 56 2c                      movl    %edx, 0x2c(%rsi)
// 21c: 85 c9                         testl   %ecx, %ecx
// 21e: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 223: 7e 32                         jle     0x257 <_JIT_ENTRY+0x257>
// 225: 4f 8b 2c ec                   movq    (%r12,%r13,8), %r13
// 229: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 22d: 75 67                         jne     0x296 <_JIT_ENTRY+0x296>
// 22f: 48 8b 7f 18                   movq    0x18(%rdi), %rdi
// 233: eb 63                         jmp     0x298 <_JIT_ENTRY+0x298>
// 235: 4d 89 e6                      movq    %r12, %r14
// 238: e9 39 fe ff ff                jmp     0x76 <_JIT_ENTRY+0x76>
// 23d: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 241: 49 29 de                      subq    %rbx, %r14
// 244: 49 83 c6 b8                   addq    $-0x48, %r14
// 248: 49 c1 ee 03                   shrq    $0x3, %r14
// 24c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 250: 31 c0                         xorl    %eax, %eax
// 252: e9 47 fe ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 257: 4c 89 04 24                   movq    %r8, (%rsp)
// 25b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000025d:  R_X86_64_64  .rodata.str1.1+0x39
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _Py_CheckRecursiveCall
// 26f: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 274: ff d0                         callq   *%rax
// 276: 85 c0                         testl   %eax, %eax
// 278: 74 05                         je      0x27f <_JIT_ENTRY+0x27f>
// 27a: 4d 89 e6                      movq    %r12, %r14
// 27d: eb c2                         jmp     0x241 <_JIT_ENTRY+0x241>
// 27f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 284: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 288: 4c 8b 04 24                   movq    (%rsp), %r8
// 28c: 4f 8b 2c ec                   movq    (%r12,%r13,8), %r13
// 290: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 294: 74 99                         je      0x22f <_JIT_ENTRY+0x22f>
// 296: 31 ff                         xorl    %edi, %edi
// 298: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 29c: 48 89 04 24                   movq    %rax, (%rsp)
// 2a0: 4c 89 ee                      movq    %r13, %rsi
// 2a3: 41 ff d0                      callq   *%r8
// 2a6: 48 89 c5                      movq    %rax, %rbp
// 2a9: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 2ae: 41 ff 44 24 2c                incl    0x2c(%r12)
// 2b3: bf 02 0b 00 00                movl    $0xb02, %edi            # imm = 0xB02
// 2b8: 4c 89 ee                      movq    %r13, %rsi
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  .text+0x340
// 2c5: ff d0                         callq   *%rax
// 2c7: bf 03 0b 00 00                movl    $0xb03, %edi            # imm = 0xB03
// 2cc: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 2d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d3:  R_X86_64_64  .text+0x340
// 2db: ff d0                         callq   *%rax
// 2dd: 48 85 ed                      testq   %rbp, %rbp
// 2e0: 74 51                         je      0x333 <_JIT_ENTRY+0x333>
// 2e2: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 2e6: 48 8b 04 24                   movq    (%rsp), %rax
// 2ea: 48 89 28                      movq    %rbp, (%rax)
// 2ed: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 2f2: 48 8b 00                      movq    (%rax), %rax
// 2f5: 84 c0                         testb   %al, %al
// 2f7: 74 17                         je      0x310 <_JIT_ENTRY+0x310>
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _Py_HandlePending
// 303: 4c 89 e7                      movq    %r12, %rdi
// 306: ff d0                         callq   *%rax
// 308: 85 c0                         testl   %eax, %eax
// 30a: 0f 85 31 ff ff ff             jne     0x241 <_JIT_ENTRY+0x241>
// 310: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000312:  R_X86_64_64  _JIT_CONTINUE
// 31a: 48 89 df                      movq    %rbx, %rdi
// 31d: 4c 89 f6                      movq    %r14, %rsi
// 320: 4c 89 e2                      movq    %r12, %rdx
// 323: 48 83 c4 18                   addq    $0x18, %rsp
// 327: 5b                            popq    %rbx
// 328: 41 5c                         popq    %r12
// 32a: 41 5d                         popq    %r13
// 32c: 41 5e                         popq    %r14
// 32e: 41 5f                         popq    %r15
// 330: 5d                            popq    %rbp
// 331: ff e0                         jmpq    *%rax
// 333: 4c 8b 34 24                   movq    (%rsp), %r14
// 337: e9 05 ff ff ff                jmp     0x241 <_JIT_ENTRY+0x241>
// 33c: 0f 1f 40 00                   nopl    (%rax)
// 
// 0000000000000340 <Py_DECREF>:
// 340: 53                            pushq   %rbx
// 341: 48 89 f3                      movq    %rsi, %rbx
// 344: 48 8b 06                      movq    (%rsi), %rax
// 347: 48 85 c0                      testq   %rax, %rax
// 34a: 7e 06                         jle     0x352 <Py_DECREF+0x12>
// 34c: 85 c0                         testl   %eax, %eax
// 34e: 79 24                         jns     0x374 <Py_DECREF+0x34>
// 350: eb 33                         jmp     0x385 <Py_DECREF+0x45>
// 352: 89 fe                         movl    %edi, %esi
// 354: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000356:  R_X86_64_64  .rodata.str1.1
// 35e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000360:  R_X86_64_64  _Py_NegativeRefcount
// 368: 48 89 da                      movq    %rbx, %rdx
// 36b: ff d0                         callq   *%rax
// 36d: 48 8b 03                      movq    (%rbx), %rax
// 370: 85 c0                         testl   %eax, %eax
// 372: 78 11                         js      0x385 <Py_DECREF+0x45>
// 374: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000376:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 37e: ff d0                         callq   *%rax
// 380: 48 ff 0b                      decq    (%rbx)
// 383: 74 02                         je      0x387 <Py_DECREF+0x47>
// 385: 5b                            popq    %rbx
// 386: c3                            retq
// 387: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000389:  R_X86_64_64  _Py_Dealloc
// 391: 48 89 df                      movq    %rbx, %rdi
// 394: 5b                            popq    %rbx
// 395: ff e0                         jmpq    *%rax
// 397: 
static const unsigned char _CALL_LENplus_CALL_BUILTIN_O_code_body[920] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x73, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xad, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xea, 0x49, 0x89, 0x34, 0xee, 0xf7, 0xd0, 0x48, 0x98, 0x4c, 0x8d, 0x3c, 0x00, 0x44, 0x0f, 0xb7, 0xe9, 0x4c, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x31, 0xd2, 0x66, 0x45, 0x85, 0xed, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x41, 0x83, 0xfd, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x4b, 0x83, 0x3c, 0xfe, 0x00, 0x49, 0xf7, 0xd5, 0x4c, 0x0f, 0x44, 0xe9, 0x4f, 0x8d, 0x24, 0xe6, 0x0f, 0x44, 0xd6, 0x80, 0xfa, 0x01, 0x75, 0x4c, 0x48, 0x01, 0xc5, 0x49, 0x8b, 0x3c, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x75, 0x35, 0x48, 0x8b, 0x47, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2b, 0x4c, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x8b, 0x4e, 0x2c, 0x8d, 0x51, 0xff, 0x89, 0x56, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x7e, 0x32, 0x4f, 0x8b, 0x2c, 0xec, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x67, 0x48, 0x8b, 0x7f, 0x18, 0xeb, 0x63, 0x4d, 0x89, 0xe6, 0xe9, 0x39, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x47, 0xfe, 0xff, 0xff, 0x4c, 0x89, 0x04, 0x24, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x05, 0x4d, 0x89, 0xe6, 0xeb, 0xc2, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x4c, 0x8b, 0x04, 0x24, 0x4f, 0x8b, 0x2c, 0xec, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x99, 0x31, 0xff, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x89, 0x04, 0x24, 0x4c, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x41, 0xff, 0x44, 0x24, 0x2c, 0xbf, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xbf, 0x03, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x51, 0x4f, 0x8d, 0x34, 0xfe, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x89, 0x28, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x31, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x8b, 0x34, 0x24, 0xe9, 0x05, 0xff, 0xff, 0xff, 0x0f, 0x1f, 0x40, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CALL_LENplus_CALL_BUILTIN_O_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x340},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x340},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x312, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x356, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x360, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x376, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x389, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_LENplus_CALL_BUILTIN_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_LENplus_CALL_BUILTIN_O_data_holes[1];

// _CALL_LENplus_CALL_INTRINSIC_1
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CALL_INTRINSIC_1.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 9d 01 00 00             js      0x267 <_JIT_ENTRY+0x267>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 188: 48 85 f6                      testq   %rsi, %rsi
// 18b: 0f 84 cd 00 00 00             je      0x25e <_JIT_ENTRY+0x25e>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1a3: 29 ca                         subl    %ecx, %edx
// 1a5: 48 63 d2                      movslq  %edx, %rdx
// 1a8: 49 89 34 d6                   movq    %rsi, (%r14,%rdx,8)
// 1ac: f7 d1                         notl    %ecx
// 1ae: 48 63 e9                      movslq  %ecx, %rbp
// 1b1: 4d 8b 64 ee f8                movq    -0x8(%r14,%rbp,8), %r12
// 1b6: 0f b7 c8                      movzwl  %ax, %ecx
// 1b9: 48 c1 e1 04                   shlq    $0x4, %rcx
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _PyIntrinsics_UnaryFunctions
// 1c7: 4c 89 ff                      movq    %r15, %rdi
// 1ca: 4c 89 e6                      movq    %r12, %rsi
// 1cd: ff 14 01                      callq   *(%rcx,%rax)
// 1d0: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1d5: 49 8b 04 24                   movq    (%r12), %rax
// 1d9: 48 85 c0                      testq   %rax, %rax
// 1dc: 7f 22                         jg      0x200 <_JIT_ENTRY+0x200>
// 1de: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e0:  R_X86_64_64  .rodata.str1.1
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _Py_NegativeRefcount
// 1f2: be 7e 02 00 00                movl    $0x27e, %esi            # imm = 0x27E
// 1f7: 4c 89 e2                      movq    %r12, %rdx
// 1fa: ff d0                         callq   *%rax
// 1fc: 49 8b 04 24                   movq    (%r12), %rax
// 200: 85 c0                         testl   %eax, %eax
// 202: 78 21                         js      0x225 <_JIT_ENTRY+0x225>
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20e: ff d0                         callq   *%rax
// 210: 49 ff 0c 24                   decq    (%r12)
// 214: 75 0f                         jne     0x225 <_JIT_ENTRY+0x225>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_Dealloc
// 220: 4c 89 e7                      movq    %r12, %rdi
// 223: ff d0                         callq   *%rax
// 225: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 229: 48 83 c0 f8                   addq    $-0x8, %rax
// 22d: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 232: 48 85 c9                      testq   %rcx, %rcx
// 235: 74 2d                         je      0x264 <_JIT_ENTRY+0x264>
// 237: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 23b: 48 89 08                      movq    %rcx, (%rax)
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _JIT_CONTINUE
// 248: 48 89 df                      movq    %rbx, %rdi
// 24b: 4c 89 fa                      movq    %r15, %rdx
// 24e: 48 83 c4 18                   addq    $0x18, %rsp
// 252: 5b                            popq    %rbx
// 253: 41 5c                         popq    %r12
// 255: 41 5d                         popq    %r13
// 257: 41 5e                         popq    %r14
// 259: 41 5f                         popq    %r15
// 25b: 5d                            popq    %rbp
// 25c: ff e0                         jmpq    *%rax
// 25e: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 262: eb 03                         jmp     0x267 <_JIT_ENTRY+0x267>
// 264: 49 89 c6                      movq    %rax, %r14
// 267: 49 29 de                      subq    %rbx, %r14
// 26a: 49 83 c6 b8                   addq    $-0x48, %r14
// 26e: 49 c1 ee 03                   shrq    $0x3, %r14
// 272: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 276: 31 c0                         xorl    %eax, %eax
// 278: e9 20 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 27d: 
static const unsigned char _CALL_LENplus_CALL_INTRINSIC_1_code_body[638] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x9d, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xcd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd6, 0xf7, 0xd1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x64, 0xee, 0xf8, 0x0f, 0xb7, 0xc8, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xff, 0x14, 0x01, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x2d, 0x4b, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x20, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_CALL_INTRINSIC_1_code_holes[20] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_UnaryFunctions, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CALL_INTRINSIC_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CALL_INTRINSIC_1_data_holes[1];

// _CALL_LENplus_CALL_INTRINSIC_2
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CALL_INTRINSIC_2.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 f0 01 00 00             js      0x2b7 <_JIT_ENTRY+0x2b7>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 34 24                   movq    (%rsp), %rsi
// 17e: 48 85 f6                      testq   %rsi, %rsi
// 181: 0f 84 27 01 00 00             je      0x2ae <_JIT_ENTRY+0x2ae>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c8                      movzwl  %ax, %ecx
// 194: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 199: 29 ca                         subl    %ecx, %edx
// 19b: 48 63 d2                      movslq  %edx, %rdx
// 19e: 49 89 34 d6                   movq    %rsi, (%r14,%rdx,8)
// 1a2: f7 d1                         notl    %ecx
// 1a4: 4c 63 e9                      movslq  %ecx, %r13
// 1a7: 4b 8b 6c ee f0                movq    -0x10(%r14,%r13,8), %rbp
// 1ac: 4f 8b 64 ee f8                movq    -0x8(%r14,%r13,8), %r12
// 1b1: 0f b7 c8                      movzwl  %ax, %ecx
// 1b4: 48 c1 e1 04                   shlq    $0x4, %rcx
// 1b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ba:  R_X86_64_64  _PyIntrinsics_BinaryFunctions
// 1c2: 4c 89 ff                      movq    %r15, %rdi
// 1c5: 48 89 ee                      movq    %rbp, %rsi
// 1c8: 4c 89 e2                      movq    %r12, %rdx
// 1cb: ff 14 01                      callq   *(%rcx,%rax)
// 1ce: 48 89 04 24                   movq    %rax, (%rsp)
// 1d2: 48 8b 45 00                   movq    (%rbp), %rax
// 1d6: 48 85 c0                      testq   %rax, %rax
// 1d9: 7f 22                         jg      0x1fd <_JIT_ENTRY+0x1fd>
// 1db: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001dd:  R_X86_64_64  .rodata.str1.1
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_NegativeRefcount
// 1ef: be 8d 02 00 00                movl    $0x28d, %esi            # imm = 0x28D
// 1f4: 48 89 ea                      movq    %rbp, %rdx
// 1f7: ff d0                         callq   *%rax
// 1f9: 48 8b 45 00                   movq    (%rbp), %rax
// 1fd: 85 c0                         testl   %eax, %eax
// 1ff: 78 21                         js      0x222 <_JIT_ENTRY+0x222>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20b: ff d0                         callq   *%rax
// 20d: 48 ff 4d 00                   decq    (%rbp)
// 211: 75 0f                         jne     0x222 <_JIT_ENTRY+0x222>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_Dealloc
// 21d: 48 89 ef                      movq    %rbp, %rdi
// 220: ff d0                         callq   *%rax
// 222: 49 8b 04 24                   movq    (%r12), %rax
// 226: 48 85 c0                      testq   %rax, %rax
// 229: 7f 22                         jg      0x24d <_JIT_ENTRY+0x24d>
// 22b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022d:  R_X86_64_64  .rodata.str1.1
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _Py_NegativeRefcount
// 23f: be 8e 02 00 00                movl    $0x28e, %esi            # imm = 0x28E
// 244: 4c 89 e2                      movq    %r12, %rdx
// 247: ff d0                         callq   *%rax
// 249: 49 8b 04 24                   movq    (%r12), %rax
// 24d: 85 c0                         testl   %eax, %eax
// 24f: 78 21                         js      0x272 <_JIT_ENTRY+0x272>
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25b: ff d0                         callq   *%rax
// 25d: 49 ff 0c 24                   decq    (%r12)
// 261: 75 0f                         jne     0x272 <_JIT_ENTRY+0x272>
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _Py_Dealloc
// 26d: 4c 89 e7                      movq    %r12, %rdi
// 270: ff d0                         callq   *%rax
// 272: 4b 8d 04 ee                   leaq    (%r14,%r13,8), %rax
// 276: 48 83 c0 f0                   addq    $-0x10, %rax
// 27a: 48 8b 0c 24                   movq    (%rsp), %rcx
// 27e: 48 85 c9                      testq   %rcx, %rcx
// 281: 74 31                         je      0x2b4 <_JIT_ENTRY+0x2b4>
// 283: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 287: 48 83 c6 f8                   addq    $-0x8, %rsi
// 28b: 48 89 08                      movq    %rcx, (%rax)
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _JIT_CONTINUE
// 298: 48 89 df                      movq    %rbx, %rdi
// 29b: 4c 89 fa                      movq    %r15, %rdx
// 29e: 48 83 c4 08                   addq    $0x8, %rsp
// 2a2: 5b                            popq    %rbx
// 2a3: 41 5c                         popq    %r12
// 2a5: 41 5d                         popq    %r13
// 2a7: 41 5e                         popq    %r14
// 2a9: 41 5f                         popq    %r15
// 2ab: 5d                            popq    %rbp
// 2ac: ff e0                         jmpq    *%rax
// 2ae: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 2b2: eb 03                         jmp     0x2b7 <_JIT_ENTRY+0x2b7>
// 2b4: 49 89 c6                      movq    %rax, %r14
// 2b7: 49 29 de                      subq    %rbx, %r14
// 2ba: 49 83 c6 b8                   addq    $-0x48, %r14
// 2be: 49 c1 ee 03                   shrq    $0x3, %r14
// 2c2: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2c6: 31 c0                         xorl    %eax, %eax
// 2c8: e9 cf fd ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 2cd: 
static const unsigned char _CALL_LENplus_CALL_INTRINSIC_2_code_body[718] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xf0, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x27, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd6, 0xf7, 0xd1, 0x4c, 0x63, 0xe9, 0x4b, 0x8b, 0x6c, 0xee, 0xf0, 0x4f, 0x8b, 0x64, 0xee, 0xf8, 0x0f, 0xb7, 0xc8, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xe2, 0xff, 0x14, 0x01, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8d, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xee, 0x48, 0x83, 0xc0, 0xf0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x4b, 0x8d, 0x34, 0xee, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xcf, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_CALL_INTRINSIC_2_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_BinaryFunctions, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CALL_INTRINSIC_2_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CALL_INTRINSIC_2_data_holes[1];

// _CALL_LENplus_CALL_ISINSTANCE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CALL_ISINSTANCE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 de                      subq    %rbx, %r14
// 79: 49 83 c6 b8                   addq    $-0x48, %r14
// 7d: 49 c1 ee 03                   shrq    $0x3, %r14
// 81: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 28                   addq    $0x28, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// b2: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 ef                      movq    %r13, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 3d 01 00 00             js      0x20b <_JIT_ENTRY+0x20b>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 45 00                   movq    (%r13), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 ea                      movq    %r13, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 45 00                   movq    (%r13), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 21                         js      0x182 <_JIT_ENTRY+0x182>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 4d 00                   decq    (%r13)
// 171: 75 0f                         jne     0x182 <_JIT_ENTRY+0x182>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 ef                      movq    %r13, %rdi
// 180: ff d0                         callq   *%rax
// 182: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 187: 48 85 f6                      testq   %rsi, %rsi
// 18a: 0f 84 80 00 00 00             je      0x210 <_JIT_ENTRY+0x210>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _JIT_OPARG
// 19a: 0f b7 c8                      movzwl  %ax, %ecx
// 19d: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1a2: 29 ca                         subl    %ecx, %edx
// 1a4: 48 63 ea                      movslq  %edx, %rbp
// 1a7: 49 89 34 ee                   movq    %rsi, (%r14,%rbp,8)
// 1ab: f7 d1                         notl    %ecx
// 1ad: 48 63 c9                      movslq  %ecx, %rcx
// 1b0: 4c 8d 2c 09                   leaq    (%rcx,%rcx), %r13
// 1b4: 0f b7 c0                      movzwl  %ax, %eax
// 1b7: 48 89 c2                      movq    %rax, %rdx
// 1ba: 48 f7 da                      negq    %rdx
// 1bd: 31 f6                         xorl    %esi, %esi
// 1bf: 66 83 f8 01                   cmpw    $0x1, %ax
// 1c3: 40 0f 94 c6                   sete    %sil
// 1c7: 31 ff                         xorl    %edi, %edi
// 1c9: 66 83 f8 02                   cmpw    $0x2, %ax
// 1cd: 40 0f 94 c7                   sete    %dil
// 1d1: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 1d6: 48 f7 d0                      notq    %rax
// 1d9: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 1dd: 4f 8d 3c e6                   leaq    (%r14,%r12,8), %r15
// 1e1: 0f 44 f7                      cmovel  %edi, %esi
// 1e4: 40 80 fe 01                   cmpb    $0x1, %sil
// 1e8: 75 19                         jne     0x203 <_JIT_ENTRY+0x203>
// 1ea: 48 01 cd                      addq    %rcx, %rbp
// 1ed: 49 8b 14 ee                   movq    (%r14,%rbp,8), %rdx
// 1f1: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1f6: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 1fa: 48 3b 91 b8 54 06 00          cmpq    0x654b8(%rcx), %rdx
// 201: 74 27                         je      0x22a <_JIT_ENTRY+0x22a>
// 203: 4d 89 fe                      movq    %r15, %r14
// 206: e9 6b fe ff ff                jmp     0x76 <_JIT_ENTRY+0x76>
// 20b: 4d 89 f7                      movq    %r14, %r15
// 20e: eb 04                         jmp     0x214 <_JIT_ENTRY+0x214>
// 210: 4f 8d 3c fe                   leaq    (%r14,%r15,8), %r15
// 214: 49 29 df                      subq    %rbx, %r15
// 217: 49 83 c7 b8                   addq    $-0x48, %r15
// 21b: 49 c1 ef 03                   shrq    $0x3, %r15
// 21f: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 223: 31 c0                         xorl    %eax, %eax
// 225: e9 74 fe ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 22a: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 22f: 4d 8b 24 c7                   movq    (%r15,%rax,8), %r12
// 233: 49 8b 74 c7 08                movq    0x8(%r15,%rax,8), %rsi
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  PyObject_IsInstance
// 242: 4c 89 e7                      movq    %r12, %rdi
// 245: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 24a: ff d0                         callq   *%rax
// 24c: 85 c0                         testl   %eax, %eax
// 24e: 78 c4                         js      0x214 <_JIT_ENTRY+0x214>
// 250: 89 c7                         movl    %eax, %edi
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  PyBool_FromLong
// 25c: ff d0                         callq   *%rax
// 25e: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 263: 49 8b 04 24                   movq    (%r12), %rax
// 267: 48 85 c0                      testq   %rax, %rax
// 26a: 7f 22                         jg      0x28e <_JIT_ENTRY+0x28e>
// 26c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026e:  R_X86_64_64  .rodata.str1.1
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_NegativeRefcount
// 280: be 96 0b 00 00                movl    $0xb96, %esi            # imm = 0xB96
// 285: 4c 89 e2                      movq    %r12, %rdx
// 288: ff d0                         callq   *%rax
// 28a: 49 8b 04 24                   movq    (%r12), %rax
// 28e: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000290:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 298: 85 c0                         testl   %eax, %eax
// 29a: 78 18                         js      0x2b4 <_JIT_ENTRY+0x2b4>
// 29c: 41 ff d7                      callq   *%r15
// 29f: 49 ff 0c 24                   decq    (%r12)
// 2a3: 75 0f                         jne     0x2b4 <_JIT_ENTRY+0x2b4>
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _Py_Dealloc
// 2af: 4c 89 e7                      movq    %r12, %rdi
// 2b2: ff d0                         callq   *%rax
// 2b4: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2b9: 48 8b 00                      movq    (%rax), %rax
// 2bc: 48 85 c0                      testq   %rax, %rax
// 2bf: 7f 27                         jg      0x2e8 <_JIT_ENTRY+0x2e8>
// 2c1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c3:  R_X86_64_64  .rodata.str1.1
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _Py_NegativeRefcount
// 2d5: be 97 0b 00 00                movl    $0xb97, %esi            # imm = 0xB97
// 2da: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 2df: 4c 89 e2                      movq    %r12, %rdx
// 2e2: ff d0                         callq   *%rax
// 2e4: 49 8b 04 24                   movq    (%r12), %rax
// 2e8: 85 c0                         testl   %eax, %eax
// 2ea: 4c 8b 64 24 20                movq    0x20(%rsp), %r12
// 2ef: 78 1e                         js      0x30f <_JIT_ENTRY+0x30f>
// 2f1: 41 ff d7                      callq   *%r15
// 2f4: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2f9: 48 ff 08                      decq    (%rax)
// 2fc: 75 11                         jne     0x30f <_JIT_ENTRY+0x30f>
// 2fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000300:  R_X86_64_64  _Py_Dealloc
// 308: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 30d: ff d0                         callq   *%rax
// 30f: 49 8b 04 24                   movq    (%r12), %rax
// 313: 48 85 c0                      testq   %rax, %rax
// 316: 7f 22                         jg      0x33a <_JIT_ENTRY+0x33a>
// 318: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000031a:  R_X86_64_64  .rodata.str1.1
// 322: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000324:  R_X86_64_64  _Py_NegativeRefcount
// 32c: be 98 0b 00 00                movl    $0xb98, %esi            # imm = 0xB98
// 331: 4c 89 e2                      movq    %r12, %rdx
// 334: ff d0                         callq   *%rax
// 336: 49 8b 04 24                   movq    (%r12), %rax
// 33a: 85 c0                         testl   %eax, %eax
// 33c: 78 18                         js      0x356 <_JIT_ENTRY+0x356>
// 33e: 41 ff d7                      callq   *%r15
// 341: 49 ff 0c 24                   decq    (%r12)
// 345: 75 0f                         jne     0x356 <_JIT_ENTRY+0x356>
// 347: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000349:  R_X86_64_64  _Py_Dealloc
// 351: 4c 89 e7                      movq    %r12, %rdi
// 354: ff d0                         callq   *%rax
// 356: 4d 8d 3c ee                   leaq    (%r14,%rbp,8), %r15
// 35a: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 35f: 48 85 c0                      testq   %rax, %rax
// 362: 0f 84 ac fe ff ff             je      0x214 <_JIT_ENTRY+0x214>
// 368: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 36c: 49 89 07                      movq    %rax, (%r15)
// 36f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000371:  R_X86_64_64  _JIT_CONTINUE
// 379: 48 89 df                      movq    %rbx, %rdi
// 37c: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 381: 48 83 c4 28                   addq    $0x28, %rsp
// 385: 5b                            popq    %rbx
// 386: 41 5c                         popq    %r12
// 388: 41 5d                         popq    %r13
// 38a: 41 5e                         popq    %r14
// 38c: 41 5f                         popq    %r15
// 38e: 5d                            popq    %rbp
// 38f: ff e0                         jmpq    *%rax
// 391: 
static const unsigned char _CALL_LENplus_CALL_ISINSTANCE_code_body[914] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x3d, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xea, 0x49, 0x89, 0x34, 0xee, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4c, 0x8d, 0x2c, 0x09, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x02, 0x40, 0x0f, 0x94, 0xc7, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x4f, 0x8d, 0x3c, 0xe6, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x19, 0x48, 0x01, 0xcd, 0x49, 0x8b, 0x14, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x3b, 0x91, 0xb8, 0x54, 0x06, 0x00, 0x74, 0x27, 0x4d, 0x89, 0xfe, 0xe9, 0x6b, 0xfe, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xeb, 0x04, 0x4f, 0x8d, 0x3c, 0xfe, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x74, 0xfe, 0xff, 0xff, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4d, 0x8b, 0x24, 0xc7, 0x49, 0x8b, 0x74, 0xc7, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0x74, 0x24, 0x08, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xc4, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x20, 0x78, 0x1e, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x3c, 0xee, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0xfe, 0xff, 0xff, 0x4b, 0x8d, 0x34, 0xee, 0x49, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_CALL_ISINSTANCE_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsInstance, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_FromLong, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x300, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x324, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x349, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x371, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CALL_ISINSTANCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CALL_ISINSTANCE_data_holes[1];

// _CALL_LENplus_CALL_LEN
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CALL_LEN.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 de                      subq    %rbx, %r14
// 79: 49 83 c6 b8                   addq    $-0x48, %r14
// 7d: 49 c1 ee 03                   shrq    $0x3, %r14
// 81: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b2: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 ef                      movq    %r13, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 36 01 00 00             js      0x204 <_JIT_ENTRY+0x204>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 04 24                   movq    %rax, (%rsp)
// e1: 48 8b 45 00                   movq    (%rbp), %rax
// e5: 48 85 c0                      testq   %rax, %rax
// e8: 7f 22                         jg      0x10c <_JIT_ENTRY+0x10c>
// ea: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_NegativeRefcount
// fe: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 103: 48 89 ea                      movq    %rbp, %rdx
// 106: ff d0                         callq   *%rax
// 108: 48 8b 45 00                   movq    (%rbp), %rax
// 10c: 85 c0                         testl   %eax, %eax
// 10e: 78 21                         js      0x131 <_JIT_ENTRY+0x131>
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11a: ff d0                         callq   *%rax
// 11c: 48 ff 4d 00                   decq    (%rbp)
// 120: 75 0f                         jne     0x131 <_JIT_ENTRY+0x131>
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  _Py_Dealloc
// 12c: 48 89 ef                      movq    %rbp, %rdi
// 12f: ff d0                         callq   *%rax
// 131: 49 8b 45 00                   movq    (%r13), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_NegativeRefcount
// 14e: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 153: 4c 89 ea                      movq    %r13, %rdx
// 156: ff d0                         callq   *%rax
// 158: 49 8b 45 00                   movq    (%r13), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 48 8b 2c 24                   movq    (%rsp), %rbp
// 162: 78 21                         js      0x185 <_JIT_ENTRY+0x185>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 4d 00                   decq    (%r13)
// 174: 75 0f                         jne     0x185 <_JIT_ENTRY+0x185>
// 176: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000178:  R_X86_64_64  _Py_Dealloc
// 180: 4c 89 ef                      movq    %r13, %rdi
// 183: ff d0                         callq   *%rax
// 185: 48 85 ed                      testq   %rbp, %rbp
// 188: 74 7f                         je      0x209 <_JIT_ENTRY+0x209>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _JIT_OPARG
// 194: 0f b7 c8                      movzwl  %ax, %ecx
// 197: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 19c: 29 ca                         subl    %ecx, %edx
// 19e: 4c 63 ea                      movslq  %edx, %r13
// 1a1: 4b 89 2c ee                   movq    %rbp, (%r14,%r13,8)
// 1a5: f7 d1                         notl    %ecx
// 1a7: 48 63 c9                      movslq  %ecx, %rcx
// 1aa: 4c 8d 04 09                   leaq    (%rcx,%rcx), %r8
// 1ae: 0f b7 c0                      movzwl  %ax, %eax
// 1b1: 48 89 c2                      movq    %rax, %rdx
// 1b4: 48 f7 da                      negq    %rdx
// 1b7: 31 f6                         xorl    %esi, %esi
// 1b9: 66 85 c0                      testw   %ax, %ax
// 1bc: 40 0f 94 c6                   sete    %sil
// 1c0: 31 ff                         xorl    %edi, %edi
// 1c2: 66 83 f8 01                   cmpw    $0x1, %ax
// 1c6: 40 0f 94 c7                   sete    %dil
// 1ca: 4b 83 3c c6 00                cmpq    $0x0, (%r14,%r8,8)
// 1cf: 48 f7 d0                      notq    %rax
// 1d2: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 1d6: 4f 8d 3c e6                   leaq    (%r14,%r12,8), %r15
// 1da: 0f 44 f7                      cmovel  %edi, %esi
// 1dd: 40 80 fe 01                   cmpb    $0x1, %sil
// 1e1: 75 19                         jne     0x1fc <_JIT_ENTRY+0x1fc>
// 1e3: 49 01 cd                      addq    %rcx, %r13
// 1e6: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 1ea: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1ef: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 1f3: 48 3b a9 c0 54 06 00          cmpq    0x654c0(%rcx), %rbp
// 1fa: 74 27                         je      0x223 <_JIT_ENTRY+0x223>
// 1fc: 4d 89 fe                      movq    %r15, %r14
// 1ff: e9 72 fe ff ff                jmp     0x76 <_JIT_ENTRY+0x76>
// 204: 4d 89 f7                      movq    %r14, %r15
// 207: eb 04                         jmp     0x20d <_JIT_ENTRY+0x20d>
// 209: 4f 8d 3c fe                   leaq    (%r14,%r15,8), %r15
// 20d: 49 29 df                      subq    %rbx, %r15
// 210: 49 83 c7 b8                   addq    $-0x48, %r15
// 214: 49 c1 ef 03                   shrq    $0x3, %r15
// 218: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 21c: 31 c0                         xorl    %eax, %eax
// 21e: e9 7b fe ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 223: 4c 89 04 24                   movq    %r8, (%rsp)
// 227: 4d 8b 24 c7                   movq    (%r15,%rax,8), %r12
// 22b: 4c 89 e7                      movq    %r12, %rdi
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  PyObject_Size
// 238: ff d0                         callq   *%rax
// 23a: 48 85 c0                      testq   %rax, %rax
// 23d: 78 ce                         js      0x20d <_JIT_ENTRY+0x20d>
// 23f: 48 89 c7                      movq    %rax, %rdi
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  PyLong_FromSsize_t
// 24c: ff d0                         callq   *%rax
// 24e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 253: 48 8b 45 00                   movq    (%rbp), %rax
// 257: 48 85 c0                      testq   %rax, %rax
// 25a: 7f 22                         jg      0x27e <_JIT_ENTRY+0x27e>
// 25c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025e:  R_X86_64_64  .rodata.str1.1
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _Py_NegativeRefcount
// 270: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 275: 48 89 ea                      movq    %rbp, %rdx
// 278: ff d0                         callq   *%rax
// 27a: 48 8b 45 00                   movq    (%rbp), %rax
// 27e: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000280:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 288: 85 c0                         testl   %eax, %eax
// 28a: 78 18                         js      0x2a4 <_JIT_ENTRY+0x2a4>
// 28c: 41 ff d7                      callq   *%r15
// 28f: 48 ff 4d 00                   decq    (%rbp)
// 293: 75 0f                         jne     0x2a4 <_JIT_ENTRY+0x2a4>
// 295: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000297:  R_X86_64_64  _Py_Dealloc
// 29f: 48 89 ef                      movq    %rbp, %rdi
// 2a2: ff d0                         callq   *%rax
// 2a4: 49 8b 04 24                   movq    (%r12), %rax
// 2a8: 48 85 c0                      testq   %rax, %rax
// 2ab: 7f 22                         jg      0x2cf <_JIT_ENTRY+0x2cf>
// 2ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002af:  R_X86_64_64  .rodata.str1.1
// 2b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b9:  R_X86_64_64  _Py_NegativeRefcount
// 2c1: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 2c6: 4c 89 e2                      movq    %r12, %rdx
// 2c9: ff d0                         callq   *%rax
// 2cb: 49 8b 04 24                   movq    (%r12), %rax
// 2cf: 85 c0                         testl   %eax, %eax
// 2d1: 78 18                         js      0x2eb <_JIT_ENTRY+0x2eb>
// 2d3: 41 ff d7                      callq   *%r15
// 2d6: 49 ff 0c 24                   decq    (%r12)
// 2da: 75 0f                         jne     0x2eb <_JIT_ENTRY+0x2eb>
// 2dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002de:  R_X86_64_64  _Py_Dealloc
// 2e6: 4c 89 e7                      movq    %r12, %rdi
// 2e9: ff d0                         callq   *%rax
// 2eb: 4f 8d 3c ee                   leaq    (%r14,%r13,8), %r15
// 2ef: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 2f4: 48 85 c9                      testq   %rcx, %rcx
// 2f7: 0f 84 10 ff ff ff             je      0x20d <_JIT_ENTRY+0x20d>
// 2fd: 48 8b 04 24                   movq    (%rsp), %rax
// 301: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 305: 49 89 0f                      movq    %rcx, (%r15)
// 308: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030a:  R_X86_64_64  _JIT_CONTINUE
// 312: 48 89 df                      movq    %rbx, %rdi
// 315: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 31a: 48 83 c4 18                   addq    $0x18, %rsp
// 31e: 5b                            popq    %rbx
// 31f: 41 5c                         popq    %r12
// 321: 41 5d                         popq    %r13
// 323: 41 5e                         popq    %r14
// 325: 41 5f                         popq    %r15
// 327: 5d                            popq    %rbp
// 328: ff e0                         jmpq    *%rax
// 32a: 
static const unsigned char _CALL_LENplus_CALL_LEN_code_body[811] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x36, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x7f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x4c, 0x63, 0xea, 0x4b, 0x89, 0x2c, 0xee, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4c, 0x8d, 0x04, 0x09, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x4b, 0x83, 0x3c, 0xc6, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x4f, 0x8d, 0x3c, 0xe6, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x19, 0x49, 0x01, 0xcd, 0x4b, 0x8b, 0x2c, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x3b, 0xa9, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x27, 0x4d, 0x89, 0xfe, 0xe9, 0x72, 0xfe, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xeb, 0x04, 0x4f, 0x8d, 0x3c, 0xfe, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x7b, 0xfe, 0xff, 0xff, 0x4c, 0x89, 0x04, 0x24, 0x4d, 0x8b, 0x24, 0xc7, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x78, 0xce, 0x48, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4f, 0x8d, 0x3c, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x10, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x34, 0xc6, 0x49, 0x89, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_CALL_LEN_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CALL_LEN_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CALL_LEN_data_holes[1];

// _CALL_LENplus_CALL_METHOD_DESCRIPTOR_FAST
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CALL_METHOD_DESCRIPTOR_FAST.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 39                         je      0xaf <_JIT_ENTRY+0xaf>
// 76: 4c 89 f0                      movq    %r14, %rax
// 79: 48 29 d8                      subq    %rbx, %rax
// 7c: 48 83 c0 b8                   addq    $-0x48, %rax
// 80: 48 c1 e8 03                   shrq    $0x3, %rax
// 84: 89 43 40                      movl    %eax, 0x40(%rbx)
// 87: 48 8b 03                      movq    (%rbx), %rax
// 8a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008c:  R_X86_64_64  _JIT_TARGET
// 94: 89 c9                         movl    %ecx, %ecx
// 96: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 9a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a0: 48 83 c4 28                   addq    $0x28, %rsp
// a4: 5b                            popq    %rbx
// a5: 41 5c                         popq    %r12
// a7: 41 5d                         popq    %r13
// a9: 41 5e                         popq    %r14
// ab: 41 5f                         popq    %r15
// ad: 5d                            popq    %rbp
// ae: c3                            retq
// af: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// b4: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  PyObject_Size
// c2: 4c 89 ef                      movq    %r13, %rdi
// c5: ff d0                         callq   *%rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 0f 88 43 02 00 00             js      0x313 <_JIT_ENTRY+0x313>
// d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d2:  R_X86_64_64  PyLong_FromSsize_t
// da: 48 89 c7                      movq    %rax, %rdi
// dd: ff d1                         callq   *%rcx
// df: 48 89 04 24                   movq    %rax, (%rsp)
// e3: 48 8b 45 00                   movq    (%rbp), %rax
// e7: 48 85 c0                      testq   %rax, %rax
// ea: 7f 22                         jg      0x10e <_JIT_ENTRY+0x10e>
// ec: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ee:  R_X86_64_64  .rodata.str1.1
// f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f8:  R_X86_64_64  _Py_NegativeRefcount
// 100: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 105: 48 89 ea                      movq    %rbp, %rdx
// 108: ff d0                         callq   *%rax
// 10a: 48 8b 45 00                   movq    (%rbp), %rax
// 10e: 85 c0                         testl   %eax, %eax
// 110: 78 21                         js      0x133 <_JIT_ENTRY+0x133>
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11c: ff d0                         callq   *%rax
// 11e: 48 ff 4d 00                   decq    (%rbp)
// 122: 75 0f                         jne     0x133 <_JIT_ENTRY+0x133>
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  _Py_Dealloc
// 12e: 48 89 ef                      movq    %rbp, %rdi
// 131: ff d0                         callq   *%rax
// 133: 49 8b 45 00                   movq    (%r13), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 4c 89 ea                      movq    %r13, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 49 8b 45 00                   movq    (%r13), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 4d 00                   decq    (%r13)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 4c 89 ef                      movq    %r13, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 3c 24                   movq    (%rsp), %rdi
// 187: 48 85 ff                      testq   %rdi, %rdi
// 18a: 0f 84 7f 01 00 00             je      0x30f <_JIT_ENTRY+0x30f>
// 190: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 194: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 f2                      movzwl  %dx, %esi
// 1a1: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a6: 29 f1                         subl    %esi, %ecx
// 1a8: 48 63 e9                      movslq  %ecx, %rbp
// 1ab: 49 89 3c ee                   movq    %rdi, (%r14,%rbp,8)
// 1af: 89 f1                         movl    %esi, %ecx
// 1b1: f7 d1                         notl    %ecx
// 1b3: 48 63 f9                      movslq  %ecx, %rdi
// 1b6: 4c 8d 0c 3f                   leaq    (%rdi,%rdi), %r9
// 1ba: 4b 8b 0c ce                   movq    (%r14,%r9,8), %rcx
// 1be: 48 01 fd                      addq    %rdi, %rbp
// 1c1: 0f b7 d2                      movzwl  %dx, %edx
// 1c4: 48 89 d7                      movq    %rdx, %rdi
// 1c7: 48 f7 df                      negq    %rdi
// 1ca: 44 8d 7e 01                   leal    0x1(%rsi), %r15d
// 1ce: 48 85 c9                      testq   %rcx, %rcx
// 1d1: 48 f7 d2                      notq    %rdx
// 1d4: 48 0f 44 d7                   cmoveq  %rdi, %rdx
// 1d8: 44 0f 44 fe                   cmovel  %esi, %r15d
// 1dc: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 1e0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001e2:  R_X86_64_64  PyMethodDescr_Type
// 1ea: 49 39 74 24 08                cmpq    %rsi, 0x8(%r12)
// 1ef: 0f 85 84 fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1f5: 4d 8b 44 24 28                movq    0x28(%r12), %r8
// 1fa: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 202: 0f 85 71 fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 208: 48 8d 34 d0                   leaq    (%rax,%rdx,8), %rsi
// 20c: 48 8b 3e                      movq    (%rsi), %rdi
// 20f: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 213: 49 3b 54 24 10                cmpq    0x10(%r12), %rdx
// 218: 0f 85 5b fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 21e: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 223: 48 85 c9                      testq   %rcx, %rcx
// 226: 41 0f 94 c5                   sete    %r13b
// 22a: 41 8d 47 ff                   leal    -0x1(%r15), %eax
// 22e: 48 89 34 24                   movq    %rsi, (%rsp)
// 232: 48 83 c6 08                   addq    $0x8, %rsi
// 236: 48 63 d0                      movslq  %eax, %rdx
// 239: 41 ff 50 08                   callq   *0x8(%r8)
// 23d: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _JIT_OPARG
// 24c: 66 85 c0                      testw   %ax, %ax
// 24f: 0f 94 c0                      sete    %al
// 252: 41 84 c5                      testb   %al, %r13b
// 255: 0f 84 ce 00 00 00             je      0x329 <_JIT_ENTRY+0x329>
// 25b: 49 8b 04 24                   movq    (%r12), %rax
// 25f: 48 85 c0                      testq   %rax, %rax
// 262: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 267: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 26c: 7f 22                         jg      0x290 <_JIT_ENTRY+0x290>
// 26e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000270:  R_X86_64_64  .rodata.str1.1
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _Py_NegativeRefcount
// 282: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 287: 4c 89 e2                      movq    %r12, %rdx
// 28a: ff d0                         callq   *%rax
// 28c: 49 8b 04 24                   movq    (%r12), %rax
// 290: 85 c0                         testl   %eax, %eax
// 292: 78 21                         js      0x2b5 <_JIT_ENTRY+0x2b5>
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 29e: ff d0                         callq   *%rax
// 2a0: 49 ff 0c 24                   decq    (%r12)
// 2a4: 75 0f                         jne     0x2b5 <_JIT_ENTRY+0x2b5>
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  _Py_Dealloc
// 2b0: 4c 89 e7                      movq    %r12, %rdi
// 2b3: ff d0                         callq   *%rax
// 2b5: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 2b9: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 2be: 48 85 c9                      testq   %rcx, %rcx
// 2c1: 0f 84 e1 00 00 00             je      0x3a8 <_JIT_ENTRY+0x3a8>
// 2c7: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 2cb: 48 89 08                      movq    %rcx, (%rax)
// 2ce: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2d2: 48 8b 00                      movq    (%rax), %rax
// 2d5: 84 c0                         testb   %al, %al
// 2d7: 74 13                         je      0x2ec <_JIT_ENTRY+0x2ec>
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  _Py_HandlePending
// 2e3: 4c 89 ff                      movq    %r15, %rdi
// 2e6: ff d0                         callq   *%rax
// 2e8: 85 c0                         testl   %eax, %eax
// 2ea: 75 27                         jne     0x313 <_JIT_ENTRY+0x313>
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  _JIT_CONTINUE
// 2f6: 48 89 df                      movq    %rbx, %rdi
// 2f9: 4c 89 f6                      movq    %r14, %rsi
// 2fc: 4c 89 fa                      movq    %r15, %rdx
// 2ff: 48 83 c4 28                   addq    $0x28, %rsp
// 303: 5b                            popq    %rbx
// 304: 41 5c                         popq    %r12
// 306: 41 5d                         popq    %r13
// 308: 41 5e                         popq    %r14
// 30a: 41 5f                         popq    %r15
// 30c: 5d                            popq    %rbp
// 30d: ff e0                         jmpq    *%rax
// 30f: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 313: 49 29 de                      subq    %rbx, %r14
// 316: 49 83 c6 b8                   addq    $-0x48, %r14
// 31a: 49 c1 ee 03                   shrq    $0x3, %r14
// 31e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 322: 31 c0                         xorl    %eax, %eax
// 324: e9 77 fd ff ff                jmp     0xa0 <_JIT_ENTRY+0xa0>
// 329: 41 83 ff 02                   cmpl    $0x2, %r15d
// 32d: b8 01 00 00 00                movl    $0x1, %eax
// 332: 41 0f 43 c7                   cmovael %r15d, %eax
// 336: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 33b: 45 31 ff                      xorl    %r15d, %r15d
// 33e: eb 0e                         jmp     0x34e <_JIT_ENTRY+0x34e>
// 340: 49 ff c7                      incq    %r15
// 343: 4c 39 7c 24 18                cmpq    %r15, 0x18(%rsp)
// 348: 0f 84 0d ff ff ff             je      0x25b <_JIT_ENTRY+0x25b>
// 34e: 48 8b 04 24                   movq    (%rsp), %rax
// 352: 4e 8b 2c f8                   movq    (%rax,%r15,8), %r13
// 356: 49 8b 45 00                   movq    (%r13), %rax
// 35a: 48 85 c0                      testq   %rax, %rax
// 35d: 7f 22                         jg      0x381 <_JIT_ENTRY+0x381>
// 35f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000361:  R_X86_64_64  .rodata.str1.1
// 369: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 36e: 4c 89 ea                      movq    %r13, %rdx
// 371: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000373:  R_X86_64_64  _Py_NegativeRefcount
// 37b: ff d0                         callq   *%rax
// 37d: 49 8b 45 00                   movq    (%r13), %rax
// 381: 85 c0                         testl   %eax, %eax
// 383: 78 bb                         js      0x340 <_JIT_ENTRY+0x340>
// 385: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000387:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 38f: ff d0                         callq   *%rax
// 391: 49 ff 4d 00                   decq    (%r13)
// 395: 75 a9                         jne     0x340 <_JIT_ENTRY+0x340>
// 397: 4c 89 ef                      movq    %r13, %rdi
// 39a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039c:  R_X86_64_64  _Py_Dealloc
// 3a4: ff d0                         callq   *%rax
// 3a6: eb 98                         jmp     0x340 <_JIT_ENTRY+0x340>
// 3a8: 49 89 c6                      movq    %rax, %r14
// 3ab: e9 63 ff ff ff                jmp     0x313 <_JIT_ENTRY+0x313>
// 3b0: 
static const unsigned char _CALL_LENplus_CALL_METHOD_DESCRIPTOR_FAST_code_body[945] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x43, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x7f, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf2, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf1, 0x48, 0x63, 0xe9, 0x49, 0x89, 0x3c, 0xee, 0x89, 0xf1, 0xf7, 0xd1, 0x48, 0x63, 0xf9, 0x4c, 0x8d, 0x0c, 0x3f, 0x4b, 0x8b, 0x0c, 0xce, 0x48, 0x01, 0xfd, 0x0f, 0xb7, 0xd2, 0x48, 0x89, 0xd7, 0x48, 0xf7, 0xdf, 0x44, 0x8d, 0x7e, 0x01, 0x48, 0x85, 0xc9, 0x48, 0xf7, 0xd2, 0x48, 0x0f, 0x44, 0xd7, 0x44, 0x0f, 0x44, 0xfe, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x74, 0x24, 0x08, 0x0f, 0x85, 0x84, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x44, 0x24, 0x28, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x71, 0xfe, 0xff, 0xff, 0x48, 0x8d, 0x34, 0xd0, 0x48, 0x8b, 0x3e, 0x48, 0x8b, 0x57, 0x08, 0x49, 0x3b, 0x54, 0x24, 0x10, 0x0f, 0x85, 0x5b, 0xfe, 0xff, 0xff, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x47, 0xff, 0x48, 0x89, 0x34, 0x24, 0x48, 0x83, 0xc6, 0x08, 0x48, 0x63, 0xd0, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc5, 0x0f, 0x84, 0xce, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xe1, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x77, 0xfd, 0xff, 0xff, 0x41, 0x83, 0xff, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xc7, 0x48, 0x89, 0x44, 0x24, 0x18, 0x45, 0x31, 0xff, 0xeb, 0x0e, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0x7c, 0x24, 0x18, 0x0f, 0x84, 0x0d, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x04, 0x24, 0x4e, 0x8b, 0x2c, 0xf8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa9, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x98, 0x49, 0x89, 0xc6, 0xe9, 0x63, 0xff, 0xff, 0xff};
static const Hole _CALL_LENplus_CALL_METHOD_DESCRIPTOR_FAST_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x361, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x373, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x387, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x39c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CALL_METHOD_DESCRIPTOR_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CALL_METHOD_DESCRIPTOR_FAST_data_holes[1];

// _CALL_LENplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 39                         je      0xaf <_JIT_ENTRY+0xaf>
// 76: 4c 89 f0                      movq    %r14, %rax
// 79: 48 29 d8                      subq    %rbx, %rax
// 7c: 48 83 c0 b8                   addq    $-0x48, %rax
// 80: 48 c1 e8 03                   shrq    $0x3, %rax
// 84: 89 43 40                      movl    %eax, 0x40(%rbx)
// 87: 48 8b 03                      movq    (%rbx), %rax
// 8a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008c:  R_X86_64_64  _JIT_TARGET
// 94: 89 c9                         movl    %ecx, %ecx
// 96: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 9a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a0: 48 83 c4 28                   addq    $0x28, %rsp
// a4: 5b                            popq    %rbx
// a5: 41 5c                         popq    %r12
// a7: 41 5d                         popq    %r13
// a9: 41 5e                         popq    %r14
// ab: 41 5f                         popq    %r15
// ad: 5d                            popq    %rbp
// ae: c3                            retq
// af: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// b4: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  PyObject_Size
// c2: 4c 89 ef                      movq    %r13, %rdi
// c5: ff d0                         callq   *%rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 0f 88 45 02 00 00             js      0x315 <_JIT_ENTRY+0x315>
// d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d2:  R_X86_64_64  PyLong_FromSsize_t
// da: 48 89 c7                      movq    %rax, %rdi
// dd: ff d1                         callq   *%rcx
// df: 48 89 04 24                   movq    %rax, (%rsp)
// e3: 48 8b 45 00                   movq    (%rbp), %rax
// e7: 48 85 c0                      testq   %rax, %rax
// ea: 7f 22                         jg      0x10e <_JIT_ENTRY+0x10e>
// ec: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ee:  R_X86_64_64  .rodata.str1.1
// f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f8:  R_X86_64_64  _Py_NegativeRefcount
// 100: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 105: 48 89 ea                      movq    %rbp, %rdx
// 108: ff d0                         callq   *%rax
// 10a: 48 8b 45 00                   movq    (%rbp), %rax
// 10e: 85 c0                         testl   %eax, %eax
// 110: 78 21                         js      0x133 <_JIT_ENTRY+0x133>
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11c: ff d0                         callq   *%rax
// 11e: 48 ff 4d 00                   decq    (%rbp)
// 122: 75 0f                         jne     0x133 <_JIT_ENTRY+0x133>
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  _Py_Dealloc
// 12e: 48 89 ef                      movq    %rbp, %rdi
// 131: ff d0                         callq   *%rax
// 133: 49 8b 45 00                   movq    (%r13), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 4c 89 ea                      movq    %r13, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 49 8b 45 00                   movq    (%r13), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 4d 00                   decq    (%r13)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 4c 89 ef                      movq    %r13, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 3c 24                   movq    (%rsp), %rdi
// 187: 48 85 ff                      testq   %rdi, %rdi
// 18a: 0f 84 81 01 00 00             je      0x311 <_JIT_ENTRY+0x311>
// 190: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 194: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 f2                      movzwl  %dx, %esi
// 1a1: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a6: 29 f1                         subl    %esi, %ecx
// 1a8: 48 63 e9                      movslq  %ecx, %rbp
// 1ab: 49 89 3c ee                   movq    %rdi, (%r14,%rbp,8)
// 1af: 89 f1                         movl    %esi, %ecx
// 1b1: f7 d1                         notl    %ecx
// 1b3: 48 63 f9                      movslq  %ecx, %rdi
// 1b6: 4c 8d 0c 3f                   leaq    (%rdi,%rdi), %r9
// 1ba: 4b 8b 0c ce                   movq    (%r14,%r9,8), %rcx
// 1be: 48 01 fd                      addq    %rdi, %rbp
// 1c1: 0f b7 d2                      movzwl  %dx, %edx
// 1c4: 48 89 d7                      movq    %rdx, %rdi
// 1c7: 48 f7 df                      negq    %rdi
// 1ca: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 1ce: 48 85 c9                      testq   %rcx, %rcx
// 1d1: 48 f7 d2                      notq    %rdx
// 1d4: 48 0f 44 d7                   cmoveq  %rdi, %rdx
// 1d8: 44 0f 44 ee                   cmovel  %esi, %r13d
// 1dc: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 1e0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001e2:  R_X86_64_64  PyMethodDescr_Type
// 1ea: 49 39 74 24 08                cmpq    %rsi, 0x8(%r12)
// 1ef: 0f 85 84 fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1f5: 4d 8b 44 24 28                movq    0x28(%r12), %r8
// 1fa: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 202: 0f 85 71 fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 208: 48 8d 34 d0                   leaq    (%rax,%rdx,8), %rsi
// 20c: 48 8b 3e                      movq    (%rsi), %rdi
// 20f: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 213: 49 3b 54 24 10                cmpq    0x10(%r12), %rdx
// 218: 0f 85 5b fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 21e: 4c 89 4c 24 08                movq    %r9, 0x8(%rsp)
// 223: 48 85 c9                      testq   %rcx, %rcx
// 226: 41 0f 94 c7                   sete    %r15b
// 22a: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// 22e: 48 89 34 24                   movq    %rsi, (%rsp)
// 232: 48 83 c6 08                   addq    $0x8, %rsi
// 236: 48 63 d0                      movslq  %eax, %rdx
// 239: 31 c9                         xorl    %ecx, %ecx
// 23b: 41 ff 50 08                   callq   *0x8(%r8)
// 23f: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _JIT_OPARG
// 24e: 66 85 c0                      testw   %ax, %ax
// 251: 0f 94 c0                      sete    %al
// 254: 41 84 c7                      testb   %al, %r15b
// 257: 0f 84 ce 00 00 00             je      0x32b <_JIT_ENTRY+0x32b>
// 25d: 49 8b 04 24                   movq    (%r12), %rax
// 261: 48 85 c0                      testq   %rax, %rax
// 264: 7f 22                         jg      0x288 <_JIT_ENTRY+0x288>
// 266: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000268:  R_X86_64_64  .rodata.str1.1
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_NegativeRefcount
// 27a: be e8 0b 00 00                movl    $0xbe8, %esi            # imm = 0xBE8
// 27f: 4c 89 e2                      movq    %r12, %rdx
// 282: ff d0                         callq   *%rax
// 284: 49 8b 04 24                   movq    (%r12), %rax
// 288: 85 c0                         testl   %eax, %eax
// 28a: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 28f: 78 21                         js      0x2b2 <_JIT_ENTRY+0x2b2>
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 29b: ff d0                         callq   *%rax
// 29d: 49 ff 0c 24                   decq    (%r12)
// 2a1: 75 0f                         jne     0x2b2 <_JIT_ENTRY+0x2b2>
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _Py_Dealloc
// 2ad: 4c 89 e7                      movq    %r12, %rdi
// 2b0: ff d0                         callq   *%rax
// 2b2: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 2b6: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2bb: 48 85 d2                      testq   %rdx, %rdx
// 2be: 0f 84 e6 00 00 00             je      0x3aa <_JIT_ENTRY+0x3aa>
// 2c4: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 2c9: 4d 8d 34 ce                   leaq    (%r14,%rcx,8), %r14
// 2cd: 48 89 10                      movq    %rdx, (%rax)
// 2d0: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2d4: 48 8b 00                      movq    (%rax), %rax
// 2d7: 84 c0                         testb   %al, %al
// 2d9: 74 13                         je      0x2ee <_JIT_ENTRY+0x2ee>
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _Py_HandlePending
// 2e5: 4c 89 ff                      movq    %r15, %rdi
// 2e8: ff d0                         callq   *%rax
// 2ea: 85 c0                         testl   %eax, %eax
// 2ec: 75 27                         jne     0x315 <_JIT_ENTRY+0x315>
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _JIT_CONTINUE
// 2f8: 48 89 df                      movq    %rbx, %rdi
// 2fb: 4c 89 f6                      movq    %r14, %rsi
// 2fe: 4c 89 fa                      movq    %r15, %rdx
// 301: 48 83 c4 28                   addq    $0x28, %rsp
// 305: 5b                            popq    %rbx
// 306: 41 5c                         popq    %r12
// 308: 41 5d                         popq    %r13
// 30a: 41 5e                         popq    %r14
// 30c: 41 5f                         popq    %r15
// 30e: 5d                            popq    %rbp
// 30f: ff e0                         jmpq    *%rax
// 311: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 315: 49 29 de                      subq    %rbx, %r14
// 318: 49 83 c6 b8                   addq    $-0x48, %r14
// 31c: 49 c1 ee 03                   shrq    $0x3, %r14
// 320: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 324: 31 c0                         xorl    %eax, %eax
// 326: e9 75 fd ff ff                jmp     0xa0 <_JIT_ENTRY+0xa0>
// 32b: 41 83 fd 02                   cmpl    $0x2, %r13d
// 32f: b8 01 00 00 00                movl    $0x1, %eax
// 334: 41 0f 43 c5                   cmovael %r13d, %eax
// 338: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 33d: 45 31 ff                      xorl    %r15d, %r15d
// 340: eb 0e                         jmp     0x350 <_JIT_ENTRY+0x350>
// 342: 49 ff c7                      incq    %r15
// 345: 4c 39 7c 24 18                cmpq    %r15, 0x18(%rsp)
// 34a: 0f 84 0d ff ff ff             je      0x25d <_JIT_ENTRY+0x25d>
// 350: 48 8b 04 24                   movq    (%rsp), %rax
// 354: 4e 8b 2c f8                   movq    (%rax,%r15,8), %r13
// 358: 49 8b 45 00                   movq    (%r13), %rax
// 35c: 48 85 c0                      testq   %rax, %rax
// 35f: 7f 22                         jg      0x383 <_JIT_ENTRY+0x383>
// 361: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000363:  R_X86_64_64  .rodata.str1.1
// 36b: be e6 0b 00 00                movl    $0xbe6, %esi            # imm = 0xBE6
// 370: 4c 89 ea                      movq    %r13, %rdx
// 373: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000375:  R_X86_64_64  _Py_NegativeRefcount
// 37d: ff d0                         callq   *%rax
// 37f: 49 8b 45 00                   movq    (%r13), %rax
// 383: 85 c0                         testl   %eax, %eax
// 385: 78 bb                         js      0x342 <_JIT_ENTRY+0x342>
// 387: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000389:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 391: ff d0                         callq   *%rax
// 393: 49 ff 4d 00                   decq    (%r13)
// 397: 75 a9                         jne     0x342 <_JIT_ENTRY+0x342>
// 399: 4c 89 ef                      movq    %r13, %rdi
// 39c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039e:  R_X86_64_64  _Py_Dealloc
// 3a6: ff d0                         callq   *%rax
// 3a8: eb 98                         jmp     0x342 <_JIT_ENTRY+0x342>
// 3aa: 49 89 c6                      movq    %rax, %r14
// 3ad: e9 63 ff ff ff                jmp     0x315 <_JIT_ENTRY+0x315>
// 3b2: 
static const unsigned char _CALL_LENplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_body[947] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x45, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x81, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf2, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf1, 0x48, 0x63, 0xe9, 0x49, 0x89, 0x3c, 0xee, 0x89, 0xf1, 0xf7, 0xd1, 0x48, 0x63, 0xf9, 0x4c, 0x8d, 0x0c, 0x3f, 0x4b, 0x8b, 0x0c, 0xce, 0x48, 0x01, 0xfd, 0x0f, 0xb7, 0xd2, 0x48, 0x89, 0xd7, 0x48, 0xf7, 0xdf, 0x44, 0x8d, 0x6e, 0x01, 0x48, 0x85, 0xc9, 0x48, 0xf7, 0xd2, 0x48, 0x0f, 0x44, 0xd7, 0x44, 0x0f, 0x44, 0xee, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x74, 0x24, 0x08, 0x0f, 0x85, 0x84, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x44, 0x24, 0x28, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x71, 0xfe, 0xff, 0xff, 0x48, 0x8d, 0x34, 0xd0, 0x48, 0x8b, 0x3e, 0x48, 0x8b, 0x57, 0x08, 0x49, 0x3b, 0x54, 0x24, 0x10, 0x0f, 0x85, 0x5b, 0xfe, 0xff, 0xff, 0x4c, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc7, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x89, 0x34, 0x24, 0x48, 0x83, 0xc6, 0x08, 0x48, 0x63, 0xd0, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xce, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe8, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xe6, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x34, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x75, 0xfd, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xc5, 0x48, 0x89, 0x44, 0x24, 0x18, 0x45, 0x31, 0xff, 0xeb, 0x0e, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0x7c, 0x24, 0x18, 0x0f, 0x84, 0x0d, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x04, 0x24, 0x4e, 0x8b, 0x2c, 0xf8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa9, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x98, 0x49, 0x89, 0xc6, 0xe9, 0x63, 0xff, 0xff, 0xff};
static const Hole _CALL_LENplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x363, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x375, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x389, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x39e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_holes[1];

// _CALL_LENplus_CALL_METHOD_DESCRIPTOR_NOARGS
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CALL_METHOD_DESCRIPTOR_NOARGS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 de                      subq    %rbx, %r14
// 79: 49 83 c6 b8                   addq    $-0x48, %r14
// 7d: 49 c1 ee 03                   shrq    $0x3, %r14
// 81: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b2: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 ef                      movq    %r13, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 e8 01 00 00             js      0x2b6 <_JIT_ENTRY+0x2b6>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 04 24                   movq    %rax, (%rsp)
// e1: 48 8b 45 00                   movq    (%rbp), %rax
// e5: 48 85 c0                      testq   %rax, %rax
// e8: 7f 22                         jg      0x10c <_JIT_ENTRY+0x10c>
// ea: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_NegativeRefcount
// fe: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 103: 48 89 ea                      movq    %rbp, %rdx
// 106: ff d0                         callq   *%rax
// 108: 48 8b 45 00                   movq    (%rbp), %rax
// 10c: 85 c0                         testl   %eax, %eax
// 10e: 78 21                         js      0x131 <_JIT_ENTRY+0x131>
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11a: ff d0                         callq   *%rax
// 11c: 48 ff 4d 00                   decq    (%rbp)
// 120: 75 0f                         jne     0x131 <_JIT_ENTRY+0x131>
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  _Py_Dealloc
// 12c: 48 89 ef                      movq    %rbp, %rdi
// 12f: ff d0                         callq   *%rax
// 131: 49 8b 45 00                   movq    (%r13), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_NegativeRefcount
// 14e: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 153: 4c 89 ea                      movq    %r13, %rdx
// 156: ff d0                         callq   *%rax
// 158: 49 8b 45 00                   movq    (%r13), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 48 8b 2c 24                   movq    (%rsp), %rbp
// 162: 78 21                         js      0x185 <_JIT_ENTRY+0x185>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 4d 00                   decq    (%r13)
// 174: 75 0f                         jne     0x185 <_JIT_ENTRY+0x185>
// 176: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000178:  R_X86_64_64  _Py_Dealloc
// 180: 4c 89 ef                      movq    %r13, %rdi
// 183: ff d0                         callq   *%rax
// 185: 48 85 ed                      testq   %rbp, %rbp
// 188: 0f 84 35 01 00 00             je      0x2c3 <_JIT_ENTRY+0x2c3>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _JIT_OPARG
// 198: 0f b7 c8                      movzwl  %ax, %ecx
// 19b: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1a0: 29 ca                         subl    %ecx, %edx
// 1a2: 4c 63 ea                      movslq  %edx, %r13
// 1a5: 4b 89 2c ee                   movq    %rbp, (%r14,%r13,8)
// 1a9: f7 d1                         notl    %ecx
// 1ab: 48 63 c9                      movslq  %ecx, %rcx
// 1ae: 48 8d 2c 09                   leaq    (%rcx,%rcx), %rbp
// 1b2: 0f b7 c0                      movzwl  %ax, %eax
// 1b5: 48 89 c2                      movq    %rax, %rdx
// 1b8: 48 f7 da                      negq    %rdx
// 1bb: 31 f6                         xorl    %esi, %esi
// 1bd: 66 85 c0                      testw   %ax, %ax
// 1c0: 40 0f 94 c6                   sete    %sil
// 1c4: 31 ff                         xorl    %edi, %edi
// 1c6: 66 83 f8 01                   cmpw    $0x1, %ax
// 1ca: 40 0f 94 c7                   sete    %dil
// 1ce: 49 83 3c ee 00                cmpq    $0x0, (%r14,%rbp,8)
// 1d3: 48 f7 d0                      notq    %rax
// 1d6: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 1da: 4f 8d 3c e6                   leaq    (%r14,%r12,8), %r15
// 1de: 0f 44 f7                      cmovel  %edi, %esi
// 1e1: 40 80 fe 01                   cmpb    $0x1, %sil
// 1e5: 0f 85 d0 00 00 00             jne     0x2bb <_JIT_ENTRY+0x2bb>
// 1eb: 49 01 cd                      addq    %rcx, %r13
// 1ee: 4f 8b 24 ee                   movq    (%r14,%r13,8), %r12
// 1f2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f4:  R_X86_64_64  PyMethodDescr_Type
// 1fc: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 201: 0f 85 b4 00 00 00             jne     0x2bb <_JIT_ENTRY+0x2bb>
// 207: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 20b: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 20f: 49 3b 44 24 10                cmpq    0x10(%r12), %rax
// 214: 0f 85 a1 00 00 00             jne     0x2bb <_JIT_ENTRY+0x2bb>
// 21a: 49 8b 44 24 28                movq    0x28(%r12), %rax
// 21f: 83 78 10 04                   cmpl    $0x4, 0x10(%rax)
// 223: 0f 85 92 00 00 00             jne     0x2bb <_JIT_ENTRY+0x2bb>
// 229: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 22d: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 232: 8b 42 2c                      movl    0x2c(%rdx), %eax
// 235: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 238: 89 4a 2c                      movl    %ecx, 0x2c(%rdx)
// 23b: 85 c0                         testl   %eax, %eax
// 23d: 0f 8e 9a 00 00 00             jle     0x2dd <_JIT_ENTRY+0x2dd>
// 243: 4f 8d 3c ee                   leaq    (%r14,%r13,8), %r15
// 247: 49 89 fd                      movq    %rdi, %r13
// 24a: 31 f6                         xorl    %esi, %esi
// 24c: 41 ff d0                      callq   *%r8
// 24f: 48 89 04 24                   movq    %rax, (%rsp)
// 253: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 258: ff 40 2c                      incl    0x2c(%rax)
// 25b: bf 10 0c 00 00                movl    $0xc10, %edi            # imm = 0xC10
// 260: 4c 89 ee                      movq    %r13, %rsi
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  .text+0x340
// 26d: ff d0                         callq   *%rax
// 26f: bf 11 0c 00 00                movl    $0xc11, %edi            # imm = 0xC11
// 274: 4c 89 e6                      movq    %r12, %rsi
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  .text+0x340
// 281: ff d0                         callq   *%rax
// 283: 48 8b 04 24                   movq    (%rsp), %rax
// 287: 48 85 c0                      testq   %rax, %rax
// 28a: 74 3b                         je      0x2c7 <_JIT_ENTRY+0x2c7>
// 28c: 4d 8d 34 ee                   leaq    (%r14,%rbp,8), %r14
// 290: 49 89 07                      movq    %rax, (%r15)
// 293: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 298: 49 8b 47 10                   movq    0x10(%r15), %rax
// 29c: 48 8b 00                      movq    (%rax), %rax
// 29f: 84 c0                         testb   %al, %al
// 2a1: 74 70                         je      0x313 <_JIT_ENTRY+0x313>
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _Py_HandlePending
// 2ad: 4c 89 ff                      movq    %r15, %rdi
// 2b0: ff d0                         callq   *%rax
// 2b2: 85 c0                         testl   %eax, %eax
// 2b4: 74 5d                         je      0x313 <_JIT_ENTRY+0x313>
// 2b6: 4d 89 f7                      movq    %r14, %r15
// 2b9: eb 0c                         jmp     0x2c7 <_JIT_ENTRY+0x2c7>
// 2bb: 4d 89 fe                      movq    %r15, %r14
// 2be: e9 b3 fd ff ff                jmp     0x76 <_JIT_ENTRY+0x76>
// 2c3: 4f 8d 3c fe                   leaq    (%r14,%r15,8), %r15
// 2c7: 49 29 df                      subq    %rbx, %r15
// 2ca: 49 83 c7 b8                   addq    $-0x48, %r15
// 2ce: 49 c1 ef 03                   shrq    $0x3, %r15
// 2d2: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2d6: 31 c0                         xorl    %eax, %eax
// 2d8: e9 c1 fd ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 2dd: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002df:  R_X86_64_64  .rodata.str1.1+0x39
// 2e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e9:  R_X86_64_64  _Py_CheckRecursiveCall
// 2f1: 48 89 3c 24                   movq    %rdi, (%rsp)
// 2f5: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2fa: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// 2ff: ff d0                         callq   *%rax
// 301: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 306: 48 8b 3c 24                   movq    (%rsp), %rdi
// 30a: 85 c0                         testl   %eax, %eax
// 30c: 75 b9                         jne     0x2c7 <_JIT_ENTRY+0x2c7>
// 30e: e9 30 ff ff ff                jmp     0x243 <_JIT_ENTRY+0x243>
// 313: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000315:  R_X86_64_64  _JIT_CONTINUE
// 31d: 48 89 df                      movq    %rbx, %rdi
// 320: 4c 89 f6                      movq    %r14, %rsi
// 323: 4c 89 fa                      movq    %r15, %rdx
// 326: 48 83 c4 18                   addq    $0x18, %rsp
// 32a: 5b                            popq    %rbx
// 32b: 41 5c                         popq    %r12
// 32d: 41 5d                         popq    %r13
// 32f: 41 5e                         popq    %r14
// 331: 41 5f                         popq    %r15
// 333: 5d                            popq    %rbp
// 334: ff e0                         jmpq    *%rax
// 336: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 
// 0000000000000340 <Py_DECREF>:
// 340: 53                            pushq   %rbx
// 341: 48 89 f3                      movq    %rsi, %rbx
// 344: 48 8b 06                      movq    (%rsi), %rax
// 347: 48 85 c0                      testq   %rax, %rax
// 34a: 7e 06                         jle     0x352 <Py_DECREF+0x12>
// 34c: 85 c0                         testl   %eax, %eax
// 34e: 79 24                         jns     0x374 <Py_DECREF+0x34>
// 350: eb 33                         jmp     0x385 <Py_DECREF+0x45>
// 352: 89 fe                         movl    %edi, %esi
// 354: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000356:  R_X86_64_64  .rodata.str1.1
// 35e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000360:  R_X86_64_64  _Py_NegativeRefcount
// 368: 48 89 da                      movq    %rbx, %rdx
// 36b: ff d0                         callq   *%rax
// 36d: 48 8b 03                      movq    (%rbx), %rax
// 370: 85 c0                         testl   %eax, %eax
// 372: 78 11                         js      0x385 <Py_DECREF+0x45>
// 374: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000376:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 37e: ff d0                         callq   *%rax
// 380: 48 ff 0b                      decq    (%rbx)
// 383: 74 02                         je      0x387 <Py_DECREF+0x47>
// 385: 5b                            popq    %rbx
// 386: c3                            retq
// 387: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000389:  R_X86_64_64  _Py_Dealloc
// 391: 48 89 df                      movq    %rbx, %rdi
// 394: 5b                            popq    %rbx
// 395: ff e0                         jmpq    *%rax
// 397: 
static const unsigned char _CALL_LENplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_body[920] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xe8, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x35, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x4c, 0x63, 0xea, 0x4b, 0x89, 0x2c, 0xee, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x8d, 0x2c, 0x09, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x49, 0x83, 0x3c, 0xee, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x4f, 0x8d, 0x3c, 0xe6, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x0f, 0x85, 0xd0, 0x00, 0x00, 0x00, 0x49, 0x01, 0xcd, 0x4f, 0x8b, 0x24, 0xee, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0xb4, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0x8b, 0x47, 0x08, 0x49, 0x3b, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xa1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x28, 0x83, 0x78, 0x10, 0x04, 0x0f, 0x85, 0x92, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x8b, 0x42, 0x2c, 0x8d, 0x48, 0xff, 0x89, 0x4a, 0x2c, 0x85, 0xc0, 0x0f, 0x8e, 0x9a, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xee, 0x49, 0x89, 0xfd, 0x31, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0xff, 0x40, 0x2c, 0xbf, 0x10, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xbf, 0x11, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x3b, 0x4d, 0x8d, 0x34, 0xee, 0x49, 0x89, 0x07, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x70, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x5d, 0x4d, 0x89, 0xf7, 0xeb, 0x0c, 0x4d, 0x89, 0xfe, 0xe9, 0xb3, 0xfd, 0xff, 0xff, 0x4f, 0x8d, 0x3c, 0xfe, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xc1, 0xfd, 0xff, 0xff, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x3c, 0x24, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0x44, 0x24, 0x10, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x3c, 0x24, 0x85, 0xc0, 0x75, 0xb9, 0xe9, 0x30, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CALL_LENplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x340},
    {0x279, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x340},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x315, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x356, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x360, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x376, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x389, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_LENplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_LENplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_holes[1];

// _CALL_LENplus_CALL_METHOD_DESCRIPTOR_O
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CALL_METHOD_DESCRIPTOR_O.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 de                      subq    %rbx, %r14
// 79: 49 83 c6 b8                   addq    $-0x48, %r14
// 7d: 49 c1 ee 03                   shrq    $0x3, %r14
// 81: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 28                   addq    $0x28, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b2: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 ef                      movq    %r13, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 04 02 00 00             js      0x2d2 <_JIT_ENTRY+0x2d2>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 45 00                   movq    (%r13), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 ea                      movq    %r13, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 45 00                   movq    (%r13), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 21                         js      0x182 <_JIT_ENTRY+0x182>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 4d 00                   decq    (%r13)
// 171: 75 0f                         jne     0x182 <_JIT_ENTRY+0x182>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 ef                      movq    %r13, %rdi
// 180: ff d0                         callq   *%rax
// 182: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 187: 48 85 f6                      testq   %rsi, %rsi
// 18a: 0f 84 95 00 00 00             je      0x225 <_JIT_ENTRY+0x225>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _JIT_OPARG
// 19a: 0f b7 c8                      movzwl  %ax, %ecx
// 19d: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1a2: 29 ca                         subl    %ecx, %edx
// 1a4: 48 63 ea                      movslq  %edx, %rbp
// 1a7: 49 89 34 ee                   movq    %rsi, (%r14,%rbp,8)
// 1ab: f7 d1                         notl    %ecx
// 1ad: 48 63 c9                      movslq  %ecx, %rcx
// 1b0: 4c 8d 3c 09                   leaq    (%rcx,%rcx), %r15
// 1b4: 0f b7 c0                      movzwl  %ax, %eax
// 1b7: 48 89 c2                      movq    %rax, %rdx
// 1ba: 48 f7 da                      negq    %rdx
// 1bd: 31 f6                         xorl    %esi, %esi
// 1bf: 66 83 f8 01                   cmpw    $0x1, %ax
// 1c3: 40 0f 94 c6                   sete    %sil
// 1c7: 31 ff                         xorl    %edi, %edi
// 1c9: 66 83 f8 02                   cmpw    $0x2, %ax
// 1cd: 40 0f 94 c7                   sete    %dil
// 1d1: 4b 83 3c fe 00                cmpq    $0x0, (%r14,%r15,8)
// 1d6: 48 f7 d0                      notq    %rax
// 1d9: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 1dd: 4f 8d 2c e6                   leaq    (%r14,%r12,8), %r13
// 1e1: 0f 44 f7                      cmovel  %edi, %esi
// 1e4: 40 80 fe 01                   cmpb    $0x1, %sil
// 1e8: 75 33                         jne     0x21d <_JIT_ENTRY+0x21d>
// 1ea: 48 01 cd                      addq    %rcx, %rbp
// 1ed: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 1f1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f3:  R_X86_64_64  PyMethodDescr_Type
// 1fb: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 200: 75 1b                         jne     0x21d <_JIT_ENTRY+0x21d>
// 202: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 207: 83 79 10 08                   cmpl    $0x8, 0x10(%rcx)
// 20b: 75 10                         jne     0x21d <_JIT_ENTRY+0x21d>
// 20d: 49 8b 7c c5 00                movq    (%r13,%rax,8), %rdi
// 212: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 216: 49 3b 54 24 10                cmpq    0x10(%r12), %rdx
// 21b: 74 11                         je      0x22e <_JIT_ENTRY+0x22e>
// 21d: 4d 89 ee                      movq    %r13, %r14
// 220: e9 51 fe ff ff                jmp     0x76 <_JIT_ENTRY+0x76>
// 225: 4f 8d 2c fe                   leaq    (%r14,%r15,8), %r13
// 229: e9 a7 00 00 00                jmp     0x2d5 <_JIT_ENTRY+0x2d5>
// 22e: 49 8b 74 c5 08                movq    0x8(%r13,%rax,8), %rsi
// 233: 4c 8b 41 08                   movq    0x8(%rcx), %r8
// 237: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 23c: 8b 42 2c                      movl    0x2c(%rdx), %eax
// 23f: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 242: 89 4a 2c                      movl    %ecx, 0x2c(%rdx)
// 245: 85 c0                         testl   %eax, %eax
// 247: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 24c: 0f 8e 99 00 00 00             jle     0x2eb <_JIT_ENTRY+0x2eb>
// 252: 4d 8d 2c ee                   leaq    (%r14,%rbp,8), %r13
// 256: 48 89 fd                      movq    %rdi, %rbp
// 259: 41 ff d0                      callq   *%r8
// 25c: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 261: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 266: ff 40 2c                      incl    0x2c(%rax)
// 269: bf bf 0b 00 00                movl    $0xbbf, %edi            # imm = 0xBBF
// 26e: 48 89 ee                      movq    %rbp, %rsi
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  .text+0x350
// 27b: ff d0                         callq   *%rax
// 27d: bf c0 0b 00 00                movl    $0xbc0, %edi            # imm = 0xBC0
// 282: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 287: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000289:  R_X86_64_64  .text+0x350
// 291: ff d5                         callq   *%rbp
// 293: bf c1 0b 00 00                movl    $0xbc1, %edi            # imm = 0xBC1
// 298: 4c 89 e6                      movq    %r12, %rsi
// 29b: ff d5                         callq   *%rbp
// 29d: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 2a2: 48 85 c0                      testq   %rax, %rax
// 2a5: 74 2e                         je      0x2d5 <_JIT_ENTRY+0x2d5>
// 2a7: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 2ab: 49 89 45 00                   movq    %rax, (%r13)
// 2af: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 2b4: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2b8: 48 8b 00                      movq    (%rax), %rax
// 2bb: 84 c0                         testb   %al, %al
// 2bd: 74 69                         je      0x328 <_JIT_ENTRY+0x328>
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _Py_HandlePending
// 2c9: 4c 89 ff                      movq    %r15, %rdi
// 2cc: ff d0                         callq   *%rax
// 2ce: 85 c0                         testl   %eax, %eax
// 2d0: 74 56                         je      0x328 <_JIT_ENTRY+0x328>
// 2d2: 4d 89 f5                      movq    %r14, %r13
// 2d5: 49 29 dd                      subq    %rbx, %r13
// 2d8: 49 83 c5 b8                   addq    $-0x48, %r13
// 2dc: 49 c1 ed 03                   shrq    $0x3, %r13
// 2e0: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 2e4: 31 c0                         xorl    %eax, %eax
// 2e6: e9 b3 fd ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 2eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002ed:  R_X86_64_64  .rodata.str1.1+0x39
// 2f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f7:  R_X86_64_64  _Py_CheckRecursiveCall
// 2ff: 48 89 7c 24 18                movq    %rdi, 0x18(%rsp)
// 304: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 309: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// 30e: ff d0                         callq   *%rax
// 310: 4c 8b 44 24 20                movq    0x20(%rsp), %r8
// 315: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 31a: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 31f: 85 c0                         testl   %eax, %eax
// 321: 75 b2                         jne     0x2d5 <_JIT_ENTRY+0x2d5>
// 323: e9 2a ff ff ff                jmp     0x252 <_JIT_ENTRY+0x252>
// 328: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032a:  R_X86_64_64  _JIT_CONTINUE
// 332: 48 89 df                      movq    %rbx, %rdi
// 335: 4c 89 f6                      movq    %r14, %rsi
// 338: 4c 89 fa                      movq    %r15, %rdx
// 33b: 48 83 c4 28                   addq    $0x28, %rsp
// 33f: 5b                            popq    %rbx
// 340: 41 5c                         popq    %r12
// 342: 41 5d                         popq    %r13
// 344: 41 5e                         popq    %r14
// 346: 41 5f                         popq    %r15
// 348: 5d                            popq    %rbp
// 349: ff e0                         jmpq    *%rax
// 34b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 
// 0000000000000350 <Py_DECREF>:
// 350: 53                            pushq   %rbx
// 351: 48 89 f3                      movq    %rsi, %rbx
// 354: 48 8b 06                      movq    (%rsi), %rax
// 357: 48 85 c0                      testq   %rax, %rax
// 35a: 7e 06                         jle     0x362 <Py_DECREF+0x12>
// 35c: 85 c0                         testl   %eax, %eax
// 35e: 79 24                         jns     0x384 <Py_DECREF+0x34>
// 360: eb 33                         jmp     0x395 <Py_DECREF+0x45>
// 362: 89 fe                         movl    %edi, %esi
// 364: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000366:  R_X86_64_64  .rodata.str1.1
// 36e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000370:  R_X86_64_64  _Py_NegativeRefcount
// 378: 48 89 da                      movq    %rbx, %rdx
// 37b: ff d0                         callq   *%rax
// 37d: 48 8b 03                      movq    (%rbx), %rax
// 380: 85 c0                         testl   %eax, %eax
// 382: 78 11                         js      0x395 <Py_DECREF+0x45>
// 384: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000386:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 38e: ff d0                         callq   *%rax
// 390: 48 ff 0b                      decq    (%rbx)
// 393: 74 02                         je      0x397 <Py_DECREF+0x47>
// 395: 5b                            popq    %rbx
// 396: c3                            retq
// 397: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000399:  R_X86_64_64  _Py_Dealloc
// 3a1: 48 89 df                      movq    %rbx, %rdi
// 3a4: 5b                            popq    %rbx
// 3a5: ff e0                         jmpq    *%rax
// 3a7: 
static const unsigned char _CALL_LENplus_CALL_METHOD_DESCRIPTOR_O_code_body[936] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x04, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x95, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xea, 0x49, 0x89, 0x34, 0xee, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4c, 0x8d, 0x3c, 0x09, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x02, 0x40, 0x0f, 0x94, 0xc7, 0x4b, 0x83, 0x3c, 0xfe, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x4f, 0x8d, 0x2c, 0xe6, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x33, 0x48, 0x01, 0xcd, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x1b, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x83, 0x79, 0x10, 0x08, 0x75, 0x10, 0x49, 0x8b, 0x7c, 0xc5, 0x00, 0x48, 0x8b, 0x57, 0x08, 0x49, 0x3b, 0x54, 0x24, 0x10, 0x74, 0x11, 0x4d, 0x89, 0xee, 0xe9, 0x51, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x2c, 0xfe, 0xe9, 0xa7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x74, 0xc5, 0x08, 0x4c, 0x8b, 0x41, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x8b, 0x42, 0x2c, 0x8d, 0x48, 0xff, 0x89, 0x4a, 0x2c, 0x85, 0xc0, 0x48, 0x89, 0x74, 0x24, 0x10, 0x0f, 0x8e, 0x99, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x2c, 0xee, 0x48, 0x89, 0xfd, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0x8b, 0x44, 0x24, 0x08, 0xff, 0x40, 0x2c, 0xbf, 0xbf, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xbf, 0xc0, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd5, 0xbf, 0xc1, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd5, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x74, 0x2e, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x89, 0x45, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x69, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x56, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xb3, 0xfd, 0xff, 0xff, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0x44, 0x24, 0x20, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x20, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x85, 0xc0, 0x75, 0xb2, 0xe9, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CALL_LENplus_CALL_METHOD_DESCRIPTOR_O_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x350},
    {0x289, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x350},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x32a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x366, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x370, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x386, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x399, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_LENplus_CALL_METHOD_DESCRIPTOR_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_LENplus_CALL_METHOD_DESCRIPTOR_O_data_holes[1];

// _CALL_LENplus_CALL_STR_1
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CALL_STR_1.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 39                         je      0xaf <_JIT_ENTRY+0xaf>
// 76: 4c 89 f0                      movq    %r14, %rax
// 79: 48 29 d8                      subq    %rbx, %rax
// 7c: 48 83 c0 b8                   addq    $-0x48, %rax
// 80: 48 c1 e8 03                   shrq    $0x3, %rax
// 84: 89 43 40                      movl    %eax, 0x40(%rbx)
// 87: 48 8b 03                      movq    (%rbx), %rax
// 8a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008c:  R_X86_64_64  _JIT_TARGET
// 94: 89 c9                         movl    %ecx, %ecx
// 96: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 9a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a0: 48 83 c4 18                   addq    $0x18, %rsp
// a4: 5b                            popq    %rbx
// a5: 41 5c                         popq    %r12
// a7: 41 5d                         popq    %r13
// a9: 41 5e                         popq    %r14
// ab: 41 5f                         popq    %r15
// ad: 5d                            popq    %rbp
// ae: c3                            retq
// af: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b4: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  PyObject_Size
// c2: 4c 89 ef                      movq    %r13, %rdi
// c5: ff d0                         callq   *%rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 0f 88 47 02 00 00             js      0x317 <_JIT_ENTRY+0x317>
// d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d2:  R_X86_64_64  PyLong_FromSsize_t
// da: 48 89 c7                      movq    %rax, %rdi
// dd: ff d1                         callq   *%rcx
// df: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e4: 48 8b 45 00                   movq    (%rbp), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7f 22                         jg      0x10f <_JIT_ENTRY+0x10f>
// ed: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ef:  R_X86_64_64  .rodata.str1.1
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_NegativeRefcount
// 101: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 106: 48 89 ea                      movq    %rbp, %rdx
// 109: ff d0                         callq   *%rax
// 10b: 48 8b 45 00                   movq    (%rbp), %rax
// 10f: 85 c0                         testl   %eax, %eax
// 111: 78 21                         js      0x134 <_JIT_ENTRY+0x134>
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11d: ff d0                         callq   *%rax
// 11f: 48 ff 4d 00                   decq    (%rbp)
// 123: 75 0f                         jne     0x134 <_JIT_ENTRY+0x134>
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_Dealloc
// 12f: 48 89 ef                      movq    %rbp, %rdi
// 132: ff d0                         callq   *%rax
// 134: 49 8b 45 00                   movq    (%r13), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 156: 4c 89 ea                      movq    %r13, %rdx
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 45 00                   movq    (%r13), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 78 21                         js      0x184 <_JIT_ENTRY+0x184>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 4d 00                   decq    (%r13)
// 173: 75 0f                         jne     0x184 <_JIT_ENTRY+0x184>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 ef                      movq    %r13, %rdi
// 182: ff d0                         callq   *%rax
// 184: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 189: 48 85 f6                      testq   %rsi, %rsi
// 18c: 0f 84 81 01 00 00             je      0x313 <_JIT_ENTRY+0x313>
// 192: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 196: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000198:  R_X86_64_64  _JIT_OPARG
// 1a0: 0f b7 d1                      movzwl  %cx, %edx
// 1a3: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a8: 29 d1                         subl    %edx, %ecx
// 1aa: 48 63 c9                      movslq  %ecx, %rcx
// 1ad: 49 89 34 ce                   movq    %rsi, (%r14,%rcx,8)
// 1b1: f7 d2                         notl    %edx
// 1b3: 48 63 d2                      movslq  %edx, %rdx
// 1b6: 4c 8d 2c 12                   leaq    (%rdx,%rdx), %r13
// 1ba: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 1bf: 0f 85 b4 fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1c5: 48 01 d1                      addq    %rdx, %rcx
// 1c8: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 1cc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ce:  R_X86_64_64  PyUnicode_Type
// 1d6: 49 39 0c 24                   cmpq    %rcx, (%r12)
// 1da: 0f 85 99 fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _JIT_OPARG
// 1ea: 0f b7 c8                      movzwl  %ax, %ecx
// 1ed: f7 d0                         notl    %eax
// 1ef: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f4: 48 98                         cltq
// 1f6: 48 29 c8                      subq    %rcx, %rax
// 1f9: 49 8b 2c c6                   movq    (%r14,%rax,8), %rbp
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  PyObject_Str
// 207: 48 89 ef                      movq    %rbp, %rdi
// 20a: ff d0                         callq   *%rax
// 20c: 49 89 c7                      movq    %rax, %r15
// 20f: 48 8b 45 00                   movq    (%rbp), %rax
// 213: 48 85 c0                      testq   %rax, %rax
// 216: 7f 22                         jg      0x23a <_JIT_ENTRY+0x23a>
// 218: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021a:  R_X86_64_64  .rodata.str1.1
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_NegativeRefcount
// 22c: be 95 0a 00 00                movl    $0xa95, %esi            # imm = 0xA95
// 231: 48 89 ea                      movq    %rbp, %rdx
// 234: ff d0                         callq   *%rax
// 236: 48 8b 45 00                   movq    (%rbp), %rax
// 23a: 85 c0                         testl   %eax, %eax
// 23c: 78 21                         js      0x25f <_JIT_ENTRY+0x25f>
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 248: ff d0                         callq   *%rax
// 24a: 48 ff 4d 00                   decq    (%rbp)
// 24e: 75 0f                         jne     0x25f <_JIT_ENTRY+0x25f>
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _Py_Dealloc
// 25a: 48 89 ef                      movq    %rbp, %rdi
// 25d: ff d0                         callq   *%rax
// 25f: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000261:  R_X86_64_64  PyUnicode_Type
// 269: 48 8b 45 00                   movq    (%rbp), %rax
// 26d: 48 85 c0                      testq   %rax, %rax
// 270: 7f 22                         jg      0x294 <_JIT_ENTRY+0x294>
// 272: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000274:  R_X86_64_64  .rodata.str1.1
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_NegativeRefcount
// 286: be 96 0a 00 00                movl    $0xa96, %esi            # imm = 0xA96
// 28b: 48 89 ea                      movq    %rbp, %rdx
// 28e: ff d0                         callq   *%rax
// 290: 48 8b 45 00                   movq    (%rbp), %rax
// 294: 85 c0                         testl   %eax, %eax
// 296: 78 28                         js      0x2c0 <_JIT_ENTRY+0x2c0>
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a2: ff d0                         callq   *%rax
// 2a4: 48 ff 4d 00                   decq    (%rbp)
// 2a8: 75 16                         jne     0x2c0 <_JIT_ENTRY+0x2c0>
// 2aa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ac:  R_X86_64_64  PyUnicode_Type
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _Py_Dealloc
// 2be: ff d0                         callq   *%rax
// 2c0: 4d 85 ff                      testq   %r15, %r15
// 2c3: 74 68                         je      0x32d <_JIT_ENTRY+0x32d>
// 2c5: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 2c9: 4d 89 3c 24                   movq    %r15, (%r12)
// 2cd: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 2d2: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2d6: 48 8b 00                      movq    (%rax), %rax
// 2d9: 84 c0                         testb   %al, %al
// 2db: 74 13                         je      0x2f0 <_JIT_ENTRY+0x2f0>
// 2dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002df:  R_X86_64_64  _Py_HandlePending
// 2e7: 4c 89 ff                      movq    %r15, %rdi
// 2ea: ff d0                         callq   *%rax
// 2ec: 85 c0                         testl   %eax, %eax
// 2ee: 75 27                         jne     0x317 <_JIT_ENTRY+0x317>
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  _JIT_CONTINUE
// 2fa: 48 89 df                      movq    %rbx, %rdi
// 2fd: 4c 89 f6                      movq    %r14, %rsi
// 300: 4c 89 fa                      movq    %r15, %rdx
// 303: 48 83 c4 18                   addq    $0x18, %rsp
// 307: 5b                            popq    %rbx
// 308: 41 5c                         popq    %r12
// 30a: 41 5d                         popq    %r13
// 30c: 41 5e                         popq    %r14
// 30e: 41 5f                         popq    %r15
// 310: 5d                            popq    %rbp
// 311: ff e0                         jmpq    *%rax
// 313: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 317: 49 29 de                      subq    %rbx, %r14
// 31a: 49 83 c6 b8                   addq    $-0x48, %r14
// 31e: 49 c1 ee 03                   shrq    $0x3, %r14
// 322: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 326: 31 c0                         xorl    %eax, %eax
// 328: e9 73 fd ff ff                jmp     0xa0 <_JIT_ENTRY+0xa0>
// 32d: 4d 89 e6                      movq    %r12, %r14
// 330: eb e5                         jmp     0x317 <_JIT_ENTRY+0x317>
// 332: 
static const unsigned char _CALL_LENplus_CALL_STR_1_code_body[819] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x47, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x81, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x34, 0xce, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x4c, 0x8d, 0x2c, 0x12, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x85, 0xb4, 0xfe, 0xff, 0xff, 0x48, 0x01, 0xd1, 0x4d, 0x8d, 0x24, 0xce, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x0c, 0x24, 0x0f, 0x85, 0x99, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xc8, 0x49, 0x8b, 0x2c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc7, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x95, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x68, 0x4f, 0x8d, 0x34, 0xee, 0x4d, 0x89, 0x3c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x73, 0xfd, 0xff, 0xff, 0x4d, 0x89, 0xe6, 0xeb, 0xe5};
static const Hole _CALL_LENplus_CALL_STR_1_code_holes[29] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CALL_STR_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CALL_STR_1_data_holes[1];

// _CALL_LENplus_CALL_TUPLE_1
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CALL_TUPLE_1.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 39                         je      0xaf <_JIT_ENTRY+0xaf>
// 76: 4c 89 f0                      movq    %r14, %rax
// 79: 48 29 d8                      subq    %rbx, %rax
// 7c: 48 83 c0 b8                   addq    $-0x48, %rax
// 80: 48 c1 e8 03                   shrq    $0x3, %rax
// 84: 89 43 40                      movl    %eax, 0x40(%rbx)
// 87: 48 8b 03                      movq    (%rbx), %rax
// 8a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008c:  R_X86_64_64  _JIT_TARGET
// 94: 89 c9                         movl    %ecx, %ecx
// 96: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 9a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a0: 48 83 c4 18                   addq    $0x18, %rsp
// a4: 5b                            popq    %rbx
// a5: 41 5c                         popq    %r12
// a7: 41 5d                         popq    %r13
// a9: 41 5e                         popq    %r14
// ab: 41 5f                         popq    %r15
// ad: 5d                            popq    %rbp
// ae: c3                            retq
// af: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b4: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  PyObject_Size
// c2: 4c 89 ef                      movq    %r13, %rdi
// c5: ff d0                         callq   *%rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 0f 88 47 02 00 00             js      0x317 <_JIT_ENTRY+0x317>
// d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d2:  R_X86_64_64  PyLong_FromSsize_t
// da: 48 89 c7                      movq    %rax, %rdi
// dd: ff d1                         callq   *%rcx
// df: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e4: 48 8b 45 00                   movq    (%rbp), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7f 22                         jg      0x10f <_JIT_ENTRY+0x10f>
// ed: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ef:  R_X86_64_64  .rodata.str1.1
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_NegativeRefcount
// 101: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 106: 48 89 ea                      movq    %rbp, %rdx
// 109: ff d0                         callq   *%rax
// 10b: 48 8b 45 00                   movq    (%rbp), %rax
// 10f: 85 c0                         testl   %eax, %eax
// 111: 78 21                         js      0x134 <_JIT_ENTRY+0x134>
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11d: ff d0                         callq   *%rax
// 11f: 48 ff 4d 00                   decq    (%rbp)
// 123: 75 0f                         jne     0x134 <_JIT_ENTRY+0x134>
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_Dealloc
// 12f: 48 89 ef                      movq    %rbp, %rdi
// 132: ff d0                         callq   *%rax
// 134: 49 8b 45 00                   movq    (%r13), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 156: 4c 89 ea                      movq    %r13, %rdx
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 45 00                   movq    (%r13), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 78 21                         js      0x184 <_JIT_ENTRY+0x184>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 4d 00                   decq    (%r13)
// 173: 75 0f                         jne     0x184 <_JIT_ENTRY+0x184>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 ef                      movq    %r13, %rdi
// 182: ff d0                         callq   *%rax
// 184: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 189: 48 85 f6                      testq   %rsi, %rsi
// 18c: 0f 84 81 01 00 00             je      0x313 <_JIT_ENTRY+0x313>
// 192: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 196: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000198:  R_X86_64_64  _JIT_OPARG
// 1a0: 0f b7 d1                      movzwl  %cx, %edx
// 1a3: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a8: 29 d1                         subl    %edx, %ecx
// 1aa: 48 63 c9                      movslq  %ecx, %rcx
// 1ad: 49 89 34 ce                   movq    %rsi, (%r14,%rcx,8)
// 1b1: f7 d2                         notl    %edx
// 1b3: 48 63 d2                      movslq  %edx, %rdx
// 1b6: 4c 8d 2c 12                   leaq    (%rdx,%rdx), %r13
// 1ba: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 1bf: 0f 85 b4 fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1c5: 48 01 d1                      addq    %rdx, %rcx
// 1c8: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 1cc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ce:  R_X86_64_64  PyTuple_Type
// 1d6: 49 39 0c 24                   cmpq    %rcx, (%r12)
// 1da: 0f 85 99 fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _JIT_OPARG
// 1ea: 0f b7 c8                      movzwl  %ax, %ecx
// 1ed: f7 d0                         notl    %eax
// 1ef: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f4: 48 98                         cltq
// 1f6: 48 29 c8                      subq    %rcx, %rax
// 1f9: 49 8b 2c c6                   movq    (%r14,%rax,8), %rbp
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  PySequence_Tuple
// 207: 48 89 ef                      movq    %rbp, %rdi
// 20a: ff d0                         callq   *%rax
// 20c: 49 89 c7                      movq    %rax, %r15
// 20f: 48 8b 45 00                   movq    (%rbp), %rax
// 213: 48 85 c0                      testq   %rax, %rax
// 216: 7f 22                         jg      0x23a <_JIT_ENTRY+0x23a>
// 218: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021a:  R_X86_64_64  .rodata.str1.1
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_NegativeRefcount
// 22c: be ad 0a 00 00                movl    $0xaad, %esi            # imm = 0xAAD
// 231: 48 89 ea                      movq    %rbp, %rdx
// 234: ff d0                         callq   *%rax
// 236: 48 8b 45 00                   movq    (%rbp), %rax
// 23a: 85 c0                         testl   %eax, %eax
// 23c: 78 21                         js      0x25f <_JIT_ENTRY+0x25f>
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 248: ff d0                         callq   *%rax
// 24a: 48 ff 4d 00                   decq    (%rbp)
// 24e: 75 0f                         jne     0x25f <_JIT_ENTRY+0x25f>
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _Py_Dealloc
// 25a: 48 89 ef                      movq    %rbp, %rdi
// 25d: ff d0                         callq   *%rax
// 25f: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000261:  R_X86_64_64  PyTuple_Type
// 269: 48 8b 45 00                   movq    (%rbp), %rax
// 26d: 48 85 c0                      testq   %rax, %rax
// 270: 7f 22                         jg      0x294 <_JIT_ENTRY+0x294>
// 272: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000274:  R_X86_64_64  .rodata.str1.1
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_NegativeRefcount
// 286: be ae 0a 00 00                movl    $0xaae, %esi            # imm = 0xAAE
// 28b: 48 89 ea                      movq    %rbp, %rdx
// 28e: ff d0                         callq   *%rax
// 290: 48 8b 45 00                   movq    (%rbp), %rax
// 294: 85 c0                         testl   %eax, %eax
// 296: 78 28                         js      0x2c0 <_JIT_ENTRY+0x2c0>
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a2: ff d0                         callq   *%rax
// 2a4: 48 ff 4d 00                   decq    (%rbp)
// 2a8: 75 16                         jne     0x2c0 <_JIT_ENTRY+0x2c0>
// 2aa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ac:  R_X86_64_64  PyTuple_Type
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _Py_Dealloc
// 2be: ff d0                         callq   *%rax
// 2c0: 4d 85 ff                      testq   %r15, %r15
// 2c3: 74 68                         je      0x32d <_JIT_ENTRY+0x32d>
// 2c5: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 2c9: 4d 89 3c 24                   movq    %r15, (%r12)
// 2cd: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 2d2: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2d6: 48 8b 00                      movq    (%rax), %rax
// 2d9: 84 c0                         testb   %al, %al
// 2db: 74 13                         je      0x2f0 <_JIT_ENTRY+0x2f0>
// 2dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002df:  R_X86_64_64  _Py_HandlePending
// 2e7: 4c 89 ff                      movq    %r15, %rdi
// 2ea: ff d0                         callq   *%rax
// 2ec: 85 c0                         testl   %eax, %eax
// 2ee: 75 27                         jne     0x317 <_JIT_ENTRY+0x317>
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  _JIT_CONTINUE
// 2fa: 48 89 df                      movq    %rbx, %rdi
// 2fd: 4c 89 f6                      movq    %r14, %rsi
// 300: 4c 89 fa                      movq    %r15, %rdx
// 303: 48 83 c4 18                   addq    $0x18, %rsp
// 307: 5b                            popq    %rbx
// 308: 41 5c                         popq    %r12
// 30a: 41 5d                         popq    %r13
// 30c: 41 5e                         popq    %r14
// 30e: 41 5f                         popq    %r15
// 310: 5d                            popq    %rbp
// 311: ff e0                         jmpq    *%rax
// 313: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 317: 49 29 de                      subq    %rbx, %r14
// 31a: 49 83 c6 b8                   addq    $-0x48, %r14
// 31e: 49 c1 ee 03                   shrq    $0x3, %r14
// 322: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 326: 31 c0                         xorl    %eax, %eax
// 328: e9 73 fd ff ff                jmp     0xa0 <_JIT_ENTRY+0xa0>
// 32d: 4d 89 e6                      movq    %r12, %r14
// 330: eb e5                         jmp     0x317 <_JIT_ENTRY+0x317>
// 332: 
static const unsigned char _CALL_LENplus_CALL_TUPLE_1_code_body[819] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x47, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x81, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x34, 0xce, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x4c, 0x8d, 0x2c, 0x12, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x85, 0xb4, 0xfe, 0xff, 0xff, 0x48, 0x01, 0xd1, 0x4d, 0x8d, 0x24, 0xce, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x0c, 0x24, 0x0f, 0x85, 0x99, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xc8, 0x49, 0x8b, 0x2c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc7, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xad, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x68, 0x4f, 0x8d, 0x34, 0xee, 0x4d, 0x89, 0x3c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x73, 0xfd, 0xff, 0xff, 0x4d, 0x89, 0xe6, 0xeb, 0xe5};
static const Hole _CALL_LENplus_CALL_TUPLE_1_code_holes[29] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Tuple, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CALL_TUPLE_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CALL_TUPLE_1_data_holes[1];

// _CALL_LENplus_CALL_TYPE_1
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CALL_TYPE_1.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 39                         je      0xaf <_JIT_ENTRY+0xaf>
// 76: 4c 89 f0                      movq    %r14, %rax
// 79: 48 29 d8                      subq    %rbx, %rax
// 7c: 48 83 c0 b8                   addq    $-0x48, %rax
// 80: 48 c1 e8 03                   shrq    $0x3, %rax
// 84: 89 43 40                      movl    %eax, 0x40(%rbx)
// 87: 48 8b 03                      movq    (%rbx), %rax
// 8a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008c:  R_X86_64_64  _JIT_TARGET
// 94: 89 c9                         movl    %ecx, %ecx
// 96: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 9a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a0: 48 83 c4 18                   addq    $0x18, %rsp
// a4: 5b                            popq    %rbx
// a5: 41 5c                         popq    %r12
// a7: 41 5d                         popq    %r13
// a9: 41 5e                         popq    %r14
// ab: 41 5f                         popq    %r15
// ad: 5d                            popq    %rbp
// ae: c3                            retq
// af: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b4: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  PyObject_Size
// c2: 4c 89 ef                      movq    %r13, %rdi
// c5: ff d0                         callq   *%rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 0f 88 62 01 00 00             js      0x232 <_JIT_ENTRY+0x232>
// d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d2:  R_X86_64_64  PyLong_FromSsize_t
// da: 48 89 c7                      movq    %rax, %rdi
// dd: ff d1                         callq   *%rcx
// df: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e4: 48 8b 45 00                   movq    (%rbp), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7f 22                         jg      0x10f <_JIT_ENTRY+0x10f>
// ed: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ef:  R_X86_64_64  .rodata.str1.1
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_NegativeRefcount
// 101: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 106: 48 89 ea                      movq    %rbp, %rdx
// 109: ff d0                         callq   *%rax
// 10b: 48 8b 45 00                   movq    (%rbp), %rax
// 10f: 85 c0                         testl   %eax, %eax
// 111: 78 21                         js      0x134 <_JIT_ENTRY+0x134>
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11d: ff d0                         callq   *%rax
// 11f: 48 ff 4d 00                   decq    (%rbp)
// 123: 75 0f                         jne     0x134 <_JIT_ENTRY+0x134>
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_Dealloc
// 12f: 48 89 ef                      movq    %rbp, %rdi
// 132: ff d0                         callq   *%rax
// 134: 49 8b 45 00                   movq    (%r13), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 156: 4c 89 ea                      movq    %r13, %rdx
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 45 00                   movq    (%r13), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 78 21                         js      0x184 <_JIT_ENTRY+0x184>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 4d 00                   decq    (%r13)
// 173: 75 0f                         jne     0x184 <_JIT_ENTRY+0x184>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 ef                      movq    %r13, %rdi
// 182: ff d0                         callq   *%rax
// 184: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 189: 48 85 ff                      testq   %rdi, %rdi
// 18c: 0f 84 9c 00 00 00             je      0x22e <_JIT_ENTRY+0x22e>
// 192: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 196: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000198:  R_X86_64_64  _JIT_OPARG
// 1a0: 0f b7 d1                      movzwl  %cx, %edx
// 1a3: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a8: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 1ad: 29 d6                         subl    %edx, %esi
// 1af: 48 63 f6                      movslq  %esi, %rsi
// 1b2: 49 89 3c f6                   movq    %rdi, (%r14,%rsi,8)
// 1b6: f7 d2                         notl    %edx
// 1b8: 48 63 ea                      movslq  %edx, %rbp
// 1bb: 48 01 ed                      addq    %rbp, %rbp
// 1be: 49 83 3c ee 00                cmpq    $0x0, (%r14,%rbp,8)
// 1c3: 0f 85 b0 fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1c9: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001cb:  R_X86_64_64  _JIT_OPARG
// 1d3: 0f b7 d2                      movzwl  %dx, %edx
// 1d6: 29 d1                         subl    %edx, %ecx
// 1d8: 48 63 c9                      movslq  %ecx, %rcx
// 1db: f7 d2                         notl    %edx
// 1dd: 48 63 d2                      movslq  %edx, %rdx
// 1e0: 48 01 ca                      addq    %rcx, %rdx
// 1e3: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001e5:  R_X86_64_64  PyType_Type
// 1ed: 4d 39 24 d6                   cmpq    %r12, (%r14,%rdx,8)
// 1f1: 0f 85 82 fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f9:  R_X86_64_64  _JIT_OPARG
// 201: 0f b7 c8                      movzwl  %ax, %ecx
// 204: f7 d0                         notl    %eax
// 206: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 20b: 48 98                         cltq
// 20d: 48 29 c8                      subq    %rcx, %rax
// 210: 4d 8b 2c c6                   movq    (%r14,%rax,8), %r13
// 214: 4d 8b 7d 08                   movq    0x8(%r13), %r15
// 218: 41 8b 07                      movl    (%r15), %eax
// 21b: ff c0                         incl    %eax
// 21d: 75 29                         jne     0x248 <_JIT_ENTRY+0x248>
// 21f: 49 8b 45 00                   movq    (%r13), %rax
// 223: 48 85 c0                      testq   %rax, %rax
// 226: 7e 38                         jle     0x260 <_JIT_ENTRY+0x260>
// 228: 85 c0                         testl   %eax, %eax
// 22a: 79 5a                         jns     0x286 <_JIT_ENTRY+0x286>
// 22c: eb 79                         jmp     0x2a7 <_JIT_ENTRY+0x2a7>
// 22e: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 232: 49 29 de                      subq    %rbx, %r14
// 235: 49 83 c6 b8                   addq    $-0x48, %r14
// 239: 49 c1 ee 03                   shrq    $0x3, %r14
// 23d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 241: 31 c0                         xorl    %eax, %eax
// 243: e9 58 fe ff ff                jmp     0xa0 <_JIT_ENTRY+0xa0>
// 248: 41 89 07                      movl    %eax, (%r15)
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 255: ff d0                         callq   *%rax
// 257: 49 8b 45 00                   movq    (%r13), %rax
// 25b: 48 85 c0                      testq   %rax, %rax
// 25e: 7f c8                         jg      0x228 <_JIT_ENTRY+0x228>
// 260: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000262:  R_X86_64_64  .rodata.str1.1
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _Py_NegativeRefcount
// 274: be 7f 0a 00 00                movl    $0xa7f, %esi            # imm = 0xA7F
// 279: 4c 89 ea                      movq    %r13, %rdx
// 27c: ff d0                         callq   *%rax
// 27e: 49 8b 45 00                   movq    (%r13), %rax
// 282: 85 c0                         testl   %eax, %eax
// 284: 78 21                         js      0x2a7 <_JIT_ENTRY+0x2a7>
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 290: ff d0                         callq   *%rax
// 292: 49 ff 4d 00                   decq    (%r13)
// 296: 75 0f                         jne     0x2a7 <_JIT_ENTRY+0x2a7>
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_Dealloc
// 2a2: 4c 89 ef                      movq    %r13, %rdi
// 2a5: ff d0                         callq   *%rax
// 2a7: 49 8b 04 24                   movq    (%r12), %rax
// 2ab: 48 85 c0                      testq   %rax, %rax
// 2ae: 7f 22                         jg      0x2d2 <_JIT_ENTRY+0x2d2>
// 2b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b2:  R_X86_64_64  .rodata.str1.1
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _Py_NegativeRefcount
// 2c4: be 80 0a 00 00                movl    $0xa80, %esi            # imm = 0xA80
// 2c9: 4c 89 e2                      movq    %r12, %rdx
// 2cc: ff d0                         callq   *%rax
// 2ce: 49 8b 04 24                   movq    (%r12), %rax
// 2d2: 4d 8d 2c ee                   leaq    (%r14,%rbp,8), %r13
// 2d6: 85 c0                         testl   %eax, %eax
// 2d8: 78 28                         js      0x302 <_JIT_ENTRY+0x302>
// 2da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e4: ff d0                         callq   *%rax
// 2e6: 49 ff 0c 24                   decq    (%r12)
// 2ea: 75 16                         jne     0x302 <_JIT_ENTRY+0x302>
// 2ec: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ee:  R_X86_64_64  PyType_Type
// 2f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f8:  R_X86_64_64  _Py_Dealloc
// 300: ff d0                         callq   *%rax
// 302: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000304:  R_X86_64_64  _JIT_OPARG
// 30c: 0f b7 c0                      movzwl  %ax, %eax
// 30f: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 314: 29 c1                         subl    %eax, %ecx
// 316: 48 63 c9                      movslq  %ecx, %rcx
// 319: f7 d0                         notl    %eax
// 31b: 48 98                         cltq
// 31d: 48 01 c8                      addq    %rcx, %rax
// 320: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 324: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000326:  R_X86_64_64  _JIT_CONTINUE
// 32e: 48 89 df                      movq    %rbx, %rdi
// 331: 4c 89 ee                      movq    %r13, %rsi
// 334: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 339: 48 83 c4 18                   addq    $0x18, %rsp
// 33d: 5b                            popq    %rbx
// 33e: 41 5c                         popq    %r12
// 340: 41 5d                         popq    %r13
// 342: 41 5e                         popq    %r14
// 344: 41 5f                         popq    %r15
// 346: 5d                            popq    %rbp
// 347: ff e0                         jmpq    *%rax
// 349: 
static const unsigned char _CALL_LENplus_CALL_TYPE_1_code_body[842] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x62, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x9c, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd6, 0x48, 0x63, 0xf6, 0x49, 0x89, 0x3c, 0xf6, 0xf7, 0xd2, 0x48, 0x63, 0xea, 0x48, 0x01, 0xed, 0x49, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x85, 0xb0, 0xfe, 0xff, 0xff, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x29, 0xd1, 0x48, 0x63, 0xc9, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x48, 0x01, 0xca, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x24, 0xd6, 0x0f, 0x85, 0x82, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xc8, 0x4d, 0x8b, 0x2c, 0xc6, 0x4d, 0x8b, 0x7d, 0x08, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x29, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x38, 0x85, 0xc0, 0x79, 0x5a, 0xeb, 0x79, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x58, 0xfe, 0xff, 0xff, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xc8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7f, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x2c, 0xee, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_CALL_TYPE_1_code_holes[29] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x304, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x326, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CALL_TYPE_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CALL_TYPE_1_data_holes[1];

// _CALL_LENplus_CHECK_ATTR_CLASS
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CHECK_ATTR_CLASS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 40 01 00 00             js      0x20a <_JIT_ENTRY+0x20a>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 6f                         je      0x206 <_JIT_ENTRY+0x206>
// 197: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1bf: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 1c3: f6 81 ab 00 00 00 80          testb   $-0x80, 0xab(%rcx)
// 1ca: 74 32                         je      0x1fe <_JIT_ENTRY+0x1fe>
// 1cc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ce:  R_X86_64_64  _JIT_OPERAND
// 1d6: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 1dc: 75 20                         jne     0x1fe <_JIT_ENTRY+0x1fe>
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _JIT_CONTINUE
// 1e8: 48 89 df                      movq    %rbx, %rdi
// 1eb: 4c 89 fa                      movq    %r15, %rdx
// 1ee: 48 83 c4 18                   addq    $0x18, %rsp
// 1f2: 5b                            popq    %rbx
// 1f3: 41 5c                         popq    %r12
// 1f5: 41 5d                         popq    %r13
// 1f7: 41 5e                         popq    %r14
// 1f9: 41 5f                         popq    %r15
// 1fb: 5d                            popq    %rbp
// 1fc: ff e0                         jmpq    *%rax
// 1fe: 49 89 f6                      movq    %rsi, %r14
// 201: e9 6f fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 206: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 20a: 49 29 de                      subq    %rbx, %r14
// 20d: 49 83 c6 b8                   addq    $-0x48, %r14
// 211: 49 c1 ee 03                   shrq    $0x3, %r14
// 215: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 219: 31 c0                         xorl    %eax, %eax
// 21b: e9 7d fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 220: 
static const unsigned char _CALL_LENplus_CHECK_ATTR_CLASS_code_body[545] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x40, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x6f, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x32, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xf6, 0xe9, 0x6f, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x7d, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_CHECK_ATTR_CLASS_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CHECK_ATTR_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CHECK_ATTR_CLASS_data_holes[1];

// _CALL_LENplus_CHECK_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CHECK_ATTR_METHOD_LAZY_DICT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 13 01 00 00             js      0x1dd <_JIT_ENTRY+0x1dd>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 42                         je      0x1d9 <_JIT_ENTRY+0x1d9>
// 197: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1bf: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 1c3: 48 8b 89 20 01 00 00          movq    0x120(%rcx), %rcx
// 1ca: 48 83 3c 08 00                cmpq    $0x0, (%rax,%rcx)
// 1cf: 74 22                         je      0x1f3 <_JIT_ENTRY+0x1f3>
// 1d1: 49 89 f6                      movq    %rsi, %r14
// 1d4: e9 9c fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 1d9: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1dd: 49 29 de                      subq    %rbx, %r14
// 1e0: 49 83 c6 b8                   addq    $-0x48, %r14
// 1e4: 49 c1 ee 03                   shrq    $0x3, %r14
// 1e8: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1ec: 31 c0                         xorl    %eax, %eax
// 1ee: e9 aa fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _JIT_CONTINUE
// 1fd: 48 89 df                      movq    %rbx, %rdi
// 200: 4c 89 fa                      movq    %r15, %rdx
// 203: 48 83 c4 18                   addq    $0x18, %rsp
// 207: 5b                            popq    %rbx
// 208: 41 5c                         popq    %r12
// 20a: 41 5d                         popq    %r13
// 20c: 41 5e                         popq    %r14
// 20e: 41 5f                         popq    %r15
// 210: 5d                            popq    %rbp
// 211: ff e0                         jmpq    *%rax
// 213: 
static const unsigned char _CALL_LENplus_CHECK_ATTR_METHOD_LAZY_DICT_code_body[532] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x13, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x42, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0x48, 0x8b, 0x89, 0x20, 0x01, 0x00, 0x00, 0x48, 0x83, 0x3c, 0x08, 0x00, 0x74, 0x22, 0x49, 0x89, 0xf6, 0xe9, 0x9c, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xaa, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_CHECK_ATTR_METHOD_LAZY_DICT_code_holes[15] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CHECK_ATTR_METHOD_LAZY_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CHECK_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _CALL_LENplus_CHECK_ATTR_MODULE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CHECK_ATTR_MODULE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 48 01 00 00             js      0x212 <_JIT_ENTRY+0x212>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 77                         je      0x20e <_JIT_ENTRY+0x20e>
// 197: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1bf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c1:  R_X86_64_64  PyModule_Type
// 1c9: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1cd: 75 37                         jne     0x206 <_JIT_ENTRY+0x206>
// 1cf: 48 8b 40 10                   movq    0x10(%rax), %rax
// 1d3: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1d7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d9:  R_X86_64_64  _JIT_OPERAND
// 1e1: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 1e4: 75 20                         jne     0x206 <_JIT_ENTRY+0x206>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _JIT_CONTINUE
// 1f0: 48 89 df                      movq    %rbx, %rdi
// 1f3: 4c 89 fa                      movq    %r15, %rdx
// 1f6: 48 83 c4 18                   addq    $0x18, %rsp
// 1fa: 5b                            popq    %rbx
// 1fb: 41 5c                         popq    %r12
// 1fd: 41 5d                         popq    %r13
// 1ff: 41 5e                         popq    %r14
// 201: 41 5f                         popq    %r15
// 203: 5d                            popq    %rbp
// 204: ff e0                         jmpq    *%rax
// 206: 49 89 f6                      movq    %rsi, %r14
// 209: e9 67 fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 20e: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 212: 49 29 de                      subq    %rbx, %r14
// 215: 49 83 c6 b8                   addq    $-0x48, %r14
// 219: 49 c1 ee 03                   shrq    $0x3, %r14
// 21d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 221: 31 c0                         xorl    %eax, %eax
// 223: e9 75 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 228: 
static const unsigned char _CALL_LENplus_CHECK_ATTR_MODULE_code_body[553] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x48, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x77, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x37, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xf6, 0xe9, 0x67, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x75, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_CHECK_ATTR_MODULE_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyModule_Type, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CHECK_ATTR_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CHECK_ATTR_MODULE_data_holes[1];

// _CALL_LENplus_CHECK_ATTR_WITH_HINT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CHECK_ATTR_WITH_HINT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 26 01 00 00             js      0x1f0 <_JIT_ENTRY+0x1f0>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 55                         je      0x1ec <_JIT_ENTRY+0x1ec>
// 197: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1bf: 48 8b 40 e8                   movq    -0x18(%rax), %rax
// 1c3: a8 01                         testb   $0x1, %al
// 1c5: 75 3f                         jne     0x206 <_JIT_ENTRY+0x206>
// 1c7: 48 85 c0                      testq   %rax, %rax
// 1ca: 74 3a                         je      0x206 <_JIT_ENTRY+0x206>
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _JIT_CONTINUE
// 1d6: 48 89 df                      movq    %rbx, %rdi
// 1d9: 4c 89 fa                      movq    %r15, %rdx
// 1dc: 48 83 c4 18                   addq    $0x18, %rsp
// 1e0: 5b                            popq    %rbx
// 1e1: 41 5c                         popq    %r12
// 1e3: 41 5d                         popq    %r13
// 1e5: 41 5e                         popq    %r14
// 1e7: 41 5f                         popq    %r15
// 1e9: 5d                            popq    %rbp
// 1ea: ff e0                         jmpq    *%rax
// 1ec: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1f0: 49 29 de                      subq    %rbx, %r14
// 1f3: 49 83 c6 b8                   addq    $-0x48, %r14
// 1f7: 49 c1 ee 03                   shrq    $0x3, %r14
// 1fb: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1ff: 31 c0                         xorl    %eax, %eax
// 201: e9 97 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 206: 49 89 f6                      movq    %rsi, %r14
// 209: e9 67 fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 20e: 
static const unsigned char _CALL_LENplus_CHECK_ATTR_WITH_HINT_code_body[527] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x26, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x55, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x40, 0xe8, 0xa8, 0x01, 0x75, 0x3f, 0x48, 0x85, 0xc0, 0x74, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x97, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xf6, 0xe9, 0x67, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_CHECK_ATTR_WITH_HINT_code_holes[15] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CHECK_ATTR_WITH_HINT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CHECK_ATTR_WITH_HINT_data_holes[1];

// _CALL_LENplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 39 01 00 00             js      0x203 <_JIT_ENTRY+0x203>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 68                         je      0x1ff <_JIT_ENTRY+0x1ff>
// 197: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c8                      movzwl  %ax, %ecx
// 1a8: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
// 1ad: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1b2: 29 ca                         subl    %ecx, %edx
// 1b4: 48 63 d2                      movslq  %edx, %rdx
// 1b7: 49 89 2c d6                   movq    %rbp, (%r14,%rdx,8)
// 1bb: f7 d1                         notl    %ecx
// 1bd: 48 63 c9                      movslq  %ecx, %rcx
// 1c0: 48 01 c9                      addq    %rcx, %rcx
// 1c3: 49 83 3c ce 00                cmpq    $0x0, (%r14,%rcx,8)
// 1c8: 75 2d                         jne     0x1f7 <_JIT_ENTRY+0x1f7>
// 1ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cc:  R_X86_64_64  _JIT_OPARG
// 1d4: 0f b7 c9                      movzwl  %cx, %ecx
// 1d7: 29 c8                         subl    %ecx, %eax
// 1d9: 48 98                         cltq
// 1db: f7 d1                         notl    %ecx
// 1dd: 48 63 c9                      movslq  %ecx, %rcx
// 1e0: 48 01 c1                      addq    %rax, %rcx
// 1e3: 49 8b 04 ce                   movq    (%r14,%rcx,8), %rax
// 1e7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e9:  R_X86_64_64  PyMethod_Type
// 1f1: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1f5: 74 22                         je      0x219 <_JIT_ENTRY+0x219>
// 1f7: 49 89 f6                      movq    %rsi, %r14
// 1fa: e9 76 fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 1ff: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 203: 49 29 de                      subq    %rbx, %r14
// 206: 49 83 c6 b8                   addq    $-0x48, %r14
// 20a: 49 c1 ee 03                   shrq    $0x3, %r14
// 20e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 212: 31 c0                         xorl    %eax, %eax
// 214: e9 84 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_CONTINUE
// 223: 48 89 df                      movq    %rbx, %rdi
// 226: 4c 89 fa                      movq    %r15, %rdx
// 229: 48 83 c4 18                   addq    $0x18, %rsp
// 22d: 5b                            popq    %rbx
// 22e: 41 5c                         popq    %r12
// 230: 41 5d                         popq    %r13
// 232: 41 5e                         popq    %r14
// 234: 41 5f                         popq    %r15
// 236: 5d                            popq    %rbp
// 237: ff e0                         jmpq    *%rax
// 239: 
static const unsigned char _CALL_LENplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_body[570] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x39, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x68, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x2c, 0xd6, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xc9, 0x49, 0x83, 0x3c, 0xce, 0x00, 0x75, 0x2d, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x48, 0x98, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xc1, 0x49, 0x8b, 0x04, 0xce, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x22, 0x49, 0x89, 0xf6, 0xe9, 0x76, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x84, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethod_Type, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _CALL_LENplus_CHECK_EG_MATCH
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CHECK_EG_MATCH.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 de                      subq    %rbx, %r14
// 79: 49 83 c6 b8                   addq    $-0x48, %r14
// 7d: 49 c1 ee 03                   shrq    $0x3, %r14
// 81: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 28                   addq    $0x28, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// b2: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 11 03 00 00             js      0x3df <_JIT_ENTRY+0x3df>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 04 24                   movq    (%r12), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 e2                      movq    %r12, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 04 24                   movq    (%r12), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 21                         js      0x182 <_JIT_ENTRY+0x182>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 0c 24                   decq    (%r12)
// 171: 75 0f                         jne     0x182 <_JIT_ENTRY+0x182>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: ff d0                         callq   *%rax
// 182: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 187: 48 85 d2                      testq   %rdx, %rdx
// 18a: 0f 84 9e 01 00 00             je      0x32e <_JIT_ENTRY+0x32e>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _JIT_OPARG
// 19a: 0f b7 c0                      movzwl  %ax, %eax
// 19d: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a2: 29 c1                         subl    %eax, %ecx
// 1a4: 48 63 c9                      movslq  %ecx, %rcx
// 1a7: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1ab: f7 d0                         notl    %eax
// 1ad: 4c 63 f8                      movslq  %eax, %r15
// 1b0: 4b 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %rbp
// 1b5: 4f 8b 64 fe f8                movq    -0x8(%r14,%r15,8), %r12
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 1c4: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 1c9: 4c 89 e6                      movq    %r12, %rsi
// 1cc: ff d0                         callq   *%rax
// 1ce: 85 c0                         testl   %eax, %eax
// 1d0: 0f 88 61 01 00 00             js      0x337 <_JIT_ENTRY+0x337>
// 1d6: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 1df: 48 c7 44 24 20 00 00 00 00    movq    $0x0, 0x20(%rsp)
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 1f2: 48 8d 54 24 10                leaq    0x10(%rsp), %rdx
// 1f7: 48 8d 4c 24 20                leaq    0x20(%rsp), %rcx
// 1fc: 48 89 ef                      movq    %rbp, %rdi
// 1ff: 4c 89 e6                      movq    %r12, %rsi
// 202: ff d0                         callq   *%rax
// 204: 89 44 24 08                   movl    %eax, 0x8(%rsp)
// 208: 48 8b 45 00                   movq    (%rbp), %rax
// 20c: 48 85 c0                      testq   %rax, %rax
// 20f: 7f 22                         jg      0x233 <_JIT_ENTRY+0x233>
// 211: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000213:  R_X86_64_64  .rodata.str1.1
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_NegativeRefcount
// 225: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 22a: 48 89 ea                      movq    %rbp, %rdx
// 22d: ff d0                         callq   *%rax
// 22f: 48 8b 45 00                   movq    (%rbp), %rax
// 233: 85 c0                         testl   %eax, %eax
// 235: 78 21                         js      0x258 <_JIT_ENTRY+0x258>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 241: ff d0                         callq   *%rax
// 243: 48 ff 4d 00                   decq    (%rbp)
// 247: 75 0f                         jne     0x258 <_JIT_ENTRY+0x258>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_Dealloc
// 253: 48 89 ef                      movq    %rbp, %rdi
// 256: ff d0                         callq   *%rax
// 258: 49 8b 04 24                   movq    (%r12), %rax
// 25c: 48 85 c0                      testq   %rax, %rax
// 25f: 7f 22                         jg      0x283 <_JIT_ENTRY+0x283>
// 261: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000263:  R_X86_64_64  .rodata.str1.1
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _Py_NegativeRefcount
// 275: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 27a: 4c 89 e2                      movq    %r12, %rdx
// 27d: ff d0                         callq   *%rax
// 27f: 49 8b 04 24                   movq    (%r12), %rax
// 283: 85 c0                         testl   %eax, %eax
// 285: 78 21                         js      0x2a8 <_JIT_ENTRY+0x2a8>
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 291: ff d0                         callq   *%rax
// 293: 49 ff 0c 24                   decq    (%r12)
// 297: 75 0f                         jne     0x2a8 <_JIT_ENTRY+0x2a8>
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _Py_Dealloc
// 2a3: 4c 89 e7                      movq    %r12, %rdi
// 2a6: ff d0                         callq   *%rax
// 2a8: 83 7c 24 08 00                cmpl    $0x0, 0x8(%rsp)
// 2ad: 0f 88 24 01 00 00             js      0x3d7 <_JIT_ENTRY+0x3d7>
// 2b3: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 2b8: 48 85 ff                      testq   %rdi, %rdi
// 2bb: 0f 84 16 01 00 00             je      0x3d7 <_JIT_ENTRY+0x3d7>
// 2c1: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _Py_NoneStruct
// 2cf: 48 39 c7                      cmpq    %rax, %rdi
// 2d2: 74 11                         je      0x2e5 <_JIT_ENTRY+0x2e5>
// 2d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d6:  R_X86_64_64  PyErr_SetHandledException
// 2de: ff d0                         callq   *%rax
// 2e0: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2e5: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 2ea: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002ec:  R_X86_64_64  _JIT_OPARG
// 2f4: f7 d2                         notl    %edx
// 2f6: 81 ca 00 00 ff ff             orl     $0xffff0000, %edx       # imm = 0xFFFF0000
// 2fc: 48 63 d2                      movslq  %edx, %rdx
// 2ff: 49 89 4c d6 f0                movq    %rcx, -0x10(%r14,%rdx,8)
// 304: 49 89 44 d6 f8                movq    %rax, -0x8(%r14,%rdx,8)
// 309: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030b:  R_X86_64_64  _JIT_CONTINUE
// 313: 48 89 df                      movq    %rbx, %rdi
// 316: 4c 89 e6                      movq    %r12, %rsi
// 319: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 31e: 48 83 c4 28                   addq    $0x28, %rsp
// 322: 5b                            popq    %rbx
// 323: 41 5c                         popq    %r12
// 325: 41 5d                         popq    %r13
// 327: 41 5e                         popq    %r14
// 329: 41 5f                         popq    %r15
// 32b: 5d                            popq    %rbp
// 32c: ff e0                         jmpq    *%rax
// 32e: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 332: e9 a8 00 00 00                jmp     0x3df <_JIT_ENTRY+0x3df>
// 337: 48 8b 45 00                   movq    (%rbp), %rax
// 33b: 48 85 c0                      testq   %rax, %rax
// 33e: 7f 22                         jg      0x362 <_JIT_ENTRY+0x362>
// 340: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000342:  R_X86_64_64  .rodata.str1.1
// 34a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034c:  R_X86_64_64  _Py_NegativeRefcount
// 354: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// 359: 48 89 ea                      movq    %rbp, %rdx
// 35c: ff d0                         callq   *%rax
// 35e: 48 8b 45 00                   movq    (%rbp), %rax
// 362: 85 c0                         testl   %eax, %eax
// 364: 78 21                         js      0x387 <_JIT_ENTRY+0x387>
// 366: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000368:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 370: ff d0                         callq   *%rax
// 372: 48 ff 4d 00                   decq    (%rbp)
// 376: 75 0f                         jne     0x387 <_JIT_ENTRY+0x387>
// 378: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037a:  R_X86_64_64  _Py_Dealloc
// 382: 48 89 ef                      movq    %rbp, %rdi
// 385: ff d0                         callq   *%rax
// 387: 49 8b 04 24                   movq    (%r12), %rax
// 38b: 48 85 c0                      testq   %rax, %rax
// 38e: 7f 22                         jg      0x3b2 <_JIT_ENTRY+0x3b2>
// 390: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000392:  R_X86_64_64  .rodata.str1.1
// 39a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039c:  R_X86_64_64  _Py_NegativeRefcount
// 3a4: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 3a9: 4c 89 e2                      movq    %r12, %rdx
// 3ac: ff d0                         callq   *%rax
// 3ae: 49 8b 04 24                   movq    (%r12), %rax
// 3b2: 85 c0                         testl   %eax, %eax
// 3b4: 78 21                         js      0x3d7 <_JIT_ENTRY+0x3d7>
// 3b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3c0: ff d0                         callq   *%rax
// 3c2: 49 ff 0c 24                   decq    (%r12)
// 3c6: 75 0f                         jne     0x3d7 <_JIT_ENTRY+0x3d7>
// 3c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ca:  R_X86_64_64  _Py_Dealloc
// 3d2: 4c 89 e7                      movq    %r12, %rdi
// 3d5: ff d0                         callq   *%rax
// 3d7: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 3db: 49 83 c6 f0                   addq    $-0x10, %r14
// 3df: 49 29 de                      subq    %rbx, %r14
// 3e2: 49 83 c6 b8                   addq    $-0x48, %r14
// 3e6: 49 c1 ee 03                   shrq    $0x3, %r14
// 3ea: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 3ee: 31 c0                         xorl    %eax, %eax
// 3f0: e9 a9 fc ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 3f5: 
static const unsigned char _CALL_LENplus_CHECK_EG_MATCH_code_body[1014] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x11, 0x03, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x9e, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x4c, 0x63, 0xf8, 0x4b, 0x8b, 0x6c, 0xfe, 0xf0, 0x4f, 0x8b, 0x64, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x61, 0x01, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x10, 0x48, 0x8d, 0x4c, 0x24, 0x20, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x88, 0x24, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x16, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd2, 0x81, 0xca, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x4c, 0xd6, 0xf0, 0x49, 0x89, 0x44, 0xd6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xfe, 0xe9, 0xa8, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xa9, 0xfc, 0xff, 0xff};
static const Hole _CALL_LENplus_CHECK_EG_MATCH_code_holes[36] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x2ec, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x30b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x342, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x34c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x368, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x37a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x392, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x39c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CHECK_EG_MATCH_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CHECK_EG_MATCH_data_holes[1];

// _CALL_LENplus_CHECK_EXC_MATCH
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CHECK_EXC_MATCH.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e7                   movq    (%r15,%r12,8), %rbp
// 68: 49 8b 46 10                   movq    0x10(%r14), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 df                      subq    %rbx, %r15
// 78: 49 83 c7 b8                   addq    $-0x48, %r15
// 7c: 49 c1 ef 03                   shrq    $0x3, %r15
// 80: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c cf                   movq    (%r15,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 c4 01 00 00             js      0x28e <_JIT_ENTRY+0x28e>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 188: 48 85 d2                      testq   %rdx, %rdx
// 18b: 0f 84 02 01 00 00             je      0x293 <_JIT_ENTRY+0x293>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a3: 29 c1                         subl    %eax, %ecx
// 1a5: 48 63 c9                      movslq  %ecx, %rcx
// 1a8: 49 89 14 cf                   movq    %rdx, (%r15,%rcx,8)
// 1ac: f7 d0                         notl    %eax
// 1ae: 48 98                         cltq
// 1b0: 49 8d 6c c7 f8                leaq    -0x8(%r15,%rax,8), %rbp
// 1b5: 49 8b 4c c7 f0                movq    -0x10(%r15,%rax,8), %rcx
// 1ba: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 1bf: 4d 8b 64 c7 f8                movq    -0x8(%r15,%rax,8), %r12
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _PyEval_CheckExceptTypeValid
// 1ce: 4c 89 f7                      movq    %r14, %rdi
// 1d1: 4c 89 e6                      movq    %r12, %rsi
// 1d4: ff d0                         callq   *%rax
// 1d6: 85 c0                         testl   %eax, %eax
// 1d8: 0f 88 bb 00 00 00             js      0x299 <_JIT_ENTRY+0x299>
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  PyErr_GivenExceptionMatches
// 1e8: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ed: 4c 89 e6                      movq    %r12, %rsi
// 1f0: ff d0                         callq   *%rax
// 1f2: 89 44 24 08                   movl    %eax, 0x8(%rsp)
// 1f6: 49 8b 04 24                   movq    (%r12), %rax
// 1fa: 48 85 c0                      testq   %rax, %rax
// 1fd: 7f 22                         jg      0x221 <_JIT_ENTRY+0x221>
// 1ff: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000201:  R_X86_64_64  .rodata.str1.1
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _Py_NegativeRefcount
// 213: be da 07 00 00                movl    $0x7da, %esi            # imm = 0x7DA
// 218: 4c 89 e2                      movq    %r12, %rdx
// 21b: ff d0                         callq   *%rax
// 21d: 49 8b 04 24                   movq    (%r12), %rax
// 221: 4f 8d 3c ef                   leaq    (%r15,%r13,8), %r15
// 225: 85 c0                         testl   %eax, %eax
// 227: 78 21                         js      0x24a <_JIT_ENTRY+0x24a>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 233: ff d0                         callq   *%rax
// 235: 49 ff 0c 24                   decq    (%r12)
// 239: 75 0f                         jne     0x24a <_JIT_ENTRY+0x24a>
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: 4c 89 e7                      movq    %r12, %rdi
// 248: ff d0                         callq   *%rax
// 24a: 83 7c 24 08 00                cmpl    $0x0, 0x8(%rsp)
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _Py_FalseStruct
// 259: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025b:  R_X86_64_64  _Py_TrueStruct
// 263: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 267: 48 89 4d 00                   movq    %rcx, (%rbp)
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _JIT_CONTINUE
// 275: 48 89 df                      movq    %rbx, %rdi
// 278: 4c 89 fe                      movq    %r15, %rsi
// 27b: 4c 89 f2                      movq    %r14, %rdx
// 27e: 48 83 c4 18                   addq    $0x18, %rsp
// 282: 5b                            popq    %rbx
// 283: 41 5c                         popq    %r12
// 285: 41 5d                         popq    %r13
// 287: 41 5e                         popq    %r14
// 289: 41 5f                         popq    %r15
// 28b: 5d                            popq    %rbp
// 28c: ff e0                         jmpq    *%rax
// 28e: 4c 89 fd                      movq    %r15, %rbp
// 291: eb 56                         jmp     0x2e9 <_JIT_ENTRY+0x2e9>
// 293: 4b 8d 2c e7                   leaq    (%r15,%r12,8), %rbp
// 297: eb 50                         jmp     0x2e9 <_JIT_ENTRY+0x2e9>
// 299: 49 8b 04 24                   movq    (%r12), %rax
// 29d: 48 85 c0                      testq   %rax, %rax
// 2a0: 7f 22                         jg      0x2c4 <_JIT_ENTRY+0x2c4>
// 2a2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a4:  R_X86_64_64  .rodata.str1.1
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  _Py_NegativeRefcount
// 2b6: be d6 07 00 00                movl    $0x7d6, %esi            # imm = 0x7D6
// 2bb: 4c 89 e2                      movq    %r12, %rdx
// 2be: ff d0                         callq   *%rax
// 2c0: 49 8b 04 24                   movq    (%r12), %rax
// 2c4: 85 c0                         testl   %eax, %eax
// 2c6: 78 21                         js      0x2e9 <_JIT_ENTRY+0x2e9>
// 2c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ca:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d2: ff d0                         callq   *%rax
// 2d4: 49 ff 0c 24                   decq    (%r12)
// 2d8: 75 0f                         jne     0x2e9 <_JIT_ENTRY+0x2e9>
// 2da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dc:  R_X86_64_64  _Py_Dealloc
// 2e4: 4c 89 e7                      movq    %r12, %rdi
// 2e7: ff d0                         callq   *%rax
// 2e9: 48 29 dd                      subq    %rbx, %rbp
// 2ec: 48 83 c5 b8                   addq    $-0x48, %rbp
// 2f0: 48 c1 ed 03                   shrq    $0x3, %rbp
// 2f4: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 2f7: 31 c0                         xorl    %eax, %eax
// 2f9: e9 9f fd ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 2fe: 
static const unsigned char _CALL_LENplus_CHECK_EXC_MATCH_code_body[767] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe7, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xc4, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x02, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xcf, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8d, 0x6c, 0xc7, 0xf8, 0x49, 0x8b, 0x4c, 0xc7, 0xf0, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x4d, 0x8b, 0x64, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xbb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xda, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x3c, 0xef, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x4d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x89, 0xfd, 0xeb, 0x56, 0x4b, 0x8d, 0x2c, 0xe7, 0xeb, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x9f, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_CHECK_EXC_MATCH_code_holes[27] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptTypeValid, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_GivenExceptionMatches, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CHECK_EXC_MATCH_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CHECK_EXC_MATCH_data_holes[1];

// _CALL_LENplus_CHECK_FUNCTION_EXACT_ARGS
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CHECK_FUNCTION_EXACT_ARGS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 6a 01 00 00             js      0x234 <_JIT_ENTRY+0x234>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 0f 84 95 00 00 00             je      0x230 <_JIT_ENTRY+0x230>
// 19b: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  _JIT_OPARG
// 1a9: 0f b7 c0                      movzwl  %ax, %eax
// 1ac: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1b1: 29 c1                         subl    %eax, %ecx
// 1b3: 48 63 c9                      movslq  %ecx, %rcx
// 1b6: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1ba: f7 d0                         notl    %eax
// 1bc: 48 98                         cltq
// 1be: 48 01 c1                      addq    %rax, %rcx
// 1c1: 49 8b 0c ce                   movq    (%r14,%rcx,8), %rcx
// 1c5: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001c7:  R_X86_64_64  PyFunction_Type
// 1cf: 48 39 51 08                   cmpq    %rdx, 0x8(%rcx)
// 1d3: 75 53                         jne     0x228 <_JIT_ENTRY+0x228>
// 1d5: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001d7:  R_X86_64_64  _JIT_OPERAND
// 1df: 39 91 88 00 00 00             cmpl    %edx, 0x88(%rcx)
// 1e5: 75 41                         jne     0x228 <_JIT_ENTRY+0x228>
// 1e7: 48 01 c0                      addq    %rax, %rax
// 1ea: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// 1ee: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001f0:  R_X86_64_64  _JIT_OPARG
// 1f8: 0f b7 d2                      movzwl  %dx, %edx
// 1fb: 49 83 3c c6 01                cmpq    $0x1, (%r14,%rax,8)
// 200: 83 da ff                      sbbl    $-0x1, %edx
// 203: 39 51 34                      cmpl    %edx, 0x34(%rcx)
// 206: 75 20                         jne     0x228 <_JIT_ENTRY+0x228>
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _JIT_CONTINUE
// 212: 48 89 df                      movq    %rbx, %rdi
// 215: 4c 89 fa                      movq    %r15, %rdx
// 218: 48 83 c4 18                   addq    $0x18, %rsp
// 21c: 5b                            popq    %rbx
// 21d: 41 5c                         popq    %r12
// 21f: 41 5d                         popq    %r13
// 221: 41 5e                         popq    %r14
// 223: 41 5f                         popq    %r15
// 225: 5d                            popq    %rbp
// 226: ff e0                         jmpq    *%rax
// 228: 49 89 f6                      movq    %rsi, %r14
// 22b: e9 45 fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 230: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 234: 49 29 de                      subq    %rbx, %r14
// 237: 49 83 c6 b8                   addq    $-0x48, %r14
// 23b: 49 c1 ee 03                   shrq    $0x3, %r14
// 23f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 243: 31 c0                         xorl    %eax, %eax
// 245: e9 53 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 24a: 
static const unsigned char _CALL_LENplus_CHECK_FUNCTION_EXACT_ARGS_code_body[587] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x6a, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x95, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc1, 0x49, 0x8b, 0x0c, 0xce, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x51, 0x08, 0x75, 0x53, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x91, 0x88, 0x00, 0x00, 0x00, 0x75, 0x41, 0x48, 0x01, 0xc0, 0x48, 0x8b, 0x49, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x49, 0x83, 0x3c, 0xc6, 0x01, 0x83, 0xda, 0xff, 0x39, 0x51, 0x34, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xf6, 0xe9, 0x45, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x53, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_CHECK_FUNCTION_EXACT_ARGS_code_holes[18] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_Type, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CHECK_FUNCTION_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CHECK_FUNCTION_EXACT_ARGS_data_holes[1];

// _CALL_LENplus_CHECK_MANAGED_OBJECT_HAS_VALUES
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CHECK_MANAGED_OBJECT_HAS_VALUES.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 36 01 00 00             js      0x200 <_JIT_ENTRY+0x200>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 65                         je      0x1fc <_JIT_ENTRY+0x1fc>
// 197: 4f 8d 2c e6                   leaq    (%r14,%r12,8), %r13
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 49 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %rdi
// 1bf: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// 1c3: 75 14                         jne     0x1d9 <_JIT_ENTRY+0x1d9>
// 1c5: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 1d3: ff d0                         callq   *%rax
// 1d5: 84 c0                         testb   %al, %al
// 1d7: 74 3d                         je      0x216 <_JIT_ENTRY+0x216>
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _JIT_CONTINUE
// 1e3: 48 89 df                      movq    %rbx, %rdi
// 1e6: 4c 89 ee                      movq    %r13, %rsi
// 1e9: 4c 89 fa                      movq    %r15, %rdx
// 1ec: 48 83 c4 18                   addq    $0x18, %rsp
// 1f0: 5b                            popq    %rbx
// 1f1: 41 5c                         popq    %r12
// 1f3: 41 5d                         popq    %r13
// 1f5: 41 5e                         popq    %r14
// 1f7: 41 5f                         popq    %r15
// 1f9: 5d                            popq    %rbp
// 1fa: ff e0                         jmpq    *%rax
// 1fc: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 200: 49 29 de                      subq    %rbx, %r14
// 203: 49 83 c6 b8                   addq    $-0x48, %r14
// 207: 49 c1 ee 03                   shrq    $0x3, %r14
// 20b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 20f: 31 c0                         xorl    %eax, %eax
// 211: e9 87 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 216: 4d 89 ee                      movq    %r13, %r14
// 219: e9 57 fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 21e: 
static const unsigned char _CALL_LENplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_body[543] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x36, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x65, 0x4f, 0x8d, 0x2c, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc6, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x14, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x84, 0xc0, 0x74, 0x3d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x87, 0xfe, 0xff, 0xff, 0x4d, 0x89, 0xee, 0xe9, 0x57, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_holes[1];

// _CALL_LENplus_CHECK_PEP_523
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CHECK_PEP_523.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 06 01 00 00             js      0x1d0 <_JIT_ENTRY+0x1d0>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 187: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 18c: 48 85 c9                      testq   %rcx, %rcx
// 18f: 74 3c                         je      0x1cd <_JIT_ENTRY+0x1cd>
// 191: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 195: 48 89 08                      movq    %rcx, (%rax)
// 198: 49 8b 47 10                   movq    0x10(%r15), %rax
// 19c: 48 83 b8 20 08 00 00 00       cmpq    $0x0, 0x820(%rax)
// 1a4: 0f 85 cb fe ff ff             jne     0x75 <_JIT_ENTRY+0x75>
// 1aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ac:  R_X86_64_64  _JIT_CONTINUE
// 1b4: 48 89 df                      movq    %rbx, %rdi
// 1b7: 4c 89 f6                      movq    %r14, %rsi
// 1ba: 4c 89 fa                      movq    %r15, %rdx
// 1bd: 48 83 c4 18                   addq    $0x18, %rsp
// 1c1: 5b                            popq    %rbx
// 1c2: 41 5c                         popq    %r12
// 1c4: 41 5d                         popq    %r13
// 1c6: 41 5e                         popq    %r14
// 1c8: 41 5f                         popq    %r15
// 1ca: 5d                            popq    %rbp
// 1cb: ff e0                         jmpq    *%rax
// 1cd: 49 89 c6                      movq    %rax, %r14
// 1d0: 49 29 de                      subq    %rbx, %r14
// 1d3: 49 83 c6 b8                   addq    $-0x48, %r14
// 1d7: 49 c1 ee 03                   shrq    $0x3, %r14
// 1db: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1df: 31 c0                         xorl    %eax, %eax
// 1e1: e9 b7 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 1e6: 
static const unsigned char _CALL_LENplus_CHECK_PEP_523_code_body[487] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x06, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x3c, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x83, 0xb8, 0x20, 0x08, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xcb, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xb7, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_CHECK_PEP_523_code_holes[14] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CHECK_PEP_523_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CHECK_PEP_523_data_holes[1];

// _CALL_LENplus_CHECK_STACK_SPACE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CHECK_STACK_SPACE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 2a 01 00 00             js      0x1f4 <_JIT_ENTRY+0x1f4>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 187: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 18c: 48 85 c9                      testq   %rcx, %rcx
// 18f: 74 60                         je      0x1f1 <_JIT_ENTRY+0x1f1>
// 191: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 195: 48 89 08                      movq    %rcx, (%rax)
// 198: 49 8b 87 00 01 00 00          movq    0x100(%r15), %rax
// 19f: 48 85 c0                      testq   %rax, %rax
// 1a2: 74 45                         je      0x1e9 <_JIT_ENTRY+0x1e9>
// 1a4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a6:  R_X86_64_64  _JIT_OPARG
// 1ae: 0f b7 c9                      movzwl  %cx, %ecx
// 1b1: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1b6: 29 ca                         subl    %ecx, %edx
// 1b8: 48 63 d2                      movslq  %edx, %rdx
// 1bb: f7 d1                         notl    %ecx
// 1bd: 48 63 c9                      movslq  %ecx, %rcx
// 1c0: 48 01 d1                      addq    %rdx, %rcx
// 1c3: 49 8b 0c ce                   movq    (%r14,%rcx,8), %rcx
// 1c7: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// 1cb: 48 63 49 4c                   movslq  0x4c(%rcx), %rcx
// 1cf: 49 8b 97 08 01 00 00          movq    0x108(%r15), %rdx
// 1d6: 48 29 c2                      subq    %rax, %rdx
// 1d9: 48 c1 fa 03                   sarq    $0x3, %rdx
// 1dd: 48 39 ca                      cmpq    %rcx, %rdx
// 1e0: 7e 07                         jle     0x1e9 <_JIT_ENTRY+0x1e9>
// 1e2: 41 83 7f 24 02                cmpl    $0x2, 0x24(%r15)
// 1e7: 7d 21                         jge     0x20a <_JIT_ENTRY+0x20a>
// 1e9: 49 89 f6                      movq    %rsi, %r14
// 1ec: e9 84 fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 1f1: 49 89 c6                      movq    %rax, %r14
// 1f4: 49 29 de                      subq    %rbx, %r14
// 1f7: 49 83 c6 b8                   addq    $-0x48, %r14
// 1fb: 49 c1 ee 03                   shrq    $0x3, %r14
// 1ff: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 203: 31 c0                         xorl    %eax, %eax
// 205: e9 93 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _JIT_CONTINUE
// 214: 48 89 df                      movq    %rbx, %rdi
// 217: 4c 89 fa                      movq    %r15, %rdx
// 21a: 48 83 c4 18                   addq    $0x18, %rsp
// 21e: 5b                            popq    %rbx
// 21f: 41 5c                         popq    %r12
// 221: 41 5d                         popq    %r13
// 223: 41 5e                         popq    %r14
// 225: 41 5f                         popq    %r15
// 227: 5d                            popq    %rbp
// 228: ff e0                         jmpq    *%rax
// 22a: 
static const unsigned char _CALL_LENplus_CHECK_STACK_SPACE_code_body[555] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x2a, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x60, 0x4b, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x87, 0x00, 0x01, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x45, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xd1, 0x49, 0x8b, 0x0c, 0xce, 0x48, 0x8b, 0x49, 0x30, 0x48, 0x63, 0x49, 0x4c, 0x49, 0x8b, 0x97, 0x08, 0x01, 0x00, 0x00, 0x48, 0x29, 0xc2, 0x48, 0xc1, 0xfa, 0x03, 0x48, 0x39, 0xca, 0x7e, 0x07, 0x41, 0x83, 0x7f, 0x24, 0x02, 0x7d, 0x21, 0x49, 0x89, 0xf6, 0xe9, 0x84, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x93, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_CHECK_STACK_SPACE_code_holes[15] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CHECK_STACK_SPACE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CHECK_STACK_SPACE_data_holes[1];

// _CALL_LENplus_CHECK_VALIDITY
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CHECK_VALIDITY.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 08 01 00 00             js      0x1d2 <_JIT_ENTRY+0x1d2>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 187: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 18c: 48 85 c9                      testq   %rcx, %rcx
// 18f: 74 3e                         je      0x1cf <_JIT_ENTRY+0x1cf>
// 191: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 195: 48 89 08                      movq    %rcx, (%rax)
// 198: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019a:  R_X86_64_64  _JIT_EXECUTOR
// 1a2: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1a6: 0f 84 c9 fe ff ff             je      0x75 <_JIT_ENTRY+0x75>
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _JIT_CONTINUE
// 1b6: 48 89 df                      movq    %rbx, %rdi
// 1b9: 4c 89 f6                      movq    %r14, %rsi
// 1bc: 4c 89 fa                      movq    %r15, %rdx
// 1bf: 48 83 c4 18                   addq    $0x18, %rsp
// 1c3: 5b                            popq    %rbx
// 1c4: 41 5c                         popq    %r12
// 1c6: 41 5d                         popq    %r13
// 1c8: 41 5e                         popq    %r14
// 1ca: 41 5f                         popq    %r15
// 1cc: 5d                            popq    %rbp
// 1cd: ff e0                         jmpq    *%rax
// 1cf: 49 89 c6                      movq    %rax, %r14
// 1d2: 49 29 de                      subq    %rbx, %r14
// 1d5: 49 83 c6 b8                   addq    $-0x48, %r14
// 1d9: 49 c1 ee 03                   shrq    $0x3, %r14
// 1dd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1e1: 31 c0                         xorl    %eax, %eax
// 1e3: e9 b5 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 1e8: 
static const unsigned char _CALL_LENplus_CHECK_VALIDITY_code_body[489] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x08, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x3e, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0xc9, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xb5, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_CHECK_VALIDITY_code_holes[15] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CHECK_VALIDITY_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CHECK_VALIDITY_data_holes[1];

// _CALL_LENplus_COMPARE_OP
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_COMPARE_OP.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 7f 02 00 00             js      0x346 <_JIT_ENTRY+0x346>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 0c 24                   movq    (%rsp), %rcx
// 17e: 48 85 c9                      testq   %rcx, %rcx
// 181: 0f 84 b6 01 00 00             je      0x33d <_JIT_ENTRY+0x33d>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 d0                      movzwl  %ax, %edx
// 194: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
// 199: 29 d0                         subl    %edx, %eax
// 19b: 48 98                         cltq
// 19d: 49 89 0c c6                   movq    %rcx, (%r14,%rax,8)
// 1a1: 89 d0                         movl    %edx, %eax
// 1a3: f7 d0                         notl    %eax
// 1a5: 48 98                         cltq
// 1a7: 49 8b 6c c6 f0                movq    -0x10(%r14,%rax,8), %rbp
// 1ac: 48 89 04 24                   movq    %rax, (%rsp)
// 1b0: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 1b5: c1 ea 05                      shrl    $0x5, %edx
// 1b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ba:  R_X86_64_64  PyObject_RichCompare
// 1c2: 48 89 ef                      movq    %rbp, %rdi
// 1c5: 4c 89 ee                      movq    %r13, %rsi
// 1c8: ff d0                         callq   *%rax
// 1ca: 49 89 c4                      movq    %rax, %r12
// 1cd: 48 8b 45 00                   movq    (%rbp), %rax
// 1d1: 48 85 c0                      testq   %rax, %rax
// 1d4: 7f 22                         jg      0x1f8 <_JIT_ENTRY+0x1f8>
// 1d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d8:  R_X86_64_64  .rodata.str1.1
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _Py_NegativeRefcount
// 1ea: be 38 07 00 00                movl    $0x738, %esi            # imm = 0x738
// 1ef: 48 89 ea                      movq    %rbp, %rdx
// 1f2: ff d0                         callq   *%rax
// 1f4: 48 8b 45 00                   movq    (%rbp), %rax
// 1f8: 85 c0                         testl   %eax, %eax
// 1fa: 78 21                         js      0x21d <_JIT_ENTRY+0x21d>
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 206: ff d0                         callq   *%rax
// 208: 48 ff 4d 00                   decq    (%rbp)
// 20c: 75 0f                         jne     0x21d <_JIT_ENTRY+0x21d>
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_Dealloc
// 218: 48 89 ef                      movq    %rbp, %rdi
// 21b: ff d0                         callq   *%rax
// 21d: 49 8b 45 00                   movq    (%r13), %rax
// 221: 48 85 c0                      testq   %rax, %rax
// 224: 7f 22                         jg      0x248 <_JIT_ENTRY+0x248>
// 226: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000228:  R_X86_64_64  .rodata.str1.1
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _Py_NegativeRefcount
// 23a: be 39 07 00 00                movl    $0x739, %esi            # imm = 0x739
// 23f: 4c 89 ea                      movq    %r13, %rdx
// 242: ff d0                         callq   *%rax
// 244: 49 8b 45 00                   movq    (%r13), %rax
// 248: 85 c0                         testl   %eax, %eax
// 24a: 78 21                         js      0x26d <_JIT_ENTRY+0x26d>
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 256: ff d0                         callq   *%rax
// 258: 49 ff 4d 00                   decq    (%r13)
// 25c: 75 0f                         jne     0x26d <_JIT_ENTRY+0x26d>
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  _Py_Dealloc
// 268: 4c 89 ef                      movq    %r13, %rdi
// 26b: ff d0                         callq   *%rax
// 26d: 48 8b 04 24                   movq    (%rsp), %rax
// 271: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 275: 49 83 c5 f0                   addq    $-0x10, %r13
// 279: 4d 85 e4                      testq   %r12, %r12
// 27c: 0f 84 c1 00 00 00             je      0x343 <_JIT_ENTRY+0x343>
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _JIT_OPARG
// 28c: a8 10                         testb   $0x10, %al
// 28e: 74 7d                         je      0x30d <_JIT_ENTRY+0x30d>
// 290: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000292:  R_X86_64_64  PyObject_IsTrue
// 29a: 4c 89 e7                      movq    %r12, %rdi
// 29d: ff d0                         callq   *%rax
// 29f: 89 c5                         movl    %eax, %ebp
// 2a1: 49 8b 04 24                   movq    (%r12), %rax
// 2a5: 48 85 c0                      testq   %rax, %rax
// 2a8: 7f 22                         jg      0x2cc <_JIT_ENTRY+0x2cc>
// 2aa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ac:  R_X86_64_64  .rodata.str1.1
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _Py_NegativeRefcount
// 2be: be 3d 07 00 00                movl    $0x73d, %esi            # imm = 0x73D
// 2c3: 4c 89 e2                      movq    %r12, %rdx
// 2c6: ff d0                         callq   *%rax
// 2c8: 49 8b 04 24                   movq    (%r12), %rax
// 2cc: 85 c0                         testl   %eax, %eax
// 2ce: 78 21                         js      0x2f1 <_JIT_ENTRY+0x2f1>
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2da: ff d0                         callq   *%rax
// 2dc: 49 ff 0c 24                   decq    (%r12)
// 2e0: 75 0f                         jne     0x2f1 <_JIT_ENTRY+0x2f1>
// 2e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e4:  R_X86_64_64  _Py_Dealloc
// 2ec: 4c 89 e7                      movq    %r12, %rdi
// 2ef: ff d0                         callq   *%rax
// 2f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f3:  R_X86_64_64  _Py_FalseStruct
// 2fb: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000002fd:  R_X86_64_64  _Py_TrueStruct
// 305: 85 ed                         testl   %ebp, %ebp
// 307: 4c 0f 44 e0                   cmoveq  %rax, %r12
// 30b: 78 36                         js      0x343 <_JIT_ENTRY+0x343>
// 30d: 48 8b 04 24                   movq    (%rsp), %rax
// 311: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 315: 48 83 c6 f8                   addq    $-0x8, %rsi
// 319: 4d 89 65 00                   movq    %r12, (%r13)
// 31d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031f:  R_X86_64_64  _JIT_CONTINUE
// 327: 48 89 df                      movq    %rbx, %rdi
// 32a: 4c 89 fa                      movq    %r15, %rdx
// 32d: 48 83 c4 08                   addq    $0x8, %rsp
// 331: 5b                            popq    %rbx
// 332: 41 5c                         popq    %r12
// 334: 41 5d                         popq    %r13
// 336: 41 5e                         popq    %r14
// 338: 41 5f                         popq    %r15
// 33a: 5d                            popq    %rbp
// 33b: ff e0                         jmpq    *%rax
// 33d: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 341: eb 03                         jmp     0x346 <_JIT_ENTRY+0x346>
// 343: 4d 89 ee                      movq    %r13, %r14
// 346: 49 29 de                      subq    %rbx, %r14
// 349: 49 83 c6 b8                   addq    $-0x48, %r14
// 34d: 49 c1 ee 03                   shrq    $0x3, %r14
// 351: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 355: 31 c0                         xorl    %eax, %eax
// 357: e9 40 fd ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 35c: 
static const unsigned char _CALL_LENplus_COMPARE_OP_code_body[861] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x7f, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb6, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd0, 0x48, 0x98, 0x49, 0x89, 0x0c, 0xc6, 0x89, 0xd0, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x6c, 0xc6, 0xf0, 0x48, 0x89, 0x04, 0x24, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0xc1, 0xea, 0x05, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x83, 0xc5, 0xf0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xc1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x10, 0x74, 0x7d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3d, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe0, 0x78, 0x36, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x4d, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x40, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_COMPARE_OP_code_holes[32] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_RichCompare, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_COMPARE_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_COMPARE_OP_data_holes[1];

// _CALL_LENplus_COMPARE_OP_FLOAT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_COMPARE_OP_FLOAT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 39                         je      0xaf <_JIT_ENTRY+0xaf>
// 76: 4c 89 f0                      movq    %r14, %rax
// 79: 48 29 d8                      subq    %rbx, %rax
// 7c: 48 83 c0 b8                   addq    $-0x48, %rax
// 80: 48 c1 e8 03                   shrq    $0x3, %rax
// 84: 89 43 40                      movl    %eax, 0x40(%rbx)
// 87: 48 8b 03                      movq    (%rbx), %rax
// 8a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008c:  R_X86_64_64  _JIT_TARGET
// 94: 89 c9                         movl    %ecx, %ecx
// 96: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 9a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a0: 48 83 c4 18                   addq    $0x18, %rsp
// a4: 5b                            popq    %rbx
// a5: 41 5c                         popq    %r12
// a7: 41 5d                         popq    %r13
// a9: 41 5e                         popq    %r14
// ab: 41 5f                         popq    %r15
// ad: 5d                            popq    %rbp
// ae: c3                            retq
// af: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// b4: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  PyObject_Size
// c2: 4c 89 ef                      movq    %r13, %rdi
// c5: ff d0                         callq   *%rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 0f 88 fd 01 00 00             js      0x2cd <_JIT_ENTRY+0x2cd>
// d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d2:  R_X86_64_64  PyLong_FromSsize_t
// da: 48 89 c7                      movq    %rax, %rdi
// dd: ff d1                         callq   *%rcx
// df: 48 89 04 24                   movq    %rax, (%rsp)
// e3: 48 8b 45 00                   movq    (%rbp), %rax
// e7: 48 85 c0                      testq   %rax, %rax
// ea: 7f 22                         jg      0x10e <_JIT_ENTRY+0x10e>
// ec: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ee:  R_X86_64_64  .rodata.str1.1
// f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f8:  R_X86_64_64  _Py_NegativeRefcount
// 100: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 105: 48 89 ea                      movq    %rbp, %rdx
// 108: ff d0                         callq   *%rax
// 10a: 48 8b 45 00                   movq    (%rbp), %rax
// 10e: 85 c0                         testl   %eax, %eax
// 110: 78 21                         js      0x133 <_JIT_ENTRY+0x133>
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11c: ff d0                         callq   *%rax
// 11e: 48 ff 4d 00                   decq    (%rbp)
// 122: 75 0f                         jne     0x133 <_JIT_ENTRY+0x133>
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  _Py_Dealloc
// 12e: 48 89 ef                      movq    %rbp, %rdi
// 131: ff d0                         callq   *%rax
// 133: 49 8b 45 00                   movq    (%r13), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 4c 89 ea                      movq    %r13, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 49 8b 45 00                   movq    (%r13), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 4d 00                   decq    (%r13)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 4c 89 ef                      movq    %r13, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 34 24                   movq    (%rsp), %rsi
// 187: 48 85 f6                      testq   %rsi, %rsi
// 18a: 0f 84 39 01 00 00             je      0x2c9 <_JIT_ENTRY+0x2c9>
// 190: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 194: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c9                      movzwl  %cx, %ecx
// 1a1: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1a6: 29 ca                         subl    %ecx, %edx
// 1a8: 48 63 d2                      movslq  %edx, %rdx
// 1ab: 49 89 34 d6                   movq    %rsi, (%r14,%rdx,8)
// 1af: f7 d1                         notl    %ecx
// 1b1: 4c 63 f9                      movslq  %ecx, %r15
// 1b4: 4f 8b 64 fe f0                movq    -0x10(%r14,%r15,8), %r12
// 1b9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bb:  R_X86_64_64  PyFloat_Type
// 1c3: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 1c8: 0f 85 ab fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1ce: 4f 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %r13
// 1d3: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 1d7: 0f 85 9c fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1dd: f2 41 0f 10 44 24 10          movsd   0x10(%r12), %xmm0       # xmm0 = mem[0],zero
// 1e4: f2 0f 11 04 24                movsd   %xmm0, (%rsp)
// 1e9: f2 41 0f 10 45 10             movsd   0x10(%r13), %xmm0       # xmm0 = mem[0],zero
// 1ef: f2 0f 11 44 24 08             movsd   %xmm0, 0x8(%rsp)
// 1f5: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1fb: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001fd:  R_X86_64_64  PyInterpreterState_Get
// 205: 75 1e                         jne     0x225 <_JIT_ENTRY+0x225>
// 207: ff d5                         callq   *%rbp
// 209: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 210: 49 ff 0c 24                   decq    (%r12)
// 214: 75 0f                         jne     0x225 <_JIT_ENTRY+0x225>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _PyFloat_ExactDealloc
// 220: 4c 89 e7                      movq    %r12, %rdi
// 223: ff d0                         callq   *%rax
// 225: 4f 8d 24 fe                   leaq    (%r14,%r15,8), %r12
// 229: 49 83 c4 f8                   addq    $-0x8, %r12
// 22d: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 232: 75 1e                         jne     0x252 <_JIT_ENTRY+0x252>
// 234: ff d5                         callq   *%rbp
// 236: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 23d: 49 ff 4d 00                   decq    (%r13)
// 241: 75 0f                         jne     0x252 <_JIT_ENTRY+0x252>
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _PyFloat_ExactDealloc
// 24d: 4c 89 ef                      movq    %r13, %rdi
// 250: ff d0                         callq   *%rax
// 252: 31 c0                         xorl    %eax, %eax
// 254: f2 0f 10 04 24                movsd   (%rsp), %xmm0           # xmm0 = mem[0],zero
// 259: f2 0f 10 4c 24 08             movsd   0x8(%rsp), %xmm1        # xmm1 = mem[0],zero
// 25f: 66 0f 2e c1                   ucomisd %xmm1, %xmm0
// 263: 0f 93 c0                      setae   %al
// 266: 01 c0                         addl    %eax, %eax
// 268: 31 c9                         xorl    %ecx, %ecx
// 26a: 66 0f 2e c8                   ucomisd %xmm0, %xmm1
// 26e: 0f 93 c1                      setae   %cl
// 271: 09 c1                         orl     %eax, %ecx
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _JIT_OPARG
// 27d: 0f b7 c0                      movzwl  %ax, %eax
// 280: 0f a3 c8                      btl     %ecx, %eax
// 283: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000285:  R_X86_64_64  _Py_FalseStruct
// 28d: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000028f:  R_X86_64_64  _Py_TrueStruct
// 297: 48 0f 43 d1                   cmovaeq %rcx, %rdx
// 29b: f7 d0                         notl    %eax
// 29d: 48 98                         cltq
// 29f: 49 89 54 c6 f0                movq    %rdx, -0x10(%r14,%rax,8)
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _JIT_CONTINUE
// 2ae: 48 89 df                      movq    %rbx, %rdi
// 2b1: 4c 89 e6                      movq    %r12, %rsi
// 2b4: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2b9: 48 83 c4 18                   addq    $0x18, %rsp
// 2bd: 5b                            popq    %rbx
// 2be: 41 5c                         popq    %r12
// 2c0: 41 5d                         popq    %r13
// 2c2: 41 5e                         popq    %r14
// 2c4: 41 5f                         popq    %r15
// 2c6: 5d                            popq    %rbp
// 2c7: ff e0                         jmpq    *%rax
// 2c9: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 2cd: 49 29 de                      subq    %rbx, %r14
// 2d0: 49 83 c6 b8                   addq    $-0x48, %r14
// 2d4: 49 c1 ee 03                   shrq    $0x3, %r14
// 2d8: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2dc: 31 c0                         xorl    %eax, %eax
// 2de: e9 bd fd ff ff                jmp     0xa0 <_JIT_ENTRY+0xa0>
// 2e3: 
static const unsigned char _CALL_LENplus_COMPARE_OP_FLOAT_code_body[740] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xfd, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x39, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd6, 0xf7, 0xd1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x64, 0xfe, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0xab, 0xfe, 0xff, 0xff, 0x4f, 0x8b, 0x6c, 0xfe, 0xf8, 0x49, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0x9c, 0xfe, 0xff, 0xff, 0xf2, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0xf2, 0x0f, 0x11, 0x04, 0x24, 0xf2, 0x41, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x08, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4f, 0x8d, 0x24, 0xfe, 0x49, 0x83, 0xc4, 0xf8, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x31, 0xc0, 0xf2, 0x0f, 0x10, 0x04, 0x24, 0xf2, 0x0f, 0x10, 0x4c, 0x24, 0x08, 0x66, 0x0f, 0x2e, 0xc1, 0x0f, 0x93, 0xc0, 0x01, 0xc0, 0x31, 0xc9, 0x66, 0x0f, 0x2e, 0xc8, 0x0f, 0x93, 0xc1, 0x09, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x0f, 0xa3, 0xc8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xd1, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x89, 0x54, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xbd, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_COMPARE_OP_FLOAT_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_COMPARE_OP_FLOAT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_COMPARE_OP_FLOAT_data_holes[1];

// _CALL_LENplus_COMPARE_OP_INT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_COMPARE_OP_INT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 39                         je      0xaf <_JIT_ENTRY+0xaf>
// 76: 4c 89 f0                      movq    %r14, %rax
// 79: 48 29 d8                      subq    %rbx, %rax
// 7c: 48 83 c0 b8                   addq    $-0x48, %rax
// 80: 48 c1 e8 03                   shrq    $0x3, %rax
// 84: 89 43 40                      movl    %eax, 0x40(%rbx)
// 87: 48 8b 03                      movq    (%rbx), %rax
// 8a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008c:  R_X86_64_64  _JIT_TARGET
// 94: 89 c9                         movl    %ecx, %ecx
// 96: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 9a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a0: 48 83 c4 28                   addq    $0x28, %rsp
// a4: 5b                            popq    %rbx
// a5: 41 5c                         popq    %r12
// a7: 41 5d                         popq    %r13
// a9: 41 5e                         popq    %r14
// ab: 41 5f                         popq    %r15
// ad: 5d                            popq    %rbp
// ae: c3                            retq
// af: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// b4: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  PyObject_Size
// c2: 4c 89 ef                      movq    %r13, %rdi
// c5: ff d0                         callq   *%rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 0f 88 52 02 00 00             js      0x322 <_JIT_ENTRY+0x322>
// d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d2:  R_X86_64_64  PyLong_FromSsize_t
// da: 48 89 c7                      movq    %rax, %rdi
// dd: ff d1                         callq   *%rcx
// df: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// e4: 48 8b 45 00                   movq    (%rbp), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7f 22                         jg      0x10f <_JIT_ENTRY+0x10f>
// ed: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ef:  R_X86_64_64  .rodata.str1.1
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_NegativeRefcount
// 101: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 106: 48 89 ea                      movq    %rbp, %rdx
// 109: ff d0                         callq   *%rax
// 10b: 48 8b 45 00                   movq    (%rbp), %rax
// 10f: 85 c0                         testl   %eax, %eax
// 111: 78 21                         js      0x134 <_JIT_ENTRY+0x134>
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11d: ff d0                         callq   *%rax
// 11f: 48 ff 4d 00                   decq    (%rbp)
// 123: 75 0f                         jne     0x134 <_JIT_ENTRY+0x134>
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_Dealloc
// 12f: 48 89 ef                      movq    %rbp, %rdi
// 132: ff d0                         callq   *%rax
// 134: 49 8b 45 00                   movq    (%r13), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 156: 4c 89 ea                      movq    %r13, %rdx
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 45 00                   movq    (%r13), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 78 21                         js      0x184 <_JIT_ENTRY+0x184>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 4d 00                   decq    (%r13)
// 173: 75 0f                         jne     0x184 <_JIT_ENTRY+0x184>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 ef                      movq    %r13, %rdi
// 182: ff d0                         callq   *%rax
// 184: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 189: 48 85 f6                      testq   %rsi, %rsi
// 18c: 0f 84 8c 01 00 00             je      0x31e <_JIT_ENTRY+0x31e>
// 192: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 196: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000198:  R_X86_64_64  _JIT_OPARG
// 1a0: 0f b7 c9                      movzwl  %cx, %ecx
// 1a3: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1a8: 29 ca                         subl    %ecx, %edx
// 1aa: 48 63 d2                      movslq  %edx, %rdx
// 1ad: 49 89 34 d6                   movq    %rsi, (%r14,%rdx,8)
// 1b1: f7 d1                         notl    %ecx
// 1b3: 4c 63 f9                      movslq  %ecx, %r15
// 1b6: 4f 8b 64 fe f0                movq    -0x10(%r14,%r15,8), %r12
// 1bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bd:  R_X86_64_64  PyLong_Type
// 1c5: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 1ca: 0f 85 a9 fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1d0: 4f 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %r13
// 1d5: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 1d9: 0f 85 9a fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1df: 49 8b 6c 24 10                movq    0x10(%r12), %rbp
// 1e4: 48 83 fd 0f                   cmpq    $0xf, %rbp
// 1e8: 0f 87 8b fe ff ff             ja      0x79 <_JIT_ENTRY+0x79>
// 1ee: 49 8b 4d 10                   movq    0x10(%r13), %rcx
// 1f2: 48 83 f9 0f                   cmpq    $0xf, %rcx
// 1f6: 0f 87 7d fe ff ff             ja      0x79 <_JIT_ENTRY+0x79>
// 1fc: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 201: 41 8b 44 24 18                movl    0x18(%r12), %eax
// 206: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 20b: 41 8b 45 18                   movl    0x18(%r13), %eax
// 20f: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 214: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 21a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021c:  R_X86_64_64  PyInterpreterState_Get
// 224: 75 3c                         jne     0x262 <_JIT_ENTRY+0x262>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  PyInterpreterState_Get
// 230: ff d0                         callq   *%rax
// 232: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 239: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023b:  R_X86_64_64  PyInterpreterState_Get
// 243: 49 ff 0c 24                   decq    (%r12)
// 247: 75 19                         jne     0x262 <_JIT_ENTRY+0x262>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  PyObject_Free
// 253: 4c 89 e7                      movq    %r12, %rdi
// 256: ff d0                         callq   *%rax
// 258: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025a:  R_X86_64_64  PyInterpreterState_Get
// 262: 4f 8d 24 fe                   leaq    (%r14,%r15,8), %r12
// 266: 49 83 c4 f8                   addq    $-0x8, %r12
// 26a: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 26f: 75 1e                         jne     0x28f <_JIT_ENTRY+0x28f>
// 271: ff d1                         callq   *%rcx
// 273: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 27a: 49 ff 4d 00                   decq    (%r13)
// 27e: 75 0f                         jne     0x28f <_JIT_ENTRY+0x28f>
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  PyObject_Free
// 28a: 4c 89 ef                      movq    %r13, %rdi
// 28d: ff d0                         callq   *%rax
// 28f: 83 e5 03                      andl    $0x3, %ebp
// 292: b8 01 00 00 00                movl    $0x1, %eax
// 297: b9 01 00 00 00                movl    $0x1, %ecx
// 29c: 48 29 e9                      subq    %rbp, %rcx
// 29f: 48 0f af 4c 24 10             imulq   0x10(%rsp), %rcx
// 2a5: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2aa: 83 e2 03                      andl    $0x3, %edx
// 2ad: 48 29 d0                      subq    %rdx, %rax
// 2b0: 48 0f af 44 24 18             imulq   0x18(%rsp), %rax
// 2b6: 31 d2                         xorl    %edx, %edx
// 2b8: 31 f6                         xorl    %esi, %esi
// 2ba: 48 39 c1                      cmpq    %rax, %rcx
// 2bd: 0f 9d c2                      setge   %dl
// 2c0: 40 0f 9e c6                   setle   %sil
// 2c4: 01 d2                         addl    %edx, %edx
// 2c6: 09 d6                         orl     %edx, %esi
// 2c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ca:  R_X86_64_64  _JIT_OPARG
// 2d2: 0f b7 c0                      movzwl  %ax, %eax
// 2d5: 0f a3 f0                      btl     %esi, %eax
// 2d8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002da:  R_X86_64_64  _Py_FalseStruct
// 2e2: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002e4:  R_X86_64_64  _Py_TrueStruct
// 2ec: 48 0f 43 d1                   cmovaeq %rcx, %rdx
// 2f0: f7 d0                         notl    %eax
// 2f2: 48 98                         cltq
// 2f4: 49 89 54 c6 f0                movq    %rdx, -0x10(%r14,%rax,8)
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _JIT_CONTINUE
// 303: 48 89 df                      movq    %rbx, %rdi
// 306: 4c 89 e6                      movq    %r12, %rsi
// 309: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 30e: 48 83 c4 28                   addq    $0x28, %rsp
// 312: 5b                            popq    %rbx
// 313: 41 5c                         popq    %r12
// 315: 41 5d                         popq    %r13
// 317: 41 5e                         popq    %r14
// 319: 41 5f                         popq    %r15
// 31b: 5d                            popq    %rbp
// 31c: ff e0                         jmpq    *%rax
// 31e: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 322: 49 29 de                      subq    %rbx, %r14
// 325: 49 83 c6 b8                   addq    $-0x48, %r14
// 329: 49 c1 ee 03                   shrq    $0x3, %r14
// 32d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 331: 31 c0                         xorl    %eax, %eax
// 333: e9 68 fd ff ff                jmp     0xa0 <_JIT_ENTRY+0xa0>
// 338: 
static const unsigned char _CALL_LENplus_COMPARE_OP_INT_code_body[825] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x52, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x8c, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd6, 0xf7, 0xd1, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x64, 0xfe, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0xa9, 0xfe, 0xff, 0xff, 0x4f, 0x8b, 0x6c, 0xfe, 0xf8, 0x49, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0x9a, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x83, 0xfd, 0x0f, 0x0f, 0x87, 0x8b, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x4d, 0x10, 0x48, 0x83, 0xf9, 0x0f, 0x0f, 0x87, 0x7d, 0xfe, 0xff, 0xff, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x41, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0x8b, 0x45, 0x18, 0x48, 0x89, 0x44, 0x24, 0x18, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xfe, 0x49, 0x83, 0xc4, 0xf8, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x83, 0xe5, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x48, 0x29, 0xe9, 0x48, 0x0f, 0xaf, 0x4c, 0x24, 0x10, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x83, 0xe2, 0x03, 0x48, 0x29, 0xd0, 0x48, 0x0f, 0xaf, 0x44, 0x24, 0x18, 0x31, 0xd2, 0x31, 0xf6, 0x48, 0x39, 0xc1, 0x0f, 0x9d, 0xc2, 0x40, 0x0f, 0x9e, 0xc6, 0x01, 0xd2, 0x09, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x0f, 0xa3, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xd1, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x89, 0x54, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x68, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_COMPARE_OP_INT_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_COMPARE_OP_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_COMPARE_OP_INT_data_holes[1];

// _CALL_LENplus_COMPARE_OP_STR
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_COMPARE_OP_STR.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 39                         je      0xae <_JIT_ENTRY+0xae>
// 75: 4c 89 f0                      movq    %r14, %rax
// 78: 48 29 d8                      subq    %rbx, %rax
// 7b: 48 83 c0 b8                   addq    $-0x48, %rax
// 7f: 48 c1 e8 03                   shrq    $0x3, %rax
// 83: 89 43 40                      movl    %eax, 0x40(%rbx)
// 86: 48 8b 03                      movq    (%rbx), %rax
// 89: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008b:  R_X86_64_64  _JIT_TARGET
// 93: 89 c9                         movl    %ecx, %ecx
// 95: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 99: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9f: 48 83 c4 18                   addq    $0x18, %rsp
// a3: 5b                            popq    %rbx
// a4: 41 5c                         popq    %r12
// a6: 41 5d                         popq    %r13
// a8: 41 5e                         popq    %r14
// aa: 41 5f                         popq    %r15
// ac: 5d                            popq    %rbp
// ad: c3                            retq
// ae: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  PyObject_Size
// bc: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// c1: ff d0                         callq   *%rax
// c3: 48 85 c0                      testq   %rax, %rax
// c6: 0f 88 0d 02 00 00             js      0x2d9 <_JIT_ENTRY+0x2d9>
// cc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ce:  R_X86_64_64  PyLong_FromSsize_t
// d6: 48 89 c7                      movq    %rax, %rdi
// d9: ff d1                         callq   *%rcx
// db: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e0: 48 8b 45 00                   movq    (%rbp), %rax
// e4: 48 85 c0                      testq   %rax, %rax
// e7: 7f 22                         jg      0x10b <_JIT_ENTRY+0x10b>
// e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000eb:  R_X86_64_64  .rodata.str1.1
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_NegativeRefcount
// fd: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 102: 48 89 ea                      movq    %rbp, %rdx
// 105: ff d0                         callq   *%rax
// 107: 48 8b 45 00                   movq    (%rbp), %rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 78 21                         js      0x130 <_JIT_ENTRY+0x130>
// 10f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000111:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 119: ff d0                         callq   *%rax
// 11b: 48 ff 4d 00                   decq    (%rbp)
// 11f: 75 0f                         jne     0x130 <_JIT_ENTRY+0x130>
// 121: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000123:  R_X86_64_64  _Py_Dealloc
// 12b: 48 89 ef                      movq    %rbp, %rdi
// 12e: ff d0                         callq   *%rax
// 130: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 135: 48 8b 00                      movq    (%rax), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 27                         jg      0x164 <_JIT_ENTRY+0x164>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 156: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 15b: 48 89 ea                      movq    %rbp, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 48 8b 45 00                   movq    (%rbp), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 16b: 78 27                         js      0x194 <_JIT_ENTRY+0x194>
// 16d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 177: ff d0                         callq   *%rax
// 179: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17e: 48 ff 08                      decq    (%rax)
// 181: 75 11                         jne     0x194 <_JIT_ENTRY+0x194>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_Dealloc
// 18d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 192: ff d0                         callq   *%rax
// 194: 48 85 ed                      testq   %rbp, %rbp
// 197: 0f 84 38 01 00 00             je      0x2d5 <_JIT_ENTRY+0x2d5>
// 19d: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 1a1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 c9                      movzwl  %cx, %ecx
// 1ae: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1b3: 29 ca                         subl    %ecx, %edx
// 1b5: 48 63 d2                      movslq  %edx, %rdx
// 1b8: 49 89 2c d6                   movq    %rbp, (%r14,%rdx,8)
// 1bc: f7 d1                         notl    %ecx
// 1be: 48 63 e9                      movslq  %ecx, %rbp
// 1c1: 4d 8b 6c ee f0                movq    -0x10(%r14,%rbp,8), %r13
// 1c6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c8:  R_X86_64_64  PyUnicode_Type
// 1d0: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 1d4: 0f 85 9e fe ff ff             jne     0x78 <_JIT_ENTRY+0x78>
// 1da: 4d 8b 64 ee f8                movq    -0x8(%r14,%rbp,8), %r12
// 1df: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 1e4: 0f 85 8e fe ff ff             jne     0x78 <_JIT_ENTRY+0x78>
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  _PyUnicode_Equal
// 1f4: 4c 89 ef                      movq    %r13, %rdi
// 1f7: 4c 89 e6                      movq    %r12, %rsi
// 1fa: ff d0                         callq   *%rax
// 1fc: 89 44 24 08                   movl    %eax, 0x8(%rsp)
// 200: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 205: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000207:  R_X86_64_64  PyInterpreterState_Get
// 20f: 75 3c                         jne     0x24d <_JIT_ENTRY+0x24d>
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  PyInterpreterState_Get
// 21b: ff d0                         callq   *%rax
// 21d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 224: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000226:  R_X86_64_64  PyInterpreterState_Get
// 22e: 49 ff 4d 00                   decq    (%r13)
// 232: 75 19                         jne     0x24d <_JIT_ENTRY+0x24d>
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _PyUnicode_ExactDealloc
// 23e: 4c 89 ef                      movq    %r13, %rdi
// 241: ff d0                         callq   *%rax
// 243: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000245:  R_X86_64_64  PyInterpreterState_Get
// 24d: 4d 8d 2c ee                   leaq    (%r14,%rbp,8), %r13
// 251: 49 83 c5 f8                   addq    $-0x8, %r13
// 255: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 25b: 75 1e                         jne     0x27b <_JIT_ENTRY+0x27b>
// 25d: ff d1                         callq   *%rcx
// 25f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 266: 49 ff 0c 24                   decq    (%r12)
// 26a: 75 0f                         jne     0x27b <_JIT_ENTRY+0x27b>
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _PyUnicode_ExactDealloc
// 276: 4c 89 e7                      movq    %r12, %rdi
// 279: ff d0                         callq   *%rax
// 27b: 8b 4c 24 08                   movl    0x8(%rsp), %ecx
// 27f: 83 c1 07                      addl    $0x7, %ecx
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _JIT_OPARG
// 28c: 0f b7 c0                      movzwl  %ax, %eax
// 28f: 85 c1                         testl   %eax, %ecx
// 291: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000293:  R_X86_64_64  _Py_FalseStruct
// 29b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000029d:  R_X86_64_64  _Py_TrueStruct
// 2a5: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 2a9: f7 d0                         notl    %eax
// 2ab: 48 98                         cltq
// 2ad: 49 89 54 c6 f0                movq    %rdx, -0x10(%r14,%rax,8)
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _JIT_CONTINUE
// 2bc: 48 89 df                      movq    %rbx, %rdi
// 2bf: 4c 89 ee                      movq    %r13, %rsi
// 2c2: 4c 89 fa                      movq    %r15, %rdx
// 2c5: 48 83 c4 18                   addq    $0x18, %rsp
// 2c9: 5b                            popq    %rbx
// 2ca: 41 5c                         popq    %r12
// 2cc: 41 5d                         popq    %r13
// 2ce: 41 5e                         popq    %r14
// 2d0: 41 5f                         popq    %r15
// 2d2: 5d                            popq    %rbp
// 2d3: ff e0                         jmpq    *%rax
// 2d5: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 2d9: 49 29 de                      subq    %rbx, %r14
// 2dc: 49 83 c6 b8                   addq    $-0x48, %r14
// 2e0: 49 c1 ee 03                   shrq    $0x3, %r14
// 2e4: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2e8: 31 c0                         xorl    %eax, %eax
// 2ea: e9 b0 fd ff ff                jmp     0x9f <_JIT_ENTRY+0x9f>
// 2ef: 
static const unsigned char _CALL_LENplus_COMPARE_OP_STR_code_body[752] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x0d, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x38, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x2c, 0xd6, 0xf7, 0xd1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x6c, 0xee, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0x9e, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x64, 0xee, 0xf8, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x8e, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x08, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x2c, 0xee, 0x49, 0x83, 0xc5, 0xf8, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x8b, 0x4c, 0x24, 0x08, 0x83, 0xc1, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x85, 0xc1, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x89, 0x54, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xb0, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_COMPARE_OP_STR_code_holes[26] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x111, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x123, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_Equal, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_COMPARE_OP_STR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_COMPARE_OP_STR_data_holes[1];

// _CALL_LENplus_CONTAINS_OP
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CONTAINS_OP.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 09 02 00 00             js      0x2d0 <_JIT_ENTRY+0x2d0>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 40 01 00 00             je      0x2c7 <_JIT_ENTRY+0x2c7>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a2: f7 d0                         notl    %eax
// 1a4: 48 63 e8                      movslq  %eax, %rbp
// 1a7: 4d 8b 6c ee f0                movq    -0x10(%r14,%rbp,8), %r13
// 1ac: 4d 8b 64 ee f8                movq    -0x8(%r14,%rbp,8), %r12
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  PySequence_Contains
// 1bb: 4c 89 e7                      movq    %r12, %rdi
// 1be: 4c 89 ee                      movq    %r13, %rsi
// 1c1: ff d0                         callq   *%rax
// 1c3: 89 04 24                      movl    %eax, (%rsp)
// 1c6: 49 8b 45 00                   movq    (%r13), %rax
// 1ca: 48 85 c0                      testq   %rax, %rax
// 1cd: 7f 22                         jg      0x1f1 <_JIT_ENTRY+0x1f1>
// 1cf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d1:  R_X86_64_64  .rodata.str1.1
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_NegativeRefcount
// 1e3: be a8 07 00 00                movl    $0x7a8, %esi            # imm = 0x7A8
// 1e8: 4c 89 ea                      movq    %r13, %rdx
// 1eb: ff d0                         callq   *%rax
// 1ed: 49 8b 45 00                   movq    (%r13), %rax
// 1f1: 85 c0                         testl   %eax, %eax
// 1f3: 78 21                         js      0x216 <_JIT_ENTRY+0x216>
// 1f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ff: ff d0                         callq   *%rax
// 201: 49 ff 4d 00                   decq    (%r13)
// 205: 75 0f                         jne     0x216 <_JIT_ENTRY+0x216>
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  _Py_Dealloc
// 211: 4c 89 ef                      movq    %r13, %rdi
// 214: ff d0                         callq   *%rax
// 216: 49 8b 04 24                   movq    (%r12), %rax
// 21a: 48 85 c0                      testq   %rax, %rax
// 21d: 7f 22                         jg      0x241 <_JIT_ENTRY+0x241>
// 21f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000221:  R_X86_64_64  .rodata.str1.1
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_NegativeRefcount
// 233: be a9 07 00 00                movl    $0x7a9, %esi            # imm = 0x7A9
// 238: 4c 89 e2                      movq    %r12, %rdx
// 23b: ff d0                         callq   *%rax
// 23d: 49 8b 04 24                   movq    (%r12), %rax
// 241: 85 c0                         testl   %eax, %eax
// 243: 78 21                         js      0x266 <_JIT_ENTRY+0x266>
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24f: ff d0                         callq   *%rax
// 251: 49 ff 0c 24                   decq    (%r12)
// 255: 75 0f                         jne     0x266 <_JIT_ENTRY+0x266>
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_Dealloc
// 261: 4c 89 e7                      movq    %r12, %rdi
// 264: ff d0                         callq   *%rax
// 266: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 26a: 48 83 c0 f0                   addq    $-0x10, %rax
// 26e: 8b 14 24                      movl    (%rsp), %edx
// 271: 85 d2                         testl   %edx, %edx
// 273: 78 58                         js      0x2cd <_JIT_ENTRY+0x2cd>
// 275: 49 8d 34 ee                   leaq    (%r14,%rbp,8), %rsi
// 279: 48 83 c6 f8                   addq    $-0x8, %rsi
// 27d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027f:  R_X86_64_64  _JIT_OPARG
// 287: 0f b7 c9                      movzwl  %cx, %ecx
// 28a: 39 ca                         cmpl    %ecx, %edx
// 28c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000028e:  R_X86_64_64  _Py_FalseStruct
// 296: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000298:  R_X86_64_64  _Py_TrueStruct
// 2a0: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 2a4: 48 89 10                      movq    %rdx, (%rax)
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _JIT_CONTINUE
// 2b1: 48 89 df                      movq    %rbx, %rdi
// 2b4: 4c 89 fa                      movq    %r15, %rdx
// 2b7: 48 83 c4 08                   addq    $0x8, %rsp
// 2bb: 5b                            popq    %rbx
// 2bc: 41 5c                         popq    %r12
// 2be: 41 5d                         popq    %r13
// 2c0: 41 5e                         popq    %r14
// 2c2: 41 5f                         popq    %r15
// 2c4: 5d                            popq    %rbp
// 2c5: ff e0                         jmpq    *%rax
// 2c7: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 2cb: eb 03                         jmp     0x2d0 <_JIT_ENTRY+0x2d0>
// 2cd: 49 89 c6                      movq    %rax, %r14
// 2d0: 49 29 de                      subq    %rbx, %r14
// 2d3: 49 83 c6 b8                   addq    $-0x48, %r14
// 2d7: 49 c1 ee 03                   shrq    $0x3, %r14
// 2db: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2df: 31 c0                         xorl    %eax, %eax
// 2e1: e9 b6 fd ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 2e6: 
static const unsigned char _CALL_LENplus_CONTAINS_OP_code_body[743] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x09, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x40, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x63, 0xe8, 0x4d, 0x8b, 0x6c, 0xee, 0xf0, 0x4d, 0x8b, 0x64, 0xee, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa8, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x83, 0xc0, 0xf0, 0x8b, 0x14, 0x24, 0x85, 0xd2, 0x78, 0x58, 0x49, 0x8d, 0x34, 0xee, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0xca, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x48, 0x89, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xb6, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_CONTAINS_OP_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Contains, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CONTAINS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CONTAINS_OP_data_holes[1];

// _CALL_LENplus_CONVERT_VALUE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_CONVERT_VALUE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 96 01 00 00             js      0x260 <_JIT_ENTRY+0x260>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 188: 48 85 f6                      testq   %rsi, %rsi
// 18b: 0f 84 c6 00 00 00             je      0x257 <_JIT_ENTRY+0x257>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1a3: 29 ca                         subl    %ecx, %edx
// 1a5: 48 63 d2                      movslq  %edx, %rdx
// 1a8: 49 89 34 d6                   movq    %rsi, (%r14,%rdx,8)
// 1ac: f7 d1                         notl    %ecx
// 1ae: 4c 63 e1                      movslq  %ecx, %r12
// 1b1: 4b 8b 6c e6 f8                movq    -0x8(%r14,%r12,8), %rbp
// 1b6: 0f b7 c0                      movzwl  %ax, %eax
// 1b9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bb:  R_X86_64_64  .rodata
// 1c3: 48 89 ef                      movq    %rbp, %rdi
// 1c6: ff 14 c1                      callq   *(%rcx,%rax,8)
// 1c9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1ce: 48 8b 45 00                   movq    (%rbp), %rax
// 1d2: 48 85 c0                      testq   %rax, %rax
// 1d5: 7f 22                         jg      0x1f9 <_JIT_ENTRY+0x1f9>
// 1d7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d9:  R_X86_64_64  .rodata.str1.1
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _Py_NegativeRefcount
// 1eb: be 98 0c 00 00                movl    $0xc98, %esi            # imm = 0xC98
// 1f0: 48 89 ea                      movq    %rbp, %rdx
// 1f3: ff d0                         callq   *%rax
// 1f5: 48 8b 45 00                   movq    (%rbp), %rax
// 1f9: 85 c0                         testl   %eax, %eax
// 1fb: 78 21                         js      0x21e <_JIT_ENTRY+0x21e>
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 207: ff d0                         callq   *%rax
// 209: 48 ff 4d 00                   decq    (%rbp)
// 20d: 75 0f                         jne     0x21e <_JIT_ENTRY+0x21e>
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _Py_Dealloc
// 219: 48 89 ef                      movq    %rbp, %rdi
// 21c: ff d0                         callq   *%rax
// 21e: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 222: 48 83 c0 f8                   addq    $-0x8, %rax
// 226: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 22b: 48 85 c9                      testq   %rcx, %rcx
// 22e: 74 2d                         je      0x25d <_JIT_ENTRY+0x25d>
// 230: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 234: 48 89 08                      movq    %rcx, (%rax)
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _JIT_CONTINUE
// 241: 48 89 df                      movq    %rbx, %rdi
// 244: 4c 89 fa                      movq    %r15, %rdx
// 247: 48 83 c4 18                   addq    $0x18, %rsp
// 24b: 5b                            popq    %rbx
// 24c: 41 5c                         popq    %r12
// 24e: 41 5d                         popq    %r13
// 250: 41 5e                         popq    %r14
// 252: 41 5f                         popq    %r15
// 254: 5d                            popq    %rbp
// 255: ff e0                         jmpq    *%rax
// 257: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 25b: eb 03                         jmp     0x260 <_JIT_ENTRY+0x260>
// 25d: 49 89 c6                      movq    %rax, %r14
// 260: 49 29 de                      subq    %rbx, %r14
// 263: 49 83 c6 b8                   addq    $-0x48, %r14
// 267: 49 c1 ee 03                   shrq    $0x3, %r14
// 26b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 26f: 31 c0                         xorl    %eax, %eax
// 271: e9 27 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 276: 
static const unsigned char _CALL_LENplus_CONVERT_VALUE_code_body[631] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x96, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xc6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd6, 0xf7, 0xd1, 0x4c, 0x63, 0xe1, 0x4b, 0x8b, 0x6c, 0xe6, 0xf8, 0x0f, 0xb7, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0x14, 0xc1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x2d, 0x4b, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x27, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_CONVERT_VALUE_code_holes[20] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
// 59: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_CONVERT_VALUE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_CONVERT_VALUE_data_holes[4] = {
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Repr, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_ASCII, 0x0},
};

// _CALL_LENplus_COPY
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_COPY.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 45 01 00 00             js      0x20c <_JIT_ENTRY+0x20c>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 34 24                   movq    (%rsp), %rsi
// 17e: 48 85 f6                      testq   %rsi, %rsi
// 181: 0f 84 81 00 00 00             je      0x208 <_JIT_ENTRY+0x208>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c8                      movzwl  %ax, %ecx
// 194: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 199: 29 ca                         subl    %ecx, %edx
// 19b: 48 63 d2                      movslq  %edx, %rdx
// 19e: 49 89 34 d6                   movq    %rsi, (%r14,%rdx,8)
// 1a2: 0f b7 c0                      movzwl  %ax, %eax
// 1a5: f7 d1                         notl    %ecx
// 1a7: 48 63 c9                      movslq  %ecx, %rcx
// 1aa: 48 29 c1                      subq    %rax, %rcx
// 1ad: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// 1b1: 41 8b 04 24                   movl    (%r12), %eax
// 1b5: ff c0                         incl    %eax
// 1b7: 74 10                         je      0x1c9 <_JIT_ENTRY+0x1c9>
// 1b9: 41 89 04 24                   movl    %eax, (%r12)
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1c7: ff d0                         callq   *%rax
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _JIT_OPARG
// 1d3: f7 d0                         notl    %eax
// 1d5: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1da: 48 98                         cltq
// 1dc: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 1e0: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1e4: 48 83 c6 08                   addq    $0x8, %rsi
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _JIT_CONTINUE
// 1f2: 48 89 df                      movq    %rbx, %rdi
// 1f5: 4c 89 fa                      movq    %r15, %rdx
// 1f8: 48 83 c4 08                   addq    $0x8, %rsp
// 1fc: 5b                            popq    %rbx
// 1fd: 41 5c                         popq    %r12
// 1ff: 41 5d                         popq    %r13
// 201: 41 5e                         popq    %r14
// 203: 41 5f                         popq    %r15
// 205: 5d                            popq    %rbp
// 206: ff e0                         jmpq    *%rax
// 208: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 20c: 49 29 de                      subq    %rbx, %r14
// 20f: 49 83 c6 b8                   addq    $-0x48, %r14
// 213: 49 c1 ee 03                   shrq    $0x3, %r14
// 217: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 21b: 31 c0                         xorl    %eax, %eax
// 21d: e9 7a fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 222: 
static const unsigned char _CALL_LENplus_COPY_code_body[547] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x45, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x81, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd6, 0x0f, 0xb7, 0xc0, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x29, 0xc1, 0x4d, 0x8b, 0x24, 0xce, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x7a, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_COPY_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_COPY_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_COPY_data_holes[1];

// _CALL_LENplus_COPY_FREE_VARS
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_COPY_FREE_VARS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e7                   movq    (%r15,%r12,8), %rbp
// 68: 49 8b 46 10                   movq    0x10(%r14), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 df                      subq    %rbx, %r15
// 78: 49 83 c7 b8                   addq    $-0x48, %r15
// 7c: 49 c1 ef 03                   shrq    $0x3, %r15
// 80: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c cf                   movq    (%r15,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 3c 24                   movq    %rdi, (%rsp)
// be: ff d0                         callq   *%rax
// c0: 48 85 c0                      testq   %rax, %rax
// c3: 0f 88 7a 01 00 00             js      0x243 <_JIT_ENTRY+0x243>
// c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cb:  R_X86_64_64  PyLong_FromSsize_t
// d3: 48 89 c7                      movq    %rax, %rdi
// d6: ff d1                         callq   *%rcx
// d8: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// dd: 48 8b 45 00                   movq    (%rbp), %rax
// e1: 48 85 c0                      testq   %rax, %rax
// e4: 7f 22                         jg      0x108 <_JIT_ENTRY+0x108>
// e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_NegativeRefcount
// fa: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: ff d0                         callq   *%rax
// 104: 48 8b 45 00                   movq    (%rbp), %rax
// 108: 85 c0                         testl   %eax, %eax
// 10a: 78 21                         js      0x12d <_JIT_ENTRY+0x12d>
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 116: ff d0                         callq   *%rax
// 118: 48 ff 4d 00                   decq    (%rbp)
// 11c: 75 0f                         jne     0x12d <_JIT_ENTRY+0x12d>
// 11e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000120:  R_X86_64_64  _Py_Dealloc
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: ff d0                         callq   *%rax
// 12d: 48 8b 2c 24                   movq    (%rsp), %rbp
// 131: 48 8b 45 00                   movq    (%rbp), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_NegativeRefcount
// 14e: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 153: 48 89 ea                      movq    %rbp, %rdx
// 156: ff d0                         callq   *%rax
// 158: 48 8b 45 00                   movq    (%rbp), %rax
// 15c: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 21                         js      0x186 <_JIT_ENTRY+0x186>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 48 ff 4d 00                   decq    (%rbp)
// 175: 75 0f                         jne     0x186 <_JIT_ENTRY+0x186>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_Dealloc
// 181: 48 89 ef                      movq    %rbp, %rdi
// 184: ff d0                         callq   *%rax
// 186: 4b 8d 04 e7                   leaq    (%r15,%r12,8), %rax
// 18a: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 18f: 48 85 c9                      testq   %rcx, %rcx
// 192: 0f 84 a8 00 00 00             je      0x240 <_JIT_ENTRY+0x240>
// 198: 4b 8d 14 ef                   leaq    (%r15,%r13,8), %rdx
// 19c: 48 89 14 24                   movq    %rdx, (%rsp)
// 1a0: 48 89 08                      movq    %rcx, (%rax)
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _JIT_OPARG
// 1ad: 66 85 c0                      testw   %ax, %ax
// 1b0: 74 68                         je      0x21a <_JIT_ENTRY+0x21a>
// 1b2: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 1b6: 4c 8b 60 48                   movq    0x48(%rax), %r12
// 1ba: 48 8b 03                      movq    (%rbx), %rax
// 1bd: 8b 40 48                      movl    0x48(%rax), %eax
// 1c0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c2:  R_X86_64_64  _JIT_OPARG
// 1ca: 0f b7 c9                      movzwl  %cx, %ecx
// 1cd: 29 c8                         subl    %ecx, %eax
// 1cf: 83 f9 02                      cmpl    $0x2, %ecx
// 1d2: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 1d8: 44 0f 43 e9                   cmovael %ecx, %r13d
// 1dc: 48 98                         cltq
// 1de: 48 8d 2c c3                   leaq    (%rbx,%rax,8), %rbp
// 1e2: 48 83 c5 48                   addq    $0x48, %rbp
// 1e6: 45 31 ff                      xorl    %r15d, %r15d
// 1e9: eb 12                         jmp     0x1fd <_JIT_ENTRY+0x1fd>
// 1eb: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1f0: 4e 89 74 fd 00                movq    %r14, (%rbp,%r15,8)
// 1f5: 49 ff c7                      incq    %r15
// 1f8: 4d 39 fd                      cmpq    %r15, %r13
// 1fb: 74 1d                         je      0x21a <_JIT_ENTRY+0x21a>
// 1fd: 4f 8b 74 fc 18                movq    0x18(%r12,%r15,8), %r14
// 202: 41 8b 06                      movl    (%r14), %eax
// 205: ff c0                         incl    %eax
// 207: 74 e7                         je      0x1f0 <_JIT_ENTRY+0x1f0>
// 209: 41 89 06                      movl    %eax, (%r14)
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 216: ff d0                         callq   *%rax
// 218: eb d6                         jmp     0x1f0 <_JIT_ENTRY+0x1f0>
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _JIT_CONTINUE
// 224: 48 89 df                      movq    %rbx, %rdi
// 227: 48 8b 34 24                   movq    (%rsp), %rsi
// 22b: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 230: 48 83 c4 18                   addq    $0x18, %rsp
// 234: 5b                            popq    %rbx
// 235: 41 5c                         popq    %r12
// 237: 41 5d                         popq    %r13
// 239: 41 5e                         popq    %r14
// 23b: 41 5f                         popq    %r15
// 23d: 5d                            popq    %rbp
// 23e: ff e0                         jmpq    *%rax
// 240: 49 89 c7                      movq    %rax, %r15
// 243: 49 29 df                      subq    %rbx, %r15
// 246: 49 83 c7 b8                   addq    $-0x48, %r15
// 24a: 49 c1 ef 03                   shrq    $0x3, %r15
// 24e: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 252: 31 c0                         xorl    %eax, %eax
// 254: e9 44 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 259: 
static const unsigned char _CALL_LENplus_COPY_FREE_VARS_code_body[602] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe7, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x3c, 0x24, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x7a, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x2c, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe7, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xa8, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x14, 0xef, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x74, 0x68, 0x48, 0x8b, 0x43, 0x10, 0x4c, 0x8b, 0x60, 0x48, 0x48, 0x8b, 0x03, 0x8b, 0x40, 0x48, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x83, 0xf9, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe9, 0x48, 0x98, 0x48, 0x8d, 0x2c, 0xc3, 0x48, 0x83, 0xc5, 0x48, 0x45, 0x31, 0xff, 0xeb, 0x12, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x4e, 0x89, 0x74, 0xfd, 0x00, 0x49, 0xff, 0xc7, 0x4d, 0x39, 0xfd, 0x74, 0x1d, 0x4f, 0x8b, 0x74, 0xfc, 0x18, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0xe7, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x44, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_COPY_FREE_VARS_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_COPY_FREE_VARS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_COPY_FREE_VARS_data_holes[1];

// _CALL_LENplus_DELETE_ATTR
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_DELETE_ATTR.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e7                   movq    (%r15,%r12,8), %rbp
// 68: 49 8b 46 10                   movq    0x10(%r14), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 df                      subq    %rbx, %r15
// 78: 49 83 c7 b8                   addq    $-0x48, %r15
// 7c: 49 c1 ef 03                   shrq    $0x3, %r15
// 80: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c cf                   movq    (%r15,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 82 01 00 00             js      0x24c <_JIT_ENTRY+0x24c>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 188: 48 85 f6                      testq   %rsi, %rsi
// 18b: 0f 84 b7 00 00 00             je      0x248 <_JIT_ENTRY+0x248>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1a3: 29 ca                         subl    %ecx, %edx
// 1a5: 48 63 d2                      movslq  %edx, %rdx
// 1a8: 49 89 34 d7                   movq    %rsi, (%r15,%rdx,8)
// 1ac: f7 d1                         notl    %ecx
// 1ae: 48 63 e9                      movslq  %ecx, %rbp
// 1b1: 4d 8b 64 ef f8                movq    -0x8(%r15,%rbp,8), %r12
// 1b6: 48 8b 0b                      movq    (%rbx), %rcx
// 1b9: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 1bd: 0f b7 c0                      movzwl  %ax, %eax
// 1c0: 48 8b 74 c1 18                movq    0x18(%rcx,%rax,8), %rsi
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  PyObject_DelAttr
// 1cf: 4c 89 e7                      movq    %r12, %rdi
// 1d2: ff d0                         callq   *%rax
// 1d4: 89 44 24 08                   movl    %eax, 0x8(%rsp)
// 1d8: 49 8b 04 24                   movq    (%r12), %rax
// 1dc: 48 85 c0                      testq   %rax, %rax
// 1df: 7f 22                         jg      0x203 <_JIT_ENTRY+0x203>
// 1e1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e3:  R_X86_64_64  .rodata.str1.1
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_NegativeRefcount
// 1f5: be d2 03 00 00                movl    $0x3d2, %esi            # imm = 0x3D2
// 1fa: 4c 89 e2                      movq    %r12, %rdx
// 1fd: ff d0                         callq   *%rax
// 1ff: 49 8b 04 24                   movq    (%r12), %rax
// 203: 4f 8d 2c ef                   leaq    (%r15,%r13,8), %r13
// 207: 4d 8d 3c ef                   leaq    (%r15,%rbp,8), %r15
// 20b: 49 83 c7 f8                   addq    $-0x8, %r15
// 20f: 85 c0                         testl   %eax, %eax
// 211: 78 21                         js      0x234 <_JIT_ENTRY+0x234>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21d: ff d0                         callq   *%rax
// 21f: 49 ff 0c 24                   decq    (%r12)
// 223: 75 0f                         jne     0x234 <_JIT_ENTRY+0x234>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _Py_Dealloc
// 22f: 4c 89 e7                      movq    %r12, %rdi
// 232: ff d0                         callq   *%rax
// 234: 83 7c 24 08 00                cmpl    $0x0, 0x8(%rsp)
// 239: 4d 0f 44 ef                   cmoveq  %r15, %r13
// 23d: 74 23                         je      0x262 <_JIT_ENTRY+0x262>
// 23f: 49 83 c5 f8                   addq    $-0x8, %r13
// 243: 4d 89 ef                      movq    %r13, %r15
// 246: eb 04                         jmp     0x24c <_JIT_ENTRY+0x24c>
// 248: 4f 8d 3c e7                   leaq    (%r15,%r12,8), %r15
// 24c: 49 29 df                      subq    %rbx, %r15
// 24f: 49 83 c7 b8                   addq    $-0x48, %r15
// 253: 49 c1 ef 03                   shrq    $0x3, %r15
// 257: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 25b: 31 c0                         xorl    %eax, %eax
// 25d: e9 3b fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _JIT_CONTINUE
// 26c: 48 89 df                      movq    %rbx, %rdi
// 26f: 4c 89 ee                      movq    %r13, %rsi
// 272: 4c 89 f2                      movq    %r14, %rdx
// 275: 48 83 c4 18                   addq    $0x18, %rsp
// 279: 5b                            popq    %rbx
// 27a: 41 5c                         popq    %r12
// 27c: 41 5d                         popq    %r13
// 27e: 41 5e                         popq    %r14
// 280: 41 5f                         popq    %r15
// 282: 5d                            popq    %rbp
// 283: ff e0                         jmpq    *%rax
// 285: 
static const unsigned char _CALL_LENplus_DELETE_ATTR_code_body[646] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe7, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x82, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd7, 0xf7, 0xd1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x64, 0xef, 0xf8, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x49, 0x20, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x74, 0xc1, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd2, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x2c, 0xef, 0x4d, 0x8d, 0x3c, 0xef, 0x49, 0x83, 0xc7, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x4d, 0x0f, 0x44, 0xef, 0x74, 0x23, 0x49, 0x83, 0xc5, 0xf8, 0x4d, 0x89, 0xef, 0xeb, 0x04, 0x4f, 0x8d, 0x3c, 0xe7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x3b, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_DELETE_ATTR_code_holes[20] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelAttr, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_DELETE_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_DELETE_ATTR_data_holes[1];

// _CALL_LENplus_DELETE_DEREF
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_DELETE_DEREF.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 90 01 00 00             js      0x25a <_JIT_ENTRY+0x25a>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 187: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 18c: 48 85 c9                      testq   %rcx, %rcx
// 18f: 0f 84 a1 00 00 00             je      0x236 <_JIT_ENTRY+0x236>
// 195: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 199: 48 89 08                      movq    %rcx, (%rax)
// 19c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019e:  R_X86_64_64  _JIT_OPARG
// 1a6: 0f b7 c0                      movzwl  %ax, %eax
// 1a9: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 1ae: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 1b2: 4d 85 e4                      testq   %r12, %r12
// 1b5: 0f 84 80 00 00 00             je      0x23b <_JIT_ENTRY+0x23b>
// 1bb: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 1c3: 49 8b 04 24                   movq    (%r12), %rax
// 1c7: 48 85 c0                      testq   %rax, %rax
// 1ca: 7f 22                         jg      0x1ee <_JIT_ENTRY+0x1ee>
// 1cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ce:  R_X86_64_64  .rodata.str1.1
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_NegativeRefcount
// 1e0: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 1e5: 4c 89 e2                      movq    %r12, %rdx
// 1e8: ff d0                         callq   *%rax
// 1ea: 49 8b 04 24                   movq    (%r12), %rax
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 21                         js      0x213 <_JIT_ENTRY+0x213>
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 ff 0c 24                   decq    (%r12)
// 202: 75 0f                         jne     0x213 <_JIT_ENTRY+0x213>
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _Py_Dealloc
// 20e: 4c 89 e7                      movq    %r12, %rdi
// 211: ff d0                         callq   *%rax
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _JIT_CONTINUE
// 21d: 48 89 df                      movq    %rbx, %rdi
// 220: 4c 89 f6                      movq    %r14, %rsi
// 223: 4c 89 fa                      movq    %r15, %rdx
// 226: 48 83 c4 18                   addq    $0x18, %rsp
// 22a: 5b                            popq    %rbx
// 22b: 41 5c                         popq    %r12
// 22d: 41 5d                         popq    %r13
// 22f: 41 5e                         popq    %r14
// 231: 41 5f                         popq    %r15
// 233: 5d                            popq    %rbp
// 234: ff e0                         jmpq    *%rax
// 236: 49 89 c6                      movq    %rax, %r14
// 239: eb 1f                         jmp     0x25a <_JIT_ENTRY+0x25a>
// 23b: 48 8b 33                      movq    (%rbx), %rsi
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _JIT_OPARG
// 248: 0f b7 d0                      movzwl  %ax, %edx
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _PyEval_FormatExcUnbound
// 255: 4c 89 ff                      movq    %r15, %rdi
// 258: ff d0                         callq   *%rax
// 25a: 49 29 de                      subq    %rbx, %r14
// 25d: 49 83 c6 b8                   addq    $-0x48, %r14
// 261: 49 c1 ee 03                   shrq    $0x3, %r14
// 265: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 269: 31 c0                         xorl    %eax, %eax
// 26b: e9 2d fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 270: 
static const unsigned char _CALL_LENplus_DELETE_DEREF_code_body[625] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x90, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xa1, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xeb, 0x1f, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x2d, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_DELETE_DEREF_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_DELETE_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_DELETE_DEREF_data_holes[1];

// _CALL_LENplus_DELETE_FAST
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_DELETE_FAST.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 c8 01 00 00             js      0x292 <_JIT_ENTRY+0x292>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 187: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 18c: 48 85 c9                      testq   %rcx, %rcx
// 18f: 0f 84 ab 00 00 00             je      0x240 <_JIT_ENTRY+0x240>
// 195: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 199: 48 89 08                      movq    %rcx, (%rax)
// 19c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019e:  R_X86_64_64  _JIT_OPARG
// 1a6: 0f b7 c0                      movzwl  %ax, %eax
// 1a9: 4c 8b 64 c3 48                movq    0x48(%rbx,%rax,8), %r12
// 1ae: 4d 85 e4                      testq   %r12, %r12
// 1b1: 0f 84 8e 00 00 00             je      0x245 <_JIT_ENTRY+0x245>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _JIT_OPARG
// 1c1: 0f b7 c0                      movzwl  %ax, %eax
// 1c4: 48 c7 44 c3 48 00 00 00 00    movq    $0x0, 0x48(%rbx,%rax,8)
// 1cd: 49 8b 04 24                   movq    (%r12), %rax
// 1d1: 48 85 c0                      testq   %rax, %rax
// 1d4: 7f 22                         jg      0x1f8 <_JIT_ENTRY+0x1f8>
// 1d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d8:  R_X86_64_64  .rodata.str1.1+0x83
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _Py_NegativeRefcount
// 1ea: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 1ef: 4c 89 e2                      movq    %r12, %rdx
// 1f2: ff d0                         callq   *%rax
// 1f4: 49 8b 04 24                   movq    (%r12), %rax
// 1f8: 85 c0                         testl   %eax, %eax
// 1fa: 78 21                         js      0x21d <_JIT_ENTRY+0x21d>
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 206: ff d0                         callq   *%rax
// 208: 49 ff 0c 24                   decq    (%r12)
// 20c: 75 0f                         jne     0x21d <_JIT_ENTRY+0x21d>
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_Dealloc
// 218: 4c 89 e7                      movq    %r12, %rdi
// 21b: ff d0                         callq   *%rax
// 21d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021f:  R_X86_64_64  _JIT_CONTINUE
// 227: 48 89 df                      movq    %rbx, %rdi
// 22a: 4c 89 f6                      movq    %r14, %rsi
// 22d: 4c 89 fa                      movq    %r15, %rdx
// 230: 48 83 c4 18                   addq    $0x18, %rsp
// 234: 5b                            popq    %rbx
// 235: 41 5c                         popq    %r12
// 237: 41 5d                         popq    %r13
// 239: 41 5e                         popq    %r14
// 23b: 41 5f                         popq    %r15
// 23d: 5d                            popq    %rbp
// 23e: ff e0                         jmpq    *%rax
// 240: 49 89 c6                      movq    %rax, %r14
// 243: eb 4d                         jmp     0x292 <_JIT_ENTRY+0x292>
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  PyExc_UnboundLocalError
// 24f: 4c 8b 20                      movq    (%rax), %r12
// 252: 48 8b 03                      movq    (%rbx), %rax
// 255: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _JIT_OPARG
// 263: 0f b7 f0                      movzwl  %ax, %esi
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  PyTuple_GetItem
// 270: ff d0                         callq   *%rax
// 272: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000274:  R_X86_64_64  .rodata.str1.1+0x39
// 27c: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000027e:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 286: 4c 89 ff                      movq    %r15, %rdi
// 289: 4c 89 e6                      movq    %r12, %rsi
// 28c: 48 89 c1                      movq    %rax, %rcx
// 28f: 41 ff d0                      callq   *%r8
// 292: 49 29 de                      subq    %rbx, %r14
// 295: 49 83 c6 b8                   addq    $-0x48, %r14
// 299: 49 c1 ee 03                   shrq    $0x3, %r14
// 29d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2a1: 31 c0                         xorl    %eax, %eax
// 2a3: e9 f5 fd ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 2a8: 
static const unsigned char _CALL_LENplus_DELETE_FAST_code_body[681] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xc8, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xab, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8b, 0x64, 0xc3, 0x48, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc7, 0x44, 0xc3, 0x48, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xeb, 0x4d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x20, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xf5, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_DELETE_FAST_code_holes[25] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x83},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot access local variable '%s' where it is not associated with a value\x00/home/jglass/Documents/cpython/Include/object.h\x00"
// b3: 00 00 00 00 00
static const unsigned char _CALL_LENplus_DELETE_FAST_data_body[185] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_DELETE_FAST_data_holes[1];

// _CALL_LENplus_DELETE_GLOBAL
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_DELETE_GLOBAL.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 50 01 00 00             js      0x21a <_JIT_ENTRY+0x21a>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 187: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 18c: 48 85 c9                      testq   %rcx, %rcx
// 18f: 0f 84 82 00 00 00             je      0x217 <_JIT_ENTRY+0x217>
// 195: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 199: 48 89 08                      movq    %rcx, (%rax)
// 19c: 48 8b 03                      movq    (%rbx), %rax
// 19f: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 1a3: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1a7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a9:  R_X86_64_64  _JIT_OPARG
// 1b1: 0f b7 c9                      movzwl  %cx, %ecx
// 1b4: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  PyDict_DelItem
// 1c3: 4c 89 e6                      movq    %r12, %rsi
// 1c6: ff d0                         callq   *%rax
// 1c8: 85 c0                         testl   %eax, %eax
// 1ca: 74 64                         je      0x230 <_JIT_ENTRY+0x230>
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  PyExc_KeyError
// 1d6: 48 8b 30                      movq    (%rax), %rsi
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _PyErr_ExceptionMatches
// 1e3: 4c 89 ff                      movq    %r15, %rdi
// 1e6: ff d0                         callq   *%rax
// 1e8: 85 c0                         testl   %eax, %eax
// 1ea: 74 2e                         je      0x21a <_JIT_ENTRY+0x21a>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  PyExc_NameError
// 1f6: 48 8b 30                      movq    (%rax), %rsi
// 1f9: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001fb:  R_X86_64_64  .rodata.str1.1+0x39
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 20d: 4c 89 ff                      movq    %r15, %rdi
// 210: 4c 89 e1                      movq    %r12, %rcx
// 213: ff d0                         callq   *%rax
// 215: eb 03                         jmp     0x21a <_JIT_ENTRY+0x21a>
// 217: 49 89 c6                      movq    %rax, %r14
// 21a: 49 29 de                      subq    %rbx, %r14
// 21d: 49 83 c6 b8                   addq    $-0x48, %r14
// 221: 49 c1 ee 03                   shrq    $0x3, %r14
// 225: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 229: 31 c0                         xorl    %eax, %eax
// 22b: e9 6d fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _JIT_CONTINUE
// 23a: 48 89 df                      movq    %rbx, %rdi
// 23d: 4c 89 f6                      movq    %r14, %rsi
// 240: 4c 89 fa                      movq    %r15, %rdx
// 243: 48 83 c4 18                   addq    $0x18, %rsp
// 247: 5b                            popq    %rbx
// 248: 41 5c                         popq    %r12
// 24a: 41 5d                         popq    %r13
// 24c: 41 5e                         popq    %r14
// 24e: 41 5f                         popq    %r15
// 250: 5d                            popq    %rbp
// 251: ff e0                         jmpq    *%rax
// 253: 
static const unsigned char _CALL_LENplus_DELETE_GLOBAL_code_body[596] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x50, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x82, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x64, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x6d, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_DELETE_GLOBAL_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_DelItem, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_KeyError, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _CALL_LENplus_DELETE_GLOBAL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_DELETE_GLOBAL_data_holes[1];

// _CALL_LENplus_DELETE_NAME
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_DELETE_NAME.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 5f 01 00 00             js      0x229 <_JIT_ENTRY+0x229>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 187: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 18c: 48 85 c9                      testq   %rcx, %rcx
// 18f: 74 67                         je      0x1f8 <_JIT_ENTRY+0x1f8>
// 191: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 195: 48 89 08                      movq    %rcx, (%rax)
// 198: 48 8b 03                      movq    (%rbx), %rax
// 19b: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 19f: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1a3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a5:  R_X86_64_64  _JIT_OPARG
// 1ad: 0f b7 c9                      movzwl  %cx, %ecx
// 1b0: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 1b5: 48 85 ff                      testq   %rdi, %rdi
// 1b8: 74 43                         je      0x1fd <_JIT_ENTRY+0x1fd>
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  PyObject_DelItem
// 1c4: 4c 89 e6                      movq    %r12, %rsi
// 1c7: ff d0                         callq   *%rax
// 1c9: 85 c0                         testl   %eax, %eax
// 1cb: 74 72                         je      0x23f <_JIT_ENTRY+0x23f>
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  PyExc_NameError
// 1d7: 48 8b 30                      movq    (%rax), %rsi
// 1da: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001dc:  R_X86_64_64  .rodata.str1.1+0x54
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 1ee: 4c 89 ff                      movq    %r15, %rdi
// 1f1: 4c 89 e1                      movq    %r12, %rcx
// 1f4: ff d0                         callq   *%rax
// 1f6: eb 31                         jmp     0x229 <_JIT_ENTRY+0x229>
// 1f8: 49 89 c6                      movq    %rax, %r14
// 1fb: eb 2c                         jmp     0x229 <_JIT_ENTRY+0x229>
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  PyExc_SystemError
// 207: 48 8b 30                      movq    (%rax), %rsi
// 20a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000020c:  R_X86_64_64  .rodata.str1.1+0x39
// 214: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000216:  R_X86_64_64  _PyErr_Format
// 21e: 4c 89 ff                      movq    %r15, %rdi
// 221: 4c 89 e1                      movq    %r12, %rcx
// 224: 31 c0                         xorl    %eax, %eax
// 226: 41 ff d0                      callq   *%r8
// 229: 49 29 de                      subq    %rbx, %r14
// 22c: 49 83 c6 b8                   addq    $-0x48, %r14
// 230: 49 c1 ee 03                   shrq    $0x3, %r14
// 234: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 238: 31 c0                         xorl    %eax, %eax
// 23a: e9 5e fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _JIT_CONTINUE
// 249: 48 89 df                      movq    %rbx, %rdi
// 24c: 4c 89 f6                      movq    %r14, %rsi
// 24f: 4c 89 fa                      movq    %r15, %rdx
// 252: 48 83 c4 18                   addq    $0x18, %rsp
// 256: 5b                            popq    %rbx
// 257: 41 5c                         popq    %r12
// 259: 41 5d                         popq    %r13
// 25b: 41 5e                         popq    %r14
// 25d: 41 5f                         popq    %r15
// 25f: 5d                            popq    %rbp
// 260: ff e0                         jmpq    *%rax
// 262: 
static const unsigned char _CALL_LENplus_DELETE_NAME_code_body[611] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x5f, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x67, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0x85, 0xff, 0x74, 0x43, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x72, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xeb, 0x31, 0x49, 0x89, 0xc6, 0xeb, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x5e, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_DELETE_NAME_code_holes[22] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x54},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals when deleting %R\x00name '%.200s' is not defined\x00"
// 71: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_DELETE_NAME_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_DELETE_NAME_data_holes[1];

// _CALL_LENplus_DELETE_SUBSCR
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_DELETE_SUBSCR.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 f6                      movslq  %esi, %r14
// 65: 4b 8b 2c f7                   movq    (%r15,%r14,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 df                      subq    %rbx, %r15
// 79: 49 83 c7 b8                   addq    $-0x48, %r15
// 7d: 49 c1 ef 03                   shrq    $0x3, %r15
// 81: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// b2: 4d 8b 24 cf                   movq    (%r15,%rcx,8), %r12
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 c6 01 00 00             js      0x294 <_JIT_ENTRY+0x294>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 04 24                   movq    (%r12), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 e2                      movq    %r12, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 04 24                   movq    (%r12), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 21                         js      0x182 <_JIT_ENTRY+0x182>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 0c 24                   decq    (%r12)
// 171: 75 0f                         jne     0x182 <_JIT_ENTRY+0x182>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: ff d0                         callq   *%rax
// 182: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 187: 48 85 d2                      testq   %rdx, %rdx
// 18a: 0f 84 00 01 00 00             je      0x290 <_JIT_ENTRY+0x290>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _JIT_OPARG
// 19a: 0f b7 c0                      movzwl  %ax, %eax
// 19d: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a2: 29 c1                         subl    %eax, %ecx
// 1a4: 48 63 c9                      movslq  %ecx, %rcx
// 1a7: 49 89 14 cf                   movq    %rdx, (%r15,%rcx,8)
// 1ab: f7 d0                         notl    %eax
// 1ad: 4c 63 f0                      movslq  %eax, %r14
// 1b0: 4b 8b 6c f7 f0                movq    -0x10(%r15,%r14,8), %rbp
// 1b5: 4f 8b 64 f7 f8                movq    -0x8(%r15,%r14,8), %r12
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  PyObject_DelItem
// 1c4: 48 89 ef                      movq    %rbp, %rdi
// 1c7: 4c 89 e6                      movq    %r12, %rsi
// 1ca: ff d0                         callq   *%rax
// 1cc: 89 44 24 08                   movl    %eax, 0x8(%rsp)
// 1d0: 48 8b 45 00                   movq    (%rbp), %rax
// 1d4: 48 85 c0                      testq   %rax, %rax
// 1d7: 7f 22                         jg      0x1fb <_JIT_ENTRY+0x1fb>
// 1d9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001db:  R_X86_64_64  .rodata.str1.1
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _Py_NegativeRefcount
// 1ed: be 70 02 00 00                movl    $0x270, %esi            # imm = 0x270
// 1f2: 48 89 ea                      movq    %rbp, %rdx
// 1f5: ff d0                         callq   *%rax
// 1f7: 48 8b 45 00                   movq    (%rbp), %rax
// 1fb: 85 c0                         testl   %eax, %eax
// 1fd: 78 21                         js      0x220 <_JIT_ENTRY+0x220>
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 209: ff d0                         callq   *%rax
// 20b: 48 ff 4d 00                   decq    (%rbp)
// 20f: 75 0f                         jne     0x220 <_JIT_ENTRY+0x220>
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _Py_Dealloc
// 21b: 48 89 ef                      movq    %rbp, %rdi
// 21e: ff d0                         callq   *%rax
// 220: 49 8b 04 24                   movq    (%r12), %rax
// 224: 48 85 c0                      testq   %rax, %rax
// 227: 7f 22                         jg      0x24b <_JIT_ENTRY+0x24b>
// 229: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022b:  R_X86_64_64  .rodata.str1.1
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_NegativeRefcount
// 23d: be 71 02 00 00                movl    $0x271, %esi            # imm = 0x271
// 242: 4c 89 e2                      movq    %r12, %rdx
// 245: ff d0                         callq   *%rax
// 247: 49 8b 04 24                   movq    (%r12), %rax
// 24b: 4f 8d 2c ef                   leaq    (%r15,%r13,8), %r13
// 24f: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 253: 49 83 c6 f0                   addq    $-0x10, %r14
// 257: 85 c0                         testl   %eax, %eax
// 259: 78 21                         js      0x27c <_JIT_ENTRY+0x27c>
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 265: ff d0                         callq   *%rax
// 267: 49 ff 0c 24                   decq    (%r12)
// 26b: 75 0f                         jne     0x27c <_JIT_ENTRY+0x27c>
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _Py_Dealloc
// 277: 4c 89 e7                      movq    %r12, %rdi
// 27a: ff d0                         callq   *%rax
// 27c: 83 7c 24 08 00                cmpl    $0x0, 0x8(%rsp)
// 281: 4d 0f 44 ee                   cmoveq  %r14, %r13
// 285: 74 23                         je      0x2aa <_JIT_ENTRY+0x2aa>
// 287: 49 83 c5 f0                   addq    $-0x10, %r13
// 28b: 4d 89 ef                      movq    %r13, %r15
// 28e: eb 04                         jmp     0x294 <_JIT_ENTRY+0x294>
// 290: 4f 8d 3c f7                   leaq    (%r15,%r14,8), %r15
// 294: 49 29 df                      subq    %rbx, %r15
// 297: 49 83 c7 b8                   addq    $-0x48, %r15
// 29b: 49 c1 ef 03                   shrq    $0x3, %r15
// 29f: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2a3: 31 c0                         xorl    %eax, %eax
// 2a5: e9 f4 fd ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 2aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ac:  R_X86_64_64  _JIT_CONTINUE
// 2b4: 48 89 df                      movq    %rbx, %rdi
// 2b7: 4c 89 ee                      movq    %r13, %rsi
// 2ba: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2bf: 48 83 c4 18                   addq    $0x18, %rsp
// 2c3: 5b                            popq    %rbx
// 2c4: 41 5c                         popq    %r12
// 2c6: 41 5d                         popq    %r13
// 2c8: 41 5e                         popq    %r14
// 2ca: 41 5f                         popq    %r15
// 2cc: 5d                            popq    %rbp
// 2cd: ff e0                         jmpq    *%rax
// 2cf: 
static const unsigned char _CALL_LENplus_DELETE_SUBSCR_code_body[720] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xf6, 0x4b, 0x8b, 0x2c, 0xf7, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x24, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xc6, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x00, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xcf, 0xf7, 0xd0, 0x4c, 0x63, 0xf0, 0x4b, 0x8b, 0x6c, 0xf7, 0xf0, 0x4f, 0x8b, 0x64, 0xf7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x70, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x2c, 0xef, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x4d, 0x0f, 0x44, 0xee, 0x74, 0x23, 0x49, 0x83, 0xc5, 0xf0, 0x4d, 0x89, 0xef, 0xeb, 0x04, 0x4f, 0x8d, 0x3c, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xf4, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_DELETE_SUBSCR_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_DELETE_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_DELETE_SUBSCR_data_holes[1];

// _CALL_LENplus_DICT_MERGE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_DICT_MERGE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d6                      movq    %rdx, %r14
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d7 00                cmpq    $0x0, (%r15,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ef                   movq    (%r15,%r13,8), %rbp
// 67: 49 8b 46 10                   movq    0x10(%r14), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 df                      subq    %rbx, %r15
// 77: 49 83 c7 b8                   addq    $-0x48, %r15
// 7b: 49 c1 ef 03                   shrq    $0x3, %r15
// 7f: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 cf                   movq    (%r15,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 90 01 00 00             js      0x257 <_JIT_ENTRY+0x257>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 d5 00 00 00             je      0x25c <_JIT_ENTRY+0x25c>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 cf                   movq    %rdx, (%r15,%rcx,8)
// 1a2: b9 fc ff ff ff                movl    $0xfffffffc, %ecx       # imm = 0xFFFFFFFC
// 1a7: 29 c1                         subl    %eax, %ecx
// 1a9: f7 d0                         notl    %eax
// 1ab: 48 98                         cltq
// 1ad: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 1b1: 49 83 c4 f8                   addq    $-0x8, %r12
// 1b5: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 1ba: 48 8d 14 00                   leaq    (%rax,%rax), %rdx
// 1be: 49 8b 3c d7                   movq    (%r15,%rdx,8), %rdi
// 1c2: 48 63 c9                      movslq  %ecx, %rcx
// 1c5: 48 01 c1                      addq    %rax, %rcx
// 1c8: 4d 8b 3c cf                   movq    (%r15,%rcx,8), %r15
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _PyDict_MergeEx
// 1d6: 4c 89 ee                      movq    %r13, %rsi
// 1d9: ba 02 00 00 00                movl    $0x2, %edx
// 1de: ff d0                         callq   *%rax
// 1e0: 85 c0                         testl   %eax, %eax
// 1e2: 78 7e                         js      0x262 <_JIT_ENTRY+0x262>
// 1e4: 49 8b 45 00                   movq    (%r13), %rax
// 1e8: 48 85 c0                      testq   %rax, %rax
// 1eb: 7f 22                         jg      0x20f <_JIT_ENTRY+0x20f>
// 1ed: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ef:  R_X86_64_64  .rodata.str1.1
// 1f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f9:  R_X86_64_64  _Py_NegativeRefcount
// 201: be d6 05 00 00                movl    $0x5d6, %esi            # imm = 0x5D6
// 206: 4c 89 ea                      movq    %r13, %rdx
// 209: ff d0                         callq   *%rax
// 20b: 49 8b 45 00                   movq    (%r13), %rax
// 20f: 85 c0                         testl   %eax, %eax
// 211: 78 21                         js      0x234 <_JIT_ENTRY+0x234>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21d: ff d0                         callq   *%rax
// 21f: 49 ff 4d 00                   decq    (%r13)
// 223: 75 0f                         jne     0x234 <_JIT_ENTRY+0x234>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _Py_Dealloc
// 22f: 4c 89 ef                      movq    %r13, %rdi
// 232: ff d0                         callq   *%rax
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _JIT_CONTINUE
// 23e: 48 89 df                      movq    %rbx, %rdi
// 241: 4c 89 e6                      movq    %r12, %rsi
// 244: 4c 89 f2                      movq    %r14, %rdx
// 247: 48 83 c4 08                   addq    $0x8, %rsp
// 24b: 5b                            popq    %rbx
// 24c: 41 5c                         popq    %r12
// 24e: 41 5d                         popq    %r13
// 250: 41 5e                         popq    %r14
// 252: 41 5f                         popq    %r15
// 254: 5d                            popq    %rbp
// 255: ff e0                         jmpq    *%rax
// 257: 4d 89 fc                      movq    %r15, %r12
// 25a: eb 6b                         jmp     0x2c7 <_JIT_ENTRY+0x2c7>
// 25c: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 260: eb 65                         jmp     0x2c7 <_JIT_ENTRY+0x2c7>
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _PyEval_FormatKwargsError
// 26c: 4c 89 f7                      movq    %r14, %rdi
// 26f: 4c 89 fe                      movq    %r15, %rsi
// 272: 4c 89 ea                      movq    %r13, %rdx
// 275: ff d0                         callq   *%rax
// 277: 49 8b 45 00                   movq    (%r13), %rax
// 27b: 48 85 c0                      testq   %rax, %rax
// 27e: 7f 22                         jg      0x2a2 <_JIT_ENTRY+0x2a2>
// 280: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000282:  R_X86_64_64  .rodata.str1.1
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _Py_NegativeRefcount
// 294: be d3 05 00 00                movl    $0x5d3, %esi            # imm = 0x5D3
// 299: 4c 89 ea                      movq    %r13, %rdx
// 29c: ff d0                         callq   *%rax
// 29e: 49 8b 45 00                   movq    (%r13), %rax
// 2a2: 85 c0                         testl   %eax, %eax
// 2a4: 78 21                         js      0x2c7 <_JIT_ENTRY+0x2c7>
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b0: ff d0                         callq   *%rax
// 2b2: 49 ff 4d 00                   decq    (%r13)
// 2b6: 75 0f                         jne     0x2c7 <_JIT_ENTRY+0x2c7>
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _Py_Dealloc
// 2c2: 4c 89 ef                      movq    %r13, %rdi
// 2c5: ff d0                         callq   *%rax
// 2c7: 49 29 dc                      subq    %rbx, %r12
// 2ca: 49 83 c4 b8                   addq    $-0x48, %r12
// 2ce: 49 c1 ec 03                   shrq    $0x3, %r12
// 2d2: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2d6: 31 c0                         xorl    %eax, %eax
// 2d8: e9 bf fd ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 2dd: 
static const unsigned char _CALL_LENplus_DICT_MERGE_code_body[734] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd7, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xef, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x90, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xd5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xcf, 0xb9, 0xfc, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0x8d, 0x14, 0x00, 0x49, 0x8b, 0x3c, 0xd7, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xc1, 0x4d, 0x8b, 0x3c, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xba, 0x02, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x7e, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xfc, 0xeb, 0x6b, 0x4f, 0x8d, 0x24, 0xef, 0xeb, 0x65, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd3, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xbf, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_DICT_MERGE_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_MergeEx, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatKwargsError, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_DICT_MERGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_DICT_MERGE_data_holes[1];

// _CALL_LENplus_DICT_UPDATE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_DICT_UPDATE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d6                      movq    %rdx, %r14
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d7 00                cmpq    $0x0, (%r15,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ef                   movq    (%r15,%r13,8), %rbp
// 67: 49 8b 46 10                   movq    0x10(%r14), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 df                      subq    %rbx, %r15
// 77: 49 83 c7 b8                   addq    $-0x48, %r15
// 7b: 49 c1 ef 03                   shrq    $0x3, %r15
// 7f: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 cf                   movq    (%r15,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 7d 01 00 00             js      0x244 <_JIT_ENTRY+0x244>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 c5 00 00 00             je      0x24c <_JIT_ENTRY+0x24c>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 cf                   movq    %rdx, (%r15,%rcx,8)
// 1a2: f7 d0                         notl    %eax
// 1a4: 48 98                         cltq
// 1a6: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 1aa: 49 83 c4 f8                   addq    $-0x8, %r12
// 1ae: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 1b3: 48 01 c0                      addq    %rax, %rax
// 1b6: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  PyDict_Update
// 1c4: 4c 89 ee                      movq    %r13, %rsi
// 1c7: ff d0                         callq   *%rax
// 1c9: 85 c0                         testl   %eax, %eax
// 1cb: 0f 88 84 00 00 00             js      0x255 <_JIT_ENTRY+0x255>
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7f 22                         jg      0x1fc <_JIT_ENTRY+0x1fc>
// 1da: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001dc:  R_X86_64_64  .rodata.str1.1
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_NegativeRefcount
// 1ee: be c4 05 00 00                movl    $0x5c4, %esi            # imm = 0x5C4
// 1f3: 4c 89 ea                      movq    %r13, %rdx
// 1f6: ff d0                         callq   *%rax
// 1f8: 49 8b 45 00                   movq    (%r13), %rax
// 1fc: 85 c0                         testl   %eax, %eax
// 1fe: 78 21                         js      0x221 <_JIT_ENTRY+0x221>
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20a: ff d0                         callq   *%rax
// 20c: 49 ff 4d 00                   decq    (%r13)
// 210: 75 0f                         jne     0x221 <_JIT_ENTRY+0x221>
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_Dealloc
// 21c: 4c 89 ef                      movq    %r13, %rdi
// 21f: ff d0                         callq   *%rax
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _JIT_CONTINUE
// 22b: 48 89 df                      movq    %rbx, %rdi
// 22e: 4c 89 e6                      movq    %r12, %rsi
// 231: 4c 89 f2                      movq    %r14, %rdx
// 234: 48 83 c4 08                   addq    $0x8, %rsp
// 238: 5b                            popq    %rbx
// 239: 41 5c                         popq    %r12
// 23b: 41 5d                         popq    %r13
// 23d: 41 5e                         popq    %r14
// 23f: 41 5f                         popq    %r15
// 241: 5d                            popq    %rbp
// 242: ff e0                         jmpq    *%rax
// 244: 4d 89 fc                      movq    %r15, %r12
// 247: e9 aa 00 00 00                jmp     0x2f6 <_JIT_ENTRY+0x2f6>
// 24c: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 250: e9 a1 00 00 00                jmp     0x2f6 <_JIT_ENTRY+0x2f6>
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  PyExc_AttributeError
// 25f: 48 8b 30                      movq    (%rax), %rsi
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _PyErr_ExceptionMatches
// 26c: 4c 89 f7                      movq    %r14, %rdi
// 26f: ff d0                         callq   *%rax
// 271: 85 c0                         testl   %eax, %eax
// 273: 74 31                         je      0x2a6 <_JIT_ENTRY+0x2a6>
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  PyExc_TypeError
// 27f: 48 8b 30                      movq    (%rax), %rsi
// 282: 49 8b 45 08                   movq    0x8(%r13), %rax
// 286: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 28a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000028c:  R_X86_64_64  .rodata.str1.1+0x39
// 294: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000296:  R_X86_64_64  _PyErr_Format
// 29e: 4c 89 f7                      movq    %r14, %rdi
// 2a1: 31 c0                         xorl    %eax, %eax
// 2a3: 41 ff d0                      callq   *%r8
// 2a6: 49 8b 45 00                   movq    (%r13), %rax
// 2aa: 48 85 c0                      testq   %rax, %rax
// 2ad: 7f 22                         jg      0x2d1 <_JIT_ENTRY+0x2d1>
// 2af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b1:  R_X86_64_64  .rodata.str1.1
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_NegativeRefcount
// 2c3: be c1 05 00 00                movl    $0x5c1, %esi            # imm = 0x5C1
// 2c8: 4c 89 ea                      movq    %r13, %rdx
// 2cb: ff d0                         callq   *%rax
// 2cd: 49 8b 45 00                   movq    (%r13), %rax
// 2d1: 85 c0                         testl   %eax, %eax
// 2d3: 78 21                         js      0x2f6 <_JIT_ENTRY+0x2f6>
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2df: ff d0                         callq   *%rax
// 2e1: 49 ff 4d 00                   decq    (%r13)
// 2e5: 75 0f                         jne     0x2f6 <_JIT_ENTRY+0x2f6>
// 2e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e9:  R_X86_64_64  _Py_Dealloc
// 2f1: 4c 89 ef                      movq    %r13, %rdi
// 2f4: ff d0                         callq   *%rax
// 2f6: 49 29 dc                      subq    %rbx, %r12
// 2f9: 49 83 c4 b8                   addq    $-0x48, %r12
// 2fd: 49 c1 ec 03                   shrq    $0x3, %r12
// 301: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 305: 31 c0                         xorl    %eax, %eax
// 307: e9 90 fd ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 30c: 
static const unsigned char _CALL_LENplus_DICT_UPDATE_code_body[781] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd7, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xef, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x7d, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xc5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xcf, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0x01, 0xc0, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x84, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xfc, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xef, 0xe9, 0xa1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x31, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x90, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_DICT_UPDATE_code_holes[29] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Update, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AttributeError, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object is not a mapping\x00"
// 5a: 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_DICT_UPDATE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_DICT_UPDATE_data_holes[1];

// _CALL_LENplus_END_SEND
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_END_SEND.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 81 01 00 00             js      0x248 <_JIT_ENTRY+0x248>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 bd 00 00 00             je      0x244 <_JIT_ENTRY+0x244>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a2: f7 d0                         notl    %eax
// 1a4: 4c 63 e8                      movslq  %eax, %r13
// 1a7: 4f 8b 64 ee f0                movq    -0x10(%r14,%r13,8), %r12
// 1ac: 4b 8b 6c ee f8                movq    -0x8(%r14,%r13,8), %rbp
// 1b1: 49 8b 04 24                   movq    (%r12), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7f 22                         jg      0x1dc <_JIT_ENTRY+0x1dc>
// 1ba: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bc:  R_X86_64_64  .rodata.str1.1
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _Py_NegativeRefcount
// 1ce: be 66 00 00 00                movl    $0x66, %esi
// 1d3: 4c 89 e2                      movq    %r12, %rdx
// 1d6: ff d0                         callq   *%rax
// 1d8: 49 8b 04 24                   movq    (%r12), %rax
// 1dc: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 1e0: 49 83 c5 f8                   addq    $-0x8, %r13
// 1e4: 85 c0                         testl   %eax, %eax
// 1e6: 78 21                         js      0x209 <_JIT_ENTRY+0x209>
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f2: ff d0                         callq   *%rax
// 1f4: 49 ff 0c 24                   decq    (%r12)
// 1f8: 75 0f                         jne     0x209 <_JIT_ENTRY+0x209>
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _Py_Dealloc
// 204: 4c 89 e7                      movq    %r12, %rdi
// 207: ff d0                         callq   *%rax
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: f7 d0                         notl    %eax
// 215: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 21a: 48 98                         cltq
// 21c: 49 89 6c c6 f0                movq    %rbp, -0x10(%r14,%rax,8)
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _JIT_CONTINUE
// 22b: 48 89 df                      movq    %rbx, %rdi
// 22e: 4c 89 ee                      movq    %r13, %rsi
// 231: 4c 89 fa                      movq    %r15, %rdx
// 234: 48 83 c4 08                   addq    $0x8, %rsp
// 238: 5b                            popq    %rbx
// 239: 41 5c                         popq    %r12
// 23b: 41 5d                         popq    %r13
// 23d: 41 5e                         popq    %r14
// 23f: 41 5f                         popq    %r15
// 241: 5d                            popq    %rbp
// 242: ff e0                         jmpq    *%rax
// 244: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 248: 49 29 de                      subq    %rbx, %r14
// 24b: 49 83 c6 b8                   addq    $-0x48, %r14
// 24f: 49 c1 ee 03                   shrq    $0x3, %r14
// 253: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 257: 31 c0                         xorl    %eax, %eax
// 259: e9 3e fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 25e: 
static const unsigned char _CALL_LENplus_END_SEND_code_body[607] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x81, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xbd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x4c, 0x63, 0xe8, 0x4f, 0x8b, 0x64, 0xee, 0xf0, 0x4b, 0x8b, 0x6c, 0xee, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x2c, 0xee, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x6c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x3e, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_END_SEND_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_END_SEND_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_END_SEND_data_holes[1];

// _CALL_LENplus_EXIT_INIT_CHECK
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_EXIT_INIT_CHECK.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 2e 01 00 00             js      0x1f8 <_JIT_ENTRY+0x1f8>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 188: 48 85 d2                      testq   %rdx, %rdx
// 18b: 74 67                         je      0x1f4 <_JIT_ENTRY+0x1f4>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _JIT_OPARG
// 197: 0f b7 c0                      movzwl  %ax, %eax
// 19a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 19f: 29 c1                         subl    %eax, %ecx
// 1a1: 48 63 c9                      movslq  %ecx, %rcx
// 1a4: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a8: f7 d0                         notl    %eax
// 1aa: 48 63 c8                      movslq  %eax, %rcx
// 1ad: 49 8b 44 ce f8                movq    -0x8(%r14,%rcx,8), %rax
// 1b2: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001b4:  R_X86_64_64  _Py_NoneStruct
// 1bc: 48 39 d0                      cmpq    %rdx, %rax
// 1bf: 74 4d                         je      0x20e <_JIT_ENTRY+0x20e>
// 1c1: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1c5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c7:  R_X86_64_64  PyExc_TypeError
// 1cf: 48 8b 39                      movq    (%rcx), %rdi
// 1d2: 48 8b 40 08                   movq    0x8(%rax), %rax
// 1d6: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 1da: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001dc:  R_X86_64_64  .rodata.str1.1+0x39
// 1e4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e6:  R_X86_64_64  PyErr_Format
// 1ee: 31 c0                         xorl    %eax, %eax
// 1f0: ff d1                         callq   *%rcx
// 1f2: eb 04                         jmp     0x1f8 <_JIT_ENTRY+0x1f8>
// 1f4: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 1f8: 49 29 de                      subq    %rbx, %r14
// 1fb: 49 83 c6 b8                   addq    $-0x48, %r14
// 1ff: 49 c1 ee 03                   shrq    $0x3, %r14
// 203: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 207: 31 c0                         xorl    %eax, %eax
// 209: e9 8f fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 20e: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 212: 48 83 c6 f8                   addq    $-0x8, %rsi
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _JIT_CONTINUE
// 220: 48 89 df                      movq    %rbx, %rdi
// 223: 4c 89 fa                      movq    %r15, %rdx
// 226: 48 83 c4 18                   addq    $0x18, %rsp
// 22a: 5b                            popq    %rbx
// 22b: 41 5c                         popq    %r12
// 22d: 41 5d                         popq    %r13
// 22f: 41 5e                         popq    %r14
// 231: 41 5f                         popq    %r15
// 233: 5d                            popq    %rbp
// 234: ff e0                         jmpq    *%rax
// 236: 
static const unsigned char _CALL_LENplus_EXIT_INIT_CHECK_code_body[567] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x2e, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x67, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x63, 0xc8, 0x49, 0x8b, 0x44, 0xce, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd0, 0x74, 0x4d, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x39, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0xeb, 0x04, 0x4f, 0x8d, 0x34, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x8f, 0xfe, 0xff, 0xff, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_EXIT_INIT_CHECK_code_holes[19] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_Format, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__init__() should return None, not '%.200s'\x00"
// 65: 00 00 00
static const unsigned char _CALL_LENplus_EXIT_INIT_CHECK_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x5f, 0x28, 0x29, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x4e, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_EXIT_INIT_CHECK_data_holes[1];

// _CALL_LENplus_EXIT_TRACE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_EXIT_TRACE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c1                      movzwl  %cx, %eax
// 1e: 89 c6                         movl    %eax, %esi
// 20: f7 d6                         notl    %esi
// 22: 48 63 ee                      movslq  %esi, %rbp
// 25: 31 f6                         xorl    %esi, %esi
// 27: 66 85 c9                      testw   %cx, %cx
// 2a: 40 0f 94 c6                   sete    %sil
// 2e: 31 ff                         xorl    %edi, %edi
// 30: 66 83 f9 01                   cmpw    $0x1, %cx
// 34: 40 0f 94 c7                   sete    %dil
// 38: 0f b7 c9                      movzwl  %cx, %ecx
// 3b: 49 89 c8                      movq    %rcx, %r8
// 3e: 49 f7 d8                      negq    %r8
// 41: 49 83 3c ee 00                cmpq    $0x0, (%r14,%rbp,8)
// 46: 0f 44 f7                      cmovel  %edi, %esi
// 49: 48 f7 d1                      notq    %rcx
// 4c: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 50: 40 80 fe 01                   cmpb    $0x1, %sil
// 54: 75 1b                         jne     0x71 <_JIT_ENTRY+0x71>
// 56: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 5b: 29 c6                         subl    %eax, %esi
// 5d: 4c 63 e6                      movslq  %esi, %r12
// 60: 4f 8b 2c e6                   movq    (%r14,%r12,8), %r13
// 64: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 68: 4c 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %r13
// 6f: 74 37                         je      0xa8 <_JIT_ENTRY+0xa8>
// 71: 49 29 de                      subq    %rbx, %r14
// 74: 49 83 c6 b8                   addq    $-0x48, %r14
// 78: 49 c1 ee 03                   shrq    $0x3, %r14
// 7c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 80: 48 8b 03                      movq    (%rbx), %rax
// 83: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000085:  R_X86_64_64  _JIT_TARGET
// 8d: 89 c9                         movl    %ecx, %ecx
// 8f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 93: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 99: 48 83 c4 08                   addq    $0x8, %rsp
// 9d: 5b                            popq    %rbx
// 9e: 41 5c                         popq    %r12
// a0: 41 5d                         popq    %r13
// a2: 41 5e                         popq    %r14
// a4: 41 5f                         popq    %r15
// a6: 5d                            popq    %rbp
// a7: c3                            retq
// a8: 4d 8b 3c ce                   movq    (%r14,%rcx,8), %r15
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  PyObject_Size
// b6: 4c 89 ff                      movq    %r15, %rdi
// b9: ff d0                         callq   *%rax
// bb: 48 85 c0                      testq   %rax, %rax
// be: 0f 88 cc 00 00 00             js      0x190 <_JIT_ENTRY+0x190>
// c4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c6:  R_X86_64_64  PyLong_FromSsize_t
// ce: 48 89 c7                      movq    %rax, %rdi
// d1: ff d1                         callq   *%rcx
// d3: 48 89 04 24                   movq    %rax, (%rsp)
// d7: 49 8b 45 00                   movq    (%r13), %rax
// db: 48 85 c0                      testq   %rax, %rax
// de: 7f 22                         jg      0x102 <_JIT_ENTRY+0x102>
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_NegativeRefcount
// f4: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// f9: 4c 89 ea                      movq    %r13, %rdx
// fc: ff d0                         callq   *%rax
// fe: 49 8b 45 00                   movq    (%r13), %rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 78 21                         js      0x127 <_JIT_ENTRY+0x127>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 4d 00                   decq    (%r13)
// 116: 75 0f                         jne     0x127 <_JIT_ENTRY+0x127>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_Dealloc
// 122: 4c 89 ef                      movq    %r13, %rdi
// 125: ff d0                         callq   *%rax
// 127: 49 8b 07                      movq    (%r15), %rax
// 12a: 48 85 c0                      testq   %rax, %rax
// 12d: 7f 21                         jg      0x150 <_JIT_ENTRY+0x150>
// 12f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000131:  R_X86_64_64  .rodata.str1.1
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_NegativeRefcount
// 143: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 148: 4c 89 fa                      movq    %r15, %rdx
// 14b: ff d0                         callq   *%rax
// 14d: 49 8b 07                      movq    (%r15), %rax
// 150: 85 c0                         testl   %eax, %eax
// 152: 78 20                         js      0x174 <_JIT_ENTRY+0x174>
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 15e: ff d0                         callq   *%rax
// 160: 49 ff 0f                      decq    (%r15)
// 163: 75 0f                         jne     0x174 <_JIT_ENTRY+0x174>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_Dealloc
// 16f: 4c 89 ff                      movq    %r15, %rdi
// 172: ff d0                         callq   *%rax
// 174: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 178: 48 8b 0c 24                   movq    (%rsp), %rcx
// 17c: 48 85 c9                      testq   %rcx, %rcx
// 17f: 74 0c                         je      0x18d <_JIT_ENTRY+0x18d>
// 181: 4d 8d 34 ee                   leaq    (%r14,%rbp,8), %r14
// 185: 48 89 08                      movq    %rcx, (%rax)
// 188: e9 e4 fe ff ff                jmp     0x71 <_JIT_ENTRY+0x71>
// 18d: 49 89 c6                      movq    %rax, %r14
// 190: 49 29 de                      subq    %rbx, %r14
// 193: 49 83 c6 b8                   addq    $-0x48, %r14
// 197: 49 c1 ee 03                   shrq    $0x3, %r14
// 19b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 19f: 31 c0                         xorl    %eax, %eax
// 1a1: e9 f3 fe ff ff                jmp     0x99 <_JIT_ENTRY+0x99>
// 1a6: 
static const unsigned char _CALL_LENplus_EXIT_TRACE_code_body[423] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x48, 0x63, 0xee, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xe6, 0x4f, 0x8b, 0x2c, 0xe6, 0x48, 0x8b, 0x42, 0x10, 0x4c, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xcc, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x0c, 0x4d, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0xe9, 0xe4, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xf3, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_EXIT_TRACE_code_holes[13] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_EXIT_TRACE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_EXIT_TRACE_data_holes[1];

// _CALL_LENplus_FORMAT_SIMPLE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_FORMAT_SIMPLE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 aa 01 00 00             js      0x274 <_JIT_ENTRY+0x274>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 188: 48 85 d2                      testq   %rdx, %rdx
// 18b: 0f 84 da 00 00 00             je      0x26b <_JIT_ENTRY+0x26b>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a3: 29 c1                         subl    %eax, %ecx
// 1a5: 48 63 c9                      movslq  %ecx, %rcx
// 1a8: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1ac: f7 d0                         notl    %eax
// 1ae: 48 98                         cltq
// 1b0: 49 8d 0c c6                   leaq    (%r14,%rax,8), %rcx
// 1b4: 48 83 c1 f8                   addq    $-0x8, %rcx
// 1b8: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  PyUnicode_Type
// 1c7: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1cc: 74 76                         je      0x244 <_JIT_ENTRY+0x244>
// 1ce: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  PyObject_Format
// 1dd: 4c 89 e7                      movq    %r12, %rdi
// 1e0: 31 f6                         xorl    %esi, %esi
// 1e2: ff d0                         callq   *%rax
// 1e4: 48 89 c5                      movq    %rax, %rbp
// 1e7: 49 8b 04 24                   movq    (%r12), %rax
// 1eb: 48 85 c0                      testq   %rax, %rax
// 1ee: 7f 22                         jg      0x212 <_JIT_ENTRY+0x212>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _Py_NegativeRefcount
// 204: be a6 0c 00 00                movl    $0xca6, %esi            # imm = 0xCA6
// 209: 4c 89 e2                      movq    %r12, %rdx
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 04 24                   movq    (%r12), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 21                         js      0x237 <_JIT_ENTRY+0x237>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 0c 24                   decq    (%r12)
// 226: 75 0f                         jne     0x237 <_JIT_ENTRY+0x237>
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _Py_Dealloc
// 232: 4c 89 e7                      movq    %r12, %rdi
// 235: ff d0                         callq   *%rax
// 237: 49 89 ec                      movq    %rbp, %r12
// 23a: 48 85 ed                      testq   %rbp, %rbp
// 23d: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 242: 74 2d                         je      0x271 <_JIT_ENTRY+0x271>
// 244: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 248: 4c 89 21                      movq    %r12, (%rcx)
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _JIT_CONTINUE
// 255: 48 89 df                      movq    %rbx, %rdi
// 258: 4c 89 fa                      movq    %r15, %rdx
// 25b: 48 83 c4 18                   addq    $0x18, %rsp
// 25f: 5b                            popq    %rbx
// 260: 41 5c                         popq    %r12
// 262: 41 5d                         popq    %r13
// 264: 41 5e                         popq    %r14
// 266: 41 5f                         popq    %r15
// 268: 5d                            popq    %rbp
// 269: ff e0                         jmpq    *%rax
// 26b: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 26f: eb 03                         jmp     0x274 <_JIT_ENTRY+0x274>
// 271: 49 89 ce                      movq    %rcx, %r14
// 274: 49 29 de                      subq    %rbx, %r14
// 277: 49 83 c6 b8                   addq    $-0x48, %r14
// 27b: 49 c1 ee 03                   shrq    $0x3, %r14
// 27f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 283: 31 c0                         xorl    %eax, %eax
// 285: e9 13 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 28a: 
static const unsigned char _CALL_LENplus_FORMAT_SIMPLE_code_body[651] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xaa, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xda, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8d, 0x0c, 0xc6, 0x48, 0x83, 0xc1, 0xf8, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x76, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa6, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xec, 0x48, 0x85, 0xed, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x74, 0x2d, 0x4b, 0x8d, 0x34, 0xee, 0x4c, 0x89, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xce, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x13, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_FORMAT_SIMPLE_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_FORMAT_SIMPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_FORMAT_SIMPLE_data_holes[1];

// _CALL_LENplus_FORMAT_WITH_SPEC
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_FORMAT_WITH_SPEC.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 e5 01 00 00             js      0x2ac <_JIT_ENTRY+0x2ac>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 1c 01 00 00             je      0x2a3 <_JIT_ENTRY+0x2a3>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a2: f7 d0                         notl    %eax
// 1a4: 4c 63 e0                      movslq  %eax, %r12
// 1a7: 4b 8b 6c e6 f0                movq    -0x10(%r14,%r12,8), %rbp
// 1ac: 4f 8b 6c e6 f8                movq    -0x8(%r14,%r12,8), %r13
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  PyObject_Format
// 1bb: 48 89 ef                      movq    %rbp, %rdi
// 1be: 4c 89 ee                      movq    %r13, %rsi
// 1c1: ff d0                         callq   *%rax
// 1c3: 48 89 04 24                   movq    %rax, (%rsp)
// 1c7: 48 8b 45 00                   movq    (%rbp), %rax
// 1cb: 48 85 c0                      testq   %rax, %rax
// 1ce: 7f 22                         jg      0x1f2 <_JIT_ENTRY+0x1f2>
// 1d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _Py_NegativeRefcount
// 1e4: be b7 0c 00 00                movl    $0xcb7, %esi            # imm = 0xCB7
// 1e9: 48 89 ea                      movq    %rbp, %rdx
// 1ec: ff d0                         callq   *%rax
// 1ee: 48 8b 45 00                   movq    (%rbp), %rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 78 21                         js      0x217 <_JIT_ENTRY+0x217>
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 200: ff d0                         callq   *%rax
// 202: 48 ff 4d 00                   decq    (%rbp)
// 206: 75 0f                         jne     0x217 <_JIT_ENTRY+0x217>
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _Py_Dealloc
// 212: 48 89 ef                      movq    %rbp, %rdi
// 215: ff d0                         callq   *%rax
// 217: 49 8b 45 00                   movq    (%r13), %rax
// 21b: 48 85 c0                      testq   %rax, %rax
// 21e: 7f 22                         jg      0x242 <_JIT_ENTRY+0x242>
// 220: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000222:  R_X86_64_64  .rodata.str1.1
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _Py_NegativeRefcount
// 234: be b8 0c 00 00                movl    $0xcb8, %esi            # imm = 0xCB8
// 239: 4c 89 ea                      movq    %r13, %rdx
// 23c: ff d0                         callq   *%rax
// 23e: 49 8b 45 00                   movq    (%r13), %rax
// 242: 85 c0                         testl   %eax, %eax
// 244: 78 21                         js      0x267 <_JIT_ENTRY+0x267>
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 250: ff d0                         callq   *%rax
// 252: 49 ff 4d 00                   decq    (%r13)
// 256: 75 0f                         jne     0x267 <_JIT_ENTRY+0x267>
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _Py_Dealloc
// 262: 4c 89 ef                      movq    %r13, %rdi
// 265: ff d0                         callq   *%rax
// 267: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 26b: 48 83 c0 f0                   addq    $-0x10, %rax
// 26f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 273: 48 85 c9                      testq   %rcx, %rcx
// 276: 74 31                         je      0x2a9 <_JIT_ENTRY+0x2a9>
// 278: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 27c: 48 83 c6 f8                   addq    $-0x8, %rsi
// 280: 48 89 08                      movq    %rcx, (%rax)
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _JIT_CONTINUE
// 28d: 48 89 df                      movq    %rbx, %rdi
// 290: 4c 89 fa                      movq    %r15, %rdx
// 293: 48 83 c4 08                   addq    $0x8, %rsp
// 297: 5b                            popq    %rbx
// 298: 41 5c                         popq    %r12
// 29a: 41 5d                         popq    %r13
// 29c: 41 5e                         popq    %r14
// 29e: 41 5f                         popq    %r15
// 2a0: 5d                            popq    %rbp
// 2a1: ff e0                         jmpq    *%rax
// 2a3: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 2a7: eb 03                         jmp     0x2ac <_JIT_ENTRY+0x2ac>
// 2a9: 49 89 c6                      movq    %rax, %r14
// 2ac: 49 29 de                      subq    %rbx, %r14
// 2af: 49 83 c6 b8                   addq    $-0x48, %r14
// 2b3: 49 c1 ee 03                   shrq    $0x3, %r14
// 2b7: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2bb: 31 c0                         xorl    %eax, %eax
// 2bd: e9 da fd ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 2c2: 
static const unsigned char _CALL_LENplus_FORMAT_WITH_SPEC_code_body[707] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xe5, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x1c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x4c, 0x63, 0xe0, 0x4b, 0x8b, 0x6c, 0xe6, 0xf0, 0x4f, 0x8b, 0x6c, 0xe6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb8, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x83, 0xc0, 0xf0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xda, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_FORMAT_WITH_SPEC_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_FORMAT_WITH_SPEC_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_FORMAT_WITH_SPEC_data_holes[1];

// _CALL_LENplus_FOR_ITER_TIER_TWO
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_FOR_ITER_TIER_TWO.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 40 01 00 00             js      0x20a <_JIT_ENTRY+0x20a>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 188: 48 85 d2                      testq   %rdx, %rdx
// 18b: 74 79                         je      0x206 <_JIT_ENTRY+0x206>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _JIT_OPARG
// 197: 0f b7 c0                      movzwl  %ax, %eax
// 19a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 19f: 29 c1                         subl    %eax, %ecx
// 1a1: 48 63 c9                      movslq  %ecx, %rcx
// 1a4: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a8: f7 d0                         notl    %eax
// 1aa: 48 63 e8                      movslq  %eax, %rbp
// 1ad: 4d 8b 64 ee f8                movq    -0x8(%r14,%rbp,8), %r12
// 1b2: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 1b7: 4c 89 e7                      movq    %r12, %rdi
// 1ba: ff 90 e0 00 00 00             callq   *0xe0(%rax)
// 1c0: 48 85 c0                      testq   %rax, %rax
// 1c3: 74 5b                         je      0x220 <_JIT_ENTRY+0x220>
// 1c5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c7:  R_X86_64_64  _JIT_OPARG
// 1cf: f7 d1                         notl    %ecx
// 1d1: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1d7: 48 63 c9                      movslq  %ecx, %rcx
// 1da: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 1de: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 1e2: 48 83 c6 08                   addq    $0x8, %rsi
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _JIT_CONTINUE
// 1f0: 48 89 df                      movq    %rbx, %rdi
// 1f3: 4c 89 fa                      movq    %r15, %rdx
// 1f6: 48 83 c4 18                   addq    $0x18, %rsp
// 1fa: 5b                            popq    %rbx
// 1fb: 41 5c                         popq    %r12
// 1fd: 41 5d                         popq    %r13
// 1ff: 41 5e                         popq    %r14
// 201: 41 5f                         popq    %r15
// 203: 5d                            popq    %rbp
// 204: ff e0                         jmpq    *%rax
// 206: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 20a: 49 29 de                      subq    %rbx, %r14
// 20d: 49 83 c6 b8                   addq    $-0x48, %r14
// 211: 49 c1 ee 03                   shrq    $0x3, %r14
// 215: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 219: 31 c0                         xorl    %eax, %eax
// 21b: e9 7d fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 220: 49 8b 47 68                   movq    0x68(%r15), %rax
// 224: 48 85 c0                      testq   %rax, %rax
// 227: 74 36                         je      0x25f <_JIT_ENTRY+0x25f>
// 229: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 22e: 74 2f                         je      0x25f <_JIT_ENTRY+0x25f>
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  PyExc_StopIteration
// 23a: 48 8b 30                      movq    (%rax), %rsi
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _PyErr_ExceptionMatches
// 247: 4c 89 ff                      movq    %r15, %rdi
// 24a: ff d0                         callq   *%rax
// 24c: 85 c0                         testl   %eax, %eax
// 24e: 74 74                         je      0x2c4 <_JIT_ENTRY+0x2c4>
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _PyErr_Clear
// 25a: 4c 89 ff                      movq    %r15, %rdi
// 25d: ff d0                         callq   *%rax
// 25f: 49 8b 04 24                   movq    (%r12), %rax
// 263: 48 85 c0                      testq   %rax, %rax
// 266: 7f 22                         jg      0x28a <_JIT_ENTRY+0x28a>
// 268: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026a:  R_X86_64_64  .rodata.str1.1
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_NegativeRefcount
// 27c: be 80 08 00 00                movl    $0x880, %esi            # imm = 0x880
// 281: 4c 89 e2                      movq    %r12, %rdx
// 284: ff d0                         callq   *%rax
// 286: 49 8b 04 24                   movq    (%r12), %rax
// 28a: 4d 8d 34 ee                   leaq    (%r14,%rbp,8), %r14
// 28e: 49 83 c6 f8                   addq    $-0x8, %r14
// 292: 85 c0                         testl   %eax, %eax
// 294: 0f 88 db fd ff ff             js      0x75 <_JIT_ENTRY+0x75>
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a4: ff d0                         callq   *%rax
// 2a6: 49 ff 0c 24                   decq    (%r12)
// 2aa: 0f 85 c5 fd ff ff             jne     0x75 <_JIT_ENTRY+0x75>
// 2b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b2:  R_X86_64_64  _Py_Dealloc
// 2ba: 4c 89 e7                      movq    %r12, %rdi
// 2bd: ff d0                         callq   *%rax
// 2bf: e9 b1 fd ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 2c4: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 2c8: e9 3d ff ff ff                jmp     0x20a <_JIT_ENTRY+0x20a>
// 2cd: 
static const unsigned char _CALL_LENplus_FOR_ITER_TIER_TWO_code_body[718] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x40, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x79, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x63, 0xe8, 0x4d, 0x8b, 0x64, 0xee, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0xff, 0x90, 0xe0, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x5b, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x7d, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x36, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x74, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x0f, 0x88, 0xdb, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xc5, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xb1, 0xfd, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0x3d, 0xff, 0xff, 0xff};
static const Hole _CALL_LENplus_FOR_ITER_TIER_TWO_code_holes[23] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_StopIteration, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_FOR_ITER_TIER_TWO_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_FOR_ITER_TIER_TWO_data_holes[1];

// _CALL_LENplus_GET_AITER
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_GET_AITER.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 f6                      movslq  %esi, %r14
// 65: 4b 8b 2c f7                   movq    (%r15,%r14,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 df                      subq    %rbx, %r15
// 79: 49 83 c7 b8                   addq    $-0x48, %r15
// 7d: 49 c1 ef 03                   shrq    $0x3, %r15
// 81: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b2: 4d 8b 24 cf                   movq    (%r15,%rcx,8), %r12
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 b1 01 00 00             js      0x27f <_JIT_ENTRY+0x27f>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 04 24                   movq    (%r12), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 e2                      movq    %r12, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 04 24                   movq    (%r12), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 21                         js      0x182 <_JIT_ENTRY+0x182>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 0c 24                   decq    (%r12)
// 171: 75 0f                         jne     0x182 <_JIT_ENTRY+0x182>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: ff d0                         callq   *%rax
// 182: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 187: 48 85 d2                      testq   %rdx, %rdx
// 18a: 0f 84 78 01 00 00             je      0x308 <_JIT_ENTRY+0x308>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _JIT_OPARG
// 19a: 0f b7 c0                      movzwl  %ax, %eax
// 19d: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a2: 29 c1                         subl    %eax, %ecx
// 1a4: 48 63 c9                      movslq  %ecx, %rcx
// 1a7: 49 89 14 cf                   movq    %rdx, (%r15,%rcx,8)
// 1ab: f7 d0                         notl    %eax
// 1ad: 48 98                         cltq
// 1af: 49 8d 6c c7 f8                leaq    -0x8(%r15,%rax,8), %rbp
// 1b4: 4d 8b 64 c7 f8                movq    -0x8(%r15,%rax,8), %r12
// 1b9: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 1be: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 1c2: 48 85 c9                      testq   %rcx, %rcx
// 1c5: 0f 84 bc 00 00 00             je      0x287 <_JIT_ENTRY+0x287>
// 1cb: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 1cf: 48 85 c9                      testq   %rcx, %rcx
// 1d2: 0f 84 af 00 00 00             je      0x287 <_JIT_ENTRY+0x287>
// 1d8: 4c 89 e7                      movq    %r12, %rdi
// 1db: ff d1                         callq   *%rcx
// 1dd: 49 89 c6                      movq    %rax, %r14
// 1e0: 49 8b 04 24                   movq    (%r12), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7f 22                         jg      0x20b <_JIT_ENTRY+0x20b>
// 1e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001eb:  R_X86_64_64  .rodata.str1.1
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _Py_NegativeRefcount
// 1fd: be c5 02 00 00                movl    $0x2c5, %esi            # imm = 0x2C5
// 202: 4c 89 e2                      movq    %r12, %rdx
// 205: ff d0                         callq   *%rax
// 207: 49 8b 04 24                   movq    (%r12), %rax
// 20b: 85 c0                         testl   %eax, %eax
// 20d: 78 21                         js      0x230 <_JIT_ENTRY+0x230>
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 219: ff d0                         callq   *%rax
// 21b: 49 ff 0c 24                   decq    (%r12)
// 21f: 75 0f                         jne     0x230 <_JIT_ENTRY+0x230>
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _Py_Dealloc
// 22b: 4c 89 e7                      movq    %r12, %rdi
// 22e: ff d0                         callq   *%rax
// 230: 4d 85 f6                      testq   %r14, %r14
// 233: 0f 84 d3 00 00 00             je      0x30c <_JIT_ENTRY+0x30c>
// 239: 49 8b 46 08                   movq    0x8(%r14), %rax
// 23d: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 241: 48 85 c9                      testq   %rcx, %rcx
// 244: 0f 84 d7 00 00 00             je      0x321 <_JIT_ENTRY+0x321>
// 24a: 48 83 79 10 00                cmpq    $0x0, 0x10(%rcx)
// 24f: 0f 84 cc 00 00 00             je      0x321 <_JIT_ENTRY+0x321>
// 255: 4b 8d 34 ef                   leaq    (%r15,%r13,8), %rsi
// 259: 4c 89 75 00                   movq    %r14, (%rbp)
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _JIT_CONTINUE
// 267: 48 89 df                      movq    %rbx, %rdi
// 26a: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 26f: 48 83 c4 18                   addq    $0x18, %rsp
// 273: 5b                            popq    %rbx
// 274: 41 5c                         popq    %r12
// 276: 41 5d                         popq    %r13
// 278: 41 5e                         popq    %r14
// 27a: 41 5f                         popq    %r15
// 27c: 5d                            popq    %rbp
// 27d: ff e0                         jmpq    *%rax
// 27f: 4c 89 fd                      movq    %r15, %rbp
// 282: e9 85 00 00 00                jmp     0x30c <_JIT_ENTRY+0x30c>
// 287: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000289:  R_X86_64_64  PyExc_TypeError
// 291: 48 8b 31                      movq    (%rcx), %rsi
// 294: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 298: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000029a:  R_X86_64_64  .rodata.str1.1+0x39
// 2a2: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002a4:  R_X86_64_64  _PyErr_Format
// 2ac: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2b1: 31 c0                         xorl    %eax, %eax
// 2b3: 41 ff d0                      callq   *%r8
// 2b6: 49 8b 04 24                   movq    (%r12), %rax
// 2ba: 48 85 c0                      testq   %rax, %rax
// 2bd: 7f 22                         jg      0x2e1 <_JIT_ENTRY+0x2e1>
// 2bf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c1:  R_X86_64_64  .rodata.str1.1
// 2c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cb:  R_X86_64_64  _Py_NegativeRefcount
// 2d3: be c1 02 00 00                movl    $0x2c1, %esi            # imm = 0x2C1
// 2d8: 4c 89 e2                      movq    %r12, %rdx
// 2db: ff d0                         callq   *%rax
// 2dd: 49 8b 04 24                   movq    (%r12), %rax
// 2e1: 85 c0                         testl   %eax, %eax
// 2e3: 78 27                         js      0x30c <_JIT_ENTRY+0x30c>
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ef: ff d0                         callq   *%rax
// 2f1: 49 ff 0c 24                   decq    (%r12)
// 2f5: 75 15                         jne     0x30c <_JIT_ENTRY+0x30c>
// 2f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f9:  R_X86_64_64  _Py_Dealloc
// 301: 4c 89 e7                      movq    %r12, %rdi
// 304: ff d0                         callq   *%rax
// 306: eb 04                         jmp     0x30c <_JIT_ENTRY+0x30c>
// 308: 4b 8d 2c f7                   leaq    (%r15,%r14,8), %rbp
// 30c: 48 29 dd                      subq    %rbx, %rbp
// 30f: 48 83 c5 b8                   addq    $-0x48, %rbp
// 313: 48 c1 ed 03                   shrq    $0x3, %rbp
// 317: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 31a: 31 c0                         xorl    %eax, %eax
// 31c: e9 7d fd ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 321: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000323:  R_X86_64_64  PyExc_TypeError
// 32b: 48 8b 31                      movq    (%rcx), %rsi
// 32e: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 332: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000334:  R_X86_64_64  .rodata.str1.1+0x7a
// 33c: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000033e:  R_X86_64_64  _PyErr_Format
// 346: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 34b: 31 c0                         xorl    %eax, %eax
// 34d: 41 ff d0                      callq   *%r8
// 350: 49 8b 06                      movq    (%r14), %rax
// 353: 48 85 c0                      testq   %rax, %rax
// 356: 7f 21                         jg      0x379 <_JIT_ENTRY+0x379>
// 358: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000035a:  R_X86_64_64  .rodata.str1.1
// 362: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000364:  R_X86_64_64  _Py_NegativeRefcount
// 36c: be cd 02 00 00                movl    $0x2cd, %esi            # imm = 0x2CD
// 371: 4c 89 f2                      movq    %r14, %rdx
// 374: ff d0                         callq   *%rax
// 376: 49 8b 06                      movq    (%r14), %rax
// 379: 85 c0                         testl   %eax, %eax
// 37b: 78 8f                         js      0x30c <_JIT_ENTRY+0x30c>
// 37d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 387: ff d0                         callq   *%rax
// 389: 49 ff 0e                      decq    (%r14)
// 38c: 4d 89 f4                      movq    %r14, %r12
// 38f: 0f 85 77 ff ff ff             jne     0x30c <_JIT_ENTRY+0x30c>
// 395: e9 5d ff ff ff                jmp     0x2f7 <_JIT_ENTRY+0x2f7>
// 39a: 
static const unsigned char _CALL_LENplus_GET_AITER_code_body[923] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xf6, 0x4b, 0x8b, 0x2c, 0xf7, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x24, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xb1, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x78, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xcf, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8d, 0x6c, 0xc7, 0xf8, 0x4d, 0x8b, 0x64, 0xc7, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xbc, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd1, 0x49, 0x89, 0xc6, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0xd3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x46, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x48, 0x83, 0x79, 0x10, 0x00, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x34, 0xef, 0x4c, 0x89, 0x75, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x89, 0xfd, 0xe9, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x04, 0x4b, 0x8d, 0x2c, 0xf7, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x7d, 0xfd, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcd, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x4d, 0x89, 0xf4, 0x0f, 0x85, 0x77, 0xff, 0xff, 0xff, 0xe9, 0x5d, 0xff, 0xff, 0xff};
static const Hole _CALL_LENplus_GET_AITER_code_holes[32] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x323, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x334, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7a},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x35a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x364, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x37f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an object with __aiter__ method, got %.100s\x00'async for' received an object from __aiter__ that does not implement __anext__: %.100s\x00"
// d2: 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_GET_AITER_data_body[217] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_GET_AITER_data_holes[1];

// _CALL_LENplus_GET_ANEXT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_GET_ANEXT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e7 00                cmpq    $0x0, (%r15,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 f6                      movslq  %esi, %r14
// 65: 4b 8b 2c f7                   movq    (%r15,%r14,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 df                      subq    %rbx, %r15
// 79: 49 83 c7 b8                   addq    $-0x48, %r15
// 7d: 49 c1 ef 03                   shrq    $0x3, %r15
// 81: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b2: 4d 8b 2c cf                   movq    (%r15,%rcx,8), %r13
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 ef                      movq    %r13, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 96 01 00 00             js      0x264 <_JIT_ENTRY+0x264>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 45 00                   movq    (%r13), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 ea                      movq    %r13, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 45 00                   movq    (%r13), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 21                         js      0x182 <_JIT_ENTRY+0x182>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 4d 00                   decq    (%r13)
// 171: 75 0f                         jne     0x182 <_JIT_ENTRY+0x182>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 ef                      movq    %r13, %rdi
// 180: ff d0                         callq   *%rax
// 182: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 187: 48 85 d2                      testq   %rdx, %rdx
// 18a: 0f 84 dc 00 00 00             je      0x26c <_JIT_ENTRY+0x26c>
// 190: 4b 8d 2c e7                   leaq    (%r15,%r12,8), %rbp
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a6: 29 c1                         subl    %eax, %ecx
// 1a8: 48 63 c9                      movslq  %ecx, %rcx
// 1ab: 49 89 14 cf                   movq    %rdx, (%r15,%rcx,8)
// 1af: f7 d0                         notl    %eax
// 1b1: 48 98                         cltq
// 1b3: 49 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %rdi
// 1b8: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 1bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001be:  R_X86_64_64  PyAsyncGen_Type
// 1c6: 48 39 c8                      cmpq    %rcx, %rax
// 1c9: 0f 84 da 00 00 00             je      0x2a9 <_JIT_ENTRY+0x2a9>
// 1cf: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 1d3: 48 85 c9                      testq   %rcx, %rcx
// 1d6: 0f 84 99 00 00 00             je      0x275 <_JIT_ENTRY+0x275>
// 1dc: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 1e0: 48 85 c9                      testq   %rcx, %rcx
// 1e3: 0f 84 8c 00 00 00             je      0x275 <_JIT_ENTRY+0x275>
// 1e9: ff d1                         callq   *%rcx
// 1eb: 48 85 c0                      testq   %rax, %rax
// 1ee: 0f 84 4b 01 00 00             je      0x33f <_JIT_ENTRY+0x33f>
// 1f4: 49 89 c4                      movq    %rax, %r12
// 1f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f9:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 201: 4c 89 e7                      movq    %r12, %rdi
// 204: ff d0                         callq   *%rax
// 206: 48 85 c0                      testq   %rax, %rax
// 209: 0f 84 ee 00 00 00             je      0x2fd <_JIT_ENTRY+0x2fd>
// 20f: 49 89 c5                      movq    %rax, %r13
// 212: 49 8b 04 24                   movq    (%r12), %rax
// 216: 48 85 c0                      testq   %rax, %rax
// 219: 7f 22                         jg      0x23d <_JIT_ENTRY+0x23d>
// 21b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021d:  R_X86_64_64  .rodata.str1.1
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _Py_NegativeRefcount
// 22f: be fb 02 00 00                movl    $0x2fb, %esi            # imm = 0x2FB
// 234: 4c 89 e2                      movq    %r12, %rdx
// 237: ff d0                         callq   *%rax
// 239: 49 8b 04 24                   movq    (%r12), %rax
// 23d: 85 c0                         testl   %eax, %eax
// 23f: 78 7b                         js      0x2bc <_JIT_ENTRY+0x2bc>
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24b: ff d0                         callq   *%rax
// 24d: 49 ff 0c 24                   decq    (%r12)
// 251: 75 69                         jne     0x2bc <_JIT_ENTRY+0x2bc>
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  _Py_Dealloc
// 25d: 4c 89 e7                      movq    %r12, %rdi
// 260: ff d0                         callq   *%rax
// 262: eb 58                         jmp     0x2bc <_JIT_ENTRY+0x2bc>
// 264: 4c 89 fd                      movq    %r15, %rbp
// 267: e9 d3 00 00 00                jmp     0x33f <_JIT_ENTRY+0x33f>
// 26c: 4b 8d 2c f7                   leaq    (%r15,%r14,8), %rbp
// 270: e9 ca 00 00 00                jmp     0x33f <_JIT_ENTRY+0x33f>
// 275: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000277:  R_X86_64_64  PyExc_TypeError
// 27f: 48 8b 31                      movq    (%rcx), %rsi
// 282: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 286: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000288:  R_X86_64_64  .rodata.str1.1+0x39
// 290: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000292:  R_X86_64_64  _PyErr_Format
// 29a: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 29f: 31 c0                         xorl    %eax, %eax
// 2a1: 41 ff d0                      callq   *%r8
// 2a4: e9 96 00 00 00                jmp     0x33f <_JIT_ENTRY+0x33f>
// 2a9: 48 8b 41 50                   movq    0x50(%rcx), %rax
// 2ad: ff 50 10                      callq   *0x10(%rax)
// 2b0: 49 89 c5                      movq    %rax, %r13
// 2b3: 48 85 c0                      testq   %rax, %rax
// 2b6: 0f 84 83 00 00 00             je      0x33f <_JIT_ENTRY+0x33f>
// 2bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002be:  R_X86_64_64  _JIT_OPARG
// 2c6: f7 d0                         notl    %eax
// 2c8: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2cd: 48 98                         cltq
// 2cf: 4d 89 2c c7                   movq    %r13, (%r15,%rax,8)
// 2d3: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 2d7: 48 83 c6 08                   addq    $0x8, %rsi
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _JIT_CONTINUE
// 2e5: 48 89 df                      movq    %rbx, %rdi
// 2e8: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2ed: 48 83 c4 18                   addq    $0x18, %rsp
// 2f1: 5b                            popq    %rbx
// 2f2: 41 5c                         popq    %r12
// 2f4: 41 5d                         popq    %r13
// 2f6: 41 5e                         popq    %r14
// 2f8: 41 5f                         popq    %r15
// 2fa: 5d                            popq    %rbp
// 2fb: ff e0                         jmpq    *%rax
// 2fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ff:  R_X86_64_64  PyExc_TypeError
// 307: 48 8b 38                      movq    (%rax), %rdi
// 30a: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 30f: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 313: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000315:  R_X86_64_64  .rodata.str1.1+0x7c
// 31d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000031f:  R_X86_64_64  _PyErr_FormatFromCause
// 327: 31 c0                         xorl    %eax, %eax
// 329: ff d1                         callq   *%rcx
// 32b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032d:  R_X86_64_64  .text+0x360
// 335: bf f8 02 00 00                movl    $0x2f8, %edi            # imm = 0x2F8
// 33a: 4c 89 e6                      movq    %r12, %rsi
// 33d: ff d0                         callq   *%rax
// 33f: 48 29 dd                      subq    %rbx, %rbp
// 342: 48 83 c5 b8                   addq    $-0x48, %rbp
// 346: 48 c1 ed 03                   shrq    $0x3, %rbp
// 34a: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 34d: 31 c0                         xorl    %eax, %eax
// 34f: e9 4a fd ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 354: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 
// 0000000000000360 <Py_DECREF>:
// 360: 53                            pushq   %rbx
// 361: 48 89 f3                      movq    %rsi, %rbx
// 364: 48 8b 06                      movq    (%rsi), %rax
// 367: 48 85 c0                      testq   %rax, %rax
// 36a: 7e 06                         jle     0x372 <Py_DECREF+0x12>
// 36c: 85 c0                         testl   %eax, %eax
// 36e: 79 24                         jns     0x394 <Py_DECREF+0x34>
// 370: eb 33                         jmp     0x3a5 <Py_DECREF+0x45>
// 372: 89 fe                         movl    %edi, %esi
// 374: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000376:  R_X86_64_64  .rodata.str1.1
// 37e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000380:  R_X86_64_64  _Py_NegativeRefcount
// 388: 48 89 da                      movq    %rbx, %rdx
// 38b: ff d0                         callq   *%rax
// 38d: 48 8b 03                      movq    (%rbx), %rax
// 390: 85 c0                         testl   %eax, %eax
// 392: 78 11                         js      0x3a5 <Py_DECREF+0x45>
// 394: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000396:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 39e: ff d0                         callq   *%rax
// 3a0: 48 ff 0b                      decq    (%rbx)
// 3a3: 74 02                         je      0x3a7 <Py_DECREF+0x47>
// 3a5: 5b                            popq    %rbx
// 3a6: c3                            retq
// 3a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a9:  R_X86_64_64  _Py_Dealloc
// 3b1: 48 89 df                      movq    %rbx, %rdi
// 3b4: 5b                            popq    %rbx
// 3b5: ff e0                         jmpq    *%rax
// 3b7: 
static const unsigned char _CALL_LENplus_GET_ANEXT_code_body[952] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe7, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xf6, 0x4b, 0x8b, 0x2c, 0xf7, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x2c, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x96, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xdc, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xcf, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc7, 0xf8, 0x48, 0x8b, 0x47, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0xda, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x99, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x4b, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xee, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfb, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x7b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x69, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x58, 0x4c, 0x89, 0xfd, 0xe9, 0xd3, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xf7, 0xe9, 0xca, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0x96, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x41, 0x50, 0xff, 0x50, 0x10, 0x49, 0x89, 0xc5, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x2c, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x38, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xf8, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x4a, 0xfd, 0xff, 0xff, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CALL_LENplus_GET_ANEXT_code_holes[33] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyAsyncGen_Type, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x292, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x315, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7c},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_FormatFromCause, 0x0},
    {0x32d, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x360},
    {0x376, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x380, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x396, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an iterator with __anext__ method, got %.100s\x00'async for' received an invalid object from __anext__: %.100s\x00"
// ba: 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_GET_ANEXT_data_body[193] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_GET_ANEXT_data_holes[1];

// _CALL_LENplus_GET_AWAITABLE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_GET_AWAITABLE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 f6                      movslq  %esi, %r14
// 65: 4b 8b 2c f7                   movq    (%r15,%r14,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 df                      subq    %rbx, %r15
// 79: 49 83 c7 b8                   addq    $-0x48, %r15
// 7d: 49 c1 ef 03                   shrq    $0x3, %r15
// 81: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b2: 4d 8b 24 cf                   movq    (%r15,%rcx,8), %r12
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 0c 01 00 00             js      0x1da <_JIT_ENTRY+0x1da>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 04 24                   movq    (%r12), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 e2                      movq    %r12, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 04 24                   movq    (%r12), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 21                         js      0x182 <_JIT_ENTRY+0x182>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 0c 24                   decq    (%r12)
// 171: 75 0f                         jne     0x182 <_JIT_ENTRY+0x182>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: ff d0                         callq   *%rax
// 182: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 187: 48 85 d2                      testq   %rdx, %rdx
// 18a: 74 56                         je      0x1e2 <_JIT_ENTRY+0x1e2>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c0                      movzwl  %ax, %eax
// 199: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 19e: 29 c1                         subl    %eax, %ecx
// 1a0: 48 63 c9                      movslq  %ecx, %rcx
// 1a3: 49 89 14 cf                   movq    %rdx, (%r15,%rcx,8)
// 1a7: f7 d0                         notl    %eax
// 1a9: 4c 63 f0                      movslq  %eax, %r14
// 1ac: 4b 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %rbp
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 1bb: 48 89 ef                      movq    %rbp, %rdi
// 1be: ff d0                         callq   *%rax
// 1c0: 49 89 c4                      movq    %rax, %r12
// 1c3: 48 85 c0                      testq   %rax, %rax
// 1c6: 74 23                         je      0x1eb <_JIT_ENTRY+0x1eb>
// 1c8: 48 8b 45 00                   movq    (%rbp), %rax
// 1cc: 48 85 c0                      testq   %rax, %rax
// 1cf: 7e 45                         jle     0x216 <_JIT_ENTRY+0x216>
// 1d1: 85 c0                         testl   %eax, %eax
// 1d3: 79 67                         jns     0x23c <_JIT_ENTRY+0x23c>
// 1d5: e9 83 00 00 00                jmp     0x25d <_JIT_ENTRY+0x25d>
// 1da: 4c 89 fd                      movq    %r15, %rbp
// 1dd: e9 a1 01 00 00                jmp     0x383 <_JIT_ENTRY+0x383>
// 1e2: 4b 8d 2c f7                   leaq    (%r15,%r14,8), %rbp
// 1e6: e9 98 01 00 00                jmp     0x383 <_JIT_ENTRY+0x383>
// 1eb: 48 8b 75 08                   movq    0x8(%rbp), %rsi
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  _JIT_OPARG
// 1f9: 0f b7 d0                      movzwl  %ax, %edx
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _PyEval_FormatAwaitableError
// 206: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 20b: ff d0                         callq   *%rax
// 20d: 48 8b 45 00                   movq    (%rbp), %rax
// 211: 48 85 c0                      testq   %rax, %rax
// 214: 7f bb                         jg      0x1d1 <_JIT_ENTRY+0x1d1>
// 216: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000218:  R_X86_64_64  .rodata.str1.1
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_NegativeRefcount
// 22a: be 0c 03 00 00                movl    $0x30c, %esi            # imm = 0x30C
// 22f: 48 89 ea                      movq    %rbp, %rdx
// 232: ff d0                         callq   *%rax
// 234: 48 8b 45 00                   movq    (%rbp), %rax
// 238: 85 c0                         testl   %eax, %eax
// 23a: 78 21                         js      0x25d <_JIT_ENTRY+0x25d>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 246: ff d0                         callq   *%rax
// 248: 48 ff 4d 00                   decq    (%rbp)
// 24c: 75 0f                         jne     0x25d <_JIT_ENTRY+0x25d>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_Dealloc
// 258: 48 89 ef                      movq    %rbp, %rdi
// 25b: ff d0                         callq   *%rax
// 25d: 4b 8d 2c f7                   leaq    (%r15,%r14,8), %rbp
// 261: 48 83 c5 f8                   addq    $-0x8, %rbp
// 265: 4d 85 e4                      testq   %r12, %r12
// 268: 0f 84 15 01 00 00             je      0x383 <_JIT_ENTRY+0x383>
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  PyCoro_Type
// 278: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 27d: 74 2a                         je      0x2a9 <_JIT_ENTRY+0x2a9>
// 27f: 4b 8d 34 ef                   leaq    (%r15,%r13,8), %rsi
// 283: 4c 89 65 00                   movq    %r12, (%rbp)
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _JIT_CONTINUE
// 291: 48 89 df                      movq    %rbx, %rdi
// 294: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 299: 48 83 c4 18                   addq    $0x18, %rsp
// 29d: 5b                            popq    %rbx
// 29e: 41 5c                         popq    %r12
// 2a0: 41 5d                         popq    %r13
// 2a2: 41 5e                         popq    %r14
// 2a4: 41 5f                         popq    %r15
// 2a6: 5d                            popq    %rbp
// 2a7: ff e0                         jmpq    *%rax
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _PyGen_yf
// 2b3: 4c 89 e7                      movq    %r12, %rdi
// 2b6: ff d0                         callq   *%rax
// 2b8: 48 85 c0                      testq   %rax, %rax
// 2bb: 74 c2                         je      0x27f <_JIT_ENTRY+0x27f>
// 2bd: 48 8b 08                      movq    (%rax), %rcx
// 2c0: 48 85 c9                      testq   %rcx, %rcx
// 2c3: 7f 27                         jg      0x2ec <_JIT_ENTRY+0x2ec>
// 2c5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c7:  R_X86_64_64  .rodata.str1.1
// 2cf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002d1:  R_X86_64_64  _Py_NegativeRefcount
// 2d9: be 13 03 00 00                movl    $0x313, %esi            # imm = 0x313
// 2de: 49 89 c6                      movq    %rax, %r14
// 2e1: 48 89 c2                      movq    %rax, %rdx
// 2e4: ff d1                         callq   *%rcx
// 2e6: 4c 89 f0                      movq    %r14, %rax
// 2e9: 49 8b 0e                      movq    (%r14), %rcx
// 2ec: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000002ee:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f6: 85 c9                         testl   %ecx, %ecx
// 2f8: 78 1a                         js      0x314 <_JIT_ENTRY+0x314>
// 2fa: 49 89 c7                      movq    %rax, %r15
// 2fd: 41 ff d6                      callq   *%r14
// 300: 49 ff 0f                      decq    (%r15)
// 303: 75 0f                         jne     0x314 <_JIT_ENTRY+0x314>
// 305: 4c 89 ff                      movq    %r15, %rdi
// 308: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030a:  R_X86_64_64  _Py_Dealloc
// 312: ff d0                         callq   *%rax
// 314: 49 8b 04 24                   movq    (%r12), %rax
// 318: 48 85 c0                      testq   %rax, %rax
// 31b: 7f 22                         jg      0x33f <_JIT_ENTRY+0x33f>
// 31d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000031f:  R_X86_64_64  .rodata.str1.1
// 327: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000329:  R_X86_64_64  _Py_NegativeRefcount
// 331: be 14 03 00 00                movl    $0x314, %esi            # imm = 0x314
// 336: 4c 89 e2                      movq    %r12, %rdx
// 339: ff d0                         callq   *%rax
// 33b: 49 8b 04 24                   movq    (%r12), %rax
// 33f: 85 c0                         testl   %eax, %eax
// 341: 78 18                         js      0x35b <_JIT_ENTRY+0x35b>
// 343: 41 ff d6                      callq   *%r14
// 346: 49 ff 0c 24                   decq    (%r12)
// 34a: 75 0f                         jne     0x35b <_JIT_ENTRY+0x35b>
// 34c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034e:  R_X86_64_64  _Py_Dealloc
// 356: 4c 89 e7                      movq    %r12, %rdi
// 359: ff d0                         callq   *%rax
// 35b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035d:  R_X86_64_64  PyExc_RuntimeError
// 365: 48 8b 30                      movq    (%rax), %rsi
// 368: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000036a:  R_X86_64_64  .rodata.str1.1+0x39
// 372: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000374:  R_X86_64_64  _PyErr_SetString
// 37c: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 381: ff d0                         callq   *%rax
// 383: 48 29 dd                      subq    %rbx, %rbp
// 386: 48 83 c5 b8                   addq    $-0x48, %rbp
// 38a: 48 c1 ed 03                   shrq    $0x3, %rbp
// 38e: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 391: 31 c0                         xorl    %eax, %eax
// 393: e9 06 fd ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 398: 
static const unsigned char _CALL_LENplus_GET_AWAITABLE_code_body[921] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xf6, 0x4b, 0x8b, 0x2c, 0xf7, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x24, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x0c, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x56, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xcf, 0xf7, 0xd0, 0x4c, 0x63, 0xf0, 0x4b, 0x8b, 0x6c, 0xf7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x85, 0xc0, 0x74, 0x23, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x45, 0x85, 0xc0, 0x79, 0x67, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfd, 0xe9, 0xa1, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xf7, 0xe9, 0x98, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x75, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xbb, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x03, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x2c, 0xf7, 0x48, 0x83, 0xc5, 0xf8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x15, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x2a, 0x4b, 0x8d, 0x34, 0xef, 0x4c, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0xc2, 0x48, 0x8b, 0x08, 0x48, 0x85, 0xc9, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x13, 0x03, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0x89, 0xc2, 0xff, 0xd1, 0x4c, 0x89, 0xf0, 0x49, 0x8b, 0x0e, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc9, 0x78, 0x1a, 0x49, 0x89, 0xc7, 0x41, 0xff, 0xd6, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd6, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x06, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_GET_AWAITABLE_code_holes[34] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatAwaitableError, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyGen_yf, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x30a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x329, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x34e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x35d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_RuntimeError, 0x0},
    {0x36a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x374, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00coroutine is being awaited already\x00'
// 5c: 00 00 00 00
static const unsigned char _CALL_LENplus_GET_AWAITABLE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x77, 0x61, 0x69, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_GET_AWAITABLE_data_holes[1];

// _CALL_LENplus_GET_ITER
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_GET_ITER.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 92 01 00 00             js      0x25c <_JIT_ENTRY+0x25c>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 188: 48 85 d2                      testq   %rdx, %rdx
// 18b: 0f 84 c2 00 00 00             je      0x253 <_JIT_ENTRY+0x253>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a3: 29 c1                         subl    %eax, %ecx
// 1a5: 48 63 c9                      movslq  %ecx, %rcx
// 1a8: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1ac: f7 d0                         notl    %eax
// 1ae: 4c 63 e0                      movslq  %eax, %r12
// 1b1: 4b 8b 6c e6 f8                movq    -0x8(%r14,%r12,8), %rbp
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  PyObject_GetIter
// 1c0: 48 89 ef                      movq    %rbp, %rdi
// 1c3: ff d0                         callq   *%rax
// 1c5: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1ca: 48 8b 45 00                   movq    (%rbp), %rax
// 1ce: 48 85 c0                      testq   %rax, %rax
// 1d1: 7f 22                         jg      0x1f5 <_JIT_ENTRY+0x1f5>
// 1d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d5:  R_X86_64_64  .rodata.str1.1
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _Py_NegativeRefcount
// 1e7: be 4a 08 00 00                movl    $0x84a, %esi            # imm = 0x84A
// 1ec: 48 89 ea                      movq    %rbp, %rdx
// 1ef: ff d0                         callq   *%rax
// 1f1: 48 8b 45 00                   movq    (%rbp), %rax
// 1f5: 85 c0                         testl   %eax, %eax
// 1f7: 78 21                         js      0x21a <_JIT_ENTRY+0x21a>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 203: ff d0                         callq   *%rax
// 205: 48 ff 4d 00                   decq    (%rbp)
// 209: 75 0f                         jne     0x21a <_JIT_ENTRY+0x21a>
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_Dealloc
// 215: 48 89 ef                      movq    %rbp, %rdi
// 218: ff d0                         callq   *%rax
// 21a: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 21e: 48 83 c0 f8                   addq    $-0x8, %rax
// 222: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 227: 48 85 c9                      testq   %rcx, %rcx
// 22a: 74 2d                         je      0x259 <_JIT_ENTRY+0x259>
// 22c: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 230: 48 89 08                      movq    %rcx, (%rax)
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _JIT_CONTINUE
// 23d: 48 89 df                      movq    %rbx, %rdi
// 240: 4c 89 fa                      movq    %r15, %rdx
// 243: 48 83 c4 18                   addq    $0x18, %rsp
// 247: 5b                            popq    %rbx
// 248: 41 5c                         popq    %r12
// 24a: 41 5d                         popq    %r13
// 24c: 41 5e                         popq    %r14
// 24e: 41 5f                         popq    %r15
// 250: 5d                            popq    %rbp
// 251: ff e0                         jmpq    *%rax
// 253: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 257: eb 03                         jmp     0x25c <_JIT_ENTRY+0x25c>
// 259: 49 89 c6                      movq    %rax, %r14
// 25c: 49 29 de                      subq    %rbx, %r14
// 25f: 49 83 c6 b8                   addq    $-0x48, %r14
// 263: 49 c1 ee 03                   shrq    $0x3, %r14
// 267: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 26b: 31 c0                         xorl    %eax, %eax
// 26d: e9 2b fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 272: 
static const unsigned char _CALL_LENplus_GET_ITER_code_body[627] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x92, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xc2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x4c, 0x63, 0xe0, 0x4b, 0x8b, 0x6c, 0xe6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4a, 0x08, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x2d, 0x4b, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x2b, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_GET_ITER_code_holes[20] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_GET_ITER_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_GET_ITER_data_holes[1];

// _CALL_LENplus_GET_LEN
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_GET_LEN.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 5f 01 00 00             js      0x229 <_JIT_ENTRY+0x229>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 0f 84 93 00 00 00             je      0x22e <_JIT_ENTRY+0x22e>
// 19b: 4f 8d 24 e6                   leaq    (%r14,%r12,8), %r12
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  _JIT_OPARG
// 1a9: 0f b7 c0                      movzwl  %ax, %eax
// 1ac: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1b1: 29 c1                         subl    %eax, %ecx
// 1b3: 48 63 c9                      movslq  %ecx, %rcx
// 1b6: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1ba: f7 d0                         notl    %eax
// 1bc: 48 98                         cltq
// 1be: 49 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %rdi
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  PyObject_Size
// 1cd: ff d0                         callq   *%rax
// 1cf: 48 85 c0                      testq   %rax, %rax
// 1d2: 78 5e                         js      0x232 <_JIT_ENTRY+0x232>
// 1d4: 48 89 c7                      movq    %rax, %rdi
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  PyLong_FromSsize_t
// 1e1: ff d0                         callq   *%rax
// 1e3: 48 85 c0                      testq   %rax, %rax
// 1e6: 74 4a                         je      0x232 <_JIT_ENTRY+0x232>
// 1e8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ea:  R_X86_64_64  _JIT_OPARG
// 1f2: f7 d1                         notl    %ecx
// 1f4: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1fa: 48 63 c9                      movslq  %ecx, %rcx
// 1fd: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 201: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 205: 48 83 c6 08                   addq    $0x8, %rsi
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_CONTINUE
// 213: 48 89 df                      movq    %rbx, %rdi
// 216: 4c 89 fa                      movq    %r15, %rdx
// 219: 48 83 c4 18                   addq    $0x18, %rsp
// 21d: 5b                            popq    %rbx
// 21e: 41 5c                         popq    %r12
// 220: 41 5d                         popq    %r13
// 222: 41 5e                         popq    %r14
// 224: 41 5f                         popq    %r15
// 226: 5d                            popq    %rbp
// 227: ff e0                         jmpq    *%rax
// 229: 4d 89 f4                      movq    %r14, %r12
// 22c: eb 04                         jmp     0x232 <_JIT_ENTRY+0x232>
// 22e: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 232: 49 29 dc                      subq    %rbx, %r12
// 235: 49 83 c4 b8                   addq    $-0x48, %r12
// 239: 49 c1 ec 03                   shrq    $0x3, %r12
// 23d: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 241: 31 c0                         xorl    %eax, %eax
// 243: e9 55 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 248: 
static const unsigned char _CALL_LENplus_GET_LEN_code_body[585] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x5f, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x78, 0x5e, 0x48, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x4a, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xf4, 0xeb, 0x04, 0x4f, 0x8d, 0x24, 0xee, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x55, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_GET_LEN_code_holes[18] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_GET_LEN_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_GET_LEN_data_holes[1];

// _CALL_LENplus_GET_YIELD_FROM_ITER
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_GET_YIELD_FROM_ITER.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 f6                      movslq  %esi, %r14
// 65: 4b 8b 2c f7                   movq    (%r15,%r14,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 df                      subq    %rbx, %r15
// 79: 49 83 c7 b8                   addq    $-0x48, %r15
// 7d: 49 c1 ef 03                   shrq    $0x3, %r15
// 81: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b2: 4d 8b 24 cf                   movq    (%r15,%rcx,8), %r12
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 81 01 00 00             js      0x24f <_JIT_ENTRY+0x24f>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 04 24                   movq    (%r12), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 e2                      movq    %r12, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 04 24                   movq    (%r12), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 164: 78 21                         js      0x187 <_JIT_ENTRY+0x187>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 0c 24                   decq    (%r12)
// 176: 75 0f                         jne     0x187 <_JIT_ENTRY+0x187>
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  _Py_Dealloc
// 182: 4c 89 e7                      movq    %r12, %rdi
// 185: ff d0                         callq   *%rax
// 187: 48 85 ed                      testq   %rbp, %rbp
// 18a: 0f 84 c4 00 00 00             je      0x254 <_JIT_ENTRY+0x254>
// 190: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a6: 29 c1                         subl    %eax, %ecx
// 1a8: 48 63 c9                      movslq  %ecx, %rcx
// 1ab: 49 89 2c cf                   movq    %rbp, (%r15,%rcx,8)
// 1af: f7 d0                         notl    %eax
// 1b1: 48 98                         cltq
// 1b3: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 1b8: 49 8b 45 08                   movq    0x8(%r13), %rax
// 1bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001be:  R_X86_64_64  PyCoro_Type
// 1c6: 48 39 c8                      cmpq    %rcx, %rax
// 1c9: 0f 84 9f 00 00 00             je      0x26e <_JIT_ENTRY+0x26e>
// 1cf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d1:  R_X86_64_64  PyGen_Type
// 1d9: 48 39 c8                      cmpq    %rcx, %rax
// 1dc: 74 6a                         je      0x248 <_JIT_ENTRY+0x248>
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  PyObject_GetIter
// 1e8: 4c 89 ef                      movq    %r13, %rdi
// 1eb: ff d0                         callq   *%rax
// 1ed: 48 85 c0                      testq   %rax, %rax
// 1f0: 74 66                         je      0x258 <_JIT_ENTRY+0x258>
// 1f2: 48 89 c5                      movq    %rax, %rbp
// 1f5: 49 8b 45 00                   movq    (%r13), %rax
// 1f9: 48 85 c0                      testq   %rax, %rax
// 1fc: 7f 22                         jg      0x220 <_JIT_ENTRY+0x220>
// 1fe: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000200:  R_X86_64_64  .rodata.str1.1
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _Py_NegativeRefcount
// 212: be 6a 08 00 00                movl    $0x86a, %esi            # imm = 0x86A
// 217: 4c 89 ea                      movq    %r13, %rdx
// 21a: ff d0                         callq   *%rax
// 21c: 49 8b 45 00                   movq    (%r13), %rax
// 220: 85 c0                         testl   %eax, %eax
// 222: 78 21                         js      0x245 <_JIT_ENTRY+0x245>
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22e: ff d0                         callq   *%rax
// 230: 49 ff 4d 00                   decq    (%r13)
// 234: 75 0f                         jne     0x245 <_JIT_ENTRY+0x245>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_Dealloc
// 240: 4c 89 ef                      movq    %r13, %rdi
// 243: ff d0                         callq   *%rax
// 245: 49 89 ed                      movq    %rbp, %r13
// 248: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 24d: eb 32                         jmp     0x281 <_JIT_ENTRY+0x281>
// 24f: 4d 89 fc                      movq    %r15, %r12
// 252: eb 04                         jmp     0x258 <_JIT_ENTRY+0x258>
// 254: 4f 8d 24 f7                   leaq    (%r15,%r14,8), %r12
// 258: 49 29 dc                      subq    %rbx, %r12
// 25b: 49 83 c4 b8                   addq    $-0x48, %r12
// 25f: 49 c1 ec 03                   shrq    $0x3, %r12
// 263: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 267: 31 c0                         xorl    %eax, %eax
// 269: e9 30 fe ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 26e: 48 8b 03                      movq    (%rbx), %rax
// 271: 0f b7 40 30                   movzwl  0x30(%rax), %eax
// 275: a9 80 01 00 00                testl   $0x180, %eax            # imm = 0x180
// 27a: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 27f: 74 3b                         je      0x2bc <_JIT_ENTRY+0x2bc>
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  _JIT_OPARG
// 28b: f7 d0                         notl    %eax
// 28d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 292: 48 98                         cltq
// 294: 4d 89 6c c7 f8                movq    %r13, -0x8(%r15,%rax,8)
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _JIT_CONTINUE
// 2a3: 48 89 df                      movq    %rbx, %rdi
// 2a6: 4c 89 e6                      movq    %r12, %rsi
// 2a9: 48 89 ca                      movq    %rcx, %rdx
// 2ac: 48 83 c4 18                   addq    $0x18, %rsp
// 2b0: 5b                            popq    %rbx
// 2b1: 41 5c                         popq    %r12
// 2b3: 41 5d                         popq    %r13
// 2b5: 41 5e                         popq    %r14
// 2b7: 41 5f                         popq    %r15
// 2b9: 5d                            popq    %rbp
// 2ba: ff e0                         jmpq    *%rax
// 2bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002be:  R_X86_64_64  PyExc_TypeError
// 2c6: 48 8b 30                      movq    (%rax), %rsi
// 2c9: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002cb:  R_X86_64_64  .rodata.str1.1+0x39
// 2d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d5:  R_X86_64_64  _PyErr_SetString
// 2dd: 48 89 cf                      movq    %rcx, %rdi
// 2e0: ff d0                         callq   *%rax
// 2e2: e9 71 ff ff ff                jmp     0x258 <_JIT_ENTRY+0x258>
// 2e7: 
static const unsigned char _CALL_LENplus_GET_YIELD_FROM_ITER_code_body[744] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xf6, 0x4b, 0x8b, 0x2c, 0xf7, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x24, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x81, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x0f, 0x84, 0xc4, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xcf, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x49, 0x8b, 0x45, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x74, 0x6a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x66, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x6a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xed, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0xeb, 0x32, 0x4d, 0x89, 0xfc, 0xeb, 0x04, 0x4f, 0x8d, 0x24, 0xf7, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x30, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x03, 0x0f, 0xb7, 0x40, 0x30, 0xa9, 0x80, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x74, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x6c, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xca, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0xe9, 0x71, 0xff, 0xff, 0xff};
static const Hole _CALL_LENplus_GET_YIELD_FROM_ITER_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyGen_Type, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot 'yield from' a coroutine object in a non-coroutine generator\x00"
// 7d: 00 00 00
static const unsigned char _CALL_LENplus_GET_YIELD_FROM_ITER_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x27, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_GET_YIELD_FROM_ITER_data_holes[1];

// _CALL_LENplus_GUARD_BOTH_FLOAT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_GUARD_BOTH_FLOAT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 31 01 00 00             js      0x1fb <_JIT_ENTRY+0x1fb>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 60                         je      0x1f7 <_JIT_ENTRY+0x1f7>
// 197: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 49 8b 4c c6 f0                movq    -0x10(%r14,%rax,8), %rcx
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  PyFloat_Type
// 1c9: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 1cd: 75 20                         jne     0x1ef <_JIT_ENTRY+0x1ef>
// 1cf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d1:  R_X86_64_64  _JIT_OPARG
// 1d9: f7 d1                         notl    %ecx
// 1db: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1e1: 48 63 c9                      movslq  %ecx, %rcx
// 1e4: 49 8b 4c ce f8                movq    -0x8(%r14,%rcx,8), %rcx
// 1e9: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 1ed: 74 22                         je      0x211 <_JIT_ENTRY+0x211>
// 1ef: 49 89 f6                      movq    %rsi, %r14
// 1f2: e9 7e fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 1f7: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1fb: 49 29 de                      subq    %rbx, %r14
// 1fe: 49 83 c6 b8                   addq    $-0x48, %r14
// 202: 49 c1 ee 03                   shrq    $0x3, %r14
// 206: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 20a: 31 c0                         xorl    %eax, %eax
// 20c: e9 8c fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _JIT_CONTINUE
// 21b: 48 89 df                      movq    %rbx, %rdi
// 21e: 4c 89 fa                      movq    %r15, %rdx
// 221: 48 83 c4 18                   addq    $0x18, %rsp
// 225: 5b                            popq    %rbx
// 226: 41 5c                         popq    %r12
// 228: 41 5d                         popq    %r13
// 22a: 41 5e                         popq    %r14
// 22c: 41 5f                         popq    %r15
// 22e: 5d                            popq    %rbp
// 22f: ff e0                         jmpq    *%rax
// 231: 
static const unsigned char _CALL_LENplus_GUARD_BOTH_FLOAT_code_body[562] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x31, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x60, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x8b, 0x4c, 0xce, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x22, 0x49, 0x89, 0xf6, 0xe9, 0x7e, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x8c, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_GUARD_BOTH_FLOAT_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_GUARD_BOTH_FLOAT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_GUARD_BOTH_FLOAT_data_holes[1];

// _CALL_LENplus_GUARD_BOTH_INT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_GUARD_BOTH_INT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 31 01 00 00             js      0x1fb <_JIT_ENTRY+0x1fb>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 60                         je      0x1f7 <_JIT_ENTRY+0x1f7>
// 197: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 49 8b 4c c6 f0                movq    -0x10(%r14,%rax,8), %rcx
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  PyLong_Type
// 1c9: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 1cd: 75 20                         jne     0x1ef <_JIT_ENTRY+0x1ef>
// 1cf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d1:  R_X86_64_64  _JIT_OPARG
// 1d9: f7 d1                         notl    %ecx
// 1db: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1e1: 48 63 c9                      movslq  %ecx, %rcx
// 1e4: 49 8b 4c ce f8                movq    -0x8(%r14,%rcx,8), %rcx
// 1e9: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 1ed: 74 22                         je      0x211 <_JIT_ENTRY+0x211>
// 1ef: 49 89 f6                      movq    %rsi, %r14
// 1f2: e9 7e fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 1f7: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1fb: 49 29 de                      subq    %rbx, %r14
// 1fe: 49 83 c6 b8                   addq    $-0x48, %r14
// 202: 49 c1 ee 03                   shrq    $0x3, %r14
// 206: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 20a: 31 c0                         xorl    %eax, %eax
// 20c: e9 8c fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _JIT_CONTINUE
// 21b: 48 89 df                      movq    %rbx, %rdi
// 21e: 4c 89 fa                      movq    %r15, %rdx
// 221: 48 83 c4 18                   addq    $0x18, %rsp
// 225: 5b                            popq    %rbx
// 226: 41 5c                         popq    %r12
// 228: 41 5d                         popq    %r13
// 22a: 41 5e                         popq    %r14
// 22c: 41 5f                         popq    %r15
// 22e: 5d                            popq    %rbp
// 22f: ff e0                         jmpq    *%rax
// 231: 
static const unsigned char _CALL_LENplus_GUARD_BOTH_INT_code_body[562] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x31, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x60, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x8b, 0x4c, 0xce, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x22, 0x49, 0x89, 0xf6, 0xe9, 0x7e, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x8c, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_GUARD_BOTH_INT_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_GUARD_BOTH_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_GUARD_BOTH_INT_data_holes[1];

// _CALL_LENplus_GUARD_BOTH_UNICODE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_GUARD_BOTH_UNICODE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 31 01 00 00             js      0x1fb <_JIT_ENTRY+0x1fb>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 60                         je      0x1f7 <_JIT_ENTRY+0x1f7>
// 197: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 49 8b 4c c6 f0                movq    -0x10(%r14,%rax,8), %rcx
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  PyUnicode_Type
// 1c9: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 1cd: 75 20                         jne     0x1ef <_JIT_ENTRY+0x1ef>
// 1cf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d1:  R_X86_64_64  _JIT_OPARG
// 1d9: f7 d1                         notl    %ecx
// 1db: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1e1: 48 63 c9                      movslq  %ecx, %rcx
// 1e4: 49 8b 4c ce f8                movq    -0x8(%r14,%rcx,8), %rcx
// 1e9: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 1ed: 74 22                         je      0x211 <_JIT_ENTRY+0x211>
// 1ef: 49 89 f6                      movq    %rsi, %r14
// 1f2: e9 7e fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 1f7: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1fb: 49 29 de                      subq    %rbx, %r14
// 1fe: 49 83 c6 b8                   addq    $-0x48, %r14
// 202: 49 c1 ee 03                   shrq    $0x3, %r14
// 206: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 20a: 31 c0                         xorl    %eax, %eax
// 20c: e9 8c fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _JIT_CONTINUE
// 21b: 48 89 df                      movq    %rbx, %rdi
// 21e: 4c 89 fa                      movq    %r15, %rdx
// 221: 48 83 c4 18                   addq    $0x18, %rsp
// 225: 5b                            popq    %rbx
// 226: 41 5c                         popq    %r12
// 228: 41 5d                         popq    %r13
// 22a: 41 5e                         popq    %r14
// 22c: 41 5f                         popq    %r15
// 22e: 5d                            popq    %rbp
// 22f: ff e0                         jmpq    *%rax
// 231: 
static const unsigned char _CALL_LENplus_GUARD_BOTH_UNICODE_code_body[562] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x31, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x60, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x8b, 0x4c, 0xce, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x22, 0x49, 0x89, 0xf6, 0xe9, 0x7e, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x8c, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_GUARD_BOTH_UNICODE_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_GUARD_BOTH_UNICODE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_GUARD_BOTH_UNICODE_data_holes[1];

// _CALL_LENplus_GUARD_BUILTINS_VERSION
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_GUARD_BUILTINS_VERSION.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 26 01 00 00             js      0x1f0 <_JIT_ENTRY+0x1f0>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 187: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 18c: 48 85 c9                      testq   %rcx, %rcx
// 18f: 74 5c                         je      0x1ed <_JIT_ENTRY+0x1ed>
// 191: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 195: 48 89 08                      movq    %rcx, (%rax)
// 198: 48 8b 43 20                   movq    0x20(%rbx), %rax
// 19c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019e:  R_X86_64_64  PyDict_Type
// 1a6: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1aa: 0f 85 c5 fe ff ff             jne     0x75 <_JIT_ENTRY+0x75>
// 1b0: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1b4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b6:  R_X86_64_64  _JIT_OPERAND
// 1be: 0f b7 c9                      movzwl  %cx, %ecx
// 1c1: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 1c4: 0f 85 ab fe ff ff             jne     0x75 <_JIT_ENTRY+0x75>
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _JIT_CONTINUE
// 1d4: 48 89 df                      movq    %rbx, %rdi
// 1d7: 4c 89 f6                      movq    %r14, %rsi
// 1da: 4c 89 fa                      movq    %r15, %rdx
// 1dd: 48 83 c4 18                   addq    $0x18, %rsp
// 1e1: 5b                            popq    %rbx
// 1e2: 41 5c                         popq    %r12
// 1e4: 41 5d                         popq    %r13
// 1e6: 41 5e                         popq    %r14
// 1e8: 41 5f                         popq    %r15
// 1ea: 5d                            popq    %rbp
// 1eb: ff e0                         jmpq    *%rax
// 1ed: 49 89 c6                      movq    %rax, %r14
// 1f0: 49 29 de                      subq    %rbx, %r14
// 1f3: 49 83 c6 b8                   addq    $-0x48, %r14
// 1f7: 49 c1 ee 03                   shrq    $0x3, %r14
// 1fb: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1ff: 31 c0                         xorl    %eax, %eax
// 201: e9 97 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 206: 
static const unsigned char _CALL_LENplus_GUARD_BUILTINS_VERSION_code_body[519] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x26, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x5c, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xc5, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x0f, 0x85, 0xab, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x97, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_GUARD_BUILTINS_VERSION_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_GUARD_BUILTINS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_GUARD_BUILTINS_VERSION_data_holes[1];

// _CALL_LENplus_GUARD_DORV_VALUES
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_GUARD_DORV_VALUES.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 07 01 00 00             js      0x1d1 <_JIT_ENTRY+0x1d1>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 36                         je      0x1cd <_JIT_ENTRY+0x1cd>
// 197: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1bf: f6 40 e8 01                   testb   $0x1, -0x18(%rax)
// 1c3: 75 22                         jne     0x1e7 <_JIT_ENTRY+0x1e7>
// 1c5: 49 89 f6                      movq    %rsi, %r14
// 1c8: e9 a8 fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 1cd: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1d1: 49 29 de                      subq    %rbx, %r14
// 1d4: 49 83 c6 b8                   addq    $-0x48, %r14
// 1d8: 49 c1 ee 03                   shrq    $0x3, %r14
// 1dc: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1e0: 31 c0                         xorl    %eax, %eax
// 1e2: e9 b6 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _JIT_CONTINUE
// 1f1: 48 89 df                      movq    %rbx, %rdi
// 1f4: 4c 89 fa                      movq    %r15, %rdx
// 1f7: 48 83 c4 18                   addq    $0x18, %rsp
// 1fb: 5b                            popq    %rbx
// 1fc: 41 5c                         popq    %r12
// 1fe: 41 5d                         popq    %r13
// 200: 41 5e                         popq    %r14
// 202: 41 5f                         popq    %r15
// 204: 5d                            popq    %rbp
// 205: ff e0                         jmpq    *%rax
// 207: 
static const unsigned char _CALL_LENplus_GUARD_DORV_VALUES_code_body[520] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x36, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0xf6, 0x40, 0xe8, 0x01, 0x75, 0x22, 0x49, 0x89, 0xf6, 0xe9, 0xa8, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xb6, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_GUARD_DORV_VALUES_code_holes[15] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_GUARD_DORV_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_GUARD_DORV_VALUES_data_holes[1];

// _CALL_LENplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 36 01 00 00             js      0x200 <_JIT_ENTRY+0x200>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 65                         je      0x1fc <_JIT_ENTRY+0x1fc>
// 197: 4f 8d 2c e6                   leaq    (%r14,%r12,8), %r13
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 49 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %rdi
// 1bf: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// 1c3: 75 14                         jne     0x1d9 <_JIT_ENTRY+0x1d9>
// 1c5: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 1d3: ff d0                         callq   *%rax
// 1d5: 84 c0                         testb   %al, %al
// 1d7: 74 3d                         je      0x216 <_JIT_ENTRY+0x216>
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _JIT_CONTINUE
// 1e3: 48 89 df                      movq    %rbx, %rdi
// 1e6: 4c 89 ee                      movq    %r13, %rsi
// 1e9: 4c 89 fa                      movq    %r15, %rdx
// 1ec: 48 83 c4 18                   addq    $0x18, %rsp
// 1f0: 5b                            popq    %rbx
// 1f1: 41 5c                         popq    %r12
// 1f3: 41 5d                         popq    %r13
// 1f5: 41 5e                         popq    %r14
// 1f7: 41 5f                         popq    %r15
// 1f9: 5d                            popq    %rbp
// 1fa: ff e0                         jmpq    *%rax
// 1fc: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 200: 49 29 de                      subq    %rbx, %r14
// 203: 49 83 c6 b8                   addq    $-0x48, %r14
// 207: 49 c1 ee 03                   shrq    $0x3, %r14
// 20b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 20f: 31 c0                         xorl    %eax, %eax
// 211: e9 87 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 216: 4d 89 ee                      movq    %r13, %r14
// 219: e9 57 fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 21e: 
static const unsigned char _CALL_LENplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_body[543] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x36, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x65, 0x4f, 0x8d, 0x2c, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc6, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x14, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x84, 0xc0, 0x74, 0x3d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x87, 0xfe, 0xff, 0xff, 0x4d, 0x89, 0xee, 0xe9, 0x57, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_holes[1];

// _CALL_LENplus_GUARD_GLOBALS_VERSION
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_GUARD_GLOBALS_VERSION.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 26 01 00 00             js      0x1f0 <_JIT_ENTRY+0x1f0>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 187: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 18c: 48 85 c9                      testq   %rcx, %rcx
// 18f: 74 5c                         je      0x1ed <_JIT_ENTRY+0x1ed>
// 191: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 195: 48 89 08                      movq    %rcx, (%rax)
// 198: 48 8b 43 18                   movq    0x18(%rbx), %rax
// 19c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019e:  R_X86_64_64  PyDict_Type
// 1a6: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1aa: 0f 85 c5 fe ff ff             jne     0x75 <_JIT_ENTRY+0x75>
// 1b0: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1b4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b6:  R_X86_64_64  _JIT_OPERAND
// 1be: 0f b7 c9                      movzwl  %cx, %ecx
// 1c1: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 1c4: 0f 85 ab fe ff ff             jne     0x75 <_JIT_ENTRY+0x75>
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _JIT_CONTINUE
// 1d4: 48 89 df                      movq    %rbx, %rdi
// 1d7: 4c 89 f6                      movq    %r14, %rsi
// 1da: 4c 89 fa                      movq    %r15, %rdx
// 1dd: 48 83 c4 18                   addq    $0x18, %rsp
// 1e1: 5b                            popq    %rbx
// 1e2: 41 5c                         popq    %r12
// 1e4: 41 5d                         popq    %r13
// 1e6: 41 5e                         popq    %r14
// 1e8: 41 5f                         popq    %r15
// 1ea: 5d                            popq    %rbp
// 1eb: ff e0                         jmpq    *%rax
// 1ed: 49 89 c6                      movq    %rax, %r14
// 1f0: 49 29 de                      subq    %rbx, %r14
// 1f3: 49 83 c6 b8                   addq    $-0x48, %r14
// 1f7: 49 c1 ee 03                   shrq    $0x3, %r14
// 1fb: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1ff: 31 c0                         xorl    %eax, %eax
// 201: e9 97 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 206: 
static const unsigned char _CALL_LENplus_GUARD_GLOBALS_VERSION_code_body[519] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x26, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x5c, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xc5, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x0f, 0x85, 0xab, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x97, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_GUARD_GLOBALS_VERSION_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_GUARD_GLOBALS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_GUARD_GLOBALS_VERSION_data_holes[1];

// _CALL_LENplus_GUARD_IS_FALSE_POP
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_GUARD_IS_FALSE_POP.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 1f 01 00 00             js      0x1e9 <_JIT_ENTRY+0x1e9>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 188: 48 85 d2                      testq   %rdx, %rdx
// 18b: 74 58                         je      0x1e5 <_JIT_ENTRY+0x1e5>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _JIT_OPARG
// 197: 0f b7 c0                      movzwl  %ax, %eax
// 19a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 19f: 29 c1                         subl    %eax, %ecx
// 1a1: 48 63 c9                      movslq  %ecx, %rcx
// 1a4: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a8: f7 d0                         notl    %eax
// 1aa: 48 98                         cltq
// 1ac: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ae:  R_X86_64_64  _Py_TrueStruct
// 1b6: 49 39 4c c6 f8                cmpq    %rcx, -0x8(%r14,%rax,8)
// 1bb: 74 42                         je      0x1ff <_JIT_ENTRY+0x1ff>
// 1bd: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1c1: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _JIT_CONTINUE
// 1cf: 48 89 df                      movq    %rbx, %rdi
// 1d2: 4c 89 fa                      movq    %r15, %rdx
// 1d5: 48 83 c4 18                   addq    $0x18, %rsp
// 1d9: 5b                            popq    %rbx
// 1da: 41 5c                         popq    %r12
// 1dc: 41 5d                         popq    %r13
// 1de: 41 5e                         popq    %r14
// 1e0: 41 5f                         popq    %r15
// 1e2: 5d                            popq    %rbp
// 1e3: ff e0                         jmpq    *%rax
// 1e5: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 1e9: 49 29 de                      subq    %rbx, %r14
// 1ec: 49 83 c6 b8                   addq    $-0x48, %r14
// 1f0: 49 c1 ee 03                   shrq    $0x3, %r14
// 1f4: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1f8: 31 c0                         xorl    %eax, %eax
// 1fa: e9 9e fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 1ff: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 203: e9 6d fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 208: 
static const unsigned char _CALL_LENplus_GUARD_IS_FALSE_POP_code_body[521] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x1f, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x58, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc6, 0xf8, 0x74, 0x42, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x9e, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0x6d, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_GUARD_IS_FALSE_POP_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_GUARD_IS_FALSE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_GUARD_IS_FALSE_POP_data_holes[1];

// _CALL_LENplus_GUARD_IS_NONE_POP
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_GUARD_IS_NONE_POP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 00 01 00 00             js      0x1ca <_JIT_ENTRY+0x1ca>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 188: 48 85 d2                      testq   %rdx, %rdx
// 18b: 74 39                         je      0x1c6 <_JIT_ENTRY+0x1c6>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _JIT_OPARG
// 197: 0f b7 c0                      movzwl  %ax, %eax
// 19a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 19f: 29 c1                         subl    %eax, %ecx
// 1a1: 48 63 c9                      movslq  %ecx, %rcx
// 1a4: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a8: f7 d0                         notl    %eax
// 1aa: 48 98                         cltq
// 1ac: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ae:  R_X86_64_64  _Py_NoneStruct
// 1b6: 49 39 4c c6 f8                cmpq    %rcx, -0x8(%r14,%rax,8)
// 1bb: 74 23                         je      0x1e0 <_JIT_ENTRY+0x1e0>
// 1bd: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1c1: e9 af fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 1c6: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 1ca: 49 29 de                      subq    %rbx, %r14
// 1cd: 49 83 c6 b8                   addq    $-0x48, %r14
// 1d1: 49 c1 ee 03                   shrq    $0x3, %r14
// 1d5: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1d9: 31 c0                         xorl    %eax, %eax
// 1db: e9 bd fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 1e0: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1e4: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _JIT_CONTINUE
// 1f2: 48 89 df                      movq    %rbx, %rdi
// 1f5: 4c 89 fa                      movq    %r15, %rdx
// 1f8: 48 83 c4 18                   addq    $0x18, %rsp
// 1fc: 5b                            popq    %rbx
// 1fd: 41 5c                         popq    %r12
// 1ff: 41 5d                         popq    %r13
// 201: 41 5e                         popq    %r14
// 203: 41 5f                         popq    %r15
// 205: 5d                            popq    %rbp
// 206: ff e0                         jmpq    *%rax
// 208: 
static const unsigned char _CALL_LENplus_GUARD_IS_NONE_POP_code_body[521] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x00, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x39, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc6, 0xf8, 0x74, 0x23, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0xaf, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xbd, 0xfe, 0xff, 0xff, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_GUARD_IS_NONE_POP_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_GUARD_IS_NONE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_GUARD_IS_NONE_POP_data_holes[1];

// _CALL_LENplus_GUARD_IS_NOT_NONE_POP
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_GUARD_IS_NOT_NONE_POP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 7e 01 00 00             js      0x248 <_JIT_ENTRY+0x248>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 188: 48 85 d2                      testq   %rdx, %rdx
// 18b: 0f 84 b3 00 00 00             je      0x244 <_JIT_ENTRY+0x244>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a3: 29 c1                         subl    %eax, %ecx
// 1a5: 48 63 c9                      movslq  %ecx, %rcx
// 1a8: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1ac: f7 d0                         notl    %eax
// 1ae: 48 63 e8                      movslq  %eax, %rbp
// 1b1: 4d 8b 64 ee f8                movq    -0x8(%r14,%rbp,8), %r12
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NoneStruct
// 1c0: 49 39 c4                      cmpq    %rax, %r12
// 1c3: 0f 84 95 00 00 00             je      0x25e <_JIT_ENTRY+0x25e>
// 1c9: 49 8b 04 24                   movq    (%r12), %rax
// 1cd: 48 85 c0                      testq   %rax, %rax
// 1d0: 7f 22                         jg      0x1f4 <_JIT_ENTRY+0x1f4>
// 1d2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d4:  R_X86_64_64  .rodata.str1.1
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _Py_NegativeRefcount
// 1e6: be 14 0d 00 00                movl    $0xd14, %esi            # imm = 0xD14
// 1eb: 4c 89 e2                      movq    %r12, %rdx
// 1ee: ff d0                         callq   *%rax
// 1f0: 49 8b 04 24                   movq    (%r12), %rax
// 1f4: 4d 8d 34 ee                   leaq    (%r14,%rbp,8), %r14
// 1f8: 49 83 c6 f8                   addq    $-0x8, %r14
// 1fc: 85 c0                         testl   %eax, %eax
// 1fe: 78 21                         js      0x221 <_JIT_ENTRY+0x221>
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20a: ff d0                         callq   *%rax
// 20c: 49 ff 0c 24                   decq    (%r12)
// 210: 75 0f                         jne     0x221 <_JIT_ENTRY+0x221>
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_Dealloc
// 21c: 4c 89 e7                      movq    %r12, %rdi
// 21f: ff d0                         callq   *%rax
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _JIT_CONTINUE
// 22b: 48 89 df                      movq    %rbx, %rdi
// 22e: 4c 89 f6                      movq    %r14, %rsi
// 231: 4c 89 fa                      movq    %r15, %rdx
// 234: 48 83 c4 18                   addq    $0x18, %rsp
// 238: 5b                            popq    %rbx
// 239: 41 5c                         popq    %r12
// 23b: 41 5d                         popq    %r13
// 23d: 41 5e                         popq    %r14
// 23f: 41 5f                         popq    %r15
// 241: 5d                            popq    %rbp
// 242: ff e0                         jmpq    *%rax
// 244: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 248: 49 29 de                      subq    %rbx, %r14
// 24b: 49 83 c6 b8                   addq    $-0x48, %r14
// 24f: 49 c1 ee 03                   shrq    $0x3, %r14
// 253: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 257: 31 c0                         xorl    %eax, %eax
// 259: e9 3f fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 25e: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 262: e9 0e fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 267: 
static const unsigned char _CALL_LENplus_GUARD_IS_NOT_NONE_POP_code_body[616] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x7e, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x63, 0xe8, 0x4d, 0x8b, 0x64, 0xee, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc4, 0x0f, 0x84, 0x95, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x0d, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x3f, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0x0e, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_GUARD_IS_NOT_NONE_POP_code_holes[20] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_GUARD_IS_NOT_NONE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_GUARD_IS_NOT_NONE_POP_data_holes[1];

// _CALL_LENplus_GUARD_IS_TRUE_POP
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_GUARD_IS_TRUE_POP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 1f 01 00 00             js      0x1e9 <_JIT_ENTRY+0x1e9>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 188: 48 85 d2                      testq   %rdx, %rdx
// 18b: 74 58                         je      0x1e5 <_JIT_ENTRY+0x1e5>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _JIT_OPARG
// 197: 0f b7 c0                      movzwl  %ax, %eax
// 19a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 19f: 29 c1                         subl    %eax, %ecx
// 1a1: 48 63 c9                      movslq  %ecx, %rcx
// 1a4: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a8: f7 d0                         notl    %eax
// 1aa: 48 98                         cltq
// 1ac: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ae:  R_X86_64_64  _Py_FalseStruct
// 1b6: 49 39 4c c6 f8                cmpq    %rcx, -0x8(%r14,%rax,8)
// 1bb: 74 42                         je      0x1ff <_JIT_ENTRY+0x1ff>
// 1bd: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1c1: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _JIT_CONTINUE
// 1cf: 48 89 df                      movq    %rbx, %rdi
// 1d2: 4c 89 fa                      movq    %r15, %rdx
// 1d5: 48 83 c4 18                   addq    $0x18, %rsp
// 1d9: 5b                            popq    %rbx
// 1da: 41 5c                         popq    %r12
// 1dc: 41 5d                         popq    %r13
// 1de: 41 5e                         popq    %r14
// 1e0: 41 5f                         popq    %r15
// 1e2: 5d                            popq    %rbp
// 1e3: ff e0                         jmpq    *%rax
// 1e5: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 1e9: 49 29 de                      subq    %rbx, %r14
// 1ec: 49 83 c6 b8                   addq    $-0x48, %r14
// 1f0: 49 c1 ee 03                   shrq    $0x3, %r14
// 1f4: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1f8: 31 c0                         xorl    %eax, %eax
// 1fa: e9 9e fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 1ff: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 203: e9 6d fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 208: 
static const unsigned char _CALL_LENplus_GUARD_IS_TRUE_POP_code_body[521] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x1f, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x58, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc6, 0xf8, 0x74, 0x42, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x9e, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0x6d, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_GUARD_IS_TRUE_POP_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_GUARD_IS_TRUE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_GUARD_IS_TRUE_POP_data_holes[1];

// _CALL_LENplus_GUARD_KEYS_VERSION
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_GUARD_KEYS_VERSION.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 33 01 00 00             js      0x1fd <_JIT_ENTRY+0x1fd>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 62                         je      0x1f9 <_JIT_ENTRY+0x1f9>
// 197: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1bf: 48 8b 40 08                   movq    0x8(%rax), %rax
// 1c3: 48 8b 80 70 03 00 00          movq    0x370(%rax), %rax
// 1ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cc:  R_X86_64_64  _JIT_OPERAND
// 1d4: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 1d7: 75 3a                         jne     0x213 <_JIT_ENTRY+0x213>
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _JIT_CONTINUE
// 1e3: 48 89 df                      movq    %rbx, %rdi
// 1e6: 4c 89 fa                      movq    %r15, %rdx
// 1e9: 48 83 c4 18                   addq    $0x18, %rsp
// 1ed: 5b                            popq    %rbx
// 1ee: 41 5c                         popq    %r12
// 1f0: 41 5d                         popq    %r13
// 1f2: 41 5e                         popq    %r14
// 1f4: 41 5f                         popq    %r15
// 1f6: 5d                            popq    %rbp
// 1f7: ff e0                         jmpq    *%rax
// 1f9: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1fd: 49 29 de                      subq    %rbx, %r14
// 200: 49 83 c6 b8                   addq    $-0x48, %r14
// 204: 49 c1 ee 03                   shrq    $0x3, %r14
// 208: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 20c: 31 c0                         xorl    %eax, %eax
// 20e: e9 8a fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 213: 49 89 f6                      movq    %rsi, %r14
// 216: e9 5a fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 21b: 
static const unsigned char _CALL_LENplus_GUARD_KEYS_VERSION_code_body[540] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x33, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x62, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x80, 0x70, 0x03, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x8a, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xf6, 0xe9, 0x5a, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_GUARD_KEYS_VERSION_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_GUARD_KEYS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_GUARD_KEYS_VERSION_data_holes[1];

// _CALL_LENplus_GUARD_NOT_EXHAUSTED_LIST
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_GUARD_NOT_EXHAUSTED_LIST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 34 01 00 00             js      0x1fe <_JIT_ENTRY+0x1fe>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 63                         je      0x1fa <_JIT_ENTRY+0x1fa>
// 197: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1bf: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 1c3: 48 85 c9                      testq   %rcx, %rcx
// 1c6: 74 2a                         je      0x1f2 <_JIT_ENTRY+0x1f2>
// 1c8: 48 8b 40 10                   movq    0x10(%rax), %rax
// 1cc: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// 1d0: 7d 20                         jge     0x1f2 <_JIT_ENTRY+0x1f2>
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _JIT_CONTINUE
// 1dc: 48 89 df                      movq    %rbx, %rdi
// 1df: 4c 89 fa                      movq    %r15, %rdx
// 1e2: 48 83 c4 18                   addq    $0x18, %rsp
// 1e6: 5b                            popq    %rbx
// 1e7: 41 5c                         popq    %r12
// 1e9: 41 5d                         popq    %r13
// 1eb: 41 5e                         popq    %r14
// 1ed: 41 5f                         popq    %r15
// 1ef: 5d                            popq    %rbp
// 1f0: ff e0                         jmpq    *%rax
// 1f2: 49 89 f6                      movq    %rsi, %r14
// 1f5: e9 7b fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 1fa: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1fe: 49 29 de                      subq    %rbx, %r14
// 201: 49 83 c6 b8                   addq    $-0x48, %r14
// 205: 49 c1 ee 03                   shrq    $0x3, %r14
// 209: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 20d: 31 c0                         xorl    %eax, %eax
// 20f: e9 89 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 214: 
static const unsigned char _CALL_LENplus_GUARD_NOT_EXHAUSTED_LIST_code_body[533] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x34, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x63, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x2a, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xf6, 0xe9, 0x7b, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x89, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_GUARD_NOT_EXHAUSTED_LIST_code_holes[15] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_GUARD_NOT_EXHAUSTED_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_GUARD_NOT_EXHAUSTED_LIST_data_holes[1];

// _CALL_LENplus_GUARD_NOT_EXHAUSTED_RANGE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_GUARD_NOT_EXHAUSTED_RANGE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 20 01 00 00             js      0x1ea <_JIT_ENTRY+0x1ea>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 4f                         je      0x1e6 <_JIT_ENTRY+0x1e6>
// 197: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1bf: 48 83 78 20 00                cmpq    $0x0, 0x20(%rax)
// 1c4: 7e 3a                         jle     0x200 <_JIT_ENTRY+0x200>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _JIT_CONTINUE
// 1d0: 48 89 df                      movq    %rbx, %rdi
// 1d3: 4c 89 fa                      movq    %r15, %rdx
// 1d6: 48 83 c4 18                   addq    $0x18, %rsp
// 1da: 5b                            popq    %rbx
// 1db: 41 5c                         popq    %r12
// 1dd: 41 5d                         popq    %r13
// 1df: 41 5e                         popq    %r14
// 1e1: 41 5f                         popq    %r15
// 1e3: 5d                            popq    %rbp
// 1e4: ff e0                         jmpq    *%rax
// 1e6: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1ea: 49 29 de                      subq    %rbx, %r14
// 1ed: 49 83 c6 b8                   addq    $-0x48, %r14
// 1f1: 49 c1 ee 03                   shrq    $0x3, %r14
// 1f5: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1f9: 31 c0                         xorl    %eax, %eax
// 1fb: e9 9d fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 200: 49 89 f6                      movq    %rsi, %r14
// 203: e9 6d fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 208: 
static const unsigned char _CALL_LENplus_GUARD_NOT_EXHAUSTED_RANGE_code_body[521] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x20, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x4f, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x83, 0x78, 0x20, 0x00, 0x7e, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x9d, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xf6, 0xe9, 0x6d, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_GUARD_NOT_EXHAUSTED_RANGE_code_holes[15] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_GUARD_NOT_EXHAUSTED_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_GUARD_NOT_EXHAUSTED_RANGE_data_holes[1];

// _CALL_LENplus_GUARD_NOT_EXHAUSTED_TUPLE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_GUARD_NOT_EXHAUSTED_TUPLE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 34 01 00 00             js      0x1fe <_JIT_ENTRY+0x1fe>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 63                         je      0x1fa <_JIT_ENTRY+0x1fa>
// 197: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1bf: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 1c3: 48 85 c9                      testq   %rcx, %rcx
// 1c6: 74 2a                         je      0x1f2 <_JIT_ENTRY+0x1f2>
// 1c8: 48 8b 40 10                   movq    0x10(%rax), %rax
// 1cc: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// 1d0: 7d 20                         jge     0x1f2 <_JIT_ENTRY+0x1f2>
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _JIT_CONTINUE
// 1dc: 48 89 df                      movq    %rbx, %rdi
// 1df: 4c 89 fa                      movq    %r15, %rdx
// 1e2: 48 83 c4 18                   addq    $0x18, %rsp
// 1e6: 5b                            popq    %rbx
// 1e7: 41 5c                         popq    %r12
// 1e9: 41 5d                         popq    %r13
// 1eb: 41 5e                         popq    %r14
// 1ed: 41 5f                         popq    %r15
// 1ef: 5d                            popq    %rbp
// 1f0: ff e0                         jmpq    *%rax
// 1f2: 49 89 f6                      movq    %rsi, %r14
// 1f5: e9 7b fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 1fa: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1fe: 49 29 de                      subq    %rbx, %r14
// 201: 49 83 c6 b8                   addq    $-0x48, %r14
// 205: 49 c1 ee 03                   shrq    $0x3, %r14
// 209: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 20d: 31 c0                         xorl    %eax, %eax
// 20f: e9 89 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 214: 
static const unsigned char _CALL_LENplus_GUARD_NOT_EXHAUSTED_TUPLE_code_body[533] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x34, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x63, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x2a, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xf6, 0xe9, 0x7b, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x89, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_GUARD_NOT_EXHAUSTED_TUPLE_code_holes[15] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_GUARD_NOT_EXHAUSTED_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_GUARD_NOT_EXHAUSTED_TUPLE_data_holes[1];

// _CALL_LENplus_GUARD_TYPE_VERSION
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_GUARD_TYPE_VERSION.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 2f 01 00 00             js      0x1f9 <_JIT_ENTRY+0x1f9>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 5e                         je      0x1f5 <_JIT_ENTRY+0x1f5>
// 197: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1bf: 48 8b 40 08                   movq    0x8(%rax), %rax
// 1c3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c5:  R_X86_64_64  _JIT_OPERAND
// 1cd: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 1d3: 75 3a                         jne     0x20f <_JIT_ENTRY+0x20f>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _JIT_CONTINUE
// 1df: 48 89 df                      movq    %rbx, %rdi
// 1e2: 4c 89 fa                      movq    %r15, %rdx
// 1e5: 48 83 c4 18                   addq    $0x18, %rsp
// 1e9: 5b                            popq    %rbx
// 1ea: 41 5c                         popq    %r12
// 1ec: 41 5d                         popq    %r13
// 1ee: 41 5e                         popq    %r14
// 1f0: 41 5f                         popq    %r15
// 1f2: 5d                            popq    %rbp
// 1f3: ff e0                         jmpq    *%rax
// 1f5: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1f9: 49 29 de                      subq    %rbx, %r14
// 1fc: 49 83 c6 b8                   addq    $-0x48, %r14
// 200: 49 c1 ee 03                   shrq    $0x3, %r14
// 204: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 208: 31 c0                         xorl    %eax, %eax
// 20a: e9 8e fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 20f: 49 89 f6                      movq    %rsi, %r14
// 212: e9 5e fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 217: 
static const unsigned char _CALL_LENplus_GUARD_TYPE_VERSION_code_body[536] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x2f, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x5e, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x8e, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xf6, 0xe9, 0x5e, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_GUARD_TYPE_VERSION_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_GUARD_TYPE_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_GUARD_TYPE_VERSION_data_holes[1];

// _CALL_LENplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 de                      subq    %rbx, %r14
// 79: 49 83 c6 b8                   addq    $-0x48, %r14
// 7d: 49 c1 ee 03                   shrq    $0x3, %r14
// 81: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// b2: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 fc 01 00 00             js      0x2ca <_JIT_ENTRY+0x2ca>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 04 24                   movq    (%r12), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 e2                      movq    %r12, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 04 24                   movq    (%r12), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 21                         js      0x182 <_JIT_ENTRY+0x182>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 0c 24                   decq    (%r12)
// 171: 75 0f                         jne     0x182 <_JIT_ENTRY+0x182>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: ff d0                         callq   *%rax
// 182: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 187: 48 85 d2                      testq   %rdx, %rdx
// 18a: 0f 84 36 01 00 00             je      0x2c6 <_JIT_ENTRY+0x2c6>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _JIT_OPARG
// 19a: 0f b7 c0                      movzwl  %ax, %eax
// 19d: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a2: 29 c1                         subl    %eax, %ecx
// 1a4: 48 63 c9                      movslq  %ecx, %rcx
// 1a7: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1ab: f7 d0                         notl    %eax
// 1ad: 48 98                         cltq
// 1af: 48 01 c8                      addq    %rcx, %rax
// 1b2: 4d 8b 24 c6                   movq    (%r14,%rax,8), %r12
// 1b6: 49 8b 6c 24 18                movq    0x18(%r12), %rbp
// 1bb: 8b 45 00                      movl    (%rbp), %eax
// 1be: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c0:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1c8: ff c0                         incl    %eax
// 1ca: 74 0b                         je      0x1d7 <_JIT_ENTRY+0x1d7>
// 1cc: 89 45 00                      movl    %eax, (%rbp)
// 1cf: 49 89 cf                      movq    %rcx, %r15
// 1d2: ff d1                         callq   *%rcx
// 1d4: 4c 89 f9                      movq    %r15, %rcx
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _JIT_OPARG
// 1e1: f7 d0                         notl    %eax
// 1e3: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e8: 48 98                         cltq
// 1ea: 48 01 c0                      addq    %rax, %rax
// 1ed: 49 89 2c c6                   movq    %rbp, (%r14,%rax,8)
// 1f1: 4d 8b 7c 24 10                movq    0x10(%r12), %r15
// 1f6: 41 8b 07                      movl    (%r15), %eax
// 1f9: ff c0                         incl    %eax
// 1fb: 74 05                         je      0x202 <_JIT_ENTRY+0x202>
// 1fd: 41 89 07                      movl    %eax, (%r15)
// 200: ff d1                         callq   *%rcx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _JIT_OPARG
// 20c: 0f b7 c0                      movzwl  %ax, %eax
// 20f: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 214: 29 c1                         subl    %eax, %ecx
// 216: 48 63 c9                      movslq  %ecx, %rcx
// 219: f7 d0                         notl    %eax
// 21b: 48 98                         cltq
// 21d: 48 01 c8                      addq    %rcx, %rax
// 220: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 224: 49 8b 04 24                   movq    (%r12), %rax
// 228: 48 85 c0                      testq   %rax, %rax
// 22b: 7f 22                         jg      0x24f <_JIT_ENTRY+0x24f>
// 22d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022f:  R_X86_64_64  .rodata.str1.1
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _Py_NegativeRefcount
// 241: be 18 0a 00 00                movl    $0xa18, %esi            # imm = 0xA18
// 246: 4c 89 e2                      movq    %r12, %rdx
// 249: ff d0                         callq   *%rax
// 24b: 49 8b 04 24                   movq    (%r12), %rax
// 24f: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 253: 85 c0                         testl   %eax, %eax
// 255: 78 21                         js      0x278 <_JIT_ENTRY+0x278>
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 261: ff d0                         callq   *%rax
// 263: 49 ff 0c 24                   decq    (%r12)
// 267: 75 0f                         jne     0x278 <_JIT_ENTRY+0x278>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_Dealloc
// 273: 4c 89 e7                      movq    %r12, %rdi
// 276: ff d0                         callq   *%rax
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _JIT_OPARG
// 282: 0f b7 c0                      movzwl  %ax, %eax
// 285: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 28a: 29 c1                         subl    %eax, %ecx
// 28c: 48 63 c9                      movslq  %ecx, %rcx
// 28f: f7 d0                         notl    %eax
// 291: 48 98                         cltq
// 293: 48 01 c1                      addq    %rax, %rcx
// 296: 4d 89 3c ce                   movq    %r15, (%r14,%rcx,8)
// 29a: 48 01 c0                      addq    %rax, %rax
// 29d: 49 89 2c c6                   movq    %rbp, (%r14,%rax,8)
// 2a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a3:  R_X86_64_64  _JIT_CONTINUE
// 2ab: 48 89 df                      movq    %rbx, %rdi
// 2ae: 4c 89 ee                      movq    %r13, %rsi
// 2b1: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2b6: 48 83 c4 18                   addq    $0x18, %rsp
// 2ba: 5b                            popq    %rbx
// 2bb: 41 5c                         popq    %r12
// 2bd: 41 5d                         popq    %r13
// 2bf: 41 5e                         popq    %r14
// 2c1: 41 5f                         popq    %r15
// 2c3: 5d                            popq    %rbp
// 2c4: ff e0                         jmpq    *%rax
// 2c6: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 2ca: 49 29 de                      subq    %rbx, %r14
// 2cd: 49 83 c6 b8                   addq    $-0x48, %r14
// 2d1: 49 c1 ee 03                   shrq    $0x3, %r14
// 2d5: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2d9: 31 c0                         xorl    %eax, %eax
// 2db: e9 be fd ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 2e0: 
static const unsigned char _CALL_LENplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_body[737] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xfc, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x36, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x4d, 0x8b, 0x24, 0xc6, 0x49, 0x8b, 0x6c, 0x24, 0x18, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x0b, 0x89, 0x45, 0x00, 0x49, 0x89, 0xcf, 0xff, 0xd1, 0x4c, 0x89, 0xf9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc0, 0x49, 0x89, 0x2c, 0xc6, 0x4d, 0x8b, 0x7c, 0x24, 0x10, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x05, 0x41, 0x89, 0x07, 0xff, 0xd1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x4d, 0x89, 0x3c, 0xc6, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x2c, 0xee, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc1, 0x4d, 0x89, 0x3c, 0xce, 0x48, 0x01, 0xc0, 0x49, 0x89, 0x2c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xbe, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _CALL_LENplus_INIT_CALL_PY_EXACT_ARGS
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_INIT_CALL_PY_EXACT_ARGS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 fe                      movslq  %esi, %r15
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c fe 00                cmpq    $0x0, (%r14,%r15,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 ee                      movslq  %esi, %r13
// 65: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 de                      subq    %rbx, %r14
// 79: 49 83 c6 b8                   addq    $-0x48, %r14
// 7d: 49 c1 ee 03                   shrq    $0x3, %r14
// 81: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// b2: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 f7 01 00 00             js      0x2c5 <_JIT_ENTRY+0x2c5>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 04 24                   movq    (%r12), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 e2                      movq    %r12, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 04 24                   movq    (%r12), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 21                         js      0x182 <_JIT_ENTRY+0x182>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 0c 24                   decq    (%r12)
// 171: 75 0f                         jne     0x182 <_JIT_ENTRY+0x182>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: ff d0                         callq   *%rax
// 182: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 187: 48 85 d2                      testq   %rdx, %rdx
// 18a: 0f 84 31 01 00 00             je      0x2c1 <_JIT_ENTRY+0x2c1>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _JIT_OPARG
// 19a: 0f b7 c0                      movzwl  %ax, %eax
// 19d: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a2: 29 c1                         subl    %eax, %ecx
// 1a4: 48 63 c9                      movslq  %ecx, %rcx
// 1a7: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1ab: f7 d0                         notl    %eax
// 1ad: 48 63 d0                      movslq  %eax, %rdx
// 1b0: 48 01 d1                      addq    %rdx, %rcx
// 1b3: 48 01 d2                      addq    %rdx, %rdx
// 1b6: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// 1ba: 49 8b 0c d6                   movq    (%r14,%rdx,8), %rcx
// 1be: 49 8b 6c 24 30                movq    0x30(%r12), %rbp
// 1c3: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 1c8: 4c 8b ae 00 01 00 00          movq    0x100(%rsi), %r13
// 1cf: 48 63 45 4c                   movslq  0x4c(%rbp), %rax
// 1d3: 49 8d 44 c5 00                leaq    (%r13,%rax,8), %rax
// 1d8: 48 89 86 00 01 00 00          movq    %rax, 0x100(%rsi)
// 1df: 4d 89 65 10                   movq    %r12, 0x10(%r13)
// 1e3: 8b 45 00                      movl    (%rbp), %eax
// 1e6: ff c0                         incl    %eax
// 1e8: 49 8d 14 d6                   leaq    (%r14,%rdx,8), %rdx
// 1ec: 48 85 c9                      testq   %rcx, %rcx
// 1ef: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 1f4: 0f 84 e1 00 00 00             je      0x2db <_JIT_ENTRY+0x2db>
// 1fa: 85 c0                         testl   %eax, %eax
// 1fc: 74 0f                         je      0x20d <_JIT_ENTRY+0x20d>
// 1fe: 89 45 00                      movl    %eax, (%rbp)
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 20b: ff d0                         callq   *%rax
// 20d: 49 89 6d 00                   movq    %rbp, (%r13)
// 211: 41 0f 10 44 24 10             movups  0x10(%r12), %xmm0
// 217: 41 0f 11 45 18                movups  %xmm0, 0x18(%r13)
// 21c: 49 c7 45 28 00 00 00 00       movq    $0x0, 0x28(%r13)
// 224: 8b 4d 48                      movl    0x48(%rbp), %ecx
// 227: 41 89 4d 40                   movl    %ecx, 0x40(%r13)
// 22b: 49 c7 45 30 00 00 00 00       movq    $0x0, 0x30(%r13)
// 233: 48 81 c5 c8 00 00 00          addq    $0xc8, %rbp
// 23a: 49 89 6d 38                   movq    %rbp, 0x38(%r13)
// 23e: 66 41 c7 45 44 00 00          movw    $0x0, 0x44(%r13)
// 245: 41 c6 45 46 00                movb    $0x0, 0x46(%r13)
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _JIT_OPARG
// 254: 0f b7 e8                      movzwl  %ax, %ebp
// 257: ff c5                         incl    %ebp
// 259: 85 ed                         testl   %ebp, %ebp
// 25b: 0f 9f c2                      setg    %dl
// 25e: 39 e9                         cmpl    %ebp, %ecx
// 260: 0f 8e 20 01 00 00             jle     0x386 <_JIT_ENTRY+0x386>
// 266: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000268:  R_X86_64_64  _JIT_OPARG
// 270: 45 0f b7 fc                   movzwl  %r12w, %r15d
// 274: 41 8d 6f 01                   leal    0x1(%r15), %ebp
// 278: 48 8d 3c ed 48 00 00 00       leaq    0x48(,%rbp,8), %rdi
// 280: 4c 01 ef                      addq    %r13, %rdi
// 283: 89 e8                         movl    %ebp, %eax
// 285: f7 d0                         notl    %eax
// 287: 01 c1                         addl    %eax, %ecx
// 289: 48 8d 14 cd 08 00 00 00       leaq    0x8(,%rcx,8), %rdx
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  memset
// 29b: 31 f6                         xorl    %esi, %esi
// 29d: ff d0                         callq   *%rax
// 29f: 85 ed                         testl   %ebp, %ebp
// 2a1: 0f 8e c0 01 00 00             jle     0x467 <_JIT_ENTRY+0x467>
// 2a7: 41 0f b7 c4                   movzwl  %r12w, %eax
// 2ab: 41 f7 d7                      notl    %r15d
// 2ae: 49 63 cf                      movslq  %r15d, %rcx
// 2b1: 48 29 c1                      subq    %rax, %rcx
// 2b4: 49 8d 04 ce                   leaq    (%r14,%rcx,8), %rax
// 2b8: 48 83 c0 f8                   addq    $-0x8, %rax
// 2bc: e9 e6 00 00 00                jmp     0x3a7 <_JIT_ENTRY+0x3a7>
// 2c1: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 2c5: 49 29 de                      subq    %rbx, %r14
// 2c8: 49 83 c6 b8                   addq    $-0x48, %r14
// 2cc: 49 c1 ee 03                   shrq    $0x3, %r14
// 2d0: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2d4: 31 c0                         xorl    %eax, %eax
// 2d6: e9 c3 fd ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 2db: 85 c0                         testl   %eax, %eax
// 2dd: 74 0f                         je      0x2ee <_JIT_ENTRY+0x2ee>
// 2df: 89 45 00                      movl    %eax, (%rbp)
// 2e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e4:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2ec: ff d0                         callq   *%rax
// 2ee: 49 89 6d 00                   movq    %rbp, (%r13)
// 2f2: 41 0f 10 44 24 10             movups  0x10(%r12), %xmm0
// 2f8: 41 0f 11 45 18                movups  %xmm0, 0x18(%r13)
// 2fd: 49 c7 45 28 00 00 00 00       movq    $0x0, 0x28(%r13)
// 305: 8b 45 48                      movl    0x48(%rbp), %eax
// 308: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 30c: 49 c7 45 30 00 00 00 00       movq    $0x0, 0x30(%r13)
// 314: 48 81 c5 c8 00 00 00          addq    $0xc8, %rbp
// 31b: 49 89 6d 38                   movq    %rbp, 0x38(%r13)
// 31f: 66 41 c7 45 44 00 00          movw    $0x0, 0x44(%r13)
// 326: 41 c6 45 46 00                movb    $0x0, 0x46(%r13)
// 32b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000032d:  R_X86_64_64  _JIT_OPARG
// 335: 0f b7 e9                      movzwl  %cx, %ebp
// 338: 85 ed                         testl   %ebp, %ebp
// 33a: 0f 9f c2                      setg    %dl
// 33d: 39 e8                         cmpl    %ebp, %eax
// 33f: 7e 4f                         jle     0x390 <_JIT_ENTRY+0x390>
// 341: 44 0f b7 f9                   movzwl  %cx, %r15d
// 345: 4a 8d 3c fd 48 00 00 00       leaq    0x48(,%r15,8), %rdi
// 34d: 4c 01 ef                      addq    %r13, %rdi
// 350: 0f b7 e9                      movzwl  %cx, %ebp
// 353: 41 89 ec                      movl    %ebp, %r12d
// 356: 41 f7 d4                      notl    %r12d
// 359: 44 01 e0                      addl    %r12d, %eax
// 35c: 48 8d 14 c5 08 00 00 00       leaq    0x8(,%rax,8), %rdx
// 364: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000366:  R_X86_64_64  memset
// 36e: 31 f6                         xorl    %esi, %esi
// 370: ff d0                         callq   *%rax
// 372: 85 ed                         testl   %ebp, %ebp
// 374: 0f 8e ed 00 00 00             jle     0x467 <_JIT_ENTRY+0x467>
// 37a: 49 63 c4                      movslq  %r12d, %rax
// 37d: 4c 29 f8                      subq    %r15, %rax
// 380: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 384: eb 21                         jmp     0x3a7 <_JIT_ENTRY+0x3a7>
// 386: f7 d0                         notl    %eax
// 388: 48 0d 00 00 ff ff             orq     $-0x10000, %rax         # imm = 0xFFFF0000
// 38e: eb 06                         jmp     0x396 <_JIT_ENTRY+0x396>
// 390: 0f b7 c1                      movzwl  %cx, %eax
// 393: 48 f7 d8                      negq    %rax
// 396: f6 c2 01                      testb   $0x1, %dl
// 399: 0f 84 c8 00 00 00             je      0x467 <_JIT_ENTRY+0x467>
// 39f: 4b 8d 0c fe                   leaq    (%r14,%r15,8), %rcx
// 3a3: 48 8d 04 c1                   leaq    (%rcx,%rax,8), %rax
// 3a7: 83 fd 02                      cmpl    $0x2, %ebp
// 3aa: b9 01 00 00 00                movl    $0x1, %ecx
// 3af: 0f 4d cd                      cmovgel %ebp, %ecx
// 3b2: 83 f9 08                      cmpl    $0x8, %ecx
// 3b5: 72 10                         jb      0x3c7 <_JIT_ENTRY+0x3c7>
// 3b7: 4c 89 ea                      movq    %r13, %rdx
// 3ba: 48 29 c2                      subq    %rax, %rdx
// 3bd: 48 83 c2 48                   addq    $0x48, %rdx
// 3c1: 48 83 fa 20                   cmpq    $0x20, %rdx
// 3c5: 73 6b                         jae     0x432 <_JIT_ENTRY+0x432>
// 3c7: 31 d2                         xorl    %edx, %edx
// 3c9: 48 89 d6                      movq    %rdx, %rsi
// 3cc: 48 f7 d6                      notq    %rsi
// 3cf: 48 01 ce                      addq    %rcx, %rsi
// 3d2: 48 89 cf                      movq    %rcx, %rdi
// 3d5: 48 83 e7 03                   andq    $0x3, %rdi
// 3d9: 74 16                         je      0x3f1 <_JIT_ENTRY+0x3f1>
// 3db: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 3e0: 4c 8b 04 d0                   movq    (%rax,%rdx,8), %r8
// 3e4: 4d 89 44 d5 48                movq    %r8, 0x48(%r13,%rdx,8)
// 3e9: 48 ff c2                      incq    %rdx
// 3ec: 48 ff cf                      decq    %rdi
// 3ef: 75 ef                         jne     0x3e0 <_JIT_ENTRY+0x3e0>
// 3f1: 48 83 fe 03                   cmpq    $0x3, %rsi
// 3f5: 72 70                         jb      0x467 <_JIT_ENTRY+0x467>
// 3f7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 400: 48 8b 34 d0                   movq    (%rax,%rdx,8), %rsi
// 404: 49 89 74 d5 48                movq    %rsi, 0x48(%r13,%rdx,8)
// 409: 48 8b 74 d0 08                movq    0x8(%rax,%rdx,8), %rsi
// 40e: 49 89 74 d5 50                movq    %rsi, 0x50(%r13,%rdx,8)
// 413: 48 8b 74 d0 10                movq    0x10(%rax,%rdx,8), %rsi
// 418: 49 89 74 d5 58                movq    %rsi, 0x58(%r13,%rdx,8)
// 41d: 48 8b 74 d0 18                movq    0x18(%rax,%rdx,8), %rsi
// 422: 49 89 74 d5 60                movq    %rsi, 0x60(%r13,%rdx,8)
// 427: 48 83 c2 04                   addq    $0x4, %rdx
// 42b: 48 39 d1                      cmpq    %rdx, %rcx
// 42e: 75 d0                         jne     0x400 <_JIT_ENTRY+0x400>
// 430: eb 35                         jmp     0x467 <_JIT_ENTRY+0x467>
// 432: 89 ca                         movl    %ecx, %edx
// 434: 81 e2 fc ff ff 7f             andl    $0x7ffffffc, %edx       # imm = 0x7FFFFFFC
// 43a: 31 f6                         xorl    %esi, %esi
// 43c: 0f 1f 40 00                   nopl    (%rax)
// 440: 0f 10 04 f0                   movups  (%rax,%rsi,8), %xmm0
// 444: 0f 10 4c f0 10                movups  0x10(%rax,%rsi,8), %xmm1
// 449: 41 0f 11 44 f5 48             movups  %xmm0, 0x48(%r13,%rsi,8)
// 44f: 41 0f 11 4c f5 58             movups  %xmm1, 0x58(%r13,%rsi,8)
// 455: 48 83 c6 04                   addq    $0x4, %rsi
// 459: 48 39 f2                      cmpq    %rsi, %rdx
// 45c: 75 e2                         jne     0x440 <_JIT_ENTRY+0x440>
// 45e: 48 39 ca                      cmpq    %rcx, %rdx
// 461: 0f 85 62 ff ff ff             jne     0x3c9 <_JIT_ENTRY+0x3c9>
// 467: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000469:  R_X86_64_64  _JIT_OPARG
// 471: 0f b7 c0                      movzwl  %ax, %eax
// 474: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 479: 29 c1                         subl    %eax, %ecx
// 47b: 48 63 c9                      movslq  %ecx, %rcx
// 47e: f7 d0                         notl    %eax
// 480: 48 98                         cltq
// 482: 48 01 c8                      addq    %rcx, %rax
// 485: 4d 89 2c c6                   movq    %r13, (%r14,%rax,8)
// 489: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000048b:  R_X86_64_64  _JIT_CONTINUE
// 493: 48 89 df                      movq    %rbx, %rdi
// 496: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 49b: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 4a0: 48 83 c4 18                   addq    $0x18, %rsp
// 4a4: 5b                            popq    %rbx
// 4a5: 41 5c                         popq    %r12
// 4a7: 41 5d                         popq    %r13
// 4a9: 41 5e                         popq    %r14
// 4ab: 41 5f                         popq    %r15
// 4ad: 5d                            popq    %rbp
// 4ae: ff e0                         jmpq    *%rax
// 4b0: 
static const unsigned char _CALL_LENplus_INIT_CALL_PY_EXACT_ARGS_code_body[1201] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xfe, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xfe, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xee, 0x4b, 0x8b, 0x2c, 0xee, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xf7, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x31, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x63, 0xd0, 0x48, 0x01, 0xd1, 0x48, 0x01, 0xd2, 0x4d, 0x8b, 0x24, 0xce, 0x49, 0x8b, 0x0c, 0xd6, 0x49, 0x8b, 0x6c, 0x24, 0x30, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x8b, 0xae, 0x00, 0x01, 0x00, 0x00, 0x48, 0x63, 0x45, 0x4c, 0x49, 0x8d, 0x44, 0xc5, 0x00, 0x48, 0x89, 0x86, 0x00, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x65, 0x10, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x49, 0x8d, 0x14, 0xd6, 0x48, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x0f, 0x84, 0xe1, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x0f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0x6d, 0x00, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0x41, 0x0f, 0x11, 0x45, 0x18, 0x49, 0xc7, 0x45, 0x28, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x4d, 0x48, 0x41, 0x89, 0x4d, 0x40, 0x49, 0xc7, 0x45, 0x30, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc5, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6d, 0x38, 0x66, 0x41, 0xc7, 0x45, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x45, 0x46, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0xff, 0xc5, 0x85, 0xed, 0x0f, 0x9f, 0xc2, 0x39, 0xe9, 0x0f, 0x8e, 0x20, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xfc, 0x41, 0x8d, 0x6f, 0x01, 0x48, 0x8d, 0x3c, 0xed, 0x48, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xef, 0x89, 0xe8, 0xf7, 0xd0, 0x01, 0xc1, 0x48, 0x8d, 0x14, 0xcd, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x8e, 0xc0, 0x01, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xc4, 0x41, 0xf7, 0xd7, 0x49, 0x63, 0xcf, 0x48, 0x29, 0xc1, 0x49, 0x8d, 0x04, 0xce, 0x48, 0x83, 0xc0, 0xf8, 0xe9, 0xe6, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xc3, 0xfd, 0xff, 0xff, 0x85, 0xc0, 0x74, 0x0f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0x6d, 0x00, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0x41, 0x0f, 0x11, 0x45, 0x18, 0x49, 0xc7, 0x45, 0x28, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x45, 0x48, 0x41, 0x89, 0x45, 0x40, 0x49, 0xc7, 0x45, 0x30, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc5, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6d, 0x38, 0x66, 0x41, 0xc7, 0x45, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x45, 0x46, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe9, 0x85, 0xed, 0x0f, 0x9f, 0xc2, 0x39, 0xe8, 0x7e, 0x4f, 0x44, 0x0f, 0xb7, 0xf9, 0x4a, 0x8d, 0x3c, 0xfd, 0x48, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xef, 0x0f, 0xb7, 0xe9, 0x41, 0x89, 0xec, 0x41, 0xf7, 0xd4, 0x44, 0x01, 0xe0, 0x48, 0x8d, 0x14, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x8e, 0xed, 0x00, 0x00, 0x00, 0x49, 0x63, 0xc4, 0x4c, 0x29, 0xf8, 0x49, 0x8d, 0x04, 0xc6, 0xeb, 0x21, 0xf7, 0xd0, 0x48, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x06, 0x0f, 0xb7, 0xc1, 0x48, 0xf7, 0xd8, 0xf6, 0xc2, 0x01, 0x0f, 0x84, 0xc8, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x0c, 0xfe, 0x48, 0x8d, 0x04, 0xc1, 0x83, 0xfd, 0x02, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x4d, 0xcd, 0x83, 0xf9, 0x08, 0x72, 0x10, 0x4c, 0x89, 0xea, 0x48, 0x29, 0xc2, 0x48, 0x83, 0xc2, 0x48, 0x48, 0x83, 0xfa, 0x20, 0x73, 0x6b, 0x31, 0xd2, 0x48, 0x89, 0xd6, 0x48, 0xf7, 0xd6, 0x48, 0x01, 0xce, 0x48, 0x89, 0xcf, 0x48, 0x83, 0xe7, 0x03, 0x74, 0x16, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x4c, 0x8b, 0x04, 0xd0, 0x4d, 0x89, 0x44, 0xd5, 0x48, 0x48, 0xff, 0xc2, 0x48, 0xff, 0xcf, 0x75, 0xef, 0x48, 0x83, 0xfe, 0x03, 0x72, 0x70, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x34, 0xd0, 0x49, 0x89, 0x74, 0xd5, 0x48, 0x48, 0x8b, 0x74, 0xd0, 0x08, 0x49, 0x89, 0x74, 0xd5, 0x50, 0x48, 0x8b, 0x74, 0xd0, 0x10, 0x49, 0x89, 0x74, 0xd5, 0x58, 0x48, 0x8b, 0x74, 0xd0, 0x18, 0x49, 0x89, 0x74, 0xd5, 0x60, 0x48, 0x83, 0xc2, 0x04, 0x48, 0x39, 0xd1, 0x75, 0xd0, 0xeb, 0x35, 0x89, 0xca, 0x81, 0xe2, 0xfc, 0xff, 0xff, 0x7f, 0x31, 0xf6, 0x0f, 0x1f, 0x40, 0x00, 0x0f, 0x10, 0x04, 0xf0, 0x0f, 0x10, 0x4c, 0xf0, 0x10, 0x41, 0x0f, 0x11, 0x44, 0xf5, 0x48, 0x41, 0x0f, 0x11, 0x4c, 0xf5, 0x58, 0x48, 0x83, 0xc6, 0x04, 0x48, 0x39, 0xf2, 0x75, 0xe2, 0x48, 0x39, 0xca, 0x0f, 0x85, 0x62, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x4d, 0x89, 0x2c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_INIT_CALL_PY_EXACT_ARGS_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x32d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x366, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x469, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_INIT_CALL_PY_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_INIT_CALL_PY_EXACT_ARGS_data_holes[1];

// _CALL_LENplus_INSERT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_INSERT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 43 01 00 00             js      0x20d <_JIT_ENTRY+0x20d>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 72                         je      0x209 <_JIT_ENTRY+0x209>
// 197: 4f 8d 2c e6                   leaq    (%r14,%r12,8), %r13
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c8                      movzwl  %ax, %ecx
// 1a8: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1ad: 29 ca                         subl    %ecx, %edx
// 1af: 48 63 d2                      movslq  %edx, %rdx
// 1b2: 49 89 2c d6                   movq    %rbp, (%r14,%rdx,8)
// 1b6: f7 d1                         notl    %ecx
// 1b8: 48 63 c9                      movslq  %ecx, %rcx
// 1bb: 4d 8b 64 ce f8                movq    -0x8(%r14,%rcx,8), %r12
// 1c0: 48 8d 2c 09                   leaq    (%rcx,%rcx), %rbp
// 1c4: 49 8d 3c ee                   leaq    (%r14,%rbp,8), %rdi
// 1c8: 0f b7 d0                      movzwl  %ax, %edx
// 1cb: 48 29 d1                      subq    %rdx, %rcx
// 1ce: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 1d2: 48 c1 e2 03                   shlq    $0x3, %rdx
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  memmove
// 1e0: ff d0                         callq   *%rax
// 1e2: 4d 89 24 ee                   movq    %r12, (%r14,%rbp,8)
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _JIT_CONTINUE
// 1f0: 48 89 df                      movq    %rbx, %rdi
// 1f3: 4c 89 ee                      movq    %r13, %rsi
// 1f6: 4c 89 fa                      movq    %r15, %rdx
// 1f9: 48 83 c4 18                   addq    $0x18, %rsp
// 1fd: 5b                            popq    %rbx
// 1fe: 41 5c                         popq    %r12
// 200: 41 5d                         popq    %r13
// 202: 41 5e                         popq    %r14
// 204: 41 5f                         popq    %r15
// 206: 5d                            popq    %rbp
// 207: ff e0                         jmpq    *%rax
// 209: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 20d: 49 29 de                      subq    %rbx, %r14
// 210: 49 83 c6 b8                   addq    $-0x48, %r14
// 214: 49 c1 ee 03                   shrq    $0x3, %r14
// 218: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 21c: 31 c0                         xorl    %eax, %eax
// 21e: e9 7a fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 223: 
static const unsigned char _CALL_LENplus_INSERT_code_body[548] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x43, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x72, 0x4f, 0x8d, 0x2c, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x2c, 0xd6, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4d, 0x8b, 0x64, 0xce, 0xf8, 0x48, 0x8d, 0x2c, 0x09, 0x49, 0x8d, 0x3c, 0xee, 0x0f, 0xb7, 0xd0, 0x48, 0x29, 0xd1, 0x49, 0x8d, 0x34, 0xce, 0x48, 0xc1, 0xe2, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x7a, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_INSERT_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &memmove, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_INSERT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_INSERT_data_holes[1];

// _CALL_LENplus_IS_NONE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_IS_NONE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 68 01 00 00             js      0x232 <_JIT_ENTRY+0x232>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 0f 84 93 00 00 00             je      0x22e <_JIT_ENTRY+0x22e>
// 19b: 4f 8d 2c e6                   leaq    (%r14,%r12,8), %r13
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  _JIT_OPARG
// 1a9: 0f b7 c0                      movzwl  %ax, %eax
// 1ac: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1b1: 29 c1                         subl    %eax, %ecx
// 1b3: 48 63 c9                      movslq  %ecx, %rcx
// 1b6: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1ba: f7 d0                         notl    %eax
// 1bc: 48 98                         cltq
// 1be: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_NoneStruct
// 1cd: 49 39 c4                      cmpq    %rax, %r12
// 1d0: 74 76                         je      0x248 <_JIT_ENTRY+0x248>
// 1d2: 49 8b 04 24                   movq    (%r12), %rax
// 1d6: 48 85 c0                      testq   %rax, %rax
// 1d9: 7f 22                         jg      0x1fd <_JIT_ENTRY+0x1fd>
// 1db: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001dd:  R_X86_64_64  .rodata.str1.1
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_NegativeRefcount
// 1ef: be ef 07 00 00                movl    $0x7ef, %esi            # imm = 0x7EF
// 1f4: 4c 89 e2                      movq    %r12, %rdx
// 1f7: ff d0                         callq   *%rax
// 1f9: 49 8b 04 24                   movq    (%r12), %rax
// 1fd: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001ff:  R_X86_64_64  _Py_FalseStruct
// 207: 85 c0                         testl   %eax, %eax
// 209: 78 47                         js      0x252 <_JIT_ENTRY+0x252>
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 215: ff d0                         callq   *%rax
// 217: 49 ff 0c 24                   decq    (%r12)
// 21b: 75 35                         jne     0x252 <_JIT_ENTRY+0x252>
// 21d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021f:  R_X86_64_64  _Py_Dealloc
// 227: 4c 89 e7                      movq    %r12, %rdi
// 22a: ff d0                         callq   *%rax
// 22c: eb 24                         jmp     0x252 <_JIT_ENTRY+0x252>
// 22e: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 232: 49 29 de                      subq    %rbx, %r14
// 235: 49 83 c6 b8                   addq    $-0x48, %r14
// 239: 49 c1 ee 03                   shrq    $0x3, %r14
// 23d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 241: 31 c0                         xorl    %eax, %eax
// 243: e9 55 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 248: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000024a:  R_X86_64_64  _Py_TrueStruct
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _JIT_OPARG
// 25c: f7 d0                         notl    %eax
// 25e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 263: 48 98                         cltq
// 265: 49 89 6c c6 f8                movq    %rbp, -0x8(%r14,%rax,8)
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _JIT_CONTINUE
// 274: 48 89 df                      movq    %rbx, %rdi
// 277: 4c 89 ee                      movq    %r13, %rsi
// 27a: 4c 89 fa                      movq    %r15, %rdx
// 27d: 48 83 c4 18                   addq    $0x18, %rsp
// 281: 5b                            popq    %rbx
// 282: 41 5c                         popq    %r12
// 284: 41 5d                         popq    %r13
// 286: 41 5e                         popq    %r14
// 288: 41 5f                         popq    %r15
// 28a: 5d                            popq    %rbp
// 28b: ff e0                         jmpq    *%rax
// 28d: 
static const unsigned char _CALL_LENplus_IS_NONE_code_body[654] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x68, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc4, 0x74, 0x76, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xef, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x47, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x24, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x55, 0xfe, 0xff, 0xff, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_IS_NONE_code_holes[23] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_IS_NONE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_IS_NONE_data_holes[1];

// _CALL_LENplus_IS_OP
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_IS_OP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 f6 01 00 00             js      0x2bd <_JIT_ENTRY+0x2bd>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 32 01 00 00             je      0x2b9 <_JIT_ENTRY+0x2b9>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a2: f7 d0                         notl    %eax
// 1a4: 48 63 e8                      movslq  %eax, %rbp
// 1a7: 4d 8b 64 ee f0                movq    -0x10(%r14,%rbp,8), %r12
// 1ac: 4d 8b 6c ee f8                movq    -0x8(%r14,%rbp,8), %r13
// 1b1: 49 8b 04 24                   movq    (%r12), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7f 22                         jg      0x1dc <_JIT_ENTRY+0x1dc>
// 1ba: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bc:  R_X86_64_64  .rodata.str1.1
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _Py_NegativeRefcount
// 1ce: be 98 07 00 00                movl    $0x798, %esi            # imm = 0x798
// 1d3: 4c 89 e2                      movq    %r12, %rdx
// 1d6: ff d0                         callq   *%rax
// 1d8: 49 8b 04 24                   movq    (%r12), %rax
// 1dc: 85 c0                         testl   %eax, %eax
// 1de: 78 21                         js      0x201 <_JIT_ENTRY+0x201>
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ea: ff d0                         callq   *%rax
// 1ec: 49 ff 0c 24                   decq    (%r12)
// 1f0: 75 0f                         jne     0x201 <_JIT_ENTRY+0x201>
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_Dealloc
// 1fc: 4c 89 e7                      movq    %r12, %rdi
// 1ff: ff d0                         callq   *%rax
// 201: 49 8b 45 00                   movq    (%r13), %rax
// 205: 48 85 c0                      testq   %rax, %rax
// 208: 7f 22                         jg      0x22c <_JIT_ENTRY+0x22c>
// 20a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020c:  R_X86_64_64  .rodata.str1.1
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_NegativeRefcount
// 21e: be 99 07 00 00                movl    $0x799, %esi            # imm = 0x799
// 223: 4c 89 ea                      movq    %r13, %rdx
// 226: ff d0                         callq   *%rax
// 228: 49 8b 45 00                   movq    (%r13), %rax
// 22c: 49 8d 2c ee                   leaq    (%r14,%rbp,8), %rbp
// 230: 48 83 c5 f8                   addq    $-0x8, %rbp
// 234: 85 c0                         testl   %eax, %eax
// 236: 78 21                         js      0x259 <_JIT_ENTRY+0x259>
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 242: ff d0                         callq   *%rax
// 244: 49 ff 4d 00                   decq    (%r13)
// 248: 75 0f                         jne     0x259 <_JIT_ENTRY+0x259>
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _Py_Dealloc
// 254: 4c 89 ef                      movq    %r13, %rdi
// 257: ff d0                         callq   *%rax
// 259: 31 c0                         xorl    %eax, %eax
// 25b: 4d 39 ec                      cmpq    %r13, %r12
// 25e: 0f 94 c0                      sete    %al
// 261: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000263:  R_X86_64_64  _JIT_OPARG
// 26b: 66 39 c8                      cmpw    %cx, %ax
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_FalseStruct
// 278: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000027a:  R_X86_64_64  _Py_TrueStruct
// 282: 48 0f 44 d0                   cmoveq  %rax, %rdx
// 286: f7 d1                         notl    %ecx
// 288: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 28e: 48 63 c1                      movslq  %ecx, %rax
// 291: 49 89 54 c6 f0                movq    %rdx, -0x10(%r14,%rax,8)
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _JIT_CONTINUE
// 2a0: 48 89 df                      movq    %rbx, %rdi
// 2a3: 48 89 ee                      movq    %rbp, %rsi
// 2a6: 4c 89 fa                      movq    %r15, %rdx
// 2a9: 48 83 c4 08                   addq    $0x8, %rsp
// 2ad: 5b                            popq    %rbx
// 2ae: 41 5c                         popq    %r12
// 2b0: 41 5d                         popq    %r13
// 2b2: 41 5e                         popq    %r14
// 2b4: 41 5f                         popq    %r15
// 2b6: 5d                            popq    %rbp
// 2b7: ff e0                         jmpq    *%rax
// 2b9: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 2bd: 49 29 de                      subq    %rbx, %r14
// 2c0: 49 83 c6 b8                   addq    $-0x48, %r14
// 2c4: 49 c1 ee 03                   shrq    $0x3, %r14
// 2c8: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2cc: 31 c0                         xorl    %eax, %eax
// 2ce: e9 c9 fd ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 2d3: 
static const unsigned char _CALL_LENplus_IS_OP_code_body[724] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xf6, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x32, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x63, 0xe8, 0x4d, 0x8b, 0x64, 0xee, 0xf0, 0x4d, 0x8b, 0x6c, 0xee, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8d, 0x2c, 0xee, 0x48, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x31, 0xc0, 0x4d, 0x39, 0xec, 0x0f, 0x94, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x39, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd0, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x54, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xc9, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_IS_OP_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_IS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_IS_OP_data_holes[1];

// _CALL_LENplus_ITER_CHECK_LIST
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_ITER_CHECK_LIST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 11 01 00 00             js      0x1db <_JIT_ENTRY+0x1db>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 40                         je      0x1d7 <_JIT_ENTRY+0x1d7>
// 197: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1bf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c1:  R_X86_64_64  PyListIter_Type
// 1c9: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1cd: 74 22                         je      0x1f1 <_JIT_ENTRY+0x1f1>
// 1cf: 49 89 f6                      movq    %rsi, %r14
// 1d2: e9 9e fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 1d7: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1db: 49 29 de                      subq    %rbx, %r14
// 1de: 49 83 c6 b8                   addq    $-0x48, %r14
// 1e2: 49 c1 ee 03                   shrq    $0x3, %r14
// 1e6: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1ea: 31 c0                         xorl    %eax, %eax
// 1ec: e9 ac fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _JIT_CONTINUE
// 1fb: 48 89 df                      movq    %rbx, %rdi
// 1fe: 4c 89 fa                      movq    %r15, %rdx
// 201: 48 83 c4 18                   addq    $0x18, %rsp
// 205: 5b                            popq    %rbx
// 206: 41 5c                         popq    %r12
// 208: 41 5d                         popq    %r13
// 20a: 41 5e                         popq    %r14
// 20c: 41 5f                         popq    %r15
// 20e: 5d                            popq    %rbp
// 20f: ff e0                         jmpq    *%rax
// 211: 
static const unsigned char _CALL_LENplus_ITER_CHECK_LIST_code_body[530] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x11, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x40, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x22, 0x49, 0x89, 0xf6, 0xe9, 0x9e, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xac, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_ITER_CHECK_LIST_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyListIter_Type, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_ITER_CHECK_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_ITER_CHECK_LIST_data_holes[1];

// _CALL_LENplus_ITER_CHECK_RANGE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_ITER_CHECK_RANGE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 11 01 00 00             js      0x1db <_JIT_ENTRY+0x1db>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 40                         je      0x1d7 <_JIT_ENTRY+0x1d7>
// 197: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1bf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c1:  R_X86_64_64  PyRangeIter_Type
// 1c9: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1cd: 74 22                         je      0x1f1 <_JIT_ENTRY+0x1f1>
// 1cf: 49 89 f6                      movq    %rsi, %r14
// 1d2: e9 9e fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 1d7: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1db: 49 29 de                      subq    %rbx, %r14
// 1de: 49 83 c6 b8                   addq    $-0x48, %r14
// 1e2: 49 c1 ee 03                   shrq    $0x3, %r14
// 1e6: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1ea: 31 c0                         xorl    %eax, %eax
// 1ec: e9 ac fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _JIT_CONTINUE
// 1fb: 48 89 df                      movq    %rbx, %rdi
// 1fe: 4c 89 fa                      movq    %r15, %rdx
// 201: 48 83 c4 18                   addq    $0x18, %rsp
// 205: 5b                            popq    %rbx
// 206: 41 5c                         popq    %r12
// 208: 41 5d                         popq    %r13
// 20a: 41 5e                         popq    %r14
// 20c: 41 5f                         popq    %r15
// 20e: 5d                            popq    %rbp
// 20f: ff e0                         jmpq    *%rax
// 211: 
static const unsigned char _CALL_LENplus_ITER_CHECK_RANGE_code_body[530] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x11, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x40, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x22, 0x49, 0x89, 0xf6, 0xe9, 0x9e, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xac, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_ITER_CHECK_RANGE_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyRangeIter_Type, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_ITER_CHECK_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_ITER_CHECK_RANGE_data_holes[1];

// _CALL_LENplus_ITER_CHECK_TUPLE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_ITER_CHECK_TUPLE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 11 01 00 00             js      0x1db <_JIT_ENTRY+0x1db>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 40                         je      0x1d7 <_JIT_ENTRY+0x1d7>
// 197: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1bf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c1:  R_X86_64_64  PyTupleIter_Type
// 1c9: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1cd: 74 22                         je      0x1f1 <_JIT_ENTRY+0x1f1>
// 1cf: 49 89 f6                      movq    %rsi, %r14
// 1d2: e9 9e fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 1d7: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1db: 49 29 de                      subq    %rbx, %r14
// 1de: 49 83 c6 b8                   addq    $-0x48, %r14
// 1e2: 49 c1 ee 03                   shrq    $0x3, %r14
// 1e6: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1ea: 31 c0                         xorl    %eax, %eax
// 1ec: e9 ac fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _JIT_CONTINUE
// 1fb: 48 89 df                      movq    %rbx, %rdi
// 1fe: 4c 89 fa                      movq    %r15, %rdx
// 201: 48 83 c4 18                   addq    $0x18, %rsp
// 205: 5b                            popq    %rbx
// 206: 41 5c                         popq    %r12
// 208: 41 5d                         popq    %r13
// 20a: 41 5e                         popq    %r14
// 20c: 41 5f                         popq    %r15
// 20e: 5d                            popq    %rbp
// 20f: ff e0                         jmpq    *%rax
// 211: 
static const unsigned char _CALL_LENplus_ITER_CHECK_TUPLE_code_body[530] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x11, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x40, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x22, 0x49, 0x89, 0xf6, 0xe9, 0x9e, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xac, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_ITER_CHECK_TUPLE_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTupleIter_Type, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_ITER_CHECK_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_ITER_CHECK_TUPLE_data_holes[1];

// _CALL_LENplus_ITER_NEXT_LIST
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_ITER_NEXT_LIST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 57 01 00 00             js      0x21e <_JIT_ENTRY+0x21e>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 93 00 00 00             je      0x21a <_JIT_ENTRY+0x21a>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a2: f7 d0                         notl    %eax
// 1a4: 48 98                         cltq
// 1a6: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1ab: 48 8b 48 10                   movq    0x10(%rax), %rcx
// 1af: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 1b3: 48 8b 52 18                   movq    0x18(%rdx), %rdx
// 1b7: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
// 1bb: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// 1bf: 4c 8b 24 ca                   movq    (%rdx,%rcx,8), %r12
// 1c3: 41 8b 04 24                   movl    (%r12), %eax
// 1c7: ff c0                         incl    %eax
// 1c9: 74 10                         je      0x1db <_JIT_ENTRY+0x1db>
// 1cb: 41 89 04 24                   movl    %eax, (%r12)
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1d9: ff d0                         callq   *%rax
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _JIT_OPARG
// 1e5: f7 d0                         notl    %eax
// 1e7: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ec: 48 98                         cltq
// 1ee: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 1f2: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1f6: 48 83 c6 08                   addq    $0x8, %rsi
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _JIT_CONTINUE
// 204: 48 89 df                      movq    %rbx, %rdi
// 207: 4c 89 fa                      movq    %r15, %rdx
// 20a: 48 83 c4 08                   addq    $0x8, %rsp
// 20e: 5b                            popq    %rbx
// 20f: 41 5c                         popq    %r12
// 211: 41 5d                         popq    %r13
// 213: 41 5e                         popq    %r14
// 215: 41 5f                         popq    %r15
// 217: 5d                            popq    %rbp
// 218: ff e0                         jmpq    *%rax
// 21a: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 21e: 49 29 de                      subq    %rbx, %r14
// 221: 49 83 c6 b8                   addq    $-0x48, %r14
// 225: 49 c1 ee 03                   shrq    $0x3, %r14
// 229: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 22d: 31 c0                         xorl    %eax, %eax
// 22f: e9 68 fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 234: 
static const unsigned char _CALL_LENplus_ITER_NEXT_LIST_code_body[565] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x57, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10, 0x4c, 0x8b, 0x24, 0xca, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x68, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_ITER_NEXT_LIST_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_ITER_NEXT_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_ITER_NEXT_LIST_data_holes[1];

// _CALL_LENplus_ITER_NEXT_RANGE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_ITER_NEXT_RANGE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 5a 01 00 00             js      0x224 <_JIT_ENTRY+0x224>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 188: 48 85 d2                      testq   %rdx, %rdx
// 18b: 0f 84 89 00 00 00             je      0x21a <_JIT_ENTRY+0x21a>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a3: 29 c1                         subl    %eax, %ecx
// 1a5: 48 63 c9                      movslq  %ecx, %rcx
// 1a8: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1ac: f7 d0                         notl    %eax
// 1ae: 48 98                         cltq
// 1b0: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1b5: 48 8b 78 10                   movq    0x10(%rax), %rdi
// 1b9: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 1bd: 48 01 f9                      addq    %rdi, %rcx
// 1c0: 48 89 48 10                   movq    %rcx, 0x10(%rax)
// 1c4: 48 ff 48 20                   decq    0x20(%rax)
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  PyLong_FromLong
// 1d2: ff d0                         callq   *%rax
// 1d4: 48 85 c0                      testq   %rax, %rax
// 1d7: 74 47                         je      0x220 <_JIT_ENTRY+0x220>
// 1d9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001db:  R_X86_64_64  _JIT_OPARG
// 1e3: f7 d1                         notl    %ecx
// 1e5: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1eb: 48 63 c9                      movslq  %ecx, %rcx
// 1ee: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 1f2: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 1f6: 48 83 c6 08                   addq    $0x8, %rsi
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _JIT_CONTINUE
// 204: 48 89 df                      movq    %rbx, %rdi
// 207: 4c 89 fa                      movq    %r15, %rdx
// 20a: 48 83 c4 18                   addq    $0x18, %rsp
// 20e: 5b                            popq    %rbx
// 20f: 41 5c                         popq    %r12
// 211: 41 5d                         popq    %r13
// 213: 41 5e                         popq    %r14
// 215: 41 5f                         popq    %r15
// 217: 5d                            popq    %rbp
// 218: ff e0                         jmpq    *%rax
// 21a: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 21e: eb 04                         jmp     0x224 <_JIT_ENTRY+0x224>
// 220: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 224: 49 29 de                      subq    %rbx, %r14
// 227: 49 83 c6 b8                   addq    $-0x48, %r14
// 22b: 49 c1 ee 03                   shrq    $0x3, %r14
// 22f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 233: 31 c0                         xorl    %eax, %eax
// 235: e9 63 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 23a: 
static const unsigned char _CALL_LENplus_ITER_NEXT_RANGE_code_body[571] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x5a, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x89, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x78, 0x10, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x01, 0xf9, 0x48, 0x89, 0x48, 0x10, 0x48, 0xff, 0x48, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x47, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xe6, 0xeb, 0x04, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x63, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_ITER_NEXT_RANGE_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromLong, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_ITER_NEXT_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_ITER_NEXT_RANGE_data_holes[1];

// _CALL_LENplus_ITER_NEXT_TUPLE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_ITER_NEXT_TUPLE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 54 01 00 00             js      0x21b <_JIT_ENTRY+0x21b>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 90 00 00 00             je      0x217 <_JIT_ENTRY+0x217>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a2: f7 d0                         notl    %eax
// 1a4: 48 98                         cltq
// 1a6: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1ab: 48 8b 48 10                   movq    0x10(%rax), %rcx
// 1af: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 1b3: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
// 1b7: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// 1bb: 4c 8b 64 ca 18                movq    0x18(%rdx,%rcx,8), %r12
// 1c0: 41 8b 04 24                   movl    (%r12), %eax
// 1c4: ff c0                         incl    %eax
// 1c6: 74 10                         je      0x1d8 <_JIT_ENTRY+0x1d8>
// 1c8: 41 89 04 24                   movl    %eax, (%r12)
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1d6: ff d0                         callq   *%rax
// 1d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001da:  R_X86_64_64  _JIT_OPARG
// 1e2: f7 d0                         notl    %eax
// 1e4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e9: 48 98                         cltq
// 1eb: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 1ef: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1f3: 48 83 c6 08                   addq    $0x8, %rsi
// 1f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f9:  R_X86_64_64  _JIT_CONTINUE
// 201: 48 89 df                      movq    %rbx, %rdi
// 204: 4c 89 fa                      movq    %r15, %rdx
// 207: 48 83 c4 08                   addq    $0x8, %rsp
// 20b: 5b                            popq    %rbx
// 20c: 41 5c                         popq    %r12
// 20e: 41 5d                         popq    %r13
// 210: 41 5e                         popq    %r14
// 212: 41 5f                         popq    %r15
// 214: 5d                            popq    %rbp
// 215: ff e0                         jmpq    *%rax
// 217: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 21b: 49 29 de                      subq    %rbx, %r14
// 21e: 49 83 c6 b8                   addq    $-0x48, %r14
// 222: 49 c1 ee 03                   shrq    $0x3, %r14
// 226: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 22a: 31 c0                         xorl    %eax, %eax
// 22c: e9 6b fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 231: 
static const unsigned char _CALL_LENplus_ITER_NEXT_TUPLE_code_body[562] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x54, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10, 0x4c, 0x8b, 0x64, 0xca, 0x18, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x6b, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_ITER_NEXT_TUPLE_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_ITER_NEXT_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_ITER_NEXT_TUPLE_data_holes[1];

// _CALL_LENplus_JUMP_TO_TOP
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_JUMP_TO_TOP.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 12 01 00 00             js      0x1dc <_JIT_ENTRY+0x1dc>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 187: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 18c: 48 85 c9                      testq   %rcx, %rcx
// 18f: 74 48                         je      0x1d9 <_JIT_ENTRY+0x1d9>
// 191: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 195: 48 89 08                      movq    %rcx, (%rax)
// 198: 49 8b 47 10                   movq    0x10(%r15), %rax
// 19c: 48 8b 00                      movq    (%rax), %rax
// 19f: 84 c0                         testb   %al, %al
// 1a1: 74 13                         je      0x1b6 <_JIT_ENTRY+0x1b6>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _Py_HandlePending
// 1ad: 4c 89 ff                      movq    %r15, %rdi
// 1b0: ff d0                         callq   *%rax
// 1b2: 85 c0                         testl   %eax, %eax
// 1b4: 75 26                         jne     0x1dc <_JIT_ENTRY+0x1dc>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _JIT_CONTINUE
// 1c0: 48 89 df                      movq    %rbx, %rdi
// 1c3: 4c 89 f6                      movq    %r14, %rsi
// 1c6: 4c 89 fa                      movq    %r15, %rdx
// 1c9: 48 83 c4 18                   addq    $0x18, %rsp
// 1cd: 5b                            popq    %rbx
// 1ce: 41 5c                         popq    %r12
// 1d0: 41 5d                         popq    %r13
// 1d2: 41 5e                         popq    %r14
// 1d4: 41 5f                         popq    %r15
// 1d6: 5d                            popq    %rbp
// 1d7: ff e0                         jmpq    *%rax
// 1d9: 49 89 c6                      movq    %rax, %r14
// 1dc: 49 29 de                      subq    %rbx, %r14
// 1df: 49 83 c6 b8                   addq    $-0x48, %r14
// 1e3: 49 c1 ee 03                   shrq    $0x3, %r14
// 1e7: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1eb: 31 c0                         xorl    %eax, %eax
// 1ed: e9 ab fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 1f2: 
static const unsigned char _CALL_LENplus_JUMP_TO_TOP_code_body[499] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x12, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x48, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xab, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_JUMP_TO_TOP_code_holes[15] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_JUMP_TO_TOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_JUMP_TO_TOP_data_holes[1];

// _CALL_LENplus_LIST_APPEND
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LIST_APPEND.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d6                      movq    %rdx, %r14
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d7 00                cmpq    $0x0, (%r15,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ef                   movq    (%r15,%r13,8), %rbp
// 67: 49 8b 46 10                   movq    0x10(%r14), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 df                      subq    %rbx, %r15
// 77: 49 83 c7 b8                   addq    $-0x48, %r15
// 7b: 49 c1 ef 03                   shrq    $0x3, %r15
// 7f: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 cf                   movq    (%r15,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 46 01 00 00             js      0x20d <_JIT_ENTRY+0x20d>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 74 4e                         je      0x1d1 <_JIT_ENTRY+0x1d1>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _JIT_OPARG
// 18d: 0f b7 c0                      movzwl  %ax, %eax
// 190: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 195: 29 c1                         subl    %eax, %ecx
// 197: 48 63 c9                      movslq  %ecx, %rcx
// 19a: 49 89 14 cf                   movq    %rdx, (%r15,%rcx,8)
// 19e: f7 d0                         notl    %eax
// 1a0: 48 98                         cltq
// 1a2: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 1a6: 49 83 c4 f8                   addq    $-0x8, %r12
// 1aa: 49 8b 74 c7 f8                movq    -0x8(%r15,%rax,8), %rsi
// 1af: 48 01 c0                      addq    %rax, %rax
// 1b2: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 1b6: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 1ba: 48 39 47 20                   cmpq    %rax, 0x20(%rdi)
// 1be: 7e 17                         jle     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c0: 48 8b 4f 18                   movq    0x18(%rdi), %rcx
// 1c4: 48 89 34 c1                   movq    %rsi, (%rcx,%rax,8)
// 1c8: 48 ff c0                      incq    %rax
// 1cb: 48 89 47 10                   movq    %rax, 0x10(%rdi)
// 1cf: eb 16                         jmp     0x1e7 <_JIT_ENTRY+0x1e7>
// 1d1: 4f 8d 3c ef                   leaq    (%r15,%r13,8), %r15
// 1d5: eb 36                         jmp     0x20d <_JIT_ENTRY+0x20d>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _PyList_AppendTakeRefListResize
// 1e1: ff d0                         callq   *%rax
// 1e3: 85 c0                         testl   %eax, %eax
// 1e5: 78 23                         js      0x20a <_JIT_ENTRY+0x20a>
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _JIT_CONTINUE
// 1f1: 48 89 df                      movq    %rbx, %rdi
// 1f4: 4c 89 e6                      movq    %r12, %rsi
// 1f7: 4c 89 f2                      movq    %r14, %rdx
// 1fa: 48 83 c4 08                   addq    $0x8, %rsp
// 1fe: 5b                            popq    %rbx
// 1ff: 41 5c                         popq    %r12
// 201: 41 5d                         popq    %r13
// 203: 41 5e                         popq    %r14
// 205: 41 5f                         popq    %r15
// 207: 5d                            popq    %rbp
// 208: ff e0                         jmpq    *%rax
// 20a: 4d 89 e7                      movq    %r12, %r15
// 20d: 49 29 df                      subq    %rbx, %r15
// 210: 49 83 c7 b8                   addq    $-0x48, %r15
// 214: 49 c1 ef 03                   shrq    $0x3, %r15
// 218: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 21c: 31 c0                         xorl    %eax, %eax
// 21e: e9 79 fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 223: 
static const unsigned char _CALL_LENplus_LIST_APPEND_code_body[548] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd7, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xef, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x46, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x74, 0x4e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xcf, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x49, 0x8b, 0x74, 0xc7, 0xf8, 0x48, 0x01, 0xc0, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x39, 0x47, 0x20, 0x7e, 0x17, 0x48, 0x8b, 0x4f, 0x18, 0x48, 0x89, 0x34, 0xc1, 0x48, 0xff, 0xc0, 0x48, 0x89, 0x47, 0x10, 0xeb, 0x16, 0x4f, 0x8d, 0x3c, 0xef, 0xeb, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x79, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_LIST_APPEND_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_AppendTakeRefListResize, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_LIST_APPEND_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LIST_APPEND_data_holes[1];

// _CALL_LENplus_LIST_EXTEND
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LIST_EXTEND.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d6                      movq    %rdx, %r14
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d7 00                cmpq    $0x0, (%r15,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ef                   movq    (%r15,%r13,8), %rbp
// 67: 49 8b 46 10                   movq    0x10(%r14), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 df                      subq    %rbx, %r15
// 77: 49 83 c7 b8                   addq    $-0x48, %r15
// 7b: 49 c1 ef 03                   shrq    $0x3, %r15
// 7f: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 cf                   movq    (%r15,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 7e 01 00 00             js      0x245 <_JIT_ENTRY+0x245>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 c6 00 00 00             je      0x24d <_JIT_ENTRY+0x24d>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 cf                   movq    %rdx, (%r15,%rcx,8)
// 1a2: f7 d0                         notl    %eax
// 1a4: 48 98                         cltq
// 1a6: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 1aa: 49 83 c4 f8                   addq    $-0x8, %r12
// 1ae: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 1b3: 48 01 c0                      addq    %rax, %rax
// 1b6: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _PyList_Extend
// 1c4: 4c 89 ee                      movq    %r13, %rsi
// 1c7: ff d0                         callq   *%rax
// 1c9: 48 85 c0                      testq   %rax, %rax
// 1cc: 0f 84 84 00 00 00             je      0x256 <_JIT_ENTRY+0x256>
// 1d2: 49 8b 45 00                   movq    (%r13), %rax
// 1d6: 48 85 c0                      testq   %rax, %rax
// 1d9: 7f 22                         jg      0x1fd <_JIT_ENTRY+0x1fd>
// 1db: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001dd:  R_X86_64_64  .rodata.str1.1
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_NegativeRefcount
// 1ef: be 47 05 00 00                movl    $0x547, %esi            # imm = 0x547
// 1f4: 4c 89 ea                      movq    %r13, %rdx
// 1f7: ff d0                         callq   *%rax
// 1f9: 49 8b 45 00                   movq    (%r13), %rax
// 1fd: 85 c0                         testl   %eax, %eax
// 1ff: 78 21                         js      0x222 <_JIT_ENTRY+0x222>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20b: ff d0                         callq   *%rax
// 20d: 49 ff 4d 00                   decq    (%r13)
// 211: 75 0f                         jne     0x222 <_JIT_ENTRY+0x222>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_Dealloc
// 21d: 4c 89 ef                      movq    %r13, %rdi
// 220: ff d0                         callq   *%rax
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _JIT_CONTINUE
// 22c: 48 89 df                      movq    %rbx, %rdi
// 22f: 4c 89 e6                      movq    %r12, %rsi
// 232: 4c 89 f2                      movq    %r14, %rdx
// 235: 48 83 c4 08                   addq    $0x8, %rsp
// 239: 5b                            popq    %rbx
// 23a: 41 5c                         popq    %r12
// 23c: 41 5d                         popq    %r13
// 23e: 41 5e                         popq    %r14
// 240: 41 5f                         popq    %r15
// 242: 5d                            popq    %rbp
// 243: ff e0                         jmpq    *%rax
// 245: 4d 89 fc                      movq    %r15, %r12
// 248: e9 d0 00 00 00                jmp     0x31d <_JIT_ENTRY+0x31d>
// 24d: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 251: e9 c7 00 00 00                jmp     0x31d <_JIT_ENTRY+0x31d>
// 256: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000258:  R_X86_64_64  PyExc_TypeError
// 260: 49 8b 37                      movq    (%r15), %rsi
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _PyErr_ExceptionMatches
// 26d: 4c 89 f7                      movq    %r14, %rdi
// 270: ff d0                         callq   *%rax
// 272: 85 c0                         testl   %eax, %eax
// 274: 74 57                         je      0x2cd <_JIT_ENTRY+0x2cd>
// 276: 49 8b 45 08                   movq    0x8(%r13), %rax
// 27a: 48 83 b8 d8 00 00 00 00       cmpq    $0x0, 0xd8(%rax)
// 282: 75 49                         jne     0x2cd <_JIT_ENTRY+0x2cd>
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  PySequence_Check
// 28e: 4c 89 ef                      movq    %r13, %rdi
// 291: ff d0                         callq   *%rax
// 293: 85 c0                         testl   %eax, %eax
// 295: 75 36                         jne     0x2cd <_JIT_ENTRY+0x2cd>
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _PyErr_Clear
// 2a1: 4c 89 f7                      movq    %r14, %rdi
// 2a4: ff d0                         callq   *%rax
// 2a6: 49 8b 37                      movq    (%r15), %rsi
// 2a9: 49 8b 45 08                   movq    0x8(%r13), %rax
// 2ad: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2b1: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002b3:  R_X86_64_64  .rodata.str1.1+0x39
// 2bb: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002bd:  R_X86_64_64  _PyErr_Format
// 2c5: 4c 89 f7                      movq    %r14, %rdi
// 2c8: 31 c0                         xorl    %eax, %eax
// 2ca: 41 ff d0                      callq   *%r8
// 2cd: 49 8b 45 00                   movq    (%r13), %rax
// 2d1: 48 85 c0                      testq   %rax, %rax
// 2d4: 7f 22                         jg      0x2f8 <_JIT_ENTRY+0x2f8>
// 2d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d8:  R_X86_64_64  .rodata.str1.1
// 2e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e2:  R_X86_64_64  _Py_NegativeRefcount
// 2ea: be 43 05 00 00                movl    $0x543, %esi            # imm = 0x543
// 2ef: 4c 89 ea                      movq    %r13, %rdx
// 2f2: ff d0                         callq   *%rax
// 2f4: 49 8b 45 00                   movq    (%r13), %rax
// 2f8: 85 c0                         testl   %eax, %eax
// 2fa: 78 21                         js      0x31d <_JIT_ENTRY+0x31d>
// 2fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 306: ff d0                         callq   *%rax
// 308: 49 ff 4d 00                   decq    (%r13)
// 30c: 75 0f                         jne     0x31d <_JIT_ENTRY+0x31d>
// 30e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000310:  R_X86_64_64  _Py_Dealloc
// 318: 4c 89 ef                      movq    %r13, %rdi
// 31b: ff d0                         callq   *%rax
// 31d: 49 29 dc                      subq    %rbx, %r12
// 320: 49 83 c4 b8                   addq    $-0x48, %r12
// 324: 49 c1 ec 03                   shrq    $0x3, %r12
// 328: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 32c: 31 c0                         xorl    %eax, %eax
// 32e: e9 69 fd ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 333: 
static const unsigned char _CALL_LENplus_LIST_EXTEND_code_body[820] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd7, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xef, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x7e, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xc6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xcf, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0x01, 0xc0, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x47, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xfc, 0xe9, 0xd0, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xef, 0xe9, 0xc7, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x37, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x57, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x83, 0xb8, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x75, 0x49, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x37, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x69, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_LIST_EXTEND_code_holes[30] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_Extend, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Check, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00Value after * must be an iterable, not %.200s\x00'
// 67: 00
static const unsigned char _CALL_LENplus_LIST_EXTEND_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x2a, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x00, 0x00};
static const Hole _CALL_LENplus_LIST_EXTEND_data_holes[1];

// _CALL_LENplus_LOAD_ASSERTION_ERROR
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_ASSERTION_ERROR.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 2a 01 00 00             js      0x1f1 <_JIT_ENTRY+0x1f1>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 4b 8d 04 ee                   leaq    (%r14,%r13,8), %rax
// 17e: 48 8b 0c 24                   movq    (%rsp), %rcx
// 182: 48 85 c9                      testq   %rcx, %rcx
// 185: 74 67                         je      0x1ee <_JIT_ENTRY+0x1ee>
// 187: 48 89 08                      movq    %rcx, (%rax)
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  PyExc_AssertionError
// 194: 4c 8b 20                      movq    (%rax), %r12
// 197: 41 8b 04 24                   movl    (%r12), %eax
// 19b: ff c0                         incl    %eax
// 19d: 74 10                         je      0x1af <_JIT_ENTRY+0x1af>
// 19f: 41 89 04 24                   movl    %eax, (%r12)
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1ad: ff d0                         callq   *%rax
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _JIT_OPARG
// 1b9: f7 d0                         notl    %eax
// 1bb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1c0: 48 98                         cltq
// 1c2: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 1c6: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1ca: 48 83 c6 08                   addq    $0x8, %rsi
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _JIT_CONTINUE
// 1d8: 48 89 df                      movq    %rbx, %rdi
// 1db: 4c 89 fa                      movq    %r15, %rdx
// 1de: 48 83 c4 08                   addq    $0x8, %rsp
// 1e2: 5b                            popq    %rbx
// 1e3: 41 5c                         popq    %r12
// 1e5: 41 5d                         popq    %r13
// 1e7: 41 5e                         popq    %r14
// 1e9: 41 5f                         popq    %r15
// 1eb: 5d                            popq    %rbp
// 1ec: ff e0                         jmpq    *%rax
// 1ee: 49 89 c6                      movq    %rax, %r14
// 1f1: 49 29 de                      subq    %rbx, %r14
// 1f4: 49 83 c6 b8                   addq    $-0x48, %r14
// 1f8: 49 c1 ee 03                   shrq    $0x3, %r14
// 1fc: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 200: 31 c0                         xorl    %eax, %eax
// 202: e9 95 fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 207: 
static const unsigned char _CALL_LENplus_LOAD_ASSERTION_ERROR_code_body[520] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x2a, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x67, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x20, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x95, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_LOAD_ASSERTION_ERROR_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AssertionError, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_LOAD_ASSERTION_ERROR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_ASSERTION_ERROR_data_holes[1];

// _CALL_LENplus_LOAD_ATTR
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_ATTR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 48 63 d2                      movslq  %edx, %rdx
// 2b: 31 f6                         xorl    %esi, %esi
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 40 0f 94 c6                   sete    %sil
// 34: 31 ff                         xorl    %edi, %edi
// 36: 66 83 f9 01                   cmpw    $0x1, %cx
// 3a: 40 0f 94 c7                   sete    %dil
// 3e: 0f b7 c9                      movzwl  %cx, %ecx
// 41: 49 89 c8                      movq    %rcx, %r8
// 44: 49 f7 d8                      negq    %r8
// 47: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 4c: 0f 44 f7                      cmovel  %edi, %esi
// 4f: 48 f7 d1                      notq    %rcx
// 52: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 56: 40 80 fe 01                   cmpb    $0x1, %sil
// 5a: 75 1b                         jne     0x77 <_JIT_ENTRY+0x77>
// 5c: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 61: 29 c2                         subl    %eax, %edx
// 63: 4c 63 ea                      movslq  %edx, %r13
// 66: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 6a: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6e: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 75: 74 37                         je      0xae <_JIT_ENTRY+0xae>
// 77: 49 29 de                      subq    %rbx, %r14
// 7a: 49 83 c6 b8                   addq    $-0x48, %r14
// 7e: 49 c1 ee 03                   shrq    $0x3, %r14
// 82: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 86: 48 8b 03                      movq    (%rbx), %rax
// 89: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008b:  R_X86_64_64  _JIT_TARGET
// 93: 89 c9                         movl    %ecx, %ecx
// 95: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 99: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9f: 48 83 c4 18                   addq    $0x18, %rsp
// a3: 5b                            popq    %rbx
// a4: 41 5c                         popq    %r12
// a6: 41 5d                         popq    %r13
// a8: 41 5e                         popq    %r14
// aa: 41 5f                         popq    %r15
// ac: 5d                            popq    %rbp
// ad: c3                            retq
// ae: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  PyObject_Size
// bc: 4c 89 e7                      movq    %r12, %rdi
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 2b 01 00 00             js      0x1f5 <_JIT_ENTRY+0x1f5>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 49 8b 04 24                   movq    (%r12), %rax
// 132: 48 85 c0                      testq   %rax, %rax
// 135: 7f 22                         jg      0x159 <_JIT_ENTRY+0x159>
// 137: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000139:  R_X86_64_64  .rodata.str1.1
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_NegativeRefcount
// 14b: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 150: 4c 89 e2                      movq    %r12, %rdx
// 153: ff d0                         callq   *%rax
// 155: 49 8b 04 24                   movq    (%r12), %rax
// 159: 85 c0                         testl   %eax, %eax
// 15b: 78 21                         js      0x17e <_JIT_ENTRY+0x17e>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 167: ff d0                         callq   *%rax
// 169: 49 ff 0c 24                   decq    (%r12)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000171:  R_X86_64_64  _Py_Dealloc
// 179: 4c 89 e7                      movq    %r12, %rdi
// 17c: ff d0                         callq   *%rax
// 17e: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 183: 48 85 f6                      testq   %rsi, %rsi
// 186: 74 75                         je      0x1fd <_JIT_ENTRY+0x1fd>
// 188: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018a:  R_X86_64_64  _JIT_OPARG
// 192: 0f b7 c8                      movzwl  %ax, %ecx
// 195: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 19a: 29 ca                         subl    %ecx, %edx
// 19c: 48 63 d2                      movslq  %edx, %rdx
// 19f: 49 89 34 d6                   movq    %rsi, (%r14,%rdx,8)
// 1a3: f7 d1                         notl    %ecx
// 1a5: 48 63 c9                      movslq  %ecx, %rcx
// 1a8: 4d 8d 6c ce f8                leaq    -0x8(%r14,%rcx,8), %r13
// 1ad: 4d 8b 64 ce f8                movq    -0x8(%r14,%rcx,8), %r12
// 1b2: 48 8b 0b                      movq    (%rbx), %rcx
// 1b5: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 1b9: 89 c2                         movl    %eax, %edx
// 1bb: 81 e2 fe ff 00 00             andl    $0xfffe, %edx           # imm = 0xFFFE
// 1c1: 48 8b 74 91 18                movq    0x18(%rcx,%rdx,4), %rsi
// 1c6: a8 01                         testb   $0x1, %al
// 1c8: 74 3c                         je      0x206 <_JIT_ENTRY+0x206>
// 1ca: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  _PyObject_GetMethod
// 1dd: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1e2: 4c 89 e7                      movq    %r12, %rdi
// 1e5: ff d0                         callq   *%rax
// 1e7: 85 c0                         testl   %eax, %eax
// 1e9: 74 53                         je      0x23e <_JIT_ENTRY+0x23e>
// 1eb: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1f0: e9 a6 00 00 00                jmp     0x29b <_JIT_ENTRY+0x29b>
// 1f5: 4d 89 f5                      movq    %r14, %r13
// 1f8: e9 fc 00 00 00                jmp     0x2f9 <_JIT_ENTRY+0x2f9>
// 1fd: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 201: e9 f3 00 00 00                jmp     0x2f9 <_JIT_ENTRY+0x2f9>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  PyObject_GetAttr
// 210: 4c 89 e7                      movq    %r12, %rdi
// 213: ff d0                         callq   *%rax
// 215: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 21a: 49 8b 04 24                   movq    (%r12), %rax
// 21e: 48 85 c0                      testq   %rax, %rax
// 221: 7f 46                         jg      0x269 <_JIT_ENTRY+0x269>
// 223: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000225:  R_X86_64_64  .rodata.str1.1
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_NegativeRefcount
// 237: be 4b 06 00 00                movl    $0x64b, %esi            # imm = 0x64B
// 23c: eb 22                         jmp     0x260 <_JIT_ENTRY+0x260>
// 23e: 49 8b 04 24                   movq    (%r12), %rax
// 242: 48 85 c0                      testq   %rax, %rax
// 245: 7f 22                         jg      0x269 <_JIT_ENTRY+0x269>
// 247: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000249:  R_X86_64_64  .rodata.str1.1
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _Py_NegativeRefcount
// 25b: be 43 06 00 00                movl    $0x643, %esi            # imm = 0x643
// 260: 4c 89 e2                      movq    %r12, %rdx
// 263: ff d0                         callq   *%rax
// 265: 49 8b 04 24                   movq    (%r12), %rax
// 269: 85 c0                         testl   %eax, %eax
// 26b: 78 21                         js      0x28e <_JIT_ENTRY+0x28e>
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 277: ff d0                         callq   *%rax
// 279: 49 ff 0c 24                   decq    (%r12)
// 27d: 75 0f                         jne     0x28e <_JIT_ENTRY+0x28e>
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_Dealloc
// 289: 4c 89 e7                      movq    %r12, %rdi
// 28c: ff d0                         callq   *%rax
// 28e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 293: 48 85 c0                      testq   %rax, %rax
// 296: 74 61                         je      0x2f9 <_JIT_ENTRY+0x2f9>
// 298: 45 31 e4                      xorl    %r12d, %r12d
// 29b: 49 89 45 00                   movq    %rax, (%r13)
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  _JIT_OPARG
// 2a9: a8 01                         testb   $0x1, %al
// 2ab: 74 0d                         je      0x2ba <_JIT_ENTRY+0x2ba>
// 2ad: f7 d0                         notl    %eax
// 2af: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2b4: 48 98                         cltq
// 2b6: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _JIT_OPARG
// 2c4: 89 c1                         movl    %eax, %ecx
// 2c6: 83 e1 01                      andl    $0x1, %ecx
// 2c9: f7 d0                         notl    %eax
// 2cb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2d0: 48 98                         cltq
// 2d2: 48 01 c8                      addq    %rcx, %rax
// 2d5: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  _JIT_CONTINUE
// 2e3: 48 89 df                      movq    %rbx, %rdi
// 2e6: 4c 89 fa                      movq    %r15, %rdx
// 2e9: 48 83 c4 18                   addq    $0x18, %rsp
// 2ed: 5b                            popq    %rbx
// 2ee: 41 5c                         popq    %r12
// 2f0: 41 5d                         popq    %r13
// 2f2: 41 5e                         popq    %r14
// 2f4: 41 5f                         popq    %r15
// 2f6: 5d                            popq    %rbp
// 2f7: ff e0                         jmpq    *%rax
// 2f9: 49 29 dd                      subq    %rbx, %r13
// 2fc: 49 83 c5 b8                   addq    $-0x48, %r13
// 300: 49 c1 ed 03                   shrq    $0x3, %r13
// 304: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 308: 31 c0                         xorl    %eax, %eax
// 30a: e9 90 fd ff ff                jmp     0x9f <_JIT_ENTRY+0x9f>
// 30f: 
static const unsigned char _CALL_LENplus_LOAD_ATTR_code_body[784] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x2b, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x85, 0xf6, 0x74, 0x75, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd6, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4d, 0x8d, 0x6c, 0xce, 0xf8, 0x4d, 0x8b, 0x64, 0xce, 0xf8, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x49, 0x20, 0x89, 0xc2, 0x81, 0xe2, 0xfe, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x91, 0x18, 0xa8, 0x01, 0x74, 0x3c, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x53, 0x48, 0x8b, 0x44, 0x24, 0x08, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf5, 0xe9, 0xfc, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xee, 0xe9, 0xf3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x46, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4b, 0x06, 0x00, 0x00, 0xeb, 0x22, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x61, 0x45, 0x31, 0xe4, 0x49, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x0d, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x24, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x90, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_LOAD_ATTR_code_holes[25] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_GetMethod, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetAttr, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_LOAD_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_ATTR_data_holes[1];

// _CALL_LENplus_LOAD_ATTR_CLASS
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_ATTR_CLASS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 05 01 00 00             js      0x1cc <_JIT_ENTRY+0x1cc>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 74 45                         je      0x1c8 <_JIT_ENTRY+0x1c8>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _JIT_OPARG
// 18d: 0f b7 c0                      movzwl  %ax, %eax
// 190: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 195: 29 c1                         subl    %eax, %ecx
// 197: 48 63 c9                      movslq  %ecx, %rcx
// 19a: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 19e: f7 d0                         notl    %eax
// 1a0: 48 98                         cltq
// 1a2: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1a7: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001a9:  R_X86_64_64  _JIT_OPERAND
// 1b1: 41 8b 45 00                   movl    (%r13), %eax
// 1b5: ff c0                         incl    %eax
// 1b7: 75 29                         jne     0x1e2 <_JIT_ENTRY+0x1e2>
// 1b9: 49 8b 04 24                   movq    (%r12), %rax
// 1bd: 48 85 c0                      testq   %rax, %rax
// 1c0: 7e 39                         jle     0x1fb <_JIT_ENTRY+0x1fb>
// 1c2: 85 c0                         testl   %eax, %eax
// 1c4: 79 5b                         jns     0x221 <_JIT_ENTRY+0x221>
// 1c6: eb 7a                         jmp     0x242 <_JIT_ENTRY+0x242>
// 1c8: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1cc: 49 29 de                      subq    %rbx, %r14
// 1cf: 49 83 c6 b8                   addq    $-0x48, %r14
// 1d3: 49 c1 ee 03                   shrq    $0x3, %r14
// 1d7: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1db: 31 c0                         xorl    %eax, %eax
// 1dd: e9 ba fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 1e2: 41 89 45 00                   movl    %eax, (%r13)
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 8b 04 24                   movq    (%r12), %rax
// 1f6: 48 85 c0                      testq   %rax, %rax
// 1f9: 7f c7                         jg      0x1c2 <_JIT_ENTRY+0x1c2>
// 1fb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fd:  R_X86_64_64  .rodata.str1.1
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _Py_NegativeRefcount
// 20f: be f3 06 00 00                movl    $0x6f3, %esi            # imm = 0x6F3
// 214: 4c 89 e2                      movq    %r12, %rdx
// 217: ff d0                         callq   *%rax
// 219: 49 8b 04 24                   movq    (%r12), %rax
// 21d: 85 c0                         testl   %eax, %eax
// 21f: 78 21                         js      0x242 <_JIT_ENTRY+0x242>
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22b: ff d0                         callq   *%rax
// 22d: 49 ff 0c 24                   decq    (%r12)
// 231: 75 0f                         jne     0x242 <_JIT_ENTRY+0x242>
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_Dealloc
// 23d: 4c 89 e7                      movq    %r12, %rdi
// 240: ff d0                         callq   *%rax
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _JIT_OPARG
// 24c: 89 c1                         movl    %eax, %ecx
// 24e: f7 d1                         notl    %ecx
// 250: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 256: 48 63 c9                      movslq  %ecx, %rcx
// 259: 4d 89 6c ce f8                movq    %r13, -0x8(%r14,%rcx,8)
// 25e: a8 01                         testb   $0x1, %al
// 260: 74 11                         je      0x273 <_JIT_ENTRY+0x273>
// 262: f7 d0                         notl    %eax
// 264: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 269: 48 98                         cltq
// 26b: 49 c7 04 c6 00 00 00 00       movq    $0x0, (%r14,%rax,8)
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _JIT_OPARG
// 27d: 89 c1                         movl    %eax, %ecx
// 27f: 83 e1 01                      andl    $0x1, %ecx
// 282: f7 d0                         notl    %eax
// 284: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 289: 48 98                         cltq
// 28b: 48 01 c8                      addq    %rcx, %rax
// 28e: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _JIT_CONTINUE
// 29c: 48 89 df                      movq    %rbx, %rdi
// 29f: 4c 89 fa                      movq    %r15, %rdx
// 2a2: 48 83 c4 08                   addq    $0x8, %rsp
// 2a6: 5b                            popq    %rbx
// 2a7: 41 5c                         popq    %r12
// 2a9: 41 5d                         popq    %r13
// 2ab: 41 5e                         popq    %r14
// 2ad: 41 5f                         popq    %r15
// 2af: 5d                            popq    %rbp
// 2b0: ff e0                         jmpq    *%rax
// 2b2: 
static const unsigned char _CALL_LENplus_LOAD_ATTR_CLASS_code_body[691] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x05, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x74, 0x45, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x29, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x39, 0x85, 0xc0, 0x79, 0x5b, 0xeb, 0x7a, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xba, 0xfe, 0xff, 0xff, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xc7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x6c, 0xce, 0xf8, 0xa8, 0x01, 0x74, 0x11, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0xc7, 0x04, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_LOAD_ATTR_CLASS_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_LOAD_ATTR_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_ATTR_CLASS_data_holes[1];

// _CALL_LENplus_LOAD_ATTR_INSTANCE_VALUE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_ATTR_INSTANCE_VALUE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 de                      subq    %rbx, %r14
// 79: 49 83 c6 b8                   addq    $-0x48, %r14
// 7d: 49 c1 ee 03                   shrq    $0x3, %r14
// 81: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b2: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 ef                      movq    %r13, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 20 01 00 00             js      0x1ee <_JIT_ENTRY+0x1ee>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 45 00                   movq    (%r13), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 ea                      movq    %r13, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 45 00                   movq    (%r13), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 21                         js      0x182 <_JIT_ENTRY+0x182>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 4d 00                   decq    (%r13)
// 171: 75 0f                         jne     0x182 <_JIT_ENTRY+0x182>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 ef                      movq    %r13, %rdi
// 180: ff d0                         callq   *%rax
// 182: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 187: 48 85 d2                      testq   %rdx, %rdx
// 18a: 74 5e                         je      0x1ea <_JIT_ENTRY+0x1ea>
// 18c: 4f 8d 3c e6                   leaq    (%r14,%r12,8), %r15
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _JIT_OPARG
// 19a: 0f b7 c0                      movzwl  %ax, %eax
// 19d: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a2: 29 c1                         subl    %eax, %ecx
// 1a4: 48 63 c9                      movslq  %ecx, %rcx
// 1a7: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1ab: f7 d0                         notl    %eax
// 1ad: 48 98                         cltq
// 1af: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1b4: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 1b9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bb:  R_X86_64_64  _JIT_OPERAND
// 1c3: 0f b7 c9                      movzwl  %cx, %ecx
// 1c6: 4c 8b 6c c8 01                movq    0x1(%rax,%rcx,8), %r13
// 1cb: 4d 85 ed                      testq   %r13, %r13
// 1ce: 74 34                         je      0x204 <_JIT_ENTRY+0x204>
// 1d0: 41 8b 45 00                   movl    (%r13), %eax
// 1d4: ff c0                         incl    %eax
// 1d6: 75 34                         jne     0x20c <_JIT_ENTRY+0x20c>
// 1d8: 49 8b 04 24                   movq    (%r12), %rax
// 1dc: 48 85 c0                      testq   %rax, %rax
// 1df: 7e 44                         jle     0x225 <_JIT_ENTRY+0x225>
// 1e1: 85 c0                         testl   %eax, %eax
// 1e3: 79 66                         jns     0x24b <_JIT_ENTRY+0x24b>
// 1e5: e9 82 00 00 00                jmp     0x26c <_JIT_ENTRY+0x26c>
// 1ea: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 1ee: 49 29 de                      subq    %rbx, %r14
// 1f1: 49 83 c6 b8                   addq    $-0x48, %r14
// 1f5: 49 c1 ee 03                   shrq    $0x3, %r14
// 1f9: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1fd: 31 c0                         xorl    %eax, %eax
// 1ff: e9 9a fe ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 204: 4d 89 fe                      movq    %r15, %r14
// 207: e9 6a fe ff ff                jmp     0x76 <_JIT_ENTRY+0x76>
// 20c: 41 89 45 00                   movl    %eax, (%r13)
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 21a: ff d0                         callq   *%rax
// 21c: 49 8b 04 24                   movq    (%r12), %rax
// 220: 48 85 c0                      testq   %rax, %rax
// 223: 7f bc                         jg      0x1e1 <_JIT_ENTRY+0x1e1>
// 225: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000227:  R_X86_64_64  .rodata.str1.1
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _Py_NegativeRefcount
// 239: be 75 06 00 00                movl    $0x675, %esi            # imm = 0x675
// 23e: 4c 89 e2                      movq    %r12, %rdx
// 241: ff d0                         callq   *%rax
// 243: 49 8b 04 24                   movq    (%r12), %rax
// 247: 85 c0                         testl   %eax, %eax
// 249: 78 21                         js      0x26c <_JIT_ENTRY+0x26c>
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 255: ff d0                         callq   *%rax
// 257: 49 ff 0c 24                   decq    (%r12)
// 25b: 75 0f                         jne     0x26c <_JIT_ENTRY+0x26c>
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _Py_Dealloc
// 267: 4c 89 e7                      movq    %r12, %rdi
// 26a: ff d0                         callq   *%rax
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _JIT_OPARG
// 276: 89 c1                         movl    %eax, %ecx
// 278: f7 d1                         notl    %ecx
// 27a: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 280: 48 63 c9                      movslq  %ecx, %rcx
// 283: 4d 89 6c ce f8                movq    %r13, -0x8(%r14,%rcx,8)
// 288: a8 01                         testb   $0x1, %al
// 28a: 74 07                         je      0x293 <_JIT_ENTRY+0x293>
// 28c: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// 293: 89 c1                         movl    %eax, %ecx
// 295: 83 e1 01                      andl    $0x1, %ecx
// 298: f7 d0                         notl    %eax
// 29a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 29f: 48 98                         cltq
// 2a1: 48 01 c8                      addq    %rcx, %rax
// 2a4: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _JIT_CONTINUE
// 2b2: 48 89 df                      movq    %rbx, %rdi
// 2b5: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2ba: 48 83 c4 18                   addq    $0x18, %rsp
// 2be: 5b                            popq    %rbx
// 2bf: 41 5c                         popq    %r12
// 2c1: 41 5d                         popq    %r13
// 2c3: 41 5e                         popq    %r14
// 2c5: 41 5f                         popq    %r15
// 2c7: 5d                            popq    %rbp
// 2c8: ff e0                         jmpq    *%rax
// 2ca: 
static const unsigned char _CALL_LENplus_LOAD_ATTR_INSTANCE_VALUE_code_body[715] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x20, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x5e, 0x4f, 0x8d, 0x3c, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x6c, 0xc8, 0x01, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x34, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x44, 0x85, 0xc0, 0x79, 0x66, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x9a, 0xfe, 0xff, 0xff, 0x4d, 0x89, 0xfe, 0xe9, 0x6a, 0xfe, 0xff, 0xff, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xbc, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x6c, 0xce, 0xf8, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_LOAD_ATTR_INSTANCE_VALUE_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_LOAD_ATTR_INSTANCE_VALUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_ATTR_INSTANCE_VALUE_data_holes[1];

// _CALL_LENplus_LOAD_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_ATTR_METHOD_LAZY_DICT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 4e 01 00 00             js      0x215 <_JIT_ENTRY+0x215>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 8a 00 00 00             je      0x211 <_JIT_ENTRY+0x211>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a2: f7 d0                         notl    %eax
// 1a4: 48 98                         cltq
// 1a6: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1ab: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001ad:  R_X86_64_64  _JIT_OPERAND
// 1b5: 41 8b 45 00                   movl    (%r13), %eax
// 1b9: ff c0                         incl    %eax
// 1bb: 74 10                         je      0x1cd <_JIT_ENTRY+0x1cd>
// 1bd: 41 89 45 00                   movl    %eax, (%r13)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1cb: ff d0                         callq   *%rax
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _JIT_OPARG
// 1d7: f7 d0                         notl    %eax
// 1d9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1de: 48 98                         cltq
// 1e0: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 1e5: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 1e9: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1ed: 48 83 c6 08                   addq    $0x8, %rsi
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _JIT_CONTINUE
// 1fb: 48 89 df                      movq    %rbx, %rdi
// 1fe: 4c 89 fa                      movq    %r15, %rdx
// 201: 48 83 c4 08                   addq    $0x8, %rsp
// 205: 5b                            popq    %rbx
// 206: 41 5c                         popq    %r12
// 208: 41 5d                         popq    %r13
// 20a: 41 5e                         popq    %r14
// 20c: 41 5f                         popq    %r15
// 20e: 5d                            popq    %rbp
// 20f: ff e0                         jmpq    *%rax
// 211: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 215: 49 29 de                      subq    %rbx, %r14
// 218: 49 83 c6 b8                   addq    $-0x48, %r14
// 21c: 49 c1 ee 03                   shrq    $0x3, %r14
// 220: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 224: 31 c0                         xorl    %eax, %eax
// 226: e9 71 fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 22b: 
static const unsigned char _CALL_LENplus_LOAD_ATTR_METHOD_LAZY_DICT_code_body[556] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x4e, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x71, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_LOAD_ATTR_METHOD_LAZY_DICT_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_LOAD_ATTR_METHOD_LAZY_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _CALL_LENplus_LOAD_ATTR_METHOD_NO_DICT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_ATTR_METHOD_NO_DICT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 4e 01 00 00             js      0x215 <_JIT_ENTRY+0x215>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 8a 00 00 00             je      0x211 <_JIT_ENTRY+0x211>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a2: f7 d0                         notl    %eax
// 1a4: 48 98                         cltq
// 1a6: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1ab: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001ad:  R_X86_64_64  _JIT_OPERAND
// 1b5: 41 8b 45 00                   movl    (%r13), %eax
// 1b9: ff c0                         incl    %eax
// 1bb: 74 10                         je      0x1cd <_JIT_ENTRY+0x1cd>
// 1bd: 41 89 45 00                   movl    %eax, (%r13)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1cb: ff d0                         callq   *%rax
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _JIT_OPARG
// 1d7: f7 d0                         notl    %eax
// 1d9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1de: 48 98                         cltq
// 1e0: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 1e5: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 1e9: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1ed: 48 83 c6 08                   addq    $0x8, %rsi
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _JIT_CONTINUE
// 1fb: 48 89 df                      movq    %rbx, %rdi
// 1fe: 4c 89 fa                      movq    %r15, %rdx
// 201: 48 83 c4 08                   addq    $0x8, %rsp
// 205: 5b                            popq    %rbx
// 206: 41 5c                         popq    %r12
// 208: 41 5d                         popq    %r13
// 20a: 41 5e                         popq    %r14
// 20c: 41 5f                         popq    %r15
// 20e: 5d                            popq    %rbp
// 20f: ff e0                         jmpq    *%rax
// 211: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 215: 49 29 de                      subq    %rbx, %r14
// 218: 49 83 c6 b8                   addq    $-0x48, %r14
// 21c: 49 c1 ee 03                   shrq    $0x3, %r14
// 220: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 224: 31 c0                         xorl    %eax, %eax
// 226: e9 71 fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 22b: 
static const unsigned char _CALL_LENplus_LOAD_ATTR_METHOD_NO_DICT_code_body[556] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x4e, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x71, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_LOAD_ATTR_METHOD_NO_DICT_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_LOAD_ATTR_METHOD_NO_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_ATTR_METHOD_NO_DICT_data_holes[1];

// _CALL_LENplus_LOAD_ATTR_METHOD_WITH_VALUES
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_ATTR_METHOD_WITH_VALUES.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 4e 01 00 00             js      0x215 <_JIT_ENTRY+0x215>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 8a 00 00 00             je      0x211 <_JIT_ENTRY+0x211>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a2: f7 d0                         notl    %eax
// 1a4: 48 98                         cltq
// 1a6: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1ab: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001ad:  R_X86_64_64  _JIT_OPERAND
// 1b5: 41 8b 45 00                   movl    (%r13), %eax
// 1b9: ff c0                         incl    %eax
// 1bb: 74 10                         je      0x1cd <_JIT_ENTRY+0x1cd>
// 1bd: 41 89 45 00                   movl    %eax, (%r13)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1cb: ff d0                         callq   *%rax
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _JIT_OPARG
// 1d7: f7 d0                         notl    %eax
// 1d9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1de: 48 98                         cltq
// 1e0: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 1e5: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 1e9: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1ed: 48 83 c6 08                   addq    $0x8, %rsi
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _JIT_CONTINUE
// 1fb: 48 89 df                      movq    %rbx, %rdi
// 1fe: 4c 89 fa                      movq    %r15, %rdx
// 201: 48 83 c4 08                   addq    $0x8, %rsp
// 205: 5b                            popq    %rbx
// 206: 41 5c                         popq    %r12
// 208: 41 5d                         popq    %r13
// 20a: 41 5e                         popq    %r14
// 20c: 41 5f                         popq    %r15
// 20e: 5d                            popq    %rbp
// 20f: ff e0                         jmpq    *%rax
// 211: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 215: 49 29 de                      subq    %rbx, %r14
// 218: 49 83 c6 b8                   addq    $-0x48, %r14
// 21c: 49 c1 ee 03                   shrq    $0x3, %r14
// 220: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 224: 31 c0                         xorl    %eax, %eax
// 226: e9 71 fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 22b: 
static const unsigned char _CALL_LENplus_LOAD_ATTR_METHOD_WITH_VALUES_code_body[556] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x4e, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x71, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_LOAD_ATTR_METHOD_WITH_VALUES_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_LOAD_ATTR_METHOD_WITH_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_ATTR_METHOD_WITH_VALUES_data_holes[1];

// _CALL_LENplus_LOAD_ATTR_MODULE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_ATTR_MODULE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 de                      subq    %rbx, %r14
// 79: 49 83 c6 b8                   addq    $-0x48, %r14
// 7d: 49 c1 ee 03                   shrq    $0x3, %r14
// 81: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b2: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 ef                      movq    %r13, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 36 01 00 00             js      0x204 <_JIT_ENTRY+0x204>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 45 00                   movq    (%r13), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 ea                      movq    %r13, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 45 00                   movq    (%r13), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 21                         js      0x182 <_JIT_ENTRY+0x182>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 4d 00                   decq    (%r13)
// 171: 75 0f                         jne     0x182 <_JIT_ENTRY+0x182>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 ef                      movq    %r13, %rdi
// 180: ff d0                         callq   *%rax
// 182: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 187: 48 85 d2                      testq   %rdx, %rdx
// 18a: 74 74                         je      0x200 <_JIT_ENTRY+0x200>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c0                      movzwl  %ax, %eax
// 199: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 19e: 29 c1                         subl    %eax, %ecx
// 1a0: 48 63 c9                      movslq  %ecx, %rcx
// 1a3: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a7: f7 d0                         notl    %eax
// 1a9: 48 98                         cltq
// 1ab: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 1b0: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1b4: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1b8: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 1bc: ba 01 00 00 00                movl    $0x1, %edx
// 1c1: 48 d3 e2                      shlq    %cl, %rdx
// 1c4: 4f 8d 3c e6                   leaq    (%r14,%r12,8), %r15
// 1c8: 48 01 c2                      addq    %rax, %rdx
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _JIT_OPERAND
// 1d5: 0f b7 c0                      movzwl  %ax, %eax
// 1d8: 48 c1 e0 04                   shlq    $0x4, %rax
// 1dc: 4c 8b 64 10 28                movq    0x28(%rax,%rdx), %r12
// 1e1: 4d 85 e4                      testq   %r12, %r12
// 1e4: 74 34                         je      0x21a <_JIT_ENTRY+0x21a>
// 1e6: 41 8b 04 24                   movl    (%r12), %eax
// 1ea: ff c0                         incl    %eax
// 1ec: 75 34                         jne     0x222 <_JIT_ENTRY+0x222>
// 1ee: 49 8b 45 00                   movq    (%r13), %rax
// 1f2: 48 85 c0                      testq   %rax, %rax
// 1f5: 7e 44                         jle     0x23b <_JIT_ENTRY+0x23b>
// 1f7: 85 c0                         testl   %eax, %eax
// 1f9: 79 66                         jns     0x261 <_JIT_ENTRY+0x261>
// 1fb: e9 82 00 00 00                jmp     0x282 <_JIT_ENTRY+0x282>
// 200: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 204: 49 29 de                      subq    %rbx, %r14
// 207: 49 83 c6 b8                   addq    $-0x48, %r14
// 20b: 49 c1 ee 03                   shrq    $0x3, %r14
// 20f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 213: 31 c0                         xorl    %eax, %eax
// 215: e9 84 fe ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 21a: 4d 89 fe                      movq    %r15, %r14
// 21d: e9 54 fe ff ff                jmp     0x76 <_JIT_ENTRY+0x76>
// 222: 41 89 04 24                   movl    %eax, (%r12)
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 8b 45 00                   movq    (%r13), %rax
// 236: 48 85 c0                      testq   %rax, %rax
// 239: 7f bc                         jg      0x1f7 <_JIT_ENTRY+0x1f7>
// 23b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023d:  R_X86_64_64  .rodata.str1.1
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _Py_NegativeRefcount
// 24f: be 97 06 00 00                movl    $0x697, %esi            # imm = 0x697
// 254: 4c 89 ea                      movq    %r13, %rdx
// 257: ff d0                         callq   *%rax
// 259: 49 8b 45 00                   movq    (%r13), %rax
// 25d: 85 c0                         testl   %eax, %eax
// 25f: 78 21                         js      0x282 <_JIT_ENTRY+0x282>
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26b: ff d0                         callq   *%rax
// 26d: 49 ff 4d 00                   decq    (%r13)
// 271: 75 0f                         jne     0x282 <_JIT_ENTRY+0x282>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_Dealloc
// 27d: 4c 89 ef                      movq    %r13, %rdi
// 280: ff d0                         callq   *%rax
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _JIT_OPARG
// 28c: 89 c1                         movl    %eax, %ecx
// 28e: f7 d1                         notl    %ecx
// 290: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 296: 48 63 c9                      movslq  %ecx, %rcx
// 299: 4d 89 64 ce f8                movq    %r12, -0x8(%r14,%rcx,8)
// 29e: a8 01                         testb   $0x1, %al
// 2a0: 74 07                         je      0x2a9 <_JIT_ENTRY+0x2a9>
// 2a2: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// 2a9: 89 c1                         movl    %eax, %ecx
// 2ab: 83 e1 01                      andl    $0x1, %ecx
// 2ae: f7 d0                         notl    %eax
// 2b0: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2b5: 48 98                         cltq
// 2b7: 48 01 c8                      addq    %rcx, %rax
// 2ba: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _JIT_CONTINUE
// 2c8: 48 89 df                      movq    %rbx, %rdi
// 2cb: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2d0: 48 83 c4 18                   addq    $0x18, %rsp
// 2d4: 5b                            popq    %rbx
// 2d5: 41 5c                         popq    %r12
// 2d7: 41 5d                         popq    %r13
// 2d9: 41 5e                         popq    %r14
// 2db: 41 5f                         popq    %r15
// 2dd: 5d                            popq    %rbp
// 2de: ff e0                         jmpq    *%rax
// 2e0: 
static const unsigned char _CALL_LENplus_LOAD_ATTR_MODULE_code_body[737] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x36, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x74, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x4f, 0x8d, 0x3c, 0xe6, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x64, 0x10, 0x28, 0x4d, 0x85, 0xe4, 0x74, 0x34, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x75, 0x34, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x44, 0x85, 0xc0, 0x79, 0x66, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x84, 0xfe, 0xff, 0xff, 0x4d, 0x89, 0xfe, 0xe9, 0x54, 0xfe, 0xff, 0xff, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xbc, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x64, 0xce, 0xf8, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_LOAD_ATTR_MODULE_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_LOAD_ATTR_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_ATTR_MODULE_data_holes[1];

// _CALL_LENplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 a0 01 00 00             js      0x26a <_JIT_ENTRY+0x26a>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 188: 48 85 d2                      testq   %rdx, %rdx
// 18b: 0f 84 d5 00 00 00             je      0x266 <_JIT_ENTRY+0x266>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a3: 29 c1                         subl    %eax, %ecx
// 1a5: 48 63 c9                      movslq  %ecx, %rcx
// 1a8: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1ac: f7 d0                         notl    %eax
// 1ae: 48 98                         cltq
// 1b0: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1b5: 49 8b 04 24                   movq    (%r12), %rax
// 1b9: 48 85 c0                      testq   %rax, %rax
// 1bc: 7f 22                         jg      0x1e0 <_JIT_ENTRY+0x1e0>
// 1be: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c0:  R_X86_64_64  .rodata.str1.1
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_NegativeRefcount
// 1d2: be d9 09 00 00                movl    $0x9d9, %esi            # imm = 0x9D9
// 1d7: 4c 89 e2                      movq    %r12, %rdx
// 1da: ff d0                         callq   *%rax
// 1dc: 49 8b 04 24                   movq    (%r12), %rax
// 1e0: 85 c0                         testl   %eax, %eax
// 1e2: 78 21                         js      0x205 <_JIT_ENTRY+0x205>
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ee: ff d0                         callq   *%rax
// 1f0: 49 ff 0c 24                   decq    (%r12)
// 1f4: 75 0f                         jne     0x205 <_JIT_ENTRY+0x205>
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_Dealloc
// 200: 4c 89 e7                      movq    %r12, %rdi
// 203: ff d0                         callq   *%rax
// 205: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 209: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000020b:  R_X86_64_64  _JIT_OPERAND
// 213: 41 8b 45 00                   movl    (%r13), %eax
// 217: ff c0                         incl    %eax
// 219: 74 10                         je      0x22b <_JIT_ENTRY+0x22b>
// 21b: 41 89 45 00                   movl    %eax, (%r13)
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 229: ff d0                         callq   *%rax
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _JIT_OPARG
// 235: f7 d0                         notl    %eax
// 237: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23c: 48 98                         cltq
// 23e: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _JIT_CONTINUE
// 24d: 48 89 df                      movq    %rbx, %rdi
// 250: 4c 89 e6                      movq    %r12, %rsi
// 253: 4c 89 fa                      movq    %r15, %rdx
// 256: 48 83 c4 18                   addq    $0x18, %rsp
// 25a: 5b                            popq    %rbx
// 25b: 41 5c                         popq    %r12
// 25d: 41 5d                         popq    %r13
// 25f: 41 5e                         popq    %r14
// 261: 41 5f                         popq    %r15
// 263: 5d                            popq    %rbp
// 264: ff e0                         jmpq    *%rax
// 266: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 26a: 49 29 de                      subq    %rbx, %r14
// 26d: 49 83 c6 b8                   addq    $-0x48, %r14
// 271: 49 c1 ee 03                   shrq    $0x3, %r14
// 275: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 279: 31 c0                         xorl    %eax, %eax
// 27b: e9 1d fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 280: 
static const unsigned char _CALL_LENplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_body[641] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xa0, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xd5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd9, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4f, 0x8d, 0x24, 0xee, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x1d, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_holes[22] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_holes[1];

// _CALL_LENplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 a0 01 00 00             js      0x26a <_JIT_ENTRY+0x26a>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 188: 48 85 d2                      testq   %rdx, %rdx
// 18b: 0f 84 d5 00 00 00             je      0x266 <_JIT_ENTRY+0x266>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a3: 29 c1                         subl    %eax, %ecx
// 1a5: 48 63 c9                      movslq  %ecx, %rcx
// 1a8: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1ac: f7 d0                         notl    %eax
// 1ae: 48 98                         cltq
// 1b0: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1b5: 49 8b 04 24                   movq    (%r12), %rax
// 1b9: 48 85 c0                      testq   %rax, %rax
// 1bc: 7f 22                         jg      0x1e0 <_JIT_ENTRY+0x1e0>
// 1be: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c0:  R_X86_64_64  .rodata.str1.1
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_NegativeRefcount
// 1d2: be c8 09 00 00                movl    $0x9c8, %esi            # imm = 0x9C8
// 1d7: 4c 89 e2                      movq    %r12, %rdx
// 1da: ff d0                         callq   *%rax
// 1dc: 49 8b 04 24                   movq    (%r12), %rax
// 1e0: 85 c0                         testl   %eax, %eax
// 1e2: 78 21                         js      0x205 <_JIT_ENTRY+0x205>
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ee: ff d0                         callq   *%rax
// 1f0: 49 ff 0c 24                   decq    (%r12)
// 1f4: 75 0f                         jne     0x205 <_JIT_ENTRY+0x205>
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_Dealloc
// 200: 4c 89 e7                      movq    %r12, %rdi
// 203: ff d0                         callq   *%rax
// 205: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 209: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000020b:  R_X86_64_64  _JIT_OPERAND
// 213: 41 8b 45 00                   movl    (%r13), %eax
// 217: ff c0                         incl    %eax
// 219: 74 10                         je      0x22b <_JIT_ENTRY+0x22b>
// 21b: 41 89 45 00                   movl    %eax, (%r13)
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 229: ff d0                         callq   *%rax
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _JIT_OPARG
// 235: f7 d0                         notl    %eax
// 237: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23c: 48 98                         cltq
// 23e: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _JIT_CONTINUE
// 24d: 48 89 df                      movq    %rbx, %rdi
// 250: 4c 89 e6                      movq    %r12, %rsi
// 253: 4c 89 fa                      movq    %r15, %rdx
// 256: 48 83 c4 18                   addq    $0x18, %rsp
// 25a: 5b                            popq    %rbx
// 25b: 41 5c                         popq    %r12
// 25d: 41 5d                         popq    %r13
// 25f: 41 5e                         popq    %r14
// 261: 41 5f                         popq    %r15
// 263: 5d                            popq    %rbp
// 264: ff e0                         jmpq    *%rax
// 266: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 26a: 49 29 de                      subq    %rbx, %r14
// 26d: 49 83 c6 b8                   addq    $-0x48, %r14
// 271: 49 c1 ee 03                   shrq    $0x3, %r14
// 275: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 279: 31 c0                         xorl    %eax, %eax
// 27b: e9 1d fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 280: 
static const unsigned char _CALL_LENplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_body[641] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xa0, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xd5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc8, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4f, 0x8d, 0x24, 0xee, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x1d, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_holes[22] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_holes[1];

// _CALL_LENplus_LOAD_ATTR_SLOT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_ATTR_SLOT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 de                      subq    %rbx, %r14
// 79: 49 83 c6 b8                   addq    $-0x48, %r14
// 7d: 49 c1 ee 03                   shrq    $0x3, %r14
// 81: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b2: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 ef                      movq    %r13, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 1a 01 00 00             js      0x1e8 <_JIT_ENTRY+0x1e8>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 45 00                   movq    (%r13), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 ea                      movq    %r13, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 45 00                   movq    (%r13), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 21                         js      0x182 <_JIT_ENTRY+0x182>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 4d 00                   decq    (%r13)
// 171: 75 0f                         jne     0x182 <_JIT_ENTRY+0x182>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 ef                      movq    %r13, %rdi
// 180: ff d0                         callq   *%rax
// 182: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 187: 48 85 d2                      testq   %rdx, %rdx
// 18a: 74 58                         je      0x1e4 <_JIT_ENTRY+0x1e4>
// 18c: 4f 8d 3c e6                   leaq    (%r14,%r12,8), %r15
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _JIT_OPARG
// 19a: 0f b7 c0                      movzwl  %ax, %eax
// 19d: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a2: 29 c1                         subl    %eax, %ecx
// 1a4: 48 63 c9                      movslq  %ecx, %rcx
// 1a7: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1ab: f7 d0                         notl    %eax
// 1ad: 48 98                         cltq
// 1af: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _JIT_OPERAND
// 1be: 0f b7 c0                      movzwl  %ax, %eax
// 1c1: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 1c5: 4d 85 ed                      testq   %r13, %r13
// 1c8: 74 34                         je      0x1fe <_JIT_ENTRY+0x1fe>
// 1ca: 41 8b 45 00                   movl    (%r13), %eax
// 1ce: ff c0                         incl    %eax
// 1d0: 75 34                         jne     0x206 <_JIT_ENTRY+0x206>
// 1d2: 49 8b 04 24                   movq    (%r12), %rax
// 1d6: 48 85 c0                      testq   %rax, %rax
// 1d9: 7e 44                         jle     0x21f <_JIT_ENTRY+0x21f>
// 1db: 85 c0                         testl   %eax, %eax
// 1dd: 79 66                         jns     0x245 <_JIT_ENTRY+0x245>
// 1df: e9 82 00 00 00                jmp     0x266 <_JIT_ENTRY+0x266>
// 1e4: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 1e8: 49 29 de                      subq    %rbx, %r14
// 1eb: 49 83 c6 b8                   addq    $-0x48, %r14
// 1ef: 49 c1 ee 03                   shrq    $0x3, %r14
// 1f3: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1f7: 31 c0                         xorl    %eax, %eax
// 1f9: e9 a0 fe ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 1fe: 4d 89 fe                      movq    %r15, %r14
// 201: e9 70 fe ff ff                jmp     0x76 <_JIT_ENTRY+0x76>
// 206: 41 89 45 00                   movl    %eax, (%r13)
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 214: ff d0                         callq   *%rax
// 216: 49 8b 04 24                   movq    (%r12), %rax
// 21a: 48 85 c0                      testq   %rax, %rax
// 21d: 7f bc                         jg      0x1db <_JIT_ENTRY+0x1db>
// 21f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000221:  R_X86_64_64  .rodata.str1.1
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_NegativeRefcount
// 233: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 238: 4c 89 e2                      movq    %r12, %rdx
// 23b: ff d0                         callq   *%rax
// 23d: 49 8b 04 24                   movq    (%r12), %rax
// 241: 85 c0                         testl   %eax, %eax
// 243: 78 21                         js      0x266 <_JIT_ENTRY+0x266>
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24f: ff d0                         callq   *%rax
// 251: 49 ff 0c 24                   decq    (%r12)
// 255: 75 0f                         jne     0x266 <_JIT_ENTRY+0x266>
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_Dealloc
// 261: 4c 89 e7                      movq    %r12, %rdi
// 264: ff d0                         callq   *%rax
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _JIT_OPARG
// 270: 89 c1                         movl    %eax, %ecx
// 272: f7 d1                         notl    %ecx
// 274: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 27a: 48 63 c9                      movslq  %ecx, %rcx
// 27d: 4d 89 6c ce f8                movq    %r13, -0x8(%r14,%rcx,8)
// 282: a8 01                         testb   $0x1, %al
// 284: 74 07                         je      0x28d <_JIT_ENTRY+0x28d>
// 286: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// 28d: 89 c1                         movl    %eax, %ecx
// 28f: 83 e1 01                      andl    $0x1, %ecx
// 292: f7 d0                         notl    %eax
// 294: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 299: 48 98                         cltq
// 29b: 48 01 c8                      addq    %rcx, %rax
// 29e: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _JIT_CONTINUE
// 2ac: 48 89 df                      movq    %rbx, %rdi
// 2af: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2b4: 48 83 c4 18                   addq    $0x18, %rsp
// 2b8: 5b                            popq    %rbx
// 2b9: 41 5c                         popq    %r12
// 2bb: 41 5d                         popq    %r13
// 2bd: 41 5e                         popq    %r14
// 2bf: 41 5f                         popq    %r15
// 2c1: 5d                            popq    %rbp
// 2c2: ff e0                         jmpq    *%rax
// 2c4: 
static const unsigned char _CALL_LENplus_LOAD_ATTR_SLOT_code_body[709] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x1a, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x58, 0x4f, 0x8d, 0x3c, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x34, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x44, 0x85, 0xc0, 0x79, 0x66, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xa0, 0xfe, 0xff, 0xff, 0x4d, 0x89, 0xfe, 0xe9, 0x70, 0xfe, 0xff, 0xff, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xbc, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x6c, 0xce, 0xf8, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_LOAD_ATTR_SLOT_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_LOAD_ATTR_SLOT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_ATTR_SLOT_data_holes[1];

// _CALL_LENplus_LOAD_ATTR_WITH_HINT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_ATTR_WITH_HINT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 de                      subq    %rbx, %r14
// 79: 49 83 c6 b8                   addq    $-0x48, %r14
// 7d: 49 c1 ee 03                   shrq    $0x3, %r14
// 81: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b2: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 ef                      movq    %r13, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 72 01 00 00             js      0x240 <_JIT_ENTRY+0x240>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 45 00                   movq    (%r13), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 ea                      movq    %r13, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 45 00                   movq    (%r13), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 164: 78 21                         js      0x187 <_JIT_ENTRY+0x187>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 4d 00                   decq    (%r13)
// 176: 75 0f                         jne     0x187 <_JIT_ENTRY+0x187>
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  _Py_Dealloc
// 182: 4c 89 ef                      movq    %r13, %rdi
// 185: ff d0                         callq   *%rax
// 187: 48 85 ed                      testq   %rbp, %rbp
// 18a: 0f 84 ac 00 00 00             je      0x23c <_JIT_ENTRY+0x23c>
// 190: 4f 8d 2c e6                   leaq    (%r14,%r12,8), %r13
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a6: 29 c1                         subl    %eax, %ecx
// 1a8: 48 63 c9                      movslq  %ecx, %rcx
// 1ab: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1af: f7 d0                         notl    %eax
// 1b1: 48 98                         cltq
// 1b3: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1b8: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 1bd: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c3:  R_X86_64_64  _JIT_OPERAND
// 1cb: 0f b7 c9                      movzwl  %cx, %ecx
// 1ce: 48 39 48 18                   cmpq    %rcx, 0x18(%rax)
// 1d2: 0f 86 c0 00 00 00             jbe     0x298 <_JIT_ENTRY+0x298>
// 1d8: 48 8b 0b                      movq    (%rbx), %rcx
// 1db: 48 8b 51 20                   movq    0x20(%rcx), %rdx
// 1df: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001e1:  R_X86_64_64  _JIT_OPARG
// 1e9: 81 e6 fe ff 00 00             andl    $0xfffe, %esi           # imm = 0xFFFE
// 1ef: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 1f3: bf 01 00 00 00                movl    $0x1, %edi
// 1f8: 48 d3 e7                      shlq    %cl, %rdi
// 1fb: 48 8b 4c b2 18                movq    0x18(%rdx,%rsi,4), %rcx
// 200: 80 78 0a 00                   cmpb    $0x0, 0xa(%rax)
// 204: 48 8d 44 38 20                leaq    0x20(%rax,%rdi), %rax
// 209: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000020b:  R_X86_64_64  _JIT_OPERAND
// 213: 0f b7 d2                      movzwl  %dx, %edx
// 216: 74 3e                         je      0x256 <_JIT_ENTRY+0x256>
// 218: 48 c1 e2 04                   shlq    $0x4, %rdx
// 21c: 48 39 0c 10                   cmpq    %rcx, (%rax,%rdx)
// 220: 75 76                         jne     0x298 <_JIT_ENTRY+0x298>
// 222: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000224:  R_X86_64_64  _JIT_OPERAND
// 22c: 0f b7 c9                      movzwl  %cx, %ecx
// 22f: 48 c1 e1 04                   shlq    $0x4, %rcx
// 233: 48 01 c8                      addq    %rcx, %rax
// 236: 48 83 c0 08                   addq    $0x8, %rax
// 23a: eb 3e                         jmp     0x27a <_JIT_ENTRY+0x27a>
// 23c: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 240: 49 29 de                      subq    %rbx, %r14
// 243: 49 83 c6 b8                   addq    $-0x48, %r14
// 247: 49 c1 ee 03                   shrq    $0x3, %r14
// 24b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24f: 31 c0                         xorl    %eax, %eax
// 251: e9 48 fe ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 256: 48 8d 14 52                   leaq    (%rdx,%rdx,2), %rdx
// 25a: 48 39 4c d0 08                cmpq    %rcx, 0x8(%rax,%rdx,8)
// 25f: 75 37                         jne     0x298 <_JIT_ENTRY+0x298>
// 261: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000263:  R_X86_64_64  _JIT_OPERAND
// 26b: 0f b7 c9                      movzwl  %cx, %ecx
// 26e: 48 8d 0c 49                   leaq    (%rcx,%rcx,2), %rcx
// 272: 48 8d 04 c8                   leaq    (%rax,%rcx,8), %rax
// 276: 48 83 c0 10                   addq    $0x10, %rax
// 27a: 4c 8b 38                      movq    (%rax), %r15
// 27d: 4d 85 ff                      testq   %r15, %r15
// 280: 74 16                         je      0x298 <_JIT_ENTRY+0x298>
// 282: 41 8b 07                      movl    (%r15), %eax
// 285: ff c0                         incl    %eax
// 287: 75 17                         jne     0x2a0 <_JIT_ENTRY+0x2a0>
// 289: 49 8b 04 24                   movq    (%r12), %rax
// 28d: 48 85 c0                      testq   %rax, %rax
// 290: 7e 26                         jle     0x2b8 <_JIT_ENTRY+0x2b8>
// 292: 85 c0                         testl   %eax, %eax
// 294: 79 48                         jns     0x2de <_JIT_ENTRY+0x2de>
// 296: eb 67                         jmp     0x2ff <_JIT_ENTRY+0x2ff>
// 298: 4d 89 ee                      movq    %r13, %r14
// 29b: e9 d6 fd ff ff                jmp     0x76 <_JIT_ENTRY+0x76>
// 2a0: 41 89 07                      movl    %eax, (%r15)
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2ad: ff d0                         callq   *%rax
// 2af: 49 8b 04 24                   movq    (%r12), %rax
// 2b3: 48 85 c0                      testq   %rax, %rax
// 2b6: 7f da                         jg      0x292 <_JIT_ENTRY+0x292>
// 2b8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ba:  R_X86_64_64  .rodata.str1.1
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_NegativeRefcount
// 2cc: be c3 06 00 00                movl    $0x6c3, %esi            # imm = 0x6C3
// 2d1: 4c 89 e2                      movq    %r12, %rdx
// 2d4: ff d0                         callq   *%rax
// 2d6: 49 8b 04 24                   movq    (%r12), %rax
// 2da: 85 c0                         testl   %eax, %eax
// 2dc: 78 21                         js      0x2ff <_JIT_ENTRY+0x2ff>
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e8: ff d0                         callq   *%rax
// 2ea: 49 ff 0c 24                   decq    (%r12)
// 2ee: 75 0f                         jne     0x2ff <_JIT_ENTRY+0x2ff>
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  _Py_Dealloc
// 2fa: 4c 89 e7                      movq    %r12, %rdi
// 2fd: ff d0                         callq   *%rax
// 2ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000301:  R_X86_64_64  _JIT_OPARG
// 309: 89 c1                         movl    %eax, %ecx
// 30b: f7 d1                         notl    %ecx
// 30d: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 313: 48 63 c9                      movslq  %ecx, %rcx
// 316: 4d 89 7c ce f8                movq    %r15, -0x8(%r14,%rcx,8)
// 31b: a8 01                         testb   $0x1, %al
// 31d: 74 08                         je      0x327 <_JIT_ENTRY+0x327>
// 31f: 49 c7 45 00 00 00 00 00       movq    $0x0, (%r13)
// 327: 89 c1                         movl    %eax, %ecx
// 329: 83 e1 01                      andl    $0x1, %ecx
// 32c: f7 d0                         notl    %eax
// 32e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 333: 48 98                         cltq
// 335: 48 01 c8                      addq    %rcx, %rax
// 338: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 33c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033e:  R_X86_64_64  _JIT_CONTINUE
// 346: 48 89 df                      movq    %rbx, %rdi
// 349: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 34e: 48 83 c4 18                   addq    $0x18, %rsp
// 352: 5b                            popq    %rbx
// 353: 41 5c                         popq    %r12
// 355: 41 5d                         popq    %r13
// 357: 41 5e                         popq    %r14
// 359: 41 5f                         popq    %r15
// 35b: 5d                            popq    %rbp
// 35c: ff e0                         jmpq    *%rax
// 35e: 
static const unsigned char _CALL_LENplus_LOAD_ATTR_WITH_HINT_code_body[863] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x72, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x39, 0x48, 0x18, 0x0f, 0x86, 0xc0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x51, 0x20, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe6, 0xfe, 0xff, 0x00, 0x00, 0x0f, 0xb6, 0x48, 0x09, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe7, 0x48, 0x8b, 0x4c, 0xb2, 0x18, 0x80, 0x78, 0x0a, 0x00, 0x48, 0x8d, 0x44, 0x38, 0x20, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x74, 0x3e, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0x39, 0x0c, 0x10, 0x75, 0x76, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0x01, 0xc8, 0x48, 0x83, 0xc0, 0x08, 0xeb, 0x3e, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x48, 0xfe, 0xff, 0xff, 0x48, 0x8d, 0x14, 0x52, 0x48, 0x39, 0x4c, 0xd0, 0x08, 0x75, 0x37, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x0c, 0x49, 0x48, 0x8d, 0x04, 0xc8, 0x48, 0x83, 0xc0, 0x10, 0x4c, 0x8b, 0x38, 0x4d, 0x85, 0xff, 0x74, 0x16, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x17, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x26, 0x85, 0xc0, 0x79, 0x48, 0xeb, 0x67, 0x4d, 0x89, 0xee, 0xe9, 0xd6, 0xfd, 0xff, 0xff, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xda, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x7c, 0xce, 0xf8, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_LOAD_ATTR_WITH_HINT_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_LOAD_ATTR_WITH_HINT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_ATTR_WITH_HINT_data_holes[1];

// _CALL_LENplus_LOAD_BUILD_CLASS
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_BUILD_CLASS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 6c 01 00 00             js      0x236 <_JIT_ENTRY+0x236>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 04 24                   movq    %rax, (%rsp)
// dd: 48 8b 45 00                   movq    (%rbp), %rax
// e1: 48 85 c0                      testq   %rax, %rax
// e4: 7f 22                         jg      0x108 <_JIT_ENTRY+0x108>
// e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_NegativeRefcount
// fa: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: ff d0                         callq   *%rax
// 104: 48 8b 45 00                   movq    (%rbp), %rax
// 108: 85 c0                         testl   %eax, %eax
// 10a: 78 21                         js      0x12d <_JIT_ENTRY+0x12d>
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 116: ff d0                         callq   *%rax
// 118: 48 ff 4d 00                   decq    (%rbp)
// 11c: 75 0f                         jne     0x12d <_JIT_ENTRY+0x12d>
// 11e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000120:  R_X86_64_64  _Py_Dealloc
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: ff d0                         callq   *%rax
// 12d: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 132: 48 8b 45 00                   movq    (%rbp), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 89 ea                      movq    %rbp, %rdx
// 157: ff d0                         callq   *%rax
// 159: 48 8b 45 00                   movq    (%rbp), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 21                         js      0x182 <_JIT_ENTRY+0x182>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 48 ff 4d 00                   decq    (%rbp)
// 171: 75 0f                         jne     0x182 <_JIT_ENTRY+0x182>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 48 89 ef                      movq    %rbp, %rdi
// 180: ff d0                         callq   *%rax
// 182: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 186: 48 8b 0c 24                   movq    (%rsp), %rcx
// 18a: 48 85 c9                      testq   %rcx, %rcx
// 18d: 74 78                         je      0x207 <_JIT_ENTRY+0x207>
// 18f: 48 89 08                      movq    %rcx, (%rax)
// 192: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 196: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000198:  R_X86_64_64  PyMapping_GetOptionalItem
// 1a0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001a2:  R_X86_64_64  _PyRuntime
// 1aa: 48 81 c6 40 a9 00 00          addq    $0xa940, %rsi           # imm = 0xA940
// 1b1: 48 8d 54 24 10                leaq    0x10(%rsp), %rdx
// 1b6: ff d0                         callq   *%rax
// 1b8: 85 c0                         testl   %eax, %eax
// 1ba: 78 76                         js      0x232 <_JIT_ENTRY+0x232>
// 1bc: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1c1: 48 85 c0                      testq   %rax, %rax
// 1c4: 74 46                         je      0x20c <_JIT_ENTRY+0x20c>
// 1c6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c8:  R_X86_64_64  _JIT_OPARG
// 1d0: f7 d1                         notl    %ecx
// 1d2: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1d8: 48 63 c9                      movslq  %ecx, %rcx
// 1db: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 1df: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 1e3: 48 83 c6 08                   addq    $0x8, %rsi
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _JIT_CONTINUE
// 1f1: 48 89 df                      movq    %rbx, %rdi
// 1f4: 4c 89 fa                      movq    %r15, %rdx
// 1f7: 48 83 c4 18                   addq    $0x18, %rsp
// 1fb: 5b                            popq    %rbx
// 1fc: 41 5c                         popq    %r12
// 1fe: 41 5d                         popq    %r13
// 200: 41 5e                         popq    %r14
// 202: 41 5f                         popq    %r15
// 204: 5d                            popq    %rbp
// 205: ff e0                         jmpq    *%rax
// 207: 49 89 c6                      movq    %rax, %r14
// 20a: eb 2a                         jmp     0x236 <_JIT_ENTRY+0x236>
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  PyExc_NameError
// 216: 48 8b 30                      movq    (%rax), %rsi
// 219: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000021b:  R_X86_64_64  .rodata.str1.1+0x39
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _PyErr_SetString
// 22d: 4c 89 ff                      movq    %r15, %rdi
// 230: ff d0                         callq   *%rax
// 232: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 236: 49 29 de                      subq    %rbx, %r14
// 239: 49 83 c6 b8                   addq    $-0x48, %r14
// 23d: 49 c1 ee 03                   shrq    $0x3, %r14
// 241: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 245: 31 c0                         xorl    %eax, %eax
// 247: e9 51 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 24c: 
static const unsigned char _CALL_LENplus_LOAD_BUILD_CLASS_code_body[589] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x6c, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x78, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc6, 0x40, 0xa9, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x10, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x76, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x74, 0x46, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xeb, 0x2a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x51, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_LOAD_BUILD_CLASS_code_holes[20] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__build_class__ not found\x00'
// 53: 00 00 00 00 00
static const unsigned char _CALL_LENplus_LOAD_BUILD_CLASS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x5f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_BUILD_CLASS_data_holes[1];

// _CALL_LENplus_LOAD_CONST
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_CONST.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 36 01 00 00             js      0x1fd <_JIT_ENTRY+0x1fd>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 4b 8d 04 ee                   leaq    (%r14,%r13,8), %rax
// 17e: 48 8b 0c 24                   movq    (%rsp), %rcx
// 182: 48 85 c9                      testq   %rcx, %rcx
// 185: 74 73                         je      0x1fa <_JIT_ENTRY+0x1fa>
// 187: 48 89 08                      movq    %rcx, (%rax)
// 18a: 48 8b 03                      movq    (%rbx), %rax
// 18d: 48 8b 40 18                   movq    0x18(%rax), %rax
// 191: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c9                      movzwl  %cx, %ecx
// 19e: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 1a3: 41 8b 04 24                   movl    (%r12), %eax
// 1a7: ff c0                         incl    %eax
// 1a9: 74 10                         je      0x1bb <_JIT_ENTRY+0x1bb>
// 1ab: 41 89 04 24                   movl    %eax, (%r12)
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _JIT_OPARG
// 1c5: f7 d0                         notl    %eax
// 1c7: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1cc: 48 98                         cltq
// 1ce: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 1d2: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1d6: 48 83 c6 08                   addq    $0x8, %rsi
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_CONTINUE
// 1e4: 48 89 df                      movq    %rbx, %rdi
// 1e7: 4c 89 fa                      movq    %r15, %rdx
// 1ea: 48 83 c4 08                   addq    $0x8, %rsp
// 1ee: 5b                            popq    %rbx
// 1ef: 41 5c                         popq    %r12
// 1f1: 41 5d                         popq    %r13
// 1f3: 41 5e                         popq    %r14
// 1f5: 41 5f                         popq    %r15
// 1f7: 5d                            popq    %rbp
// 1f8: ff e0                         jmpq    *%rax
// 1fa: 49 89 c6                      movq    %rax, %r14
// 1fd: 49 29 de                      subq    %rbx, %r14
// 200: 49 83 c6 b8                   addq    $-0x48, %r14
// 204: 49 c1 ee 03                   shrq    $0x3, %r14
// 208: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 20c: 31 c0                         xorl    %eax, %eax
// 20e: e9 89 fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 213: 
static const unsigned char _CALL_LENplus_LOAD_CONST_code_body[532] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x36, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x73, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x89, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_LOAD_CONST_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_LOAD_CONST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_CONST_data_holes[1];

// _CALL_LENplus_LOAD_DEREF
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_DEREF.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 64 01 00 00             js      0x22e <_JIT_ENTRY+0x22e>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 187: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 18c: 48 85 c9                      testq   %rcx, %rcx
// 18f: 74 75                         je      0x206 <_JIT_ENTRY+0x206>
// 191: 48 89 08                      movq    %rcx, (%rax)
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 1a6: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 1aa: 4d 85 e4                      testq   %r12, %r12
// 1ad: 74 5c                         je      0x20b <_JIT_ENTRY+0x20b>
// 1af: 41 8b 04 24                   movl    (%r12), %eax
// 1b3: ff c0                         incl    %eax
// 1b5: 74 10                         je      0x1c7 <_JIT_ENTRY+0x1c7>
// 1b7: 41 89 04 24                   movl    %eax, (%r12)
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1c5: ff d0                         callq   *%rax
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  _JIT_OPARG
// 1d1: f7 d0                         notl    %eax
// 1d3: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1d8: 48 98                         cltq
// 1da: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 1de: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1e2: 48 83 c6 08                   addq    $0x8, %rsi
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _JIT_CONTINUE
// 1f0: 48 89 df                      movq    %rbx, %rdi
// 1f3: 4c 89 fa                      movq    %r15, %rdx
// 1f6: 48 83 c4 18                   addq    $0x18, %rsp
// 1fa: 5b                            popq    %rbx
// 1fb: 41 5c                         popq    %r12
// 1fd: 41 5d                         popq    %r13
// 1ff: 41 5e                         popq    %r14
// 201: 41 5f                         popq    %r15
// 203: 5d                            popq    %rbp
// 204: ff e0                         jmpq    *%rax
// 206: 49 89 c6                      movq    %rax, %r14
// 209: eb 23                         jmp     0x22e <_JIT_ENTRY+0x22e>
// 20b: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 20f: 48 8b 33                      movq    (%rbx), %rsi
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _JIT_OPARG
// 21c: 0f b7 d0                      movzwl  %ax, %edx
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _PyEval_FormatExcUnbound
// 229: 4c 89 ff                      movq    %r15, %rdi
// 22c: ff d0                         callq   *%rax
// 22e: 49 29 de                      subq    %rbx, %r14
// 231: 49 83 c6 b8                   addq    $-0x48, %r14
// 235: 49 c1 ee 03                   shrq    $0x3, %r14
// 239: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 23d: 31 c0                         xorl    %eax, %eax
// 23f: e9 59 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 244: 
static const unsigned char _CALL_LENplus_LOAD_DEREF_code_body[581] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x64, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x75, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x5c, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xeb, 0x23, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x59, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_LOAD_DEREF_code_holes[19] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_LOAD_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_DEREF_data_holes[1];

// _CALL_LENplus_LOAD_FAST
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_FAST.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 2f 01 00 00             js      0x1f6 <_JIT_ENTRY+0x1f6>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 4b 8d 04 ee                   leaq    (%r14,%r13,8), %rax
// 17e: 48 8b 0c 24                   movq    (%rsp), %rcx
// 182: 48 85 c9                      testq   %rcx, %rcx
// 185: 74 6c                         je      0x1f3 <_JIT_ENTRY+0x1f3>
// 187: 48 89 08                      movq    %rcx, (%rax)
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _JIT_OPARG
// 194: 0f b7 c0                      movzwl  %ax, %eax
// 197: 4c 8b 64 c3 48                movq    0x48(%rbx,%rax,8), %r12
// 19c: 41 8b 04 24                   movl    (%r12), %eax
// 1a0: ff c0                         incl    %eax
// 1a2: 74 10                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a4: 41 89 04 24                   movl    %eax, (%r12)
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1b2: ff d0                         callq   *%rax
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _JIT_OPARG
// 1be: f7 d0                         notl    %eax
// 1c0: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1c5: 48 98                         cltq
// 1c7: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 1cb: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1cf: 48 83 c6 08                   addq    $0x8, %rsi
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  _JIT_CONTINUE
// 1dd: 48 89 df                      movq    %rbx, %rdi
// 1e0: 4c 89 fa                      movq    %r15, %rdx
// 1e3: 48 83 c4 08                   addq    $0x8, %rsp
// 1e7: 5b                            popq    %rbx
// 1e8: 41 5c                         popq    %r12
// 1ea: 41 5d                         popq    %r13
// 1ec: 41 5e                         popq    %r14
// 1ee: 41 5f                         popq    %r15
// 1f0: 5d                            popq    %rbp
// 1f1: ff e0                         jmpq    *%rax
// 1f3: 49 89 c6                      movq    %rax, %r14
// 1f6: 49 29 de                      subq    %rbx, %r14
// 1f9: 49 83 c6 b8                   addq    $-0x48, %r14
// 1fd: 49 c1 ee 03                   shrq    $0x3, %r14
// 201: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 205: 31 c0                         xorl    %eax, %eax
// 207: e9 90 fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 20c: 
static const unsigned char _CALL_LENplus_LOAD_FAST_code_body[525] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x2f, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x6c, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8b, 0x64, 0xc3, 0x48, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x90, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_LOAD_FAST_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_LOAD_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_FAST_data_holes[1];

// _CALL_LENplus_LOAD_FAST_AND_CLEAR
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_FAST_AND_CLEAR.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 1a 01 00 00             js      0x1e1 <_JIT_ENTRY+0x1e1>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 34 24                   movq    (%rsp), %rsi
// 17e: 48 85 f6                      testq   %rsi, %rsi
// 181: 74 5a                         je      0x1dd <_JIT_ENTRY+0x1dd>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _JIT_OPARG
// 18d: 0f b7 c8                      movzwl  %ax, %ecx
// 190: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 195: 29 ca                         subl    %ecx, %edx
// 197: 48 63 d2                      movslq  %edx, %rdx
// 19a: 49 89 34 d6                   movq    %rsi, (%r14,%rdx,8)
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 8b 54 c3 48                movq    0x48(%rbx,%rax,8), %rdx
// 1a6: 48 c7 44 c3 48 00 00 00 00    movq    $0x0, 0x48(%rbx,%rax,8)
// 1af: f7 d1                         notl    %ecx
// 1b1: 48 63 c1                      movslq  %ecx, %rax
// 1b4: 49 89 14 c6                   movq    %rdx, (%r14,%rax,8)
// 1b8: 49 8d 74 c6 08                leaq    0x8(%r14,%rax,8), %rsi
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _JIT_CONTINUE
// 1c7: 48 89 df                      movq    %rbx, %rdi
// 1ca: 4c 89 fa                      movq    %r15, %rdx
// 1cd: 48 83 c4 08                   addq    $0x8, %rsp
// 1d1: 5b                            popq    %rbx
// 1d2: 41 5c                         popq    %r12
// 1d4: 41 5d                         popq    %r13
// 1d6: 41 5e                         popq    %r14
// 1d8: 41 5f                         popq    %r15
// 1da: 5d                            popq    %rbp
// 1db: ff e0                         jmpq    *%rax
// 1dd: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1e1: 49 29 de                      subq    %rbx, %r14
// 1e4: 49 83 c6 b8                   addq    $-0x48, %r14
// 1e8: 49 c1 ee 03                   shrq    $0x3, %r14
// 1ec: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1f0: 31 c0                         xorl    %eax, %eax
// 1f2: e9 a5 fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 1f7: 
static const unsigned char _CALL_LENplus_LOAD_FAST_AND_CLEAR_code_body[504] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x1a, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x74, 0x5a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd6, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x54, 0xc3, 0x48, 0x48, 0xc7, 0x44, 0xc3, 0x48, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x14, 0xc6, 0x49, 0x8d, 0x74, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xa5, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_LOAD_FAST_AND_CLEAR_code_holes[15] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_LOAD_FAST_AND_CLEAR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_FAST_AND_CLEAR_data_holes[1];

// _CALL_LENplus_LOAD_FAST_CHECK
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_FAST_CHECK.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 8e 01 00 00             js      0x258 <_JIT_ENTRY+0x258>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 187: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 18c: 48 85 c9                      testq   %rcx, %rcx
// 18f: 74 71                         je      0x202 <_JIT_ENTRY+0x202>
// 191: 48 89 08                      movq    %rcx, (%rax)
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 4c 8b 64 c3 48                movq    0x48(%rbx,%rax,8), %r12
// 1a6: 4d 85 e4                      testq   %r12, %r12
// 1a9: 74 5c                         je      0x207 <_JIT_ENTRY+0x207>
// 1ab: 41 8b 04 24                   movl    (%r12), %eax
// 1af: ff c0                         incl    %eax
// 1b1: 74 10                         je      0x1c3 <_JIT_ENTRY+0x1c3>
// 1b3: 41 89 04 24                   movl    %eax, (%r12)
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1c1: ff d0                         callq   *%rax
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _JIT_OPARG
// 1cd: f7 d0                         notl    %eax
// 1cf: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1d4: 48 98                         cltq
// 1d6: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 1da: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1de: 48 83 c6 08                   addq    $0x8, %rsi
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _JIT_CONTINUE
// 1ec: 48 89 df                      movq    %rbx, %rdi
// 1ef: 4c 89 fa                      movq    %r15, %rdx
// 1f2: 48 83 c4 18                   addq    $0x18, %rsp
// 1f6: 5b                            popq    %rbx
// 1f7: 41 5c                         popq    %r12
// 1f9: 41 5d                         popq    %r13
// 1fb: 41 5e                         popq    %r14
// 1fd: 41 5f                         popq    %r15
// 1ff: 5d                            popq    %rbp
// 200: ff e0                         jmpq    *%rax
// 202: 49 89 c6                      movq    %rax, %r14
// 205: eb 51                         jmp     0x258 <_JIT_ENTRY+0x258>
// 207: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  PyExc_UnboundLocalError
// 215: 4c 8b 20                      movq    (%rax), %r12
// 218: 48 8b 03                      movq    (%rbx), %rax
// 21b: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _JIT_OPARG
// 229: 0f b7 f0                      movzwl  %ax, %esi
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  PyTuple_GetItem
// 236: ff d0                         callq   *%rax
// 238: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000023a:  R_X86_64_64  .rodata.str1.1+0x39
// 242: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000244:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 24c: 4c 89 ff                      movq    %r15, %rdi
// 24f: 4c 89 e6                      movq    %r12, %rsi
// 252: 48 89 c1                      movq    %rax, %rcx
// 255: 41 ff d0                      callq   *%r8
// 258: 49 29 de                      subq    %rbx, %r14
// 25b: 49 83 c6 b8                   addq    $-0x48, %r14
// 25f: 49 c1 ee 03                   shrq    $0x3, %r14
// 263: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 267: 31 c0                         xorl    %eax, %eax
// 269: e9 2f fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 26e: 
static const unsigned char _CALL_LENplus_LOAD_FAST_CHECK_code_body[623] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x8e, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x71, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8b, 0x64, 0xc3, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x5c, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xeb, 0x51, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x20, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x2f, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_LOAD_FAST_CHECK_code_holes[22] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot access local variable '%s' where it is not associated with a value\x00"
// 83: 00 00 00 00 00
static const unsigned char _CALL_LENplus_LOAD_FAST_CHECK_data_body[137] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_FAST_CHECK_data_holes[1];

// _CALL_LENplus_LOAD_FROM_DICT_OR_DEREF
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_FROM_DICT_OR_DEREF.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 f6                      movslq  %esi, %r14
// 65: 4b 8b 2c f7                   movq    (%r15,%r14,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 df                      subq    %rbx, %r15
// 79: 49 83 c7 b8                   addq    $-0x48, %r15
// 7d: 49 c1 ef 03                   shrq    $0x3, %r15
// 81: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b2: 4d 8b 24 cf                   movq    (%r15,%rcx,8), %r12
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 b2 01 00 00             js      0x280 <_JIT_ENTRY+0x280>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 04 24                   movq    (%r12), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 e2                      movq    %r12, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 04 24                   movq    (%r12), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 164: 78 21                         js      0x187 <_JIT_ENTRY+0x187>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 0c 24                   decq    (%r12)
// 176: 75 0f                         jne     0x187 <_JIT_ENTRY+0x187>
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  _Py_Dealloc
// 182: 4c 89 e7                      movq    %r12, %rdi
// 185: ff d0                         callq   *%rax
// 187: 48 85 ed                      testq   %rbp, %rbp
// 18a: 0f 84 f5 00 00 00             je      0x285 <_JIT_ENTRY+0x285>
// 190: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1a6: 29 ca                         subl    %ecx, %edx
// 1a8: 48 63 d2                      movslq  %edx, %rdx
// 1ab: 49 89 2c d7                   movq    %rbp, (%r15,%rdx,8)
// 1af: f7 d1                         notl    %ecx
// 1b1: 48 63 c9                      movslq  %ecx, %rcx
// 1b4: 4d 8b 6c cf f8                movq    -0x8(%r15,%rcx,8), %r13
// 1b9: 48 8b 0b                      movq    (%rbx), %rcx
// 1bc: 48 8b 49 60                   movq    0x60(%rcx), %rcx
// 1c0: 0f b7 c0                      movzwl  %ax, %eax
// 1c3: 48 8b 74 c1 18                movq    0x18(%rcx,%rax,8), %rsi
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  PyMapping_GetOptionalItem
// 1d2: 48 89 e2                      movq    %rsp, %rdx
// 1d5: 4c 89 ef                      movq    %r13, %rdi
// 1d8: ff d0                         callq   *%rax
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 0f 88 a7 00 00 00             js      0x289 <_JIT_ENTRY+0x289>
// 1e2: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// 1e7: 0f 84 b2 00 00 00             je      0x29f <_JIT_ENTRY+0x29f>
// 1ed: 49 8b 45 00                   movq    (%r13), %rax
// 1f1: 48 85 c0                      testq   %rax, %rax
// 1f4: 7f 22                         jg      0x218 <_JIT_ENTRY+0x218>
// 1f6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f8:  R_X86_64_64  .rodata.str1.1
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _Py_NegativeRefcount
// 20a: be dd 04 00 00                movl    $0x4dd, %esi            # imm = 0x4DD
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: ff d0                         callq   *%rax
// 214: 49 8b 45 00                   movq    (%r13), %rax
// 218: 85 c0                         testl   %eax, %eax
// 21a: 78 21                         js      0x23d <_JIT_ENTRY+0x23d>
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 226: ff d0                         callq   *%rax
// 228: 49 ff 4d 00                   decq    (%r13)
// 22c: 75 0f                         jne     0x23d <_JIT_ENTRY+0x23d>
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _Py_Dealloc
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: ff d0                         callq   *%rax
// 23d: 48 8b 04 24                   movq    (%rsp), %rax
// 241: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000243:  R_X86_64_64  _JIT_OPARG
// 24b: f7 d1                         notl    %ecx
// 24d: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 253: 48 63 c9                      movslq  %ecx, %rcx
// 256: 49 89 44 cf f8                movq    %rax, -0x8(%r15,%rcx,8)
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _JIT_CONTINUE
// 265: 48 89 df                      movq    %rbx, %rdi
// 268: 4c 89 e6                      movq    %r12, %rsi
// 26b: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 270: 48 83 c4 18                   addq    $0x18, %rsp
// 274: 5b                            popq    %rbx
// 275: 41 5c                         popq    %r12
// 277: 41 5d                         popq    %r13
// 279: 41 5e                         popq    %r14
// 27b: 41 5f                         popq    %r15
// 27d: 5d                            popq    %rbp
// 27e: ff e0                         jmpq    *%rax
// 280: 4d 89 fc                      movq    %r15, %r12
// 283: eb 04                         jmp     0x289 <_JIT_ENTRY+0x289>
// 285: 4f 8d 24 f7                   leaq    (%r15,%r14,8), %r12
// 289: 49 29 dc                      subq    %rbx, %r12
// 28c: 49 83 c4 b8                   addq    $-0x48, %r12
// 290: 49 c1 ec 03                   shrq    $0x3, %r12
// 294: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 298: 31 c0                         xorl    %eax, %eax
// 29a: e9 ff fd ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  _JIT_OPARG
// 2a9: 0f b7 c0                      movzwl  %ax, %eax
// 2ac: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 2b1: 48 8b 40 10                   movq    0x10(%rax), %rax
// 2b5: 48 89 04 24                   movq    %rax, (%rsp)
// 2b9: 48 85 c0                      testq   %rax, %rax
// 2bc: 74 1d                         je      0x2db <_JIT_ENTRY+0x2db>
// 2be: 8b 08                         movl    (%rax), %ecx
// 2c0: ff c1                         incl    %ecx
// 2c2: 0f 84 25 ff ff ff             je      0x1ed <_JIT_ENTRY+0x1ed>
// 2c8: 89 08                         movl    %ecx, (%rax)
// 2ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cc:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2d4: ff d0                         callq   *%rax
// 2d6: e9 12 ff ff ff                jmp     0x1ed <_JIT_ENTRY+0x1ed>
// 2db: 48 8b 33                      movq    (%rbx), %rsi
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _JIT_OPARG
// 2e8: 0f b7 d0                      movzwl  %ax, %edx
// 2eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ed:  R_X86_64_64  _PyEval_FormatExcUnbound
// 2f5: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2fa: ff d0                         callq   *%rax
// 2fc: eb 8b                         jmp     0x289 <_JIT_ENTRY+0x289>
// 2fe: 
static const unsigned char _CALL_LENplus_LOAD_FROM_DICT_OR_DEREF_code_body[767] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xf6, 0x4b, 0x8b, 0x2c, 0xf7, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x24, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xb2, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x0f, 0x84, 0xf5, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x2c, 0xd7, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4d, 0x8b, 0x6c, 0xcf, 0xf8, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x49, 0x60, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x74, 0xc1, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xa7, 0x00, 0x00, 0x00, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x44, 0xcf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xfc, 0xeb, 0x04, 0x4f, 0x8d, 0x24, 0xf7, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xff, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x1d, 0x8b, 0x08, 0xff, 0xc1, 0x0f, 0x84, 0x25, 0xff, 0xff, 0xff, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x12, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0xeb, 0x8b};
static const Hole _CALL_LENplus_LOAD_FROM_DICT_OR_DEREF_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_LOAD_FROM_DICT_OR_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_FROM_DICT_OR_DEREF_data_holes[1];

// _CALL_LENplus_LOAD_FROM_DICT_OR_GLOBALS
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_FROM_DICT_OR_GLOBALS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 f6                      movslq  %esi, %r14
// 65: 4b 8b 2c f7                   movq    (%r15,%r14,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 df                      subq    %rbx, %r15
// 79: 49 83 c7 b8                   addq    $-0x48, %r15
// 7d: 49 c1 ef 03                   shrq    $0x3, %r15
// 81: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b2: 4d 8b 24 cf                   movq    (%r15,%rcx,8), %r12
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 b6 01 00 00             js      0x284 <_JIT_ENTRY+0x284>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 04 24                   movq    (%r12), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 e2                      movq    %r12, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 04 24                   movq    (%r12), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 164: 78 21                         js      0x187 <_JIT_ENTRY+0x187>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 0c 24                   decq    (%r12)
// 176: 75 0f                         jne     0x187 <_JIT_ENTRY+0x187>
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  _Py_Dealloc
// 182: 4c 89 e7                      movq    %r12, %rdi
// 185: ff d0                         callq   *%rax
// 187: 48 85 ed                      testq   %rbp, %rbp
// 18a: 0f 84 f9 00 00 00             je      0x289 <_JIT_ENTRY+0x289>
// 190: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1a6: 29 ca                         subl    %ecx, %edx
// 1a8: 48 63 d2                      movslq  %edx, %rdx
// 1ab: 49 89 2c d7                   movq    %rbp, (%r15,%rdx,8)
// 1af: f7 d1                         notl    %ecx
// 1b1: 48 63 c9                      movslq  %ecx, %rcx
// 1b4: 4d 8b 6c cf f8                movq    -0x8(%r15,%rcx,8), %r13
// 1b9: 48 8b 0b                      movq    (%rbx), %rcx
// 1bc: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 1c0: 0f b7 c0                      movzwl  %ax, %eax
// 1c3: 48 8b 6c c1 18                movq    0x18(%rcx,%rax,8), %rbp
// 1c8: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000001ca:  R_X86_64_64  PyMapping_GetOptionalItem
// 1d2: 48 89 e2                      movq    %rsp, %rdx
// 1d5: 4c 89 ef                      movq    %r13, %rdi
// 1d8: 48 89 ee                      movq    %rbp, %rsi
// 1db: 41 ff d6                      callq   *%r14
// 1de: 85 c0                         testl   %eax, %eax
// 1e0: 0f 88 a7 00 00 00             js      0x28d <_JIT_ENTRY+0x28d>
// 1e6: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// 1eb: 0f 84 b2 00 00 00             je      0x2a3 <_JIT_ENTRY+0x2a3>
// 1f1: 49 8b 45 00                   movq    (%r13), %rax
// 1f5: 48 85 c0                      testq   %rax, %rax
// 1f8: 7f 22                         jg      0x21c <_JIT_ENTRY+0x21c>
// 1fa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fc:  R_X86_64_64  .rodata.str1.1
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _Py_NegativeRefcount
// 20e: be 1b 04 00 00                movl    $0x41b, %esi            # imm = 0x41B
// 213: 4c 89 ea                      movq    %r13, %rdx
// 216: ff d0                         callq   *%rax
// 218: 49 8b 45 00                   movq    (%r13), %rax
// 21c: 85 c0                         testl   %eax, %eax
// 21e: 78 21                         js      0x241 <_JIT_ENTRY+0x241>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22a: ff d0                         callq   *%rax
// 22c: 49 ff 4d 00                   decq    (%r13)
// 230: 75 0f                         jne     0x241 <_JIT_ENTRY+0x241>
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_Dealloc
// 23c: 4c 89 ef                      movq    %r13, %rdi
// 23f: ff d0                         callq   *%rax
// 241: 48 8b 04 24                   movq    (%rsp), %rax
// 245: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000247:  R_X86_64_64  _JIT_OPARG
// 24f: f7 d1                         notl    %ecx
// 251: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 257: 48 63 c9                      movslq  %ecx, %rcx
// 25a: 49 89 44 cf f8                movq    %rax, -0x8(%r15,%rcx,8)
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _JIT_CONTINUE
// 269: 48 89 df                      movq    %rbx, %rdi
// 26c: 4c 89 e6                      movq    %r12, %rsi
// 26f: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 274: 48 83 c4 18                   addq    $0x18, %rsp
// 278: 5b                            popq    %rbx
// 279: 41 5c                         popq    %r12
// 27b: 41 5d                         popq    %r13
// 27d: 41 5e                         popq    %r14
// 27f: 41 5f                         popq    %r15
// 281: 5d                            popq    %rbp
// 282: ff e0                         jmpq    *%rax
// 284: 4d 89 fc                      movq    %r15, %r12
// 287: eb 04                         jmp     0x28d <_JIT_ENTRY+0x28d>
// 289: 4f 8d 24 f7                   leaq    (%r15,%r14,8), %r12
// 28d: 49 29 dc                      subq    %rbx, %r12
// 290: 49 83 c4 b8                   addq    $-0x48, %r12
// 294: 49 c1 ec 03                   shrq    $0x3, %r12
// 298: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 29c: 31 c0                         xorl    %eax, %eax
// 29e: e9 fb fd ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 2a3: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  PyDict_GetItemRef
// 2b1: 48 89 e2                      movq    %rsp, %rdx
// 2b4: 48 89 ee                      movq    %rbp, %rsi
// 2b7: ff d0                         callq   *%rax
// 2b9: 85 c0                         testl   %eax, %eax
// 2bb: 78 d0                         js      0x28d <_JIT_ENTRY+0x28d>
// 2bd: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// 2c2: 0f 85 29 ff ff ff             jne     0x1f1 <_JIT_ENTRY+0x1f1>
// 2c8: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 2cc: 48 89 e2                      movq    %rsp, %rdx
// 2cf: 48 89 ee                      movq    %rbp, %rsi
// 2d2: 41 ff d6                      callq   *%r14
// 2d5: 85 c0                         testl   %eax, %eax
// 2d7: 78 b4                         js      0x28d <_JIT_ENTRY+0x28d>
// 2d9: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// 2de: 0f 85 0d ff ff ff             jne     0x1f1 <_JIT_ENTRY+0x1f1>
// 2e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e6:  R_X86_64_64  PyExc_NameError
// 2ee: 48 8b 30                      movq    (%rax), %rsi
// 2f1: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002f3:  R_X86_64_64  .rodata.str1.1+0x39
// 2fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fd:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 305: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 30a: 48 89 e9                      movq    %rbp, %rcx
// 30d: ff d0                         callq   *%rax
// 30f: e9 79 ff ff ff                jmp     0x28d <_JIT_ENTRY+0x28d>
// 314: 
static const unsigned char _CALL_LENplus_LOAD_FROM_DICT_OR_GLOBALS_code_body[789] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xf6, 0x4b, 0x8b, 0x2c, 0xf7, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x24, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xb6, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x0f, 0x84, 0xf9, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x2c, 0xd7, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4d, 0x8b, 0x6c, 0xcf, 0xf8, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x49, 0x20, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x6c, 0xc1, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd6, 0x85, 0xc0, 0x0f, 0x88, 0xa7, 0x00, 0x00, 0x00, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x44, 0xcf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xfc, 0xeb, 0x04, 0x4f, 0x8d, 0x24, 0xf7, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xfb, 0xfd, 0xff, 0xff, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xd0, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x0f, 0x85, 0x29, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0x89, 0xe2, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd6, 0x85, 0xc0, 0x78, 0xb4, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x0f, 0x85, 0x0d, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x89, 0xe9, 0xff, 0xd0, 0xe9, 0x79, 0xff, 0xff, 0xff};
static const Hole _CALL_LENplus_LOAD_FROM_DICT_OR_GLOBALS_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x2f3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _CALL_LENplus_LOAD_FROM_DICT_OR_GLOBALS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_FROM_DICT_OR_GLOBALS_data_holes[1];

// _CALL_LENplus_LOAD_GLOBAL
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_GLOBAL.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 f6                      movslq  %esi, %r14
// 65: 4b 8b 2c f7                   movq    (%r15,%r14,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 df                      subq    %rbx, %r15
// 79: 49 83 c7 b8                   addq    $-0x48, %r15
// 7d: 49 c1 ef 03                   shrq    $0x3, %r15
// 81: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b2: 4d 8b 24 cf                   movq    (%r15,%rcx,8), %r12
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 98 01 00 00             js      0x266 <_JIT_ENTRY+0x266>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 04 24                   movq    (%r12), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 e2                      movq    %r12, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 04 24                   movq    (%r12), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 21                         js      0x182 <_JIT_ENTRY+0x182>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 0c 24                   decq    (%r12)
// 171: 75 0f                         jne     0x182 <_JIT_ENTRY+0x182>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: ff d0                         callq   *%rax
// 182: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 186: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 18b: 48 85 c9                      testq   %rcx, %rcx
// 18e: 0f 84 d7 00 00 00             je      0x26b <_JIT_ENTRY+0x26b>
// 194: 4b 8d 2c ef                   leaq    (%r15,%r13,8), %rbp
// 198: 48 89 08                      movq    %rcx, (%rax)
// 19b: 48 8b 03                      movq    (%rbx), %rax
// 19e: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 1a2: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1a6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a8:  R_X86_64_64  _JIT_OPARG
// 1b0: 81 e1 fe ff 00 00             andl    $0xfffe, %ecx           # imm = 0xFFFE
// 1b6: 4c 8b 64 88 18                movq    0x18(%rax,%rcx,4), %r12
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  PyDict_Type
// 1c5: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 1c9: 75 0e                         jne     0x1d9 <_JIT_ENTRY+0x1d9>
// 1cb: 48 8b 73 20                   movq    0x20(%rbx), %rsi
// 1cf: 48 39 46 08                   cmpq    %rax, 0x8(%rsi)
// 1d3: 0f 84 ca 00 00 00             je      0x2a3 <_JIT_ENTRY+0x2a3>
// 1d9: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000001db:  R_X86_64_64  PyMapping_GetOptionalItem
// 1e3: 48 89 e2                      movq    %rsp, %rdx
// 1e6: 4c 89 e6                      movq    %r12, %rsi
// 1e9: 41 ff d6                      callq   *%r14
// 1ec: 85 c0                         testl   %eax, %eax
// 1ee: 78 7e                         js      0x26e <_JIT_ENTRY+0x26e>
// 1f0: 48 8b 04 24                   movq    (%rsp), %rax
// 1f4: 48 85 c0                      testq   %rax, %rax
// 1f7: 0f 84 86 00 00 00             je      0x283 <_JIT_ENTRY+0x283>
// 1fd: 48 89 45 00                   movq    %rax, (%rbp)
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _JIT_OPARG
// 20b: a8 01                         testb   $0x1, %al
// 20d: 74 12                         je      0x221 <_JIT_ENTRY+0x221>
// 20f: f7 d0                         notl    %eax
// 211: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 216: 48 98                         cltq
// 218: 49 c7 44 c7 08 00 00 00 00    movq    $0x0, 0x8(%r15,%rax,8)
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _JIT_OPARG
// 22b: 89 c1                         movl    %eax, %ecx
// 22d: f7 d1                         notl    %ecx
// 22f: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 235: 48 63 c9                      movslq  %ecx, %rcx
// 238: 83 e0 01                      andl    $0x1, %eax
// 23b: ff c0                         incl    %eax
// 23d: 48 01 c8                      addq    %rcx, %rax
// 240: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _JIT_CONTINUE
// 24e: 48 89 df                      movq    %rbx, %rdi
// 251: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 256: 48 83 c4 18                   addq    $0x18, %rsp
// 25a: 5b                            popq    %rbx
// 25b: 41 5c                         popq    %r12
// 25d: 41 5d                         popq    %r13
// 25f: 41 5e                         popq    %r14
// 261: 41 5f                         popq    %r15
// 263: 5d                            popq    %rbp
// 264: ff e0                         jmpq    *%rax
// 266: 4c 89 fd                      movq    %r15, %rbp
// 269: eb 03                         jmp     0x26e <_JIT_ENTRY+0x26e>
// 26b: 48 89 c5                      movq    %rax, %rbp
// 26e: 48 29 dd                      subq    %rbx, %rbp
// 271: 48 83 c5 b8                   addq    $-0x48, %rbp
// 275: 48 c1 ed 03                   shrq    $0x3, %rbp
// 279: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 27c: 31 c0                         xorl    %eax, %eax
// 27e: e9 1b fe ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 283: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 287: 48 89 e2                      movq    %rsp, %rdx
// 28a: 4c 89 e6                      movq    %r12, %rsi
// 28d: 41 ff d6                      callq   *%r14
// 290: 85 c0                         testl   %eax, %eax
// 292: 78 da                         js      0x26e <_JIT_ENTRY+0x26e>
// 294: 48 8b 04 24                   movq    (%rsp), %rax
// 298: 48 85 c0                      testq   %rax, %rax
// 29b: 0f 85 5c ff ff ff             jne     0x1fd <_JIT_ENTRY+0x1fd>
// 2a1: eb 52                         jmp     0x2f5 <_JIT_ENTRY+0x2f5>
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _PyDict_LoadGlobal
// 2ad: 4c 89 e2                      movq    %r12, %rdx
// 2b0: ff d0                         callq   *%rax
// 2b2: 48 89 04 24                   movq    %rax, (%rsp)
// 2b6: 48 85 c0                      testq   %rax, %rax
// 2b9: 74 21                         je      0x2dc <_JIT_ENTRY+0x2dc>
// 2bb: 8b 08                         movl    (%rax), %ecx
// 2bd: ff c1                         incl    %ecx
// 2bf: 0f 84 38 ff ff ff             je      0x1fd <_JIT_ENTRY+0x1fd>
// 2c5: 89 08                         movl    %ecx, (%rax)
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2d1: ff d0                         callq   *%rax
// 2d3: 48 8b 04 24                   movq    (%rsp), %rax
// 2d7: e9 21 ff ff ff                jmp     0x1fd <_JIT_ENTRY+0x1fd>
// 2dc: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2e1: 48 8b 40 68                   movq    0x68(%rax), %rax
// 2e5: 48 85 c0                      testq   %rax, %rax
// 2e8: 74 0b                         je      0x2f5 <_JIT_ENTRY+0x2f5>
// 2ea: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 2ef: 0f 85 79 ff ff ff             jne     0x26e <_JIT_ENTRY+0x26e>
// 2f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f7:  R_X86_64_64  PyExc_NameError
// 2ff: 48 8b 30                      movq    (%rax), %rsi
// 302: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000304:  R_X86_64_64  .rodata.str1.1+0x39
// 30c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030e:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 316: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 31b: 4c 89 e1                      movq    %r12, %rcx
// 31e: ff d0                         callq   *%rax
// 320: e9 49 ff ff ff                jmp     0x26e <_JIT_ENTRY+0x26e>
// 325: 
static const unsigned char _CALL_LENplus_LOAD_GLOBAL_code_body[806] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xf6, 0x4b, 0x8b, 0x2c, 0xf7, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x24, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x98, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xef, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfe, 0xff, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x88, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x75, 0x0e, 0x48, 0x8b, 0x73, 0x20, 0x48, 0x39, 0x46, 0x08, 0x0f, 0x84, 0xca, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd6, 0x85, 0xc0, 0x78, 0x7e, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x86, 0x00, 0x00, 0x00, 0x48, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x12, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0xc7, 0x44, 0xc7, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x89, 0xfd, 0xeb, 0x03, 0x48, 0x89, 0xc5, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x1b, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd6, 0x85, 0xc0, 0x78, 0xda, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x5c, 0xff, 0xff, 0xff, 0xeb, 0x52, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x21, 0x8b, 0x08, 0xff, 0xc1, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0xe9, 0x21, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x40, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x0b, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0x49, 0xff, 0xff, 0xff};
static const Hole _CALL_LENplus_LOAD_GLOBAL_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_LoadGlobal, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x304, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x30e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _CALL_LENplus_LOAD_GLOBAL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_GLOBAL_data_holes[1];

// _CALL_LENplus_LOAD_GLOBAL_BUILTINS
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_GLOBAL_BUILTINS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 8a 01 00 00             js      0x254 <_JIT_ENTRY+0x254>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 187: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 18c: 48 85 c9                      testq   %rcx, %rcx
// 18f: 0f 84 bc 00 00 00             je      0x251 <_JIT_ENTRY+0x251>
// 195: 48 89 08                      movq    %rcx, (%rax)
// 198: 48 8b 43 20                   movq    0x20(%rbx), %rax
// 19c: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1a0: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 1a4: ba 01 00 00 00                movl    $0x1, %edx
// 1a9: 48 d3 e2                      shlq    %cl, %rdx
// 1ac: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1b0: 48 01 c2                      addq    %rax, %rdx
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _JIT_OPERAND
// 1bd: 0f b7 c0                      movzwl  %ax, %eax
// 1c0: 48 c1 e0 04                   shlq    $0x4, %rax
// 1c4: 4c 8b 6c 10 28                movq    0x28(%rax,%rdx), %r13
// 1c9: 4d 85 ed                      testq   %r13, %r13
// 1cc: 0f 84 98 00 00 00             je      0x26a <_JIT_ENTRY+0x26a>
// 1d2: 41 8b 45 00                   movl    (%r13), %eax
// 1d6: ff c0                         incl    %eax
// 1d8: 74 10                         je      0x1ea <_JIT_ENTRY+0x1ea>
// 1da: 41 89 45 00                   movl    %eax, (%r13)
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1e8: ff d0                         callq   *%rax
// 1ea: 4d 89 2c 24                   movq    %r13, (%r12)
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  _JIT_OPARG
// 1f8: a8 01                         testb   $0x1, %al
// 1fa: 74 12                         je      0x20e <_JIT_ENTRY+0x20e>
// 1fc: f7 d0                         notl    %eax
// 1fe: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 203: 48 98                         cltq
// 205: 49 c7 44 c6 08 00 00 00 00    movq    $0x0, 0x8(%r14,%rax,8)
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _JIT_OPARG
// 218: 89 c1                         movl    %eax, %ecx
// 21a: f7 d1                         notl    %ecx
// 21c: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 222: 48 63 c9                      movslq  %ecx, %rcx
// 225: 83 e0 01                      andl    $0x1, %eax
// 228: ff c0                         incl    %eax
// 22a: 48 01 c8                      addq    %rcx, %rax
// 22d: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _JIT_CONTINUE
// 23b: 48 89 df                      movq    %rbx, %rdi
// 23e: 4c 89 fa                      movq    %r15, %rdx
// 241: 48 83 c4 18                   addq    $0x18, %rsp
// 245: 5b                            popq    %rbx
// 246: 41 5c                         popq    %r12
// 248: 41 5d                         popq    %r13
// 24a: 41 5e                         popq    %r14
// 24c: 41 5f                         popq    %r15
// 24e: 5d                            popq    %rbp
// 24f: ff e0                         jmpq    *%rax
// 251: 49 89 c6                      movq    %rax, %r14
// 254: 49 29 de                      subq    %rbx, %r14
// 257: 49 83 c6 b8                   addq    $-0x48, %r14
// 25b: 49 c1 ee 03                   shrq    $0x3, %r14
// 25f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 263: 31 c0                         xorl    %eax, %eax
// 265: e9 33 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 26a: 4d 89 e6                      movq    %r12, %r14
// 26d: e9 03 fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 272: 
static const unsigned char _CALL_LENplus_LOAD_GLOBAL_BUILTINS_code_body[627] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x8a, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xbc, 0x00, 0x00, 0x00, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x20, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x6c, 0x10, 0x28, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x12, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0xc7, 0x44, 0xc6, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x33, 0xfe, 0xff, 0xff, 0x4d, 0x89, 0xe6, 0xe9, 0x03, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_LOAD_GLOBAL_BUILTINS_code_holes[18] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_LOAD_GLOBAL_BUILTINS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_GLOBAL_BUILTINS_data_holes[1];

// _CALL_LENplus_LOAD_GLOBAL_MODULE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_GLOBAL_MODULE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 8a 01 00 00             js      0x254 <_JIT_ENTRY+0x254>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 187: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 18c: 48 85 c9                      testq   %rcx, %rcx
// 18f: 0f 84 bc 00 00 00             je      0x251 <_JIT_ENTRY+0x251>
// 195: 48 89 08                      movq    %rcx, (%rax)
// 198: 48 8b 43 18                   movq    0x18(%rbx), %rax
// 19c: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1a0: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 1a4: ba 01 00 00 00                movl    $0x1, %edx
// 1a9: 48 d3 e2                      shlq    %cl, %rdx
// 1ac: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 1b0: 48 01 c2                      addq    %rax, %rdx
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _JIT_OPERAND
// 1bd: 0f b7 c0                      movzwl  %ax, %eax
// 1c0: 48 c1 e0 04                   shlq    $0x4, %rax
// 1c4: 4c 8b 6c 10 28                movq    0x28(%rax,%rdx), %r13
// 1c9: 4d 85 ed                      testq   %r13, %r13
// 1cc: 0f 84 98 00 00 00             je      0x26a <_JIT_ENTRY+0x26a>
// 1d2: 41 8b 45 00                   movl    (%r13), %eax
// 1d6: ff c0                         incl    %eax
// 1d8: 74 10                         je      0x1ea <_JIT_ENTRY+0x1ea>
// 1da: 41 89 45 00                   movl    %eax, (%r13)
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1e8: ff d0                         callq   *%rax
// 1ea: 4d 89 2c 24                   movq    %r13, (%r12)
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  _JIT_OPARG
// 1f8: a8 01                         testb   $0x1, %al
// 1fa: 74 12                         je      0x20e <_JIT_ENTRY+0x20e>
// 1fc: f7 d0                         notl    %eax
// 1fe: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 203: 48 98                         cltq
// 205: 49 c7 44 c6 08 00 00 00 00    movq    $0x0, 0x8(%r14,%rax,8)
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _JIT_OPARG
// 218: 89 c1                         movl    %eax, %ecx
// 21a: f7 d1                         notl    %ecx
// 21c: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 222: 48 63 c9                      movslq  %ecx, %rcx
// 225: 83 e0 01                      andl    $0x1, %eax
// 228: ff c0                         incl    %eax
// 22a: 48 01 c8                      addq    %rcx, %rax
// 22d: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _JIT_CONTINUE
// 23b: 48 89 df                      movq    %rbx, %rdi
// 23e: 4c 89 fa                      movq    %r15, %rdx
// 241: 48 83 c4 18                   addq    $0x18, %rsp
// 245: 5b                            popq    %rbx
// 246: 41 5c                         popq    %r12
// 248: 41 5d                         popq    %r13
// 24a: 41 5e                         popq    %r14
// 24c: 41 5f                         popq    %r15
// 24e: 5d                            popq    %rbp
// 24f: ff e0                         jmpq    *%rax
// 251: 49 89 c6                      movq    %rax, %r14
// 254: 49 29 de                      subq    %rbx, %r14
// 257: 49 83 c6 b8                   addq    $-0x48, %r14
// 25b: 49 c1 ee 03                   shrq    $0x3, %r14
// 25f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 263: 31 c0                         xorl    %eax, %eax
// 265: e9 33 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 26a: 4d 89 e6                      movq    %r12, %r14
// 26d: e9 03 fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 272: 
static const unsigned char _CALL_LENplus_LOAD_GLOBAL_MODULE_code_body[627] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x8a, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xbc, 0x00, 0x00, 0x00, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x6c, 0x10, 0x28, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x12, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0xc7, 0x44, 0xc6, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x33, 0xfe, 0xff, 0xff, 0x4d, 0x89, 0xe6, 0xe9, 0x03, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_LOAD_GLOBAL_MODULE_code_holes[18] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_LOAD_GLOBAL_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_GLOBAL_MODULE_data_holes[1];

// _CALL_LENplus_LOAD_LOCALS
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_LOCALS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 59 01 00 00             js      0x223 <_JIT_ENTRY+0x223>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 187: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 18c: 48 85 c9                      testq   %rcx, %rcx
// 18f: 74 63                         je      0x1f4 <_JIT_ENTRY+0x1f4>
// 191: 48 89 08                      movq    %rcx, (%rax)
// 194: 4c 8b 63 28                   movq    0x28(%rbx), %r12
// 198: 4d 85 e4                      testq   %r12, %r12
// 19b: 74 5c                         je      0x1f9 <_JIT_ENTRY+0x1f9>
// 19d: 41 8b 04 24                   movl    (%r12), %eax
// 1a1: ff c0                         incl    %eax
// 1a3: 74 10                         je      0x1b5 <_JIT_ENTRY+0x1b5>
// 1a5: 41 89 04 24                   movl    %eax, (%r12)
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1b3: ff d0                         callq   *%rax
// 1b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b7:  R_X86_64_64  _JIT_OPARG
// 1bf: f7 d0                         notl    %eax
// 1c1: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1c6: 48 98                         cltq
// 1c8: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 1cc: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1d0: 48 83 c6 08                   addq    $0x8, %rsi
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _JIT_CONTINUE
// 1de: 48 89 df                      movq    %rbx, %rdi
// 1e1: 4c 89 fa                      movq    %r15, %rdx
// 1e4: 48 83 c4 18                   addq    $0x18, %rsp
// 1e8: 5b                            popq    %rbx
// 1e9: 41 5c                         popq    %r12
// 1eb: 41 5d                         popq    %r13
// 1ed: 41 5e                         popq    %r14
// 1ef: 41 5f                         popq    %r15
// 1f1: 5d                            popq    %rbp
// 1f2: ff e0                         jmpq    *%rax
// 1f4: 49 89 c6                      movq    %rax, %r14
// 1f7: eb 2a                         jmp     0x223 <_JIT_ENTRY+0x223>
// 1f9: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  PyExc_SystemError
// 207: 48 8b 30                      movq    (%rax), %rsi
// 20a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000020c:  R_X86_64_64  .rodata.str1.1+0x39
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _PyErr_SetString
// 21e: 4c 89 ff                      movq    %r15, %rdi
// 221: ff d0                         callq   *%rax
// 223: 49 29 de                      subq    %rbx, %r14
// 226: 49 83 c6 b8                   addq    $-0x48, %r14
// 22a: 49 c1 ee 03                   shrq    $0x3, %r14
// 22e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 232: 31 c0                         xorl    %eax, %eax
// 234: e9 64 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 239: 
static const unsigned char _CALL_LENplus_LOAD_LOCALS_code_body[570] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x59, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x63, 0x48, 0x89, 0x08, 0x4c, 0x8b, 0x63, 0x28, 0x4d, 0x85, 0xe4, 0x74, 0x5c, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xeb, 0x2a, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x64, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_LOAD_LOCALS_code_holes[19] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found\x00'
// 49: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_LOAD_LOCALS_data_body[81] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_LOCALS_data_holes[1];

// _CALL_LENplus_LOAD_NAME
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_NAME.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 87 01 00 00             js      0x251 <_JIT_ENTRY+0x251>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 187: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 18c: 48 85 c9                      testq   %rcx, %rcx
// 18f: 0f 84 8d 00 00 00             je      0x222 <_JIT_ENTRY+0x222>
// 195: 48 89 08                      movq    %rcx, (%rax)
// 198: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 19c: 48 85 ff                      testq   %rdi, %rdi
// 19f: 0f 84 82 00 00 00             je      0x227 <_JIT_ENTRY+0x227>
// 1a5: 48 8b 03                      movq    (%rbx), %rax
// 1a8: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1ac: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ae:  R_X86_64_64  _JIT_OPARG
// 1b6: 0f b7 c9                      movzwl  %cx, %ecx
// 1b9: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 1be: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001c0:  R_X86_64_64  PyMapping_GetOptionalItem
// 1c8: 48 89 e2                      movq    %rsp, %rdx
// 1cb: 4c 89 e6                      movq    %r12, %rsi
// 1ce: ff d5                         callq   *%rbp
// 1d0: 85 c0                         testl   %eax, %eax
// 1d2: 78 79                         js      0x24d <_JIT_ENTRY+0x24d>
// 1d4: 48 8b 04 24                   movq    (%rsp), %rax
// 1d8: 48 85 c0                      testq   %rax, %rax
// 1db: 0f 84 86 00 00 00             je      0x267 <_JIT_ENTRY+0x267>
// 1e1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e3:  R_X86_64_64  _JIT_OPARG
// 1eb: f7 d1                         notl    %ecx
// 1ed: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1f3: 48 63 c9                      movslq  %ecx, %rcx
// 1f6: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 1fa: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 1fe: 48 83 c6 08                   addq    $0x8, %rsi
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _JIT_CONTINUE
// 20c: 48 89 df                      movq    %rbx, %rdi
// 20f: 4c 89 fa                      movq    %r15, %rdx
// 212: 48 83 c4 18                   addq    $0x18, %rsp
// 216: 5b                            popq    %rbx
// 217: 41 5c                         popq    %r12
// 219: 41 5d                         popq    %r13
// 21b: 41 5e                         popq    %r14
// 21d: 41 5f                         popq    %r15
// 21f: 5d                            popq    %rbp
// 220: ff e0                         jmpq    *%rax
// 222: 49 89 c6                      movq    %rax, %r14
// 225: eb 2a                         jmp     0x251 <_JIT_ENTRY+0x251>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  PyExc_SystemError
// 231: 48 8b 30                      movq    (%rax), %rsi
// 234: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000236:  R_X86_64_64  .rodata.str1.1+0x56
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _PyErr_SetString
// 248: 4c 89 ff                      movq    %r15, %rdi
// 24b: ff d0                         callq   *%rax
// 24d: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 251: 49 29 de                      subq    %rbx, %r14
// 254: 49 83 c6 b8                   addq    $-0x48, %r14
// 258: 49 c1 ee 03                   shrq    $0x3, %r14
// 25c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 260: 31 c0                         xorl    %eax, %eax
// 262: e9 36 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 267: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  PyDict_GetItemRef
// 275: 48 89 e2                      movq    %rsp, %rdx
// 278: 4c 89 e6                      movq    %r12, %rsi
// 27b: ff d0                         callq   *%rax
// 27d: 85 c0                         testl   %eax, %eax
// 27f: 78 cc                         js      0x24d <_JIT_ENTRY+0x24d>
// 281: 48 8b 04 24                   movq    (%rsp), %rax
// 285: 48 85 c0                      testq   %rax, %rax
// 288: 0f 85 53 ff ff ff             jne     0x1e1 <_JIT_ENTRY+0x1e1>
// 28e: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 292: 48 89 e2                      movq    %rsp, %rdx
// 295: 4c 89 e6                      movq    %r12, %rsi
// 298: ff d5                         callq   *%rbp
// 29a: 85 c0                         testl   %eax, %eax
// 29c: 78 af                         js      0x24d <_JIT_ENTRY+0x24d>
// 29e: 48 8b 04 24                   movq    (%rsp), %rax
// 2a2: 48 85 c0                      testq   %rax, %rax
// 2a5: 0f 85 36 ff ff ff             jne     0x1e1 <_JIT_ENTRY+0x1e1>
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  PyExc_NameError
// 2b5: 48 8b 30                      movq    (%rax), %rsi
// 2b8: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002ba:  R_X86_64_64  .rodata.str1.1+0x39
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 2cc: 4c 89 ff                      movq    %r15, %rdi
// 2cf: 4c 89 e1                      movq    %r12, %rcx
// 2d2: ff d0                         callq   *%rax
// 2d4: e9 74 ff ff ff                jmp     0x24d <_JIT_ENTRY+0x24d>
// 2d9: 
static const unsigned char _CALL_LENplus_LOAD_NAME_code_body[730] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x87, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x8d, 0x00, 0x00, 0x00, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x82, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe6, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0x79, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xeb, 0x2a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x36, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xcc, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x53, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe6, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0xaf, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x36, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0x74, 0xff, 0xff, 0xff};
static const Hole _CALL_LENplus_LOAD_NAME_code_holes[24] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x56},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00no locals found\x00"
// 66: 00 00
static const unsigned char _CALL_LENplus_LOAD_NAME_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_NAME_data_holes[1];

// _CALL_LENplus_LOAD_SUPER_ATTR_ATTR
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_SUPER_ATTR_ATTR.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 39                         je      0xaf <_JIT_ENTRY+0xaf>
// 76: 4c 89 f0                      movq    %r14, %rax
// 79: 48 29 d8                      subq    %rbx, %rax
// 7c: 48 83 c0 b8                   addq    $-0x48, %rax
// 80: 48 c1 e8 03                   shrq    $0x3, %rax
// 84: 89 43 40                      movl    %eax, 0x40(%rbx)
// 87: 48 8b 03                      movq    (%rbx), %rax
// 8a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008c:  R_X86_64_64  _JIT_TARGET
// 94: 89 c9                         movl    %ecx, %ecx
// 96: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 9a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a0: 48 83 c4 18                   addq    $0x18, %rsp
// a4: 5b                            popq    %rbx
// a5: 41 5c                         popq    %r12
// a7: 41 5d                         popq    %r13
// a9: 41 5e                         popq    %r14
// ab: 41 5f                         popq    %r15
// ad: 5d                            popq    %rbp
// ae: c3                            retq
// af: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// b4: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  PyObject_Size
// c2: 4c 89 ef                      movq    %r13, %rdi
// c5: ff d0                         callq   *%rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 0f 88 88 02 00 00             js      0x358 <_JIT_ENTRY+0x358>
// d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d2:  R_X86_64_64  PyLong_FromSsize_t
// da: 48 89 c7                      movq    %rax, %rdi
// dd: ff d1                         callq   *%rcx
// df: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// e4: 48 8b 45 00                   movq    (%rbp), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7f 22                         jg      0x10f <_JIT_ENTRY+0x10f>
// ed: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ef:  R_X86_64_64  .rodata.str1.1
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_NegativeRefcount
// 101: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 106: 48 89 ea                      movq    %rbp, %rdx
// 109: ff d0                         callq   *%rax
// 10b: 48 8b 45 00                   movq    (%rbp), %rax
// 10f: 85 c0                         testl   %eax, %eax
// 111: 78 21                         js      0x134 <_JIT_ENTRY+0x134>
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11d: ff d0                         callq   *%rax
// 11f: 48 ff 4d 00                   decq    (%rbp)
// 123: 75 0f                         jne     0x134 <_JIT_ENTRY+0x134>
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_Dealloc
// 12f: 48 89 ef                      movq    %rbp, %rdi
// 132: ff d0                         callq   *%rax
// 134: 49 8b 45 00                   movq    (%r13), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 156: 4c 89 ea                      movq    %r13, %rdx
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 45 00                   movq    (%r13), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 78 21                         js      0x184 <_JIT_ENTRY+0x184>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 4d 00                   decq    (%r13)
// 173: 75 0f                         jne     0x184 <_JIT_ENTRY+0x184>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 ef                      movq    %r13, %rdi
// 182: ff d0                         callq   *%rax
// 184: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 189: 48 85 f6                      testq   %rsi, %rsi
// 18c: 0f 84 c2 01 00 00             je      0x354 <_JIT_ENTRY+0x354>
// 192: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 196: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000198:  R_X86_64_64  _JIT_OPARG
// 1a0: 0f b7 c9                      movzwl  %cx, %ecx
// 1a3: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1a8: 29 ca                         subl    %ecx, %edx
// 1aa: 48 63 d2                      movslq  %edx, %rdx
// 1ad: 49 89 34 d6                   movq    %rsi, (%r14,%rdx,8)
// 1b1: f7 d1                         notl    %ecx
// 1b3: 4c 63 e1                      movslq  %ecx, %r12
// 1b6: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001b8:  R_X86_64_64  PySuper_Type
// 1c0: 4f 39 6c e6 e8                cmpq    %r13, -0x18(%r14,%r12,8)
// 1c5: 0f 85 ae fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1cb: 4b 8b 6c e6 f0                movq    -0x10(%r14,%r12,8), %rbp
// 1d0: 48 8b 4d 08                   movq    0x8(%rbp), %rcx
// 1d4: f6 81 ab 00 00 00 80          testb   $-0x80, 0xab(%rcx)
// 1db: 0f 84 98 fe ff ff             je      0x79 <_JIT_ENTRY+0x79>
// 1e1: 4b 8b 74 e6 f8                movq    -0x8(%r14,%r12,8), %rsi
// 1e6: 48 8b 03                      movq    (%rbx), %rax
// 1e9: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1ed: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ef:  R_X86_64_64  _JIT_OPARG
// 1f7: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 1fd: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _PySuper_Lookup
// 20c: 48 89 ef                      movq    %rbp, %rdi
// 20f: 49 89 f7                      movq    %rsi, %r15
// 212: 31 c9                         xorl    %ecx, %ecx
// 214: ff d0                         callq   *%rax
// 216: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 21b: 49 8b 45 00                   movq    (%r13), %rax
// 21f: 48 85 c0                      testq   %rax, %rax
// 222: 7f 22                         jg      0x246 <_JIT_ENTRY+0x246>
// 224: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000226:  R_X86_64_64  .rodata.str1.1
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _Py_NegativeRefcount
// 238: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 23d: 4c 89 ea                      movq    %r13, %rdx
// 240: ff d0                         callq   *%rax
// 242: 49 8b 45 00                   movq    (%r13), %rax
// 246: 85 c0                         testl   %eax, %eax
// 248: 78 28                         js      0x272 <_JIT_ENTRY+0x272>
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 254: ff d0                         callq   *%rax
// 256: 49 ff 4d 00                   decq    (%r13)
// 25a: 75 16                         jne     0x272 <_JIT_ENTRY+0x272>
// 25c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025e:  R_X86_64_64  PySuper_Type
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _Py_Dealloc
// 270: ff d0                         callq   *%rax
// 272: 48 8b 45 00                   movq    (%rbp), %rax
// 276: 48 85 c0                      testq   %rax, %rax
// 279: 7f 22                         jg      0x29d <_JIT_ENTRY+0x29d>
// 27b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027d:  R_X86_64_64  .rodata.str1.1
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _Py_NegativeRefcount
// 28f: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 294: 48 89 ea                      movq    %rbp, %rdx
// 297: ff d0                         callq   *%rax
// 299: 48 8b 45 00                   movq    (%rbp), %rax
// 29d: 85 c0                         testl   %eax, %eax
// 29f: 4d 89 fd                      movq    %r15, %r13
// 2a2: 78 21                         js      0x2c5 <_JIT_ENTRY+0x2c5>
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ae: ff d0                         callq   *%rax
// 2b0: 48 ff 4d 00                   decq    (%rbp)
// 2b4: 75 0f                         jne     0x2c5 <_JIT_ENTRY+0x2c5>
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _Py_Dealloc
// 2c0: 48 89 ef                      movq    %rbp, %rdi
// 2c3: ff d0                         callq   *%rax
// 2c5: 49 8b 45 00                   movq    (%r13), %rax
// 2c9: 48 85 c0                      testq   %rax, %rax
// 2cc: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 2d1: 7f 22                         jg      0x2f5 <_JIT_ENTRY+0x2f5>
// 2d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d5:  R_X86_64_64  .rodata.str1.1
// 2dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002df:  R_X86_64_64  _Py_NegativeRefcount
// 2e7: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 2ec: 4c 89 ea                      movq    %r13, %rdx
// 2ef: ff d0                         callq   *%rax
// 2f1: 49 8b 45 00                   movq    (%r13), %rax
// 2f5: 85 c0                         testl   %eax, %eax
// 2f7: 78 21                         js      0x31a <_JIT_ENTRY+0x31a>
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 303: ff d0                         callq   *%rax
// 305: 49 ff 4d 00                   decq    (%r13)
// 309: 75 0f                         jne     0x31a <_JIT_ENTRY+0x31a>
// 30b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030d:  R_X86_64_64  _Py_Dealloc
// 315: 4c 89 ef                      movq    %r13, %rdi
// 318: ff d0                         callq   *%rax
// 31a: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 31e: 48 83 c0 e8                   addq    $-0x18, %rax
// 322: 4d 85 ff                      testq   %r15, %r15
// 325: 74 47                         je      0x36e <_JIT_ENTRY+0x36e>
// 327: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 32b: 48 83 c6 f0                   addq    $-0x10, %rsi
// 32f: 4c 89 38                      movq    %r15, (%rax)
// 332: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000334:  R_X86_64_64  _JIT_CONTINUE
// 33c: 48 89 df                      movq    %rbx, %rdi
// 33f: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 344: 48 83 c4 18                   addq    $0x18, %rsp
// 348: 5b                            popq    %rbx
// 349: 41 5c                         popq    %r12
// 34b: 41 5d                         popq    %r13
// 34d: 41 5e                         popq    %r14
// 34f: 41 5f                         popq    %r15
// 351: 5d                            popq    %rbp
// 352: ff e0                         jmpq    *%rax
// 354: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 358: 49 29 de                      subq    %rbx, %r14
// 35b: 49 83 c6 b8                   addq    $-0x48, %r14
// 35f: 49 c1 ee 03                   shrq    $0x3, %r14
// 363: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 367: 31 c0                         xorl    %eax, %eax
// 369: e9 32 fd ff ff                jmp     0xa0 <_JIT_ENTRY+0xa0>
// 36e: 49 89 c6                      movq    %rax, %r14
// 371: eb e5                         jmp     0x358 <_JIT_ENTRY+0x358>
// 373: 
static const unsigned char _CALL_LENplus_LOAD_SUPER_ATTR_ATTR_code_body[884] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x88, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xc2, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd6, 0xf7, 0xd1, 0x4c, 0x63, 0xe1, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x39, 0x6c, 0xe6, 0xe8, 0x0f, 0x85, 0xae, 0xfe, 0xff, 0xff, 0x4b, 0x8b, 0x6c, 0xe6, 0xf0, 0x48, 0x8b, 0x4d, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x98, 0xfe, 0xff, 0xff, 0x4b, 0x8b, 0x74, 0xe6, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x49, 0x89, 0xf7, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4d, 0x89, 0xfd, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x83, 0xc0, 0xe8, 0x4d, 0x85, 0xff, 0x74, 0x47, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x32, 0xfd, 0xff, 0xff, 0x49, 0x89, 0xc6, 0xeb, 0xe5};
static const Hole _CALL_LENplus_LOAD_SUPER_ATTR_ATTR_code_holes[31] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x334, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_LOAD_SUPER_ATTR_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_SUPER_ATTR_ATTR_data_holes[1];

// _CALL_LENplus_LOAD_SUPER_ATTR_METHOD
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_LOAD_SUPER_ATTR_METHOD.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 39                         je      0xaf <_JIT_ENTRY+0xaf>
// 76: 4c 89 f0                      movq    %r14, %rax
// 79: 48 29 d8                      subq    %rbx, %rax
// 7c: 48 83 c0 b8                   addq    $-0x48, %rax
// 80: 48 c1 e8 03                   shrq    $0x3, %rax
// 84: 89 43 40                      movl    %eax, 0x40(%rbx)
// 87: 48 8b 03                      movq    (%rbx), %rax
// 8a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008c:  R_X86_64_64  _JIT_TARGET
// 94: 89 c9                         movl    %ecx, %ecx
// 96: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 9a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a0: 48 83 c4 18                   addq    $0x18, %rsp
// a4: 5b                            popq    %rbx
// a5: 41 5c                         popq    %r12
// a7: 41 5d                         popq    %r13
// a9: 41 5e                         popq    %r14
// ab: 41 5f                         popq    %r15
// ad: 5d                            popq    %rbp
// ae: c3                            retq
// af: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// b4: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  PyObject_Size
// c2: 4c 89 ef                      movq    %r13, %rdi
// c5: ff d0                         callq   *%rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 0f 88 92 02 00 00             js      0x362 <_JIT_ENTRY+0x362>
// d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d2:  R_X86_64_64  PyLong_FromSsize_t
// da: 48 89 c7                      movq    %rax, %rdi
// dd: ff d1                         callq   *%rcx
// df: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// e4: 48 8b 45 00                   movq    (%rbp), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7f 22                         jg      0x10f <_JIT_ENTRY+0x10f>
// ed: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ef:  R_X86_64_64  .rodata.str1.1
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_NegativeRefcount
// 101: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 106: 48 89 ea                      movq    %rbp, %rdx
// 109: ff d0                         callq   *%rax
// 10b: 48 8b 45 00                   movq    (%rbp), %rax
// 10f: 85 c0                         testl   %eax, %eax
// 111: 78 21                         js      0x134 <_JIT_ENTRY+0x134>
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11d: ff d0                         callq   *%rax
// 11f: 48 ff 4d 00                   decq    (%rbp)
// 123: 75 0f                         jne     0x134 <_JIT_ENTRY+0x134>
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_Dealloc
// 12f: 48 89 ef                      movq    %rbp, %rdi
// 132: ff d0                         callq   *%rax
// 134: 49 8b 45 00                   movq    (%r13), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 156: 4c 89 ea                      movq    %r13, %rdx
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 45 00                   movq    (%r13), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 78 21                         js      0x184 <_JIT_ENTRY+0x184>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 4d 00                   decq    (%r13)
// 173: 75 0f                         jne     0x184 <_JIT_ENTRY+0x184>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 ef                      movq    %r13, %rdi
// 182: ff d0                         callq   *%rax
// 184: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 189: 48 85 f6                      testq   %rsi, %rsi
// 18c: 0f 84 cc 01 00 00             je      0x35e <_JIT_ENTRY+0x35e>
// 192: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 196: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000198:  R_X86_64_64  _JIT_OPARG
// 1a0: 0f b7 c9                      movzwl  %cx, %ecx
// 1a3: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1a8: 29 ca                         subl    %ecx, %edx
// 1aa: 48 63 d2                      movslq  %edx, %rdx
// 1ad: 49 89 34 d6                   movq    %rsi, (%r14,%rdx,8)
// 1b1: f7 d1                         notl    %ecx
// 1b3: 4c 63 e1                      movslq  %ecx, %r12
// 1b6: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001b8:  R_X86_64_64  PySuper_Type
// 1c0: 4f 39 6c e6 e8                cmpq    %r13, -0x18(%r14,%r12,8)
// 1c5: 0f 85 ae fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1cb: 4b 8b 6c e6 f0                movq    -0x10(%r14,%r12,8), %rbp
// 1d0: 48 8b 4d 08                   movq    0x8(%rbp), %rcx
// 1d4: f6 81 ab 00 00 00 80          testb   $-0x80, 0xab(%rcx)
// 1db: 0f 84 98 fe ff ff             je      0x79 <_JIT_ENTRY+0x79>
// 1e1: 4f 8b 7c e6 f8                movq    -0x8(%r14,%r12,8), %r15
// 1e6: 48 8b 03                      movq    (%rbx), %rax
// 1e9: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1ed: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ef:  R_X86_64_64  _JIT_OPARG
// 1f7: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 1fd: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 202: c7 44 24 04 00 00 00 00       movl    $0x0, 0x4(%rsp)
// 20a: 49 8b 47 08                   movq    0x8(%r15), %rax
// 20e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000210:  R_X86_64_64  PyObject_GenericGetAttr
// 218: 31 f6                         xorl    %esi, %esi
// 21a: 48 39 88 90 00 00 00          cmpq    %rcx, 0x90(%rax)
// 221: 48 8d 4c 24 04                leaq    0x4(%rsp), %rcx
// 226: 48 0f 45 ce                   cmovneq %rsi, %rcx
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _PySuper_Lookup
// 234: 48 89 ef                      movq    %rbp, %rdi
// 237: 4c 89 fe                      movq    %r15, %rsi
// 23a: ff d0                         callq   *%rax
// 23c: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 241: 49 8b 45 00                   movq    (%r13), %rax
// 245: 48 85 c0                      testq   %rax, %rax
// 248: 7f 22                         jg      0x26c <_JIT_ENTRY+0x26c>
// 24a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024c:  R_X86_64_64  .rodata.str1.1
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _Py_NegativeRefcount
// 25e: be 18 06 00 00                movl    $0x618, %esi            # imm = 0x618
// 263: 4c 89 ea                      movq    %r13, %rdx
// 266: ff d0                         callq   *%rax
// 268: 49 8b 45 00                   movq    (%r13), %rax
// 26c: 85 c0                         testl   %eax, %eax
// 26e: 78 28                         js      0x298 <_JIT_ENTRY+0x298>
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27a: ff d0                         callq   *%rax
// 27c: 49 ff 4d 00                   decq    (%r13)
// 280: 75 16                         jne     0x298 <_JIT_ENTRY+0x298>
// 282: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000284:  R_X86_64_64  PySuper_Type
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _Py_Dealloc
// 296: ff d0                         callq   *%rax
// 298: 48 8b 45 00                   movq    (%rbp), %rax
// 29c: 48 85 c0                      testq   %rax, %rax
// 29f: 7f 22                         jg      0x2c3 <_JIT_ENTRY+0x2c3>
// 2a1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a3:  R_X86_64_64  .rodata.str1.1
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_NegativeRefcount
// 2b5: be 19 06 00 00                movl    $0x619, %esi            # imm = 0x619
// 2ba: 48 89 ea                      movq    %rbp, %rdx
// 2bd: ff d0                         callq   *%rax
// 2bf: 48 8b 45 00                   movq    (%rbp), %rax
// 2c3: 85 c0                         testl   %eax, %eax
// 2c5: 78 21                         js      0x2e8 <_JIT_ENTRY+0x2e8>
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d1: ff d0                         callq   *%rax
// 2d3: 48 ff 4d 00                   decq    (%rbp)
// 2d7: 75 0f                         jne     0x2e8 <_JIT_ENTRY+0x2e8>
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  _Py_Dealloc
// 2e3: 48 89 ef                      movq    %rbp, %rdi
// 2e6: ff d0                         callq   *%rax
// 2e8: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 2ed: 48 85 ed                      testq   %rbp, %rbp
// 2f0: 0f 84 82 00 00 00             je      0x378 <_JIT_ENTRY+0x378>
// 2f6: 4f 8d 2c e6                   leaq    (%r14,%r12,8), %r13
// 2fa: 49 83 c5 f8                   addq    $-0x8, %r13
// 2fe: 83 7c 24 04 00                cmpl    $0x0, 0x4(%rsp)
// 303: 75 17                         jne     0x31c <_JIT_ENTRY+0x31c>
// 305: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000307:  R_X86_64_64  .text+0x3d0
// 30f: bf 21 06 00 00                movl    $0x621, %edi            # imm = 0x621
// 314: 4c 89 fe                      movq    %r15, %rsi
// 317: ff d0                         callq   *%rax
// 319: 45 31 ff                      xorl    %r15d, %r15d
// 31c: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 321: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000323:  R_X86_64_64  _JIT_OPARG
// 32b: f7 d0                         notl    %eax
// 32d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 332: 48 98                         cltq
// 334: 49 89 6c c6 e8                movq    %rbp, -0x18(%r14,%rax,8)
// 339: 4d 89 7c c6 f0                movq    %r15, -0x10(%r14,%rax,8)
// 33e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000340:  R_X86_64_64  _JIT_CONTINUE
// 348: 48 89 df                      movq    %rbx, %rdi
// 34b: 4c 89 ee                      movq    %r13, %rsi
// 34e: 48 83 c4 18                   addq    $0x18, %rsp
// 352: 5b                            popq    %rbx
// 353: 41 5c                         popq    %r12
// 355: 41 5d                         popq    %r13
// 357: 41 5e                         popq    %r14
// 359: 41 5f                         popq    %r15
// 35b: 5d                            popq    %rbp
// 35c: ff e0                         jmpq    *%rax
// 35e: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 362: 49 29 de                      subq    %rbx, %r14
// 365: 49 83 c6 b8                   addq    $-0x48, %r14
// 369: 49 c1 ee 03                   shrq    $0x3, %r14
// 36d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 371: 31 c0                         xorl    %eax, %eax
// 373: e9 28 fd ff ff                jmp     0xa0 <_JIT_ENTRY+0xa0>
// 378: 49 8b 07                      movq    (%r15), %rax
// 37b: 48 85 c0                      testq   %rax, %rax
// 37e: 7f 21                         jg      0x3a1 <_JIT_ENTRY+0x3a1>
// 380: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000382:  R_X86_64_64  .rodata.str1.1
// 38a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038c:  R_X86_64_64  _Py_NegativeRefcount
// 394: be 1b 06 00 00                movl    $0x61b, %esi            # imm = 0x61B
// 399: 4c 89 fa                      movq    %r15, %rdx
// 39c: ff d0                         callq   *%rax
// 39e: 49 8b 07                      movq    (%r15), %rax
// 3a1: 85 c0                         testl   %eax, %eax
// 3a3: 78 20                         js      0x3c5 <_JIT_ENTRY+0x3c5>
// 3a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3af: ff d0                         callq   *%rax
// 3b1: 49 ff 0f                      decq    (%r15)
// 3b4: 75 0f                         jne     0x3c5 <_JIT_ENTRY+0x3c5>
// 3b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b8:  R_X86_64_64  _Py_Dealloc
// 3c0: 4c 89 ff                      movq    %r15, %rdi
// 3c3: ff d0                         callq   *%rax
// 3c5: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 3c9: 49 83 c6 e8                   addq    $-0x18, %r14
// 3cd: eb 93                         jmp     0x362 <_JIT_ENTRY+0x362>
// 3cf: 90                            nop
// 
// 00000000000003d0 <Py_DECREF>:
// 3d0: 53                            pushq   %rbx
// 3d1: 48 89 f3                      movq    %rsi, %rbx
// 3d4: 48 8b 06                      movq    (%rsi), %rax
// 3d7: 48 85 c0                      testq   %rax, %rax
// 3da: 7e 06                         jle     0x3e2 <Py_DECREF+0x12>
// 3dc: 85 c0                         testl   %eax, %eax
// 3de: 79 24                         jns     0x404 <Py_DECREF+0x34>
// 3e0: eb 33                         jmp     0x415 <Py_DECREF+0x45>
// 3e2: 89 fe                         movl    %edi, %esi
// 3e4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003e6:  R_X86_64_64  .rodata.str1.1
// 3ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f0:  R_X86_64_64  _Py_NegativeRefcount
// 3f8: 48 89 da                      movq    %rbx, %rdx
// 3fb: ff d0                         callq   *%rax
// 3fd: 48 8b 03                      movq    (%rbx), %rax
// 400: 85 c0                         testl   %eax, %eax
// 402: 78 11                         js      0x415 <Py_DECREF+0x45>
// 404: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000406:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 40e: ff d0                         callq   *%rax
// 410: 48 ff 0b                      decq    (%rbx)
// 413: 74 02                         je      0x417 <Py_DECREF+0x47>
// 415: 5b                            popq    %rbx
// 416: c3                            retq
// 417: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000419:  R_X86_64_64  _Py_Dealloc
// 421: 48 89 df                      movq    %rbx, %rdi
// 424: 5b                            popq    %rbx
// 425: ff e0                         jmpq    *%rax
// 427: 
static const unsigned char _CALL_LENplus_LOAD_SUPER_ATTR_METHOD_code_body[1064] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x92, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xcc, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd6, 0xf7, 0xd1, 0x4c, 0x63, 0xe1, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x39, 0x6c, 0xe6, 0xe8, 0x0f, 0x85, 0xae, 0xfe, 0xff, 0xff, 0x4b, 0x8b, 0x6c, 0xe6, 0xf0, 0x48, 0x8b, 0x4d, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x98, 0xfe, 0xff, 0xff, 0x4f, 0x8b, 0x7c, 0xe6, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0xc7, 0x44, 0x24, 0x04, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x47, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x48, 0x39, 0x88, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x4c, 0x24, 0x04, 0x48, 0x0f, 0x45, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x19, 0x06, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x82, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xe6, 0x49, 0x83, 0xc5, 0xf8, 0x83, 0x7c, 0x24, 0x04, 0x00, 0x75, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x21, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x45, 0x31, 0xff, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x6c, 0xc6, 0xe8, 0x4d, 0x89, 0x7c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x28, 0xfd, 0xff, 0xff, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4f, 0x8d, 0x34, 0xe6, 0x49, 0x83, 0xc6, 0xe8, 0xeb, 0x93, 0x90, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CALL_LENplus_LOAD_SUPER_ATTR_METHOD_code_holes[38] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GenericGetAttr, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x307, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x3d0},
    {0x323, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x340, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x382, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x38c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3e6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x406, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x419, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_LOAD_SUPER_ATTR_METHOD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_LOAD_SUPER_ATTR_METHOD_data_holes[1];

// _CALL_LENplus_MAKE_CELL
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_MAKE_CELL.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 8b 01 00 00             js      0x255 <_JIT_ENTRY+0x255>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 187: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 18c: 48 85 c9                      testq   %rcx, %rcx
// 18f: 0f 84 bd 00 00 00             je      0x252 <_JIT_ENTRY+0x252>
// 195: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 199: 48 89 08                      movq    %rcx, (%rax)
// 19c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019e:  R_X86_64_64  _JIT_OPARG
// 1a6: 0f b7 c0                      movzwl  %ax, %eax
// 1a9: 48 8b 7c c3 48                movq    0x48(%rbx,%rax,8), %rdi
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  PyCell_New
// 1b8: ff d0                         callq   *%rax
// 1ba: 48 85 c0                      testq   %rax, %rax
// 1bd: 0f 84 92 00 00 00             je      0x255 <_JIT_ENTRY+0x255>
// 1c3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c5:  R_X86_64_64  _JIT_OPARG
// 1cd: 0f b7 c9                      movzwl  %cx, %ecx
// 1d0: 4c 8b 64 cb 48                movq    0x48(%rbx,%rcx,8), %r12
// 1d5: 48 89 44 cb 48                movq    %rax, 0x48(%rbx,%rcx,8)
// 1da: 4d 85 e4                      testq   %r12, %r12
// 1dd: 74 50                         je      0x22f <_JIT_ENTRY+0x22f>
// 1df: 49 8b 04 24                   movq    (%r12), %rax
// 1e3: 48 85 c0                      testq   %rax, %rax
// 1e6: 7f 22                         jg      0x20a <_JIT_ENTRY+0x20a>
// 1e8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ea:  R_X86_64_64  .rodata.str1.1+0x39
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 201: 4c 89 e2                      movq    %r12, %rdx
// 204: ff d0                         callq   *%rax
// 206: 49 8b 04 24                   movq    (%r12), %rax
// 20a: 85 c0                         testl   %eax, %eax
// 20c: 78 21                         js      0x22f <_JIT_ENTRY+0x22f>
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 218: ff d0                         callq   *%rax
// 21a: 49 ff 0c 24                   decq    (%r12)
// 21e: 75 0f                         jne     0x22f <_JIT_ENTRY+0x22f>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_Dealloc
// 22a: 4c 89 e7                      movq    %r12, %rdi
// 22d: ff d0                         callq   *%rax
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _JIT_CONTINUE
// 239: 48 89 df                      movq    %rbx, %rdi
// 23c: 4c 89 f6                      movq    %r14, %rsi
// 23f: 4c 89 fa                      movq    %r15, %rdx
// 242: 48 83 c4 18                   addq    $0x18, %rsp
// 246: 5b                            popq    %rbx
// 247: 41 5c                         popq    %r12
// 249: 41 5d                         popq    %r13
// 24b: 41 5e                         popq    %r14
// 24d: 41 5f                         popq    %r15
// 24f: 5d                            popq    %rbp
// 250: ff e0                         jmpq    *%rax
// 252: 49 89 c6                      movq    %rax, %r14
// 255: 49 29 de                      subq    %rbx, %r14
// 258: 49 83 c6 b8                   addq    $-0x48, %r14
// 25c: 49 c1 ee 03                   shrq    $0x3, %r14
// 260: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 264: 31 c0                         xorl    %eax, %eax
// 266: e9 32 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 26b: 
static const unsigned char _CALL_LENplus_MAKE_CELL_code_body[620] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x8b, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xbd, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x7c, 0xc3, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x92, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xcb, 0x48, 0x48, 0x89, 0x44, 0xcb, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x32, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_MAKE_CELL_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCell_New, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_MAKE_CELL_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_MAKE_CELL_data_holes[1];

// _CALL_LENplus_MAKE_FUNCTION
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_MAKE_FUNCTION.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 b9 01 00 00             js      0x283 <_JIT_ENTRY+0x283>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 188: 48 85 d2                      testq   %rdx, %rdx
// 18b: 0f 84 e9 00 00 00             je      0x27a <_JIT_ENTRY+0x27a>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a3: 29 c1                         subl    %eax, %ecx
// 1a5: 48 63 c9                      movslq  %ecx, %rcx
// 1a8: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1ac: f7 d0                         notl    %eax
// 1ae: 48 98                         cltq
// 1b0: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1b5: 48 8b 73 18                   movq    0x18(%rbx), %rsi
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  PyFunction_New
// 1c3: 4c 89 e7                      movq    %r12, %rdi
// 1c6: ff d0                         callq   *%rax
// 1c8: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1cd: 49 8b 04 24                   movq    (%r12), %rax
// 1d1: 48 85 c0                      testq   %rax, %rax
// 1d4: 7f 22                         jg      0x1f8 <_JIT_ENTRY+0x1f8>
// 1d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d8:  R_X86_64_64  .rodata.str1.1
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _Py_NegativeRefcount
// 1ea: be 4e 0c 00 00                movl    $0xc4e, %esi            # imm = 0xC4E
// 1ef: 4c 89 e2                      movq    %r12, %rdx
// 1f2: ff d0                         callq   *%rax
// 1f4: 49 8b 04 24                   movq    (%r12), %rax
// 1f8: 85 c0                         testl   %eax, %eax
// 1fa: 78 21                         js      0x21d <_JIT_ENTRY+0x21d>
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 206: ff d0                         callq   *%rax
// 208: 49 ff 0c 24                   decq    (%r12)
// 20c: 75 0f                         jne     0x21d <_JIT_ENTRY+0x21d>
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_Dealloc
// 218: 4c 89 e7                      movq    %r12, %rdi
// 21b: ff d0                         callq   *%rax
// 21d: 4b 8d 2c ee                   leaq    (%r14,%r13,8), %rbp
// 221: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 226: 4d 85 ed                      testq   %r13, %r13
// 229: 74 55                         je      0x280 <_JIT_ENTRY+0x280>
// 22b: 41 8b 74 24 5c                movl    0x5c(%r12), %esi
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _PyFunction_SetVersion
// 23a: 4c 89 ef                      movq    %r13, %rdi
// 23d: ff d0                         callq   *%rax
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _JIT_OPARG
// 249: f7 d0                         notl    %eax
// 24b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 250: 48 98                         cltq
// 252: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _JIT_CONTINUE
// 261: 48 89 df                      movq    %rbx, %rdi
// 264: 48 89 ee                      movq    %rbp, %rsi
// 267: 4c 89 fa                      movq    %r15, %rdx
// 26a: 48 83 c4 18                   addq    $0x18, %rsp
// 26e: 5b                            popq    %rbx
// 26f: 41 5c                         popq    %r12
// 271: 41 5d                         popq    %r13
// 273: 41 5e                         popq    %r14
// 275: 41 5f                         popq    %r15
// 277: 5d                            popq    %rbp
// 278: ff e0                         jmpq    *%rax
// 27a: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 27e: eb 03                         jmp     0x283 <_JIT_ENTRY+0x283>
// 280: 49 89 ee                      movq    %rbp, %r14
// 283: 49 29 de                      subq    %rbx, %r14
// 286: 49 83 c6 b8                   addq    $-0x48, %r14
// 28a: 49 c1 ee 03                   shrq    $0x3, %r14
// 28e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 292: 31 c0                         xorl    %eax, %eax
// 294: e9 04 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 299: 
static const unsigned char _CALL_LENplus_MAKE_FUNCTION_code_body[666] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xb9, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xe9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x48, 0x8b, 0x73, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4e, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x2c, 0xee, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x4d, 0x85, 0xed, 0x74, 0x55, 0x41, 0x8b, 0x74, 0x24, 0x5c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x04, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_MAKE_FUNCTION_code_holes[22] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_New, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFunction_SetVersion, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_MAKE_FUNCTION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_MAKE_FUNCTION_data_holes[1];

// _CALL_LENplus_MAP_ADD
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_MAP_ADD.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 2a 01 00 00             js      0x1f4 <_JIT_ENTRY+0x1f4>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 59                         je      0x1f0 <_JIT_ENTRY+0x1f0>
// 197: 4f 8d 2c e6                   leaq    (%r14,%r12,8), %r13
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 49 8b 74 c6 f0                movq    -0x10(%r14,%rax,8), %rsi
// 1bf: 49 8b 54 c6 f8                movq    -0x8(%r14,%rax,8), %rdx
// 1c4: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 1c8: 49 83 c4 f0                   addq    $-0x10, %r12
// 1cc: 48 01 c1                      addq    %rax, %rcx
// 1cf: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  _PyDict_SetItem_Take2
// 1dd: ff d0                         callq   *%rax
// 1df: 85 c0                         testl   %eax, %eax
// 1e1: 4d 0f 45 e5                   cmovneq %r13, %r12
// 1e5: 74 23                         je      0x20a <_JIT_ENTRY+0x20a>
// 1e7: 49 83 c4 f0                   addq    $-0x10, %r12
// 1eb: 4d 89 e6                      movq    %r12, %r14
// 1ee: eb 04                         jmp     0x1f4 <_JIT_ENTRY+0x1f4>
// 1f0: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1f4: 49 29 de                      subq    %rbx, %r14
// 1f7: 49 83 c6 b8                   addq    $-0x48, %r14
// 1fb: 49 c1 ee 03                   shrq    $0x3, %r14
// 1ff: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 203: 31 c0                         xorl    %eax, %eax
// 205: e9 93 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _JIT_CONTINUE
// 214: 48 89 df                      movq    %rbx, %rdi
// 217: 4c 89 e6                      movq    %r12, %rsi
// 21a: 4c 89 fa                      movq    %r15, %rdx
// 21d: 48 83 c4 18                   addq    $0x18, %rsp
// 221: 5b                            popq    %rbx
// 222: 41 5c                         popq    %r12
// 224: 41 5d                         popq    %r13
// 226: 41 5e                         popq    %r14
// 228: 41 5f                         popq    %r15
// 22a: 5d                            popq    %rbp
// 22b: ff e0                         jmpq    *%rax
// 22d: 
static const unsigned char _CALL_LENplus_MAP_ADD_code_body[558] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x2a, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x59, 0x4f, 0x8d, 0x2c, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x74, 0xc6, 0xf0, 0x49, 0x8b, 0x54, 0xc6, 0xf8, 0x4d, 0x8d, 0x24, 0xc6, 0x49, 0x83, 0xc4, 0xf0, 0x48, 0x01, 0xc1, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x4d, 0x0f, 0x45, 0xe5, 0x74, 0x23, 0x49, 0x83, 0xc4, 0xf0, 0x4d, 0x89, 0xe6, 0xeb, 0x04, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x93, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_MAP_ADD_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_MAP_ADD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_MAP_ADD_data_holes[1];

// _CALL_LENplus_MATCH_CLASS
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_MATCH_CLASS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 48 63 d2                      movslq  %edx, %rdx
// 2b: 31 f6                         xorl    %esi, %esi
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 40 0f 94 c6                   sete    %sil
// 34: 31 ff                         xorl    %edi, %edi
// 36: 66 83 f9 01                   cmpw    $0x1, %cx
// 3a: 40 0f 94 c7                   sete    %dil
// 3e: 0f b7 c9                      movzwl  %cx, %ecx
// 41: 49 89 c8                      movq    %rcx, %r8
// 44: 49 f7 d8                      negq    %r8
// 47: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 4c: 0f 44 f7                      cmovel  %edi, %esi
// 4f: 48 f7 d1                      notq    %rcx
// 52: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 56: 40 80 fe 01                   cmpb    $0x1, %sil
// 5a: 75 1b                         jne     0x77 <_JIT_ENTRY+0x77>
// 5c: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 61: 29 c2                         subl    %eax, %edx
// 63: 4c 63 ea                      movslq  %edx, %r13
// 66: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 6a: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6e: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 75: 74 37                         je      0xae <_JIT_ENTRY+0xae>
// 77: 49 29 de                      subq    %rbx, %r14
// 7a: 49 83 c6 b8                   addq    $-0x48, %r14
// 7e: 49 c1 ee 03                   shrq    $0x3, %r14
// 82: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 86: 48 8b 03                      movq    (%rbx), %rax
// 89: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008b:  R_X86_64_64  _JIT_TARGET
// 93: 89 c9                         movl    %ecx, %ecx
// 95: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 99: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9f: 48 83 c4 18                   addq    $0x18, %rsp
// a3: 5b                            popq    %rbx
// a4: 41 5c                         popq    %r12
// a6: 41 5d                         popq    %r13
// a8: 41 5e                         popq    %r14
// aa: 41 5f                         popq    %r15
// ac: 5d                            popq    %rbp
// ad: c3                            retq
// ae: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  PyObject_Size
// bc: 4c 89 e7                      movq    %r12, %rdi
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 49 02 00 00             js      0x313 <_JIT_ENTRY+0x313>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 49 8b 04 24                   movq    (%r12), %rax
// 132: 48 85 c0                      testq   %rax, %rax
// 135: 7f 22                         jg      0x159 <_JIT_ENTRY+0x159>
// 137: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000139:  R_X86_64_64  .rodata.str1.1
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_NegativeRefcount
// 14b: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 150: 4c 89 e2                      movq    %r12, %rdx
// 153: ff d0                         callq   *%rax
// 155: 49 8b 04 24                   movq    (%r12), %rax
// 159: 85 c0                         testl   %eax, %eax
// 15b: 78 21                         js      0x17e <_JIT_ENTRY+0x17e>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 167: ff d0                         callq   *%rax
// 169: 49 ff 0c 24                   decq    (%r12)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000171:  R_X86_64_64  _Py_Dealloc
// 179: 4c 89 e7                      movq    %r12, %rdi
// 17c: ff d0                         callq   *%rax
// 17e: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 183: 48 85 f6                      testq   %rsi, %rsi
// 186: 0f 84 83 01 00 00             je      0x30f <_JIT_ENTRY+0x30f>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c8                      movzwl  %ax, %ecx
// 199: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 19e: 29 ca                         subl    %ecx, %edx
// 1a0: 48 63 d2                      movslq  %edx, %rdx
// 1a3: 49 89 34 d6                   movq    %rsi, (%r14,%rdx,8)
// 1a7: f7 d1                         notl    %ecx
// 1a9: 4c 63 e9                      movslq  %ecx, %r13
// 1ac: 4f 8b 44 ee f8                movq    -0x8(%r14,%r13,8), %r8
// 1b1: 4f 8b 64 ee e8                movq    -0x18(%r14,%r13,8), %r12
// 1b6: 4b 8b 6c ee f0                movq    -0x10(%r14,%r13,8), %rbp
// 1bb: 0f b7 c8                      movzwl  %ax, %ecx
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _PyEval_MatchClass
// 1c8: 4c 89 ff                      movq    %r15, %rdi
// 1cb: 4c 89 e6                      movq    %r12, %rsi
// 1ce: 48 89 ea                      movq    %rbp, %rdx
// 1d1: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// 1d6: ff d0                         callq   *%rax
// 1d8: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1dd: 49 8b 04 24                   movq    (%r12), %rax
// 1e1: 48 85 c0                      testq   %rax, %rax
// 1e4: 7f 22                         jg      0x208 <_JIT_ENTRY+0x208>
// 1e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e8:  R_X86_64_64  .rodata.str1.1
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _Py_NegativeRefcount
// 1fa: be 10 08 00 00                movl    $0x810, %esi            # imm = 0x810
// 1ff: 4c 89 e2                      movq    %r12, %rdx
// 202: ff d0                         callq   *%rax
// 204: 49 8b 04 24                   movq    (%r12), %rax
// 208: 85 c0                         testl   %eax, %eax
// 20a: 78 21                         js      0x22d <_JIT_ENTRY+0x22d>
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 216: ff d0                         callq   *%rax
// 218: 49 ff 0c 24                   decq    (%r12)
// 21c: 75 0f                         jne     0x22d <_JIT_ENTRY+0x22d>
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _Py_Dealloc
// 228: 4c 89 e7                      movq    %r12, %rdi
// 22b: ff d0                         callq   *%rax
// 22d: 48 8b 45 00                   movq    (%rbp), %rax
// 231: 48 85 c0                      testq   %rax, %rax
// 234: 7f 22                         jg      0x258 <_JIT_ENTRY+0x258>
// 236: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000238:  R_X86_64_64  .rodata.str1.1
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _Py_NegativeRefcount
// 24a: be 11 08 00 00                movl    $0x811, %esi            # imm = 0x811
// 24f: 48 89 ea                      movq    %rbp, %rdx
// 252: ff d0                         callq   *%rax
// 254: 48 8b 45 00                   movq    (%rbp), %rax
// 258: 85 c0                         testl   %eax, %eax
// 25a: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 25f: 78 21                         js      0x282 <_JIT_ENTRY+0x282>
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26b: ff d0                         callq   *%rax
// 26d: 48 ff 4d 00                   decq    (%rbp)
// 271: 75 0f                         jne     0x282 <_JIT_ENTRY+0x282>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_Dealloc
// 27d: 48 89 ef                      movq    %rbp, %rdi
// 280: ff d0                         callq   *%rax
// 282: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 287: 48 8b 45 00                   movq    (%rbp), %rax
// 28b: 48 85 c0                      testq   %rax, %rax
// 28e: 7f 22                         jg      0x2b2 <_JIT_ENTRY+0x2b2>
// 290: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000292:  R_X86_64_64  .rodata.str1.1
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _Py_NegativeRefcount
// 2a4: be 12 08 00 00                movl    $0x812, %esi            # imm = 0x812
// 2a9: 48 89 ea                      movq    %rbp, %rdx
// 2ac: ff d0                         callq   *%rax
// 2ae: 48 8b 45 00                   movq    (%rbp), %rax
// 2b2: 85 c0                         testl   %eax, %eax
// 2b4: 78 21                         js      0x2d7 <_JIT_ENTRY+0x2d7>
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c0: ff d0                         callq   *%rax
// 2c2: 48 ff 4d 00                   decq    (%rbp)
// 2c6: 75 0f                         jne     0x2d7 <_JIT_ENTRY+0x2d7>
// 2c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ca:  R_X86_64_64  _Py_Dealloc
// 2d2: 48 89 ef                      movq    %rbp, %rdi
// 2d5: ff d0                         callq   *%rax
// 2d7: 4b 8d 04 ee                   leaq    (%r14,%r13,8), %rax
// 2db: 48 83 c0 e8                   addq    $-0x18, %rax
// 2df: 4d 85 e4                      testq   %r12, %r12
// 2e2: 74 45                         je      0x329 <_JIT_ENTRY+0x329>
// 2e4: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 2e8: 48 83 c6 f0                   addq    $-0x10, %rsi
// 2ec: 4c 89 20                      movq    %r12, (%rax)
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  _JIT_CONTINUE
// 2f9: 48 89 df                      movq    %rbx, %rdi
// 2fc: 4c 89 fa                      movq    %r15, %rdx
// 2ff: 48 83 c4 18                   addq    $0x18, %rsp
// 303: 5b                            popq    %rbx
// 304: 41 5c                         popq    %r12
// 306: 41 5d                         popq    %r13
// 308: 41 5e                         popq    %r14
// 30a: 41 5f                         popq    %r15
// 30c: 5d                            popq    %rbp
// 30d: ff e0                         jmpq    *%rax
// 30f: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 313: 49 29 de                      subq    %rbx, %r14
// 316: 49 83 c6 b8                   addq    $-0x48, %r14
// 31a: 49 c1 ee 03                   shrq    $0x3, %r14
// 31e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 322: 31 c0                         xorl    %eax, %eax
// 324: e9 76 fd ff ff                jmp     0x9f <_JIT_ENTRY+0x9f>
// 329: 49 8b 4f 68                   movq    0x68(%r15), %rcx
// 32d: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000032f:  R_X86_64_64  _Py_NoneStruct
// 337: 48 85 c9                      testq   %rcx, %rcx
// 33a: 74 a8                         je      0x2e4 <_JIT_ENTRY+0x2e4>
// 33c: 48 83 79 08 00                cmpq    $0x0, 0x8(%rcx)
// 341: 74 a1                         je      0x2e4 <_JIT_ENTRY+0x2e4>
// 343: 49 89 c6                      movq    %rax, %r14
// 346: eb cb                         jmp     0x313 <_JIT_ENTRY+0x313>
// 348: 
static const unsigned char _CALL_LENplus_MATCH_CLASS_code_body[841] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x49, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x83, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd6, 0xf7, 0xd1, 0x4c, 0x63, 0xe9, 0x4f, 0x8b, 0x44, 0xee, 0xf8, 0x4f, 0x8b, 0x64, 0xee, 0xe8, 0x4b, 0x8b, 0x6c, 0xee, 0xf0, 0x0f, 0xb7, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x4c, 0x89, 0x44, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x10, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x08, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x12, 0x08, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xee, 0x48, 0x83, 0xc0, 0xe8, 0x4d, 0x85, 0xe4, 0x74, 0x45, 0x4b, 0x8d, 0x34, 0xee, 0x48, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x76, 0xfd, 0xff, 0xff, 0x49, 0x8b, 0x4f, 0x68, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc9, 0x74, 0xa8, 0x48, 0x83, 0x79, 0x08, 0x00, 0x74, 0xa1, 0x49, 0x89, 0xc6, 0xeb, 0xcb};
static const Hole _CALL_LENplus_MATCH_CLASS_code_holes[29] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchClass, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x32f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_MATCH_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_MATCH_CLASS_data_holes[1];

// _CALL_LENplus_MATCH_KEYS
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_MATCH_KEYS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 4b 01 00 00             js      0x215 <_JIT_ENTRY+0x215>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 188: 48 85 d2                      testq   %rdx, %rdx
// 18b: 74 7e                         je      0x20b <_JIT_ENTRY+0x20b>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _JIT_OPARG
// 197: 0f b7 c0                      movzwl  %ax, %eax
// 19a: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 19f: 29 c1                         subl    %eax, %ecx
// 1a1: 48 63 c9                      movslq  %ecx, %rcx
// 1a4: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a8: f7 d0                         notl    %eax
// 1aa: 48 98                         cltq
// 1ac: 49 8b 74 c6 f0                movq    -0x10(%r14,%rax,8), %rsi
// 1b1: 49 8b 54 c6 f8                movq    -0x8(%r14,%rax,8), %rdx
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _PyEval_MatchKeys
// 1c0: 4c 89 ff                      movq    %r15, %rdi
// 1c3: ff d0                         callq   *%rax
// 1c5: 48 85 c0                      testq   %rax, %rax
// 1c8: 74 47                         je      0x211 <_JIT_ENTRY+0x211>
// 1ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cc:  R_X86_64_64  _JIT_OPARG
// 1d4: f7 d1                         notl    %ecx
// 1d6: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1dc: 48 63 c9                      movslq  %ecx, %rcx
// 1df: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 1e3: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 1e7: 48 83 c6 08                   addq    $0x8, %rsi
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _JIT_CONTINUE
// 1f5: 48 89 df                      movq    %rbx, %rdi
// 1f8: 4c 89 fa                      movq    %r15, %rdx
// 1fb: 48 83 c4 18                   addq    $0x18, %rsp
// 1ff: 5b                            popq    %rbx
// 200: 41 5c                         popq    %r12
// 202: 41 5d                         popq    %r13
// 204: 41 5e                         popq    %r14
// 206: 41 5f                         popq    %r15
// 208: 5d                            popq    %rbp
// 209: ff e0                         jmpq    *%rax
// 20b: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 20f: eb 04                         jmp     0x215 <_JIT_ENTRY+0x215>
// 211: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 215: 49 29 de                      subq    %rbx, %r14
// 218: 49 83 c6 b8                   addq    $-0x48, %r14
// 21c: 49 c1 ee 03                   shrq    $0x3, %r14
// 220: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 224: 31 c0                         xorl    %eax, %eax
// 226: e9 72 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 22b: 
static const unsigned char _CALL_LENplus_MATCH_KEYS_code_body[556] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x4b, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x7e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x74, 0xc6, 0xf0, 0x49, 0x8b, 0x54, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x47, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xe6, 0xeb, 0x04, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x72, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_MATCH_KEYS_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchKeys, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_MATCH_KEYS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_MATCH_KEYS_data_holes[1];

// _CALL_LENplus_MATCH_MAPPING
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_MATCH_MAPPING.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 30 01 00 00             js      0x1f7 <_JIT_ENTRY+0x1f7>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 74 70                         je      0x1f3 <_JIT_ENTRY+0x1f3>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _JIT_OPARG
// 18d: 0f b7 c0                      movzwl  %ax, %eax
// 190: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 195: 29 c1                         subl    %eax, %ecx
// 197: 48 63 c9                      movslq  %ecx, %rcx
// 19a: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 19e: f7 d0                         notl    %eax
// 1a0: 48 98                         cltq
// 1a2: 49 8b 4c c6 f8                movq    -0x8(%r14,%rax,8), %rcx
// 1a7: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 1ab: f6 81 a8 00 00 00 40          testb   $0x40, 0xa8(%rcx)
// 1b2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b4:  R_X86_64_64  _Py_FalseStruct
// 1bc: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001be:  R_X86_64_64  _Py_TrueStruct
// 1c6: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 1ca: 49 89 14 c6                   movq    %rdx, (%r14,%rax,8)
// 1ce: 49 8d 74 c6 08                leaq    0x8(%r14,%rax,8), %rsi
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  _JIT_CONTINUE
// 1dd: 48 89 df                      movq    %rbx, %rdi
// 1e0: 4c 89 fa                      movq    %r15, %rdx
// 1e3: 48 83 c4 08                   addq    $0x8, %rsp
// 1e7: 5b                            popq    %rbx
// 1e8: 41 5c                         popq    %r12
// 1ea: 41 5d                         popq    %r13
// 1ec: 41 5e                         popq    %r14
// 1ee: 41 5f                         popq    %r15
// 1f0: 5d                            popq    %rbp
// 1f1: ff e0                         jmpq    *%rax
// 1f3: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1f7: 49 29 de                      subq    %rbx, %r14
// 1fa: 49 83 c6 b8                   addq    $-0x48, %r14
// 1fe: 49 c1 ee 03                   shrq    $0x3, %r14
// 202: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 206: 31 c0                         xorl    %eax, %eax
// 208: e9 8f fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 20d: 
static const unsigned char _CALL_LENplus_MATCH_MAPPING_code_body[526] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x30, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x74, 0x70, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc6, 0xf8, 0x48, 0x8b, 0x49, 0x08, 0xf6, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x49, 0x89, 0x14, 0xc6, 0x49, 0x8d, 0x74, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x8f, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_MATCH_MAPPING_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_MATCH_MAPPING_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_MATCH_MAPPING_data_holes[1];

// _CALL_LENplus_MATCH_SEQUENCE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_MATCH_SEQUENCE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 30 01 00 00             js      0x1f7 <_JIT_ENTRY+0x1f7>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 74 70                         je      0x1f3 <_JIT_ENTRY+0x1f3>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _JIT_OPARG
// 18d: 0f b7 c0                      movzwl  %ax, %eax
// 190: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 195: 29 c1                         subl    %eax, %ecx
// 197: 48 63 c9                      movslq  %ecx, %rcx
// 19a: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 19e: f7 d0                         notl    %eax
// 1a0: 48 98                         cltq
// 1a2: 49 8b 4c c6 f8                movq    -0x8(%r14,%rax,8), %rcx
// 1a7: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 1ab: f6 81 a8 00 00 00 20          testb   $0x20, 0xa8(%rcx)
// 1b2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b4:  R_X86_64_64  _Py_FalseStruct
// 1bc: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001be:  R_X86_64_64  _Py_TrueStruct
// 1c6: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 1ca: 49 89 14 c6                   movq    %rdx, (%r14,%rax,8)
// 1ce: 49 8d 74 c6 08                leaq    0x8(%r14,%rax,8), %rsi
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  _JIT_CONTINUE
// 1dd: 48 89 df                      movq    %rbx, %rdi
// 1e0: 4c 89 fa                      movq    %r15, %rdx
// 1e3: 48 83 c4 08                   addq    $0x8, %rsp
// 1e7: 5b                            popq    %rbx
// 1e8: 41 5c                         popq    %r12
// 1ea: 41 5d                         popq    %r13
// 1ec: 41 5e                         popq    %r14
// 1ee: 41 5f                         popq    %r15
// 1f0: 5d                            popq    %rbp
// 1f1: ff e0                         jmpq    *%rax
// 1f3: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1f7: 49 29 de                      subq    %rbx, %r14
// 1fa: 49 83 c6 b8                   addq    $-0x48, %r14
// 1fe: 49 c1 ee 03                   shrq    $0x3, %r14
// 202: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 206: 31 c0                         xorl    %eax, %eax
// 208: e9 8f fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 20d: 
static const unsigned char _CALL_LENplus_MATCH_SEQUENCE_code_body[526] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x30, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x74, 0x70, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc6, 0xf8, 0x48, 0x8b, 0x49, 0x08, 0xf6, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x49, 0x89, 0x14, 0xc6, 0x49, 0x8d, 0x74, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x8f, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_MATCH_SEQUENCE_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_MATCH_SEQUENCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_MATCH_SEQUENCE_data_holes[1];

// _CALL_LENplus_NOP
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_NOP.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 f1 00 00 00             js      0x1bb <_JIT_ENTRY+0x1bb>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 187: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 18c: 48 85 c9                      testq   %rcx, %rcx
// 18f: 74 27                         je      0x1b8 <_JIT_ENTRY+0x1b8>
// 191: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 195: 48 89 08                      movq    %rcx, (%rax)
// 198: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019a:  R_X86_64_64  _JIT_CONTINUE
// 1a2: 48 89 df                      movq    %rbx, %rdi
// 1a5: 4c 89 fa                      movq    %r15, %rdx
// 1a8: 48 83 c4 18                   addq    $0x18, %rsp
// 1ac: 5b                            popq    %rbx
// 1ad: 41 5c                         popq    %r12
// 1af: 41 5d                         popq    %r13
// 1b1: 41 5e                         popq    %r14
// 1b3: 41 5f                         popq    %r15
// 1b5: 5d                            popq    %rbp
// 1b6: ff e0                         jmpq    *%rax
// 1b8: 49 89 c6                      movq    %rax, %r14
// 1bb: 49 29 de                      subq    %rbx, %r14
// 1be: 49 83 c6 b8                   addq    $-0x48, %r14
// 1c2: 49 c1 ee 03                   shrq    $0x3, %r14
// 1c6: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1ca: 31 c0                         xorl    %eax, %eax
// 1cc: e9 cc fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 1d1: 
static const unsigned char _CALL_LENplus_NOP_code_body[466] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xf1, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x27, 0x4b, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xcc, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_NOP_code_holes[14] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_NOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_NOP_data_holes[1];

// _CALL_LENplus_POP_EXCEPT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_POP_EXCEPT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d6                      movq    %rdx, %r14
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d7 00                cmpq    $0x0, (%r15,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ef                   movq    (%r15,%r13,8), %rbp
// 67: 49 8b 46 10                   movq    0x10(%r14), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 df                      subq    %rbx, %r15
// 77: 49 83 c7 b8                   addq    $-0x48, %r15
// 7b: 49 c1 ef 03                   shrq    $0x3, %r15
// 7f: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 cf                   movq    (%r15,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 7f 01 00 00             js      0x246 <_JIT_ENTRY+0x246>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 bb 00 00 00             je      0x242 <_JIT_ENTRY+0x242>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 cf                   movq    %rdx, (%r15,%rcx,8)
// 1a2: f7 d0                         notl    %eax
// 1a4: 48 98                         cltq
// 1a6: 4d 8d 64 c7 f8                leaq    -0x8(%r15,%rax,8), %r12
// 1ab: 49 8b 44 c7 f8                movq    -0x8(%r15,%rax,8), %rax
// 1b0: 49 8b 4e 70                   movq    0x70(%r14), %rcx
// 1b4: 4c 8b 39                      movq    (%rcx), %r15
// 1b7: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001b9:  R_X86_64_64  _Py_NoneStruct
// 1c1: 31 f6                         xorl    %esi, %esi
// 1c3: 48 39 d0                      cmpq    %rdx, %rax
// 1c6: 48 0f 45 f0                   cmovneq %rax, %rsi
// 1ca: 48 89 31                      movq    %rsi, (%rcx)
// 1cd: 4d 85 ff                      testq   %r15, %r15
// 1d0: 74 4d                         je      0x21f <_JIT_ENTRY+0x21f>
// 1d2: 49 8b 07                      movq    (%r15), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7f 21                         jg      0x1fb <_JIT_ENTRY+0x1fb>
// 1da: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001dc:  R_X86_64_64  .rodata.str1.1+0x39
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_NegativeRefcount
// 1ee: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 1f3: 4c 89 fa                      movq    %r15, %rdx
// 1f6: ff d0                         callq   *%rax
// 1f8: 49 8b 07                      movq    (%r15), %rax
// 1fb: 85 c0                         testl   %eax, %eax
// 1fd: 78 20                         js      0x21f <_JIT_ENTRY+0x21f>
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 209: ff d0                         callq   *%rax
// 20b: 49 ff 0f                      decq    (%r15)
// 20e: 75 0f                         jne     0x21f <_JIT_ENTRY+0x21f>
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _Py_Dealloc
// 21a: 4c 89 ff                      movq    %r15, %rdi
// 21d: ff d0                         callq   *%rax
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _JIT_CONTINUE
// 229: 48 89 df                      movq    %rbx, %rdi
// 22c: 4c 89 e6                      movq    %r12, %rsi
// 22f: 4c 89 f2                      movq    %r14, %rdx
// 232: 48 83 c4 08                   addq    $0x8, %rsp
// 236: 5b                            popq    %rbx
// 237: 41 5c                         popq    %r12
// 239: 41 5d                         popq    %r13
// 23b: 41 5e                         popq    %r14
// 23d: 41 5f                         popq    %r15
// 23f: 5d                            popq    %rbp
// 240: ff e0                         jmpq    *%rax
// 242: 4f 8d 3c ef                   leaq    (%r15,%r13,8), %r15
// 246: 49 29 df                      subq    %rbx, %r15
// 249: 49 83 c7 b8                   addq    $-0x48, %r15
// 24d: 49 c1 ef 03                   shrq    $0x3, %r15
// 251: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 255: 31 c0                         xorl    %eax, %eax
// 257: e9 40 fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 25c: 
static const unsigned char _CALL_LENplus_POP_EXCEPT_code_body[605] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd7, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xef, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x7f, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xbb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xcf, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8d, 0x64, 0xc7, 0xf8, 0x49, 0x8b, 0x44, 0xc7, 0xf8, 0x49, 0x8b, 0x4e, 0x70, 0x4c, 0x8b, 0x39, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x48, 0x39, 0xd0, 0x48, 0x0f, 0x45, 0xf0, 0x48, 0x89, 0x31, 0x4d, 0x85, 0xff, 0x74, 0x4d, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x3c, 0xef, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x40, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_POP_EXCEPT_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_POP_EXCEPT_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_POP_EXCEPT_data_holes[1];

// _CALL_LENplus_POP_FRAME
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_POP_FRAME.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d6                      movq    %rdx, %r14
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d7 00                cmpq    $0x0, (%r15,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ef                   movq    (%r15,%r13,8), %rbp
// 67: 49 8b 46 10                   movq    0x10(%r14), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 df                      subq    %rbx, %r15
// 77: 49 83 c7 b8                   addq    $-0x48, %r15
// 7b: 49 c1 ef 03                   shrq    $0x3, %r15
// 7f: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 cf                   movq    (%r15,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 55 01 00 00             js      0x21c <_JIT_ENTRY+0x21c>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 91 00 00 00             je      0x218 <_JIT_ENTRY+0x218>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 cf                   movq    %rdx, (%r15,%rcx,8)
// 1a2: f7 d0                         notl    %eax
// 1a4: 48 98                         cltq
// 1a6: 49 8d 0c c7                   leaq    (%r15,%rax,8), %rcx
// 1aa: 48 83 c1 f8                   addq    $-0x8, %rcx
// 1ae: 4d 8b 64 c7 f8                movq    -0x8(%r15,%rax,8), %r12
// 1b3: 48 29 d9                      subq    %rbx, %rcx
// 1b6: 48 83 c1 b8                   addq    $-0x48, %rcx
// 1ba: 48 c1 e9 03                   shrq    $0x3, %rcx
// 1be: 89 4b 40                      movl    %ecx, 0x40(%rbx)
// 1c1: 41 ff 46 24                   incl    0x24(%r14)
// 1c5: 4c 8b 7b 08                   movq    0x8(%rbx), %r15
// 1c9: 4d 89 7e 40                   movq    %r15, 0x40(%r14)
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _PyEval_FrameClearAndPop
// 1d7: 4c 89 f7                      movq    %r14, %rdi
// 1da: 48 89 de                      movq    %rbx, %rsi
// 1dd: ff d0                         callq   *%rax
// 1df: 49 63 47 40                   movslq  0x40(%r15), %rax
// 1e3: 4d 89 64 c7 48                movq    %r12, 0x48(%r15,%rax,8)
// 1e8: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 1ec: 48 83 c6 50                   addq    $0x50, %rsi
// 1f0: 41 c7 47 40 ff ff ff ff       movl    $0xffffffff, 0x40(%r15) # imm = 0xFFFFFFFF
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _JIT_CONTINUE
// 202: 4c 89 ff                      movq    %r15, %rdi
// 205: 4c 89 f2                      movq    %r14, %rdx
// 208: 48 83 c4 08                   addq    $0x8, %rsp
// 20c: 5b                            popq    %rbx
// 20d: 41 5c                         popq    %r12
// 20f: 41 5d                         popq    %r13
// 211: 41 5e                         popq    %r14
// 213: 41 5f                         popq    %r15
// 215: 5d                            popq    %rbp
// 216: ff e0                         jmpq    *%rax
// 218: 4f 8d 3c ef                   leaq    (%r15,%r13,8), %r15
// 21c: 49 29 df                      subq    %rbx, %r15
// 21f: 49 83 c7 b8                   addq    $-0x48, %r15
// 223: 49 c1 ef 03                   shrq    $0x3, %r15
// 227: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 22b: 31 c0                         xorl    %eax, %eax
// 22d: e9 6a fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 232: 
static const unsigned char _CALL_LENplus_POP_FRAME_code_body[563] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd7, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xef, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x55, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x91, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xcf, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8d, 0x0c, 0xc7, 0x48, 0x83, 0xc1, 0xf8, 0x4d, 0x8b, 0x64, 0xc7, 0xf8, 0x48, 0x29, 0xd9, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x89, 0x4b, 0x40, 0x41, 0xff, 0x46, 0x24, 0x4c, 0x8b, 0x7b, 0x08, 0x4d, 0x89, 0x7e, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0xff, 0xd0, 0x49, 0x63, 0x47, 0x40, 0x4d, 0x89, 0x64, 0xc7, 0x48, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x50, 0x41, 0xc7, 0x47, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x3c, 0xef, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x6a, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_POP_FRAME_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FrameClearAndPop, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_POP_FRAME_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_POP_FRAME_data_holes[1];

// _CALL_LENplus_POP_TOP
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_POP_TOP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 64 01 00 00             js      0x22b <_JIT_ENTRY+0x22b>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 a0 00 00 00             je      0x227 <_JIT_ENTRY+0x227>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a2: f7 d0                         notl    %eax
// 1a4: 4c 63 e8                      movslq  %eax, %r13
// 1a7: 4f 8b 64 ee f8                movq    -0x8(%r14,%r13,8), %r12
// 1ac: 49 8b 04 24                   movq    (%r12), %rax
// 1b0: 48 85 c0                      testq   %rax, %rax
// 1b3: 7f 22                         jg      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b7:  R_X86_64_64  .rodata.str1.1
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_NegativeRefcount
// 1c9: be 54 00 00 00                movl    $0x54, %esi
// 1ce: 4c 89 e2                      movq    %r12, %rdx
// 1d1: ff d0                         callq   *%rax
// 1d3: 49 8b 04 24                   movq    (%r12), %rax
// 1d7: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1db: 49 83 c6 f8                   addq    $-0x8, %r14
// 1df: 85 c0                         testl   %eax, %eax
// 1e1: 78 21                         js      0x204 <_JIT_ENTRY+0x204>
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ed: ff d0                         callq   *%rax
// 1ef: 49 ff 0c 24                   decq    (%r12)
// 1f3: 75 0f                         jne     0x204 <_JIT_ENTRY+0x204>
// 1f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f7:  R_X86_64_64  _Py_Dealloc
// 1ff: 4c 89 e7                      movq    %r12, %rdi
// 202: ff d0                         callq   *%rax
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _JIT_CONTINUE
// 20e: 48 89 df                      movq    %rbx, %rdi
// 211: 4c 89 f6                      movq    %r14, %rsi
// 214: 4c 89 fa                      movq    %r15, %rdx
// 217: 48 83 c4 08                   addq    $0x8, %rsp
// 21b: 5b                            popq    %rbx
// 21c: 41 5c                         popq    %r12
// 21e: 41 5d                         popq    %r13
// 220: 41 5e                         popq    %r14
// 222: 41 5f                         popq    %r15
// 224: 5d                            popq    %rbp
// 225: ff e0                         jmpq    *%rax
// 227: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 22b: 49 29 de                      subq    %rbx, %r14
// 22e: 49 83 c6 b8                   addq    $-0x48, %r14
// 232: 49 c1 ee 03                   shrq    $0x3, %r14
// 236: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 23a: 31 c0                         xorl    %eax, %eax
// 23c: e9 5b fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 241: 
static const unsigned char _CALL_LENplus_POP_TOP_code_body[578] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x64, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xa0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x4c, 0x63, 0xe8, 0x4f, 0x8b, 0x64, 0xee, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x5b, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_POP_TOP_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_POP_TOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_POP_TOP_data_holes[1];

// _CALL_LENplus_PUSH_EXC_INFO
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_PUSH_EXC_INFO.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 63 01 00 00             js      0x22a <_JIT_ENTRY+0x22a>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 9f 00 00 00             je      0x226 <_JIT_ENTRY+0x226>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a2: f7 d0                         notl    %eax
// 1a4: 48 98                         cltq
// 1a6: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1ab: 4d 8b 6f 70                   movq    0x70(%r15), %r13
// 1af: 49 8b 6d 00                   movq    (%r13), %rbp
// 1b3: 41 8b 04 24                   movl    (%r12), %eax
// 1b7: ff c0                         incl    %eax
// 1b9: 74 10                         je      0x1cb <_JIT_ENTRY+0x1cb>
// 1bb: 41 89 04 24                   movl    %eax, (%r12)
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 48 85 ed                      testq   %rbp, %rbp
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _Py_NoneStruct
// 1d8: 48 0f 45 c5                   cmovneq %rbp, %rax
// 1dc: 4d 89 65 00                   movq    %r12, (%r13)
// 1e0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e2:  R_X86_64_64  _JIT_OPARG
// 1ea: f7 d1                         notl    %ecx
// 1ec: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1f2: 48 63 c9                      movslq  %ecx, %rcx
// 1f5: 49 89 44 ce f8                movq    %rax, -0x8(%r14,%rcx,8)
// 1fa: 4d 89 24 ce                   movq    %r12, (%r14,%rcx,8)
// 1fe: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 202: 48 83 c6 08                   addq    $0x8, %rsi
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _JIT_CONTINUE
// 210: 48 89 df                      movq    %rbx, %rdi
// 213: 4c 89 fa                      movq    %r15, %rdx
// 216: 48 83 c4 08                   addq    $0x8, %rsp
// 21a: 5b                            popq    %rbx
// 21b: 41 5c                         popq    %r12
// 21d: 41 5d                         popq    %r13
// 21f: 41 5e                         popq    %r14
// 221: 41 5f                         popq    %r15
// 223: 5d                            popq    %rbp
// 224: ff e0                         jmpq    *%rax
// 226: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 22a: 49 29 de                      subq    %rbx, %r14
// 22d: 49 83 c6 b8                   addq    $-0x48, %r14
// 231: 49 c1 ee 03                   shrq    $0x3, %r14
// 235: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 239: 31 c0                         xorl    %eax, %eax
// 23b: e9 5c fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 240: 
static const unsigned char _CALL_LENplus_PUSH_EXC_INFO_code_body[577] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x63, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x4d, 0x8b, 0x6f, 0x70, 0x49, 0x8b, 0x6d, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x45, 0xc5, 0x4d, 0x89, 0x65, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x44, 0xce, 0xf8, 0x4d, 0x89, 0x24, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x5c, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_PUSH_EXC_INFO_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_PUSH_EXC_INFO_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_PUSH_EXC_INFO_data_holes[1];

// _CALL_LENplus_PUSH_FRAME
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_PUSH_FRAME.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 36 01 00 00             js      0x1fd <_JIT_ENTRY+0x1fd>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 74 76                         je      0x1f9 <_JIT_ENTRY+0x1f9>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _JIT_OPARG
// 18d: 0f b7 c0                      movzwl  %ax, %eax
// 190: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 195: 29 c1                         subl    %eax, %ecx
// 197: 48 63 c9                      movslq  %ecx, %rcx
// 19a: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 19e: f7 d0                         notl    %eax
// 1a0: 48 98                         cltq
// 1a2: 49 8d 0c c6                   leaq    (%r14,%rax,8), %rcx
// 1a6: 48 83 c1 f8                   addq    $-0x8, %rcx
// 1aa: 49 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %rdi
// 1af: 48 29 d9                      subq    %rbx, %rcx
// 1b2: 48 83 c1 b8                   addq    $-0x48, %rcx
// 1b6: 48 c1 e9 03                   shrq    $0x3, %rcx
// 1ba: 89 4b 40                      movl    %ecx, 0x40(%rbx)
// 1bd: 48 89 5f 08                   movq    %rbx, 0x8(%rdi)
// 1c1: 49 89 7f 40                   movq    %rdi, 0x40(%r15)
// 1c5: 41 ff 4f 24                   decl    0x24(%r15)
// 1c9: 48 63 47 40                   movslq  0x40(%rdi), %rax
// 1cd: 48 8d 34 c7                   leaq    (%rdi,%rax,8), %rsi
// 1d1: 48 83 c6 48                   addq    $0x48, %rsi
// 1d5: c7 47 40 ff ff ff ff          movl    $0xffffffff, 0x40(%rdi) # imm = 0xFFFFFFFF
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_CONTINUE
// 1e6: 4c 89 fa                      movq    %r15, %rdx
// 1e9: 48 83 c4 08                   addq    $0x8, %rsp
// 1ed: 5b                            popq    %rbx
// 1ee: 41 5c                         popq    %r12
// 1f0: 41 5d                         popq    %r13
// 1f2: 41 5e                         popq    %r14
// 1f4: 41 5f                         popq    %r15
// 1f6: 5d                            popq    %rbp
// 1f7: ff e0                         jmpq    *%rax
// 1f9: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1fd: 49 29 de                      subq    %rbx, %r14
// 200: 49 83 c6 b8                   addq    $-0x48, %r14
// 204: 49 c1 ee 03                   shrq    $0x3, %r14
// 208: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 20c: 31 c0                         xorl    %eax, %eax
// 20e: e9 89 fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 213: 
static const unsigned char _CALL_LENplus_PUSH_FRAME_code_body[532] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x36, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x74, 0x76, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8d, 0x0c, 0xc6, 0x48, 0x83, 0xc1, 0xf8, 0x49, 0x8b, 0x7c, 0xc6, 0xf8, 0x48, 0x29, 0xd9, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x89, 0x4b, 0x40, 0x48, 0x89, 0x5f, 0x08, 0x49, 0x89, 0x7f, 0x40, 0x41, 0xff, 0x4f, 0x24, 0x48, 0x63, 0x47, 0x40, 0x48, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x48, 0xc7, 0x47, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x89, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_PUSH_FRAME_code_holes[15] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_PUSH_FRAME_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_PUSH_FRAME_data_holes[1];

// _CALL_LENplus_PUSH_NULL
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_PUSH_NULL.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 0c 01 00 00             js      0x1d3 <_JIT_ENTRY+0x1d3>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 74 4c                         je      0x1cf <_JIT_ENTRY+0x1cf>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _JIT_OPARG
// 18d: 0f b7 c0                      movzwl  %ax, %eax
// 190: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 195: 29 c1                         subl    %eax, %ecx
// 197: 48 63 c9                      movslq  %ecx, %rcx
// 19a: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 19e: f7 d0                         notl    %eax
// 1a0: 48 98                         cltq
// 1a2: 49 c7 04 c6 00 00 00 00       movq    $0x0, (%r14,%rax,8)
// 1aa: 49 8d 74 c6 08                leaq    0x8(%r14,%rax,8), %rsi
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _JIT_CONTINUE
// 1b9: 48 89 df                      movq    %rbx, %rdi
// 1bc: 4c 89 fa                      movq    %r15, %rdx
// 1bf: 48 83 c4 08                   addq    $0x8, %rsp
// 1c3: 5b                            popq    %rbx
// 1c4: 41 5c                         popq    %r12
// 1c6: 41 5d                         popq    %r13
// 1c8: 41 5e                         popq    %r14
// 1ca: 41 5f                         popq    %r15
// 1cc: 5d                            popq    %rbp
// 1cd: ff e0                         jmpq    *%rax
// 1cf: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1d3: 49 29 de                      subq    %rbx, %r14
// 1d6: 49 83 c6 b8                   addq    $-0x48, %r14
// 1da: 49 c1 ee 03                   shrq    $0x3, %r14
// 1de: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1e2: 31 c0                         xorl    %eax, %eax
// 1e4: e9 b3 fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 1e9: 
static const unsigned char _CALL_LENplus_PUSH_NULL_code_body[490] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x0c, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x74, 0x4c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0xc7, 0x04, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x74, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xb3, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_PUSH_NULL_code_holes[15] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_PUSH_NULL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_PUSH_NULL_data_holes[1];

// _CALL_LENplus_RESUME_CHECK
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_RESUME_CHECK.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 0b 01 00 00             js      0x1d5 <_JIT_ENTRY+0x1d5>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 187: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 18c: 48 85 c9                      testq   %rcx, %rcx
// 18f: 74 41                         je      0x1d2 <_JIT_ENTRY+0x1d2>
// 191: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 195: 48 89 08                      movq    %rcx, (%rax)
// 198: 49 8b 47 10                   movq    0x10(%r15), %rax
// 19c: 48 8b 00                      movq    (%rax), %rax
// 19f: 48 8b 0b                      movq    (%rbx), %rcx
// 1a2: 48 3b 81 a8 00 00 00          cmpq    0xa8(%rcx), %rax
// 1a9: 0f 85 c6 fe ff ff             jne     0x75 <_JIT_ENTRY+0x75>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _JIT_CONTINUE
// 1b9: 48 89 df                      movq    %rbx, %rdi
// 1bc: 4c 89 f6                      movq    %r14, %rsi
// 1bf: 4c 89 fa                      movq    %r15, %rdx
// 1c2: 48 83 c4 18                   addq    $0x18, %rsp
// 1c6: 5b                            popq    %rbx
// 1c7: 41 5c                         popq    %r12
// 1c9: 41 5d                         popq    %r13
// 1cb: 41 5e                         popq    %r14
// 1cd: 41 5f                         popq    %r15
// 1cf: 5d                            popq    %rbp
// 1d0: ff e0                         jmpq    *%rax
// 1d2: 49 89 c6                      movq    %rax, %r14
// 1d5: 49 29 de                      subq    %rbx, %r14
// 1d8: 49 83 c6 b8                   addq    $-0x48, %r14
// 1dc: 49 c1 ee 03                   shrq    $0x3, %r14
// 1e0: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1e4: 31 c0                         xorl    %eax, %eax
// 1e6: e9 b2 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 1eb: 
static const unsigned char _CALL_LENplus_RESUME_CHECK_code_body[492] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x0b, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x41, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x48, 0x8b, 0x0b, 0x48, 0x3b, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xc6, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xb2, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_RESUME_CHECK_code_holes[14] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_RESUME_CHECK_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_RESUME_CHECK_data_holes[1];

// _CALL_LENplus_SAVE_RETURN_OFFSET
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_SAVE_RETURN_OFFSET.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 ff 00 00 00             js      0x1c9 <_JIT_ENTRY+0x1c9>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 187: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 18c: 48 85 c9                      testq   %rcx, %rcx
// 18f: 74 35                         je      0x1c6 <_JIT_ENTRY+0x1c6>
// 191: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 195: 48 89 08                      movq    %rcx, (%rax)
// 198: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019a:  R_X86_64_64  _JIT_OPARG
// 1a2: 66 89 43 44                   movw    %ax, 0x44(%rbx)
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _JIT_CONTINUE
// 1b0: 48 89 df                      movq    %rbx, %rdi
// 1b3: 4c 89 fa                      movq    %r15, %rdx
// 1b6: 48 83 c4 18                   addq    $0x18, %rsp
// 1ba: 5b                            popq    %rbx
// 1bb: 41 5c                         popq    %r12
// 1bd: 41 5d                         popq    %r13
// 1bf: 41 5e                         popq    %r14
// 1c1: 41 5f                         popq    %r15
// 1c3: 5d                            popq    %rbp
// 1c4: ff e0                         jmpq    *%rax
// 1c6: 49 89 c6                      movq    %rax, %r14
// 1c9: 49 29 de                      subq    %rbx, %r14
// 1cc: 49 83 c6 b8                   addq    $-0x48, %r14
// 1d0: 49 c1 ee 03                   shrq    $0x3, %r14
// 1d4: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1d8: 31 c0                         xorl    %eax, %eax
// 1da: e9 be fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 1df: 
static const unsigned char _CALL_LENplus_SAVE_RETURN_OFFSET_code_body[480] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xff, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x35, 0x4b, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x89, 0x43, 0x44, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xbe, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_SAVE_RETURN_OFFSET_code_holes[15] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_SAVE_RETURN_OFFSET_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_SAVE_RETURN_OFFSET_data_holes[1];

// _CALL_LENplus_SETUP_ANNOTATIONS
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_SETUP_ANNOTATIONS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 de                      subq    %rbx, %r14
// 79: 49 83 c6 b8                   addq    $-0x48, %r14
// 7d: 49 c1 ee 03                   shrq    $0x3, %r14
// 81: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b2: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 9e 01 00 00             js      0x26c <_JIT_ENTRY+0x26c>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 04 24                   movq    (%r12), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 e2                      movq    %r12, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 04 24                   movq    (%r12), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 21                         js      0x182 <_JIT_ENTRY+0x182>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 0c 24                   decq    (%r12)
// 171: 75 0f                         jne     0x182 <_JIT_ENTRY+0x182>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: ff d0                         callq   *%rax
// 182: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 186: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 18b: 48 85 c9                      testq   %rcx, %rcx
// 18e: 0f 84 a9 00 00 00             je      0x23d <_JIT_ENTRY+0x23d>
// 194: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 198: 48 89 08                      movq    %rcx, (%rax)
// 19b: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 19f: 48 85 ff                      testq   %rdi, %rdi
// 1a2: 0f 84 9a 00 00 00             je      0x242 <_JIT_ENTRY+0x242>
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  PyMapping_GetOptionalItem
// 1b2: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001b4:  R_X86_64_64  _PyRuntime
// 1bc: 49 81 c5 a8 a7 00 00          addq    $0xa7a8, %r13           # imm = 0xA7A8
// 1c3: 48 89 e2                      movq    %rsp, %rdx
// 1c6: 4c 89 ee                      movq    %r13, %rsi
// 1c9: ff d0                         callq   *%rax
// 1cb: 85 c0                         testl   %eax, %eax
// 1cd: 0f 88 99 00 00 00             js      0x26c <_JIT_ENTRY+0x26c>
// 1d3: 4c 8b 24 24                   movq    (%rsp), %r12
// 1d7: 4d 85 e4                      testq   %r12, %r12
// 1da: 0f 84 a2 00 00 00             je      0x282 <_JIT_ENTRY+0x282>
// 1e0: 49 8b 04 24                   movq    (%r12), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7f 22                         jg      0x20b <_JIT_ENTRY+0x20b>
// 1e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001eb:  R_X86_64_64  .rodata.str1.1
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _Py_NegativeRefcount
// 1fd: be 96 05 00 00                movl    $0x596, %esi            # imm = 0x596
// 202: 4c 89 e2                      movq    %r12, %rdx
// 205: ff d0                         callq   *%rax
// 207: 49 8b 04 24                   movq    (%r12), %rax
// 20b: 85 c0                         testl   %eax, %eax
// 20d: 0f 88 f8 00 00 00             js      0x30b <_JIT_ENTRY+0x30b>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21d: ff d0                         callq   *%rax
// 21f: 49 ff 0c 24                   decq    (%r12)
// 223: 0f 85 e2 00 00 00             jne     0x30b <_JIT_ENTRY+0x30b>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_Dealloc
// 233: 4c 89 e7                      movq    %r12, %rdi
// 236: ff d0                         callq   *%rax
// 238: e9 ce 00 00 00                jmp     0x30b <_JIT_ENTRY+0x30b>
// 23d: 49 89 c6                      movq    %rax, %r14
// 240: eb 2a                         jmp     0x26c <_JIT_ENTRY+0x26c>
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  PyExc_SystemError
// 24c: 48 8b 30                      movq    (%rax), %rsi
// 24f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000251:  R_X86_64_64  .rodata.str1.1+0x39
// 259: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025b:  R_X86_64_64  _PyErr_Format
// 263: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 268: 31 c0                         xorl    %eax, %eax
// 26a: ff d1                         callq   *%rcx
// 26c: 49 29 de                      subq    %rbx, %r14
// 26f: 49 83 c6 b8                   addq    $-0x48, %r14
// 273: 49 c1 ee 03                   shrq    $0x3, %r14
// 277: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 27b: 31 c0                         xorl    %eax, %eax
// 27d: e9 1c fe ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  PyDict_New
// 28c: ff d0                         callq   *%rax
// 28e: 48 89 04 24                   movq    %rax, (%rsp)
// 292: 48 85 c0                      testq   %rax, %rax
// 295: 74 d5                         je      0x26c <_JIT_ENTRY+0x26c>
// 297: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 29b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000029d:  R_X86_64_64  PyObject_SetItem
// 2a5: 4c 89 ee                      movq    %r13, %rsi
// 2a8: 48 89 c2                      movq    %rax, %rdx
// 2ab: ff d1                         callq   *%rcx
// 2ad: 89 c5                         movl    %eax, %ebp
// 2af: 4c 8b 24 24                   movq    (%rsp), %r12
// 2b3: 49 8b 04 24                   movq    (%r12), %rax
// 2b7: 48 85 c0                      testq   %rax, %rax
// 2ba: 7f 22                         jg      0x2de <_JIT_ENTRY+0x2de>
// 2bc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002be:  R_X86_64_64  .rodata.str1.1
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _Py_NegativeRefcount
// 2d0: be 92 05 00 00                movl    $0x592, %esi            # imm = 0x592
// 2d5: 4c 89 e2                      movq    %r12, %rdx
// 2d8: ff d0                         callq   *%rax
// 2da: 49 8b 04 24                   movq    (%r12), %rax
// 2de: 85 c0                         testl   %eax, %eax
// 2e0: 78 21                         js      0x303 <_JIT_ENTRY+0x303>
// 2e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ec: ff d0                         callq   *%rax
// 2ee: 49 ff 0c 24                   decq    (%r12)
// 2f2: 75 0f                         jne     0x303 <_JIT_ENTRY+0x303>
// 2f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f6:  R_X86_64_64  _Py_Dealloc
// 2fe: 4c 89 e7                      movq    %r12, %rdi
// 301: ff d0                         callq   *%rax
// 303: 85 ed                         testl   %ebp, %ebp
// 305: 0f 85 61 ff ff ff             jne     0x26c <_JIT_ENTRY+0x26c>
// 30b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030d:  R_X86_64_64  _JIT_CONTINUE
// 315: 48 89 df                      movq    %rbx, %rdi
// 318: 4c 89 f6                      movq    %r14, %rsi
// 31b: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 320: 48 83 c4 18                   addq    $0x18, %rsp
// 324: 5b                            popq    %rbx
// 325: 41 5c                         popq    %r12
// 327: 41 5d                         popq    %r13
// 329: 41 5e                         popq    %r14
// 32b: 41 5f                         popq    %r15
// 32d: 5d                            popq    %rbp
// 32e: ff e0                         jmpq    *%rax
// 330: 
static const unsigned char _CALL_LENplus_SETUP_ANNOTATIONS_code_body[817] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x9e, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xa9, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x9a, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xa8, 0xa7, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x99, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x24, 0x24, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xa2, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xf8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xe2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xce, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0xeb, 0x2a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x31, 0xc0, 0xff, 0xd1, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x1c, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0xd5, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xc2, 0xff, 0xd1, 0x89, 0xc5, 0x4c, 0x8b, 0x24, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x92, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x85, 0x61, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_SETUP_ANNOTATIONS_code_holes[29] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_New, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when setting up annotations\x00'
// 65: 00 00 00
static const unsigned char _CALL_LENplus_SETUP_ANNOTATIONS_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_SETUP_ANNOTATIONS_data_holes[1];

// _CALL_LENplus_SET_ADD
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_SET_ADD.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e7                   movq    (%r15,%r12,8), %rbp
// 68: 49 8b 46 10                   movq    0x10(%r14), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 df                      subq    %rbx, %r15
// 78: 49 83 c7 b8                   addq    $-0x48, %r15
// 7c: 49 c1 ef 03                   shrq    $0x3, %r15
// 80: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c cf                   movq    (%r15,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 7c 01 00 00             js      0x246 <_JIT_ENTRY+0x246>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 188: 48 85 d2                      testq   %rdx, %rdx
// 18b: 0f 84 b1 00 00 00             je      0x242 <_JIT_ENTRY+0x242>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a3: 29 c1                         subl    %eax, %ecx
// 1a5: 48 63 c9                      movslq  %ecx, %rcx
// 1a8: 49 89 14 cf                   movq    %rdx, (%r15,%rcx,8)
// 1ac: f7 d0                         notl    %eax
// 1ae: 48 63 e8                      movslq  %eax, %rbp
// 1b1: 4d 8b 64 ef f8                movq    -0x8(%r15,%rbp,8), %r12
// 1b6: 48 8d 44 2d 00                leaq    (%rbp,%rbp), %rax
// 1bb: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  PySet_Add
// 1c9: 4c 89 e6                      movq    %r12, %rsi
// 1cc: ff d0                         callq   *%rax
// 1ce: 89 44 24 08                   movl    %eax, 0x8(%rsp)
// 1d2: 49 8b 04 24                   movq    (%r12), %rax
// 1d6: 48 85 c0                      testq   %rax, %rax
// 1d9: 7f 22                         jg      0x1fd <_JIT_ENTRY+0x1fd>
// 1db: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001dd:  R_X86_64_64  .rodata.str1.1
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_NegativeRefcount
// 1ef: be 29 02 00 00                movl    $0x229, %esi            # imm = 0x229
// 1f4: 4c 89 e2                      movq    %r12, %rdx
// 1f7: ff d0                         callq   *%rax
// 1f9: 49 8b 04 24                   movq    (%r12), %rax
// 1fd: 4f 8d 2c ef                   leaq    (%r15,%r13,8), %r13
// 201: 4d 8d 3c ef                   leaq    (%r15,%rbp,8), %r15
// 205: 49 83 c7 f8                   addq    $-0x8, %r15
// 209: 85 c0                         testl   %eax, %eax
// 20b: 78 21                         js      0x22e <_JIT_ENTRY+0x22e>
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 217: ff d0                         callq   *%rax
// 219: 49 ff 0c 24                   decq    (%r12)
// 21d: 75 0f                         jne     0x22e <_JIT_ENTRY+0x22e>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_Dealloc
// 229: 4c 89 e7                      movq    %r12, %rdi
// 22c: ff d0                         callq   *%rax
// 22e: 83 7c 24 08 00                cmpl    $0x0, 0x8(%rsp)
// 233: 4d 0f 44 ef                   cmoveq  %r15, %r13
// 237: 74 23                         je      0x25c <_JIT_ENTRY+0x25c>
// 239: 49 83 c5 f8                   addq    $-0x8, %r13
// 23d: 4d 89 ef                      movq    %r13, %r15
// 240: eb 04                         jmp     0x246 <_JIT_ENTRY+0x246>
// 242: 4f 8d 3c e7                   leaq    (%r15,%r12,8), %r15
// 246: 49 29 df                      subq    %rbx, %r15
// 249: 49 83 c7 b8                   addq    $-0x48, %r15
// 24d: 49 c1 ef 03                   shrq    $0x3, %r15
// 251: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 255: 31 c0                         xorl    %eax, %eax
// 257: e9 41 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  _JIT_CONTINUE
// 266: 48 89 df                      movq    %rbx, %rdi
// 269: 4c 89 ee                      movq    %r13, %rsi
// 26c: 4c 89 f2                      movq    %r14, %rdx
// 26f: 48 83 c4 18                   addq    $0x18, %rsp
// 273: 5b                            popq    %rbx
// 274: 41 5c                         popq    %r12
// 276: 41 5d                         popq    %r13
// 278: 41 5e                         popq    %r14
// 27a: 41 5f                         popq    %r15
// 27c: 5d                            popq    %rbp
// 27d: ff e0                         jmpq    *%rax
// 27f: 
static const unsigned char _CALL_LENplus_SET_ADD_code_body[640] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe7, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x7c, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xcf, 0xf7, 0xd0, 0x48, 0x63, 0xe8, 0x4d, 0x8b, 0x64, 0xef, 0xf8, 0x48, 0x8d, 0x44, 0x2d, 0x00, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x29, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x2c, 0xef, 0x4d, 0x8d, 0x3c, 0xef, 0x49, 0x83, 0xc7, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x4d, 0x0f, 0x44, 0xef, 0x74, 0x23, 0x49, 0x83, 0xc5, 0xf8, 0x4d, 0x89, 0xef, 0xeb, 0x04, 0x4f, 0x8d, 0x3c, 0xe7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x41, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_SET_ADD_code_holes[20] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_SET_ADD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_SET_ADD_data_holes[1];

// _CALL_LENplus_SET_FUNCTION_ATTRIBUTE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_SET_FUNCTION_ATTRIBUTE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 00 01 00 00             js      0x1c7 <_JIT_ENTRY+0x1c7>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 0c 24                   movq    (%rsp), %rcx
// 17e: 48 85 c9                      testq   %rcx, %rcx
// 181: 74 40                         je      0x1c3 <_JIT_ENTRY+0x1c3>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _JIT_OPARG
// 18d: 0f b7 f0                      movzwl  %ax, %esi
// 190: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
// 195: 29 f0                         subl    %esi, %eax
// 197: 48 98                         cltq
// 199: 49 89 0c c6                   movq    %rcx, (%r14,%rax,8)
// 19d: 89 f0                         movl    %esi, %eax
// 19f: f7 d0                         notl    %eax
// 1a1: 48 63 d0                      movslq  %eax, %rdx
// 1a4: 49 8b 4c d6 f0                movq    -0x10(%r14,%rdx,8), %rcx
// 1a9: 49 8b 44 d6 f8                movq    -0x8(%r14,%rdx,8), %rax
// 1ae: 83 fe 03                      cmpl    $0x3, %esi
// 1b1: 7f 2a                         jg      0x1dd <_JIT_ENTRY+0x1dd>
// 1b3: 83 fe 01                      cmpl    $0x1, %esi
// 1b6: 74 35                         je      0x1ed <_JIT_ENTRY+0x1ed>
// 1b8: 83 fe 02                      cmpl    $0x2, %esi
// 1bb: 75 7f                         jne     0x23c <_JIT_ENTRY+0x23c>
// 1bd: 48 8d 78 40                   leaq    0x40(%rax), %rdi
// 1c1: eb 34                         jmp     0x1f7 <_JIT_ENTRY+0x1f7>
// 1c3: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1c7: 49 29 de                      subq    %rbx, %r14
// 1ca: 49 83 c6 b8                   addq    $-0x48, %r14
// 1ce: 49 c1 ee 03                   shrq    $0x3, %r14
// 1d2: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1d6: 31 c0                         xorl    %eax, %eax
// 1d8: e9 bf fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 1dd: 83 fe 04                      cmpl    $0x4, %esi
// 1e0: 74 11                         je      0x1f3 <_JIT_ENTRY+0x1f3>
// 1e2: 83 fe 08                      cmpl    $0x8, %esi
// 1e5: 75 55                         jne     0x23c <_JIT_ENTRY+0x23c>
// 1e7: 48 8d 78 48                   leaq    0x48(%rax), %rdi
// 1eb: eb 0a                         jmp     0x1f7 <_JIT_ENTRY+0x1f7>
// 1ed: 48 8d 78 38                   leaq    0x38(%rax), %rdi
// 1f1: eb 04                         jmp     0x1f7 <_JIT_ENTRY+0x1f7>
// 1f3: 48 8d 78 70                   leaq    0x70(%rax), %rdi
// 1f7: 49 8d 34 d6                   leaq    (%r14,%rdx,8), %rsi
// 1fb: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1ff: 48 89 0f                      movq    %rcx, (%rdi)
// 202: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000204:  R_X86_64_64  _JIT_OPARG
// 20c: f7 d1                         notl    %ecx
// 20e: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 214: 48 63 c9                      movslq  %ecx, %rcx
// 217: 49 89 44 ce f0                movq    %rax, -0x10(%r14,%rcx,8)
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _JIT_CONTINUE
// 226: 48 89 df                      movq    %rbx, %rdi
// 229: 4c 89 fa                      movq    %r15, %rdx
// 22c: 48 83 c4 08                   addq    $0x8, %rsp
// 230: 5b                            popq    %rbx
// 231: 41 5c                         popq    %r12
// 233: 41 5d                         popq    %r13
// 235: 41 5e                         popq    %r14
// 237: 41 5f                         popq    %r15
// 239: 5d                            popq    %rbp
// 23a: ff e0                         jmpq    *%rax
// 23c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023e:  R_X86_64_64  .rodata.str1.1+0x39
// 246: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000248:  R_X86_64_64  .rodata.str1.1+0x44
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _Py_FatalErrorFunc
// 25a: ff d0                         callq   *%rax
// 25c: 
static const unsigned char _CALL_LENplus_SET_FUNCTION_ATTRIBUTE_code_body[605] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x00, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf0, 0x48, 0x98, 0x49, 0x89, 0x0c, 0xc6, 0x89, 0xf0, 0xf7, 0xd0, 0x48, 0x63, 0xd0, 0x49, 0x8b, 0x4c, 0xd6, 0xf0, 0x49, 0x8b, 0x44, 0xd6, 0xf8, 0x83, 0xfe, 0x03, 0x7f, 0x2a, 0x83, 0xfe, 0x01, 0x74, 0x35, 0x83, 0xfe, 0x02, 0x75, 0x7f, 0x48, 0x8d, 0x78, 0x40, 0xeb, 0x34, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xbf, 0xfe, 0xff, 0xff, 0x83, 0xfe, 0x04, 0x74, 0x11, 0x83, 0xfe, 0x08, 0x75, 0x55, 0x48, 0x8d, 0x78, 0x48, 0xeb, 0x0a, 0x48, 0x8d, 0x78, 0x38, 0xeb, 0x04, 0x48, 0x8d, 0x78, 0x70, 0x49, 0x8d, 0x34, 0xd6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x89, 0x0f, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x44, 0xce, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CALL_LENplus_SET_FUNCTION_ATTRIBUTE_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x248, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x44},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalErrorFunc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_JIT_ENTRY\x00We've reached an unreachable state. Anything is possible.\nThe limits were in our heads all along. Follow your dreams.\nhttps://xkcd.com/2200\x00"
// d0: 
static const unsigned char _CALL_LENplus_SET_FUNCTION_ATTRIBUTE_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x00, 0x57, 0x65, 0x27, 0x76, 0x65, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x20, 0x41, 0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x2e, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x75, 0x72, 0x20, 0x68, 0x65, 0x61, 0x64, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x20, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x78, 0x6b, 0x63, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x32, 0x32, 0x30, 0x30, 0x00};
static const Hole _CALL_LENplus_SET_FUNCTION_ATTRIBUTE_data_holes[1];

// _CALL_LENplus_SET_IP
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_SET_IP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 0d 01 00 00             js      0x1d7 <_JIT_ENTRY+0x1d7>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 187: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 18c: 48 85 c9                      testq   %rcx, %rcx
// 18f: 74 43                         je      0x1d4 <_JIT_ENTRY+0x1d4>
// 191: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 195: 48 89 08                      movq    %rcx, (%rax)
// 198: 48 8b 03                      movq    (%rbx), %rax
// 19b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c9                      movzwl  %cx, %ecx
// 1a8: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 1b0: 48 89 43 38                   movq    %rax, 0x38(%rbx)
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _JIT_CONTINUE
// 1be: 48 89 df                      movq    %rbx, %rdi
// 1c1: 4c 89 fa                      movq    %r15, %rdx
// 1c4: 48 83 c4 18                   addq    $0x18, %rsp
// 1c8: 5b                            popq    %rbx
// 1c9: 41 5c                         popq    %r12
// 1cb: 41 5d                         popq    %r13
// 1cd: 41 5e                         popq    %r14
// 1cf: 41 5f                         popq    %r15
// 1d1: 5d                            popq    %rbp
// 1d2: ff e0                         jmpq    *%rax
// 1d4: 49 89 c6                      movq    %rax, %r14
// 1d7: 49 29 de                      subq    %rbx, %r14
// 1da: 49 83 c6 b8                   addq    $-0x48, %r14
// 1de: 49 c1 ee 03                   shrq    $0x3, %r14
// 1e2: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1e6: 31 c0                         xorl    %eax, %eax
// 1e8: e9 b0 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 1ed: 
static const unsigned char _CALL_LENplus_SET_IP_code_body[494] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x43, 0x4b, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x89, 0x43, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xb0, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_SET_IP_code_holes[15] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_SET_IP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_SET_IP_data_holes[1];

// _CALL_LENplus_SET_UPDATE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_SET_UPDATE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4a 83 3c eb 00                cmpq    $0x0, (%rbx,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4a 8b 2c e3                   movq    (%rbx,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 4c 29 f3                      subq    %r14, %rbx
// 78: 48 83 c3 b8                   addq    $-0x48, %rbx
// 7c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 80: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 84: 49 8b 06                      movq    (%r14), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 48 8b 3c cb                   movq    (%rbx,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 9c 01 00 00             js      0x266 <_JIT_ENTRY+0x266>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 188: 48 85 d2                      testq   %rdx, %rdx
// 18b: 0f 84 cb 00 00 00             je      0x25c <_JIT_ENTRY+0x25c>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a3: 29 c1                         subl    %eax, %ecx
// 1a5: 48 63 c9                      movslq  %ecx, %rcx
// 1a8: 48 89 14 cb                   movq    %rdx, (%rbx,%rcx,8)
// 1ac: f7 d0                         notl    %eax
// 1ae: 48 63 e8                      movslq  %eax, %rbp
// 1b1: 4c 8b 64 eb f8                movq    -0x8(%rbx,%rbp,8), %r12
// 1b6: 48 8d 44 2d 00                leaq    (%rbp,%rbp), %rax
// 1bb: 48 8b 3c c3                   movq    (%rbx,%rax,8), %rdi
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _PySet_Update
// 1c9: 4c 89 e6                      movq    %r12, %rsi
// 1cc: ff d0                         callq   *%rax
// 1ce: 89 44 24 08                   movl    %eax, 0x8(%rsp)
// 1d2: 49 8b 04 24                   movq    (%r12), %rax
// 1d6: 48 85 c0                      testq   %rax, %rax
// 1d9: 7f 22                         jg      0x1fd <_JIT_ENTRY+0x1fd>
// 1db: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001dd:  R_X86_64_64  .rodata.str1.1
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_NegativeRefcount
// 1ef: be 53 05 00 00                movl    $0x553, %esi            # imm = 0x553
// 1f4: 4c 89 e2                      movq    %r12, %rdx
// 1f7: ff d0                         callq   *%rax
// 1f9: 49 8b 04 24                   movq    (%r12), %rax
// 1fd: 4e 8d 2c eb                   leaq    (%rbx,%r13,8), %r13
// 201: 48 8d 1c eb                   leaq    (%rbx,%rbp,8), %rbx
// 205: 48 83 c3 f8                   addq    $-0x8, %rbx
// 209: 85 c0                         testl   %eax, %eax
// 20b: 78 21                         js      0x22e <_JIT_ENTRY+0x22e>
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 217: ff d0                         callq   *%rax
// 219: 49 ff 0c 24                   decq    (%r12)
// 21d: 75 0f                         jne     0x22e <_JIT_ENTRY+0x22e>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_Dealloc
// 229: 4c 89 e7                      movq    %r12, %rdi
// 22c: ff d0                         callq   *%rax
// 22e: 83 7c 24 08 00                cmpl    $0x0, 0x8(%rsp)
// 233: 49 0f 48 dd                   cmovsq  %r13, %rbx
// 237: 78 29                         js      0x262 <_JIT_ENTRY+0x262>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_CONTINUE
// 243: 4c 89 f7                      movq    %r14, %rdi
// 246: 48 89 de                      movq    %rbx, %rsi
// 249: 4c 89 fa                      movq    %r15, %rdx
// 24c: 48 83 c4 18                   addq    $0x18, %rsp
// 250: 5b                            popq    %rbx
// 251: 41 5c                         popq    %r12
// 253: 41 5d                         popq    %r13
// 255: 41 5e                         popq    %r14
// 257: 41 5f                         popq    %r15
// 259: 5d                            popq    %rbp
// 25a: ff e0                         jmpq    *%rax
// 25c: 4a 8d 1c e3                   leaq    (%rbx,%r12,8), %rbx
// 260: eb 04                         jmp     0x266 <_JIT_ENTRY+0x266>
// 262: 48 83 c3 f8                   addq    $-0x8, %rbx
// 266: 4c 29 f3                      subq    %r14, %rbx
// 269: 48 83 c3 b8                   addq    $-0x48, %rbx
// 26d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 271: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 275: 31 c0                         xorl    %eax, %eax
// 277: e9 21 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 27c: 
static const unsigned char _CALL_LENplus_SET_UPDATE_code_body[637] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4a, 0x83, 0x3c, 0xeb, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4a, 0x8b, 0x2c, 0xe3, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x8b, 0x3c, 0xcb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x9c, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xcb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x48, 0x89, 0x14, 0xcb, 0xf7, 0xd0, 0x48, 0x63, 0xe8, 0x4c, 0x8b, 0x64, 0xeb, 0xf8, 0x48, 0x8d, 0x44, 0x2d, 0x00, 0x48, 0x8b, 0x3c, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x53, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4e, 0x8d, 0x2c, 0xeb, 0x48, 0x8d, 0x1c, 0xeb, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x49, 0x0f, 0x48, 0xdd, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4a, 0x8d, 0x1c, 0xe3, 0xeb, 0x04, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x21, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_SET_UPDATE_code_holes[20] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySet_Update, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_SET_UPDATE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_SET_UPDATE_data_holes[1];

// _CALL_LENplus_STORE_ATTR
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_STORE_ATTR.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 f6                      movslq  %esi, %r14
// 65: 4b 8b 2c f7                   movq    (%r15,%r14,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 df                      subq    %rbx, %r15
// 79: 49 83 c7 b8                   addq    $-0x48, %r15
// 7d: 49 c1 ef 03                   shrq    $0x3, %r15
// 81: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// b2: 4d 8b 24 cf                   movq    (%r15,%rcx,8), %r12
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 d5 01 00 00             js      0x2a3 <_JIT_ENTRY+0x2a3>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 04 24                   movq    (%r12), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 e2                      movq    %r12, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 04 24                   movq    (%r12), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 21                         js      0x182 <_JIT_ENTRY+0x182>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 0c 24                   decq    (%r12)
// 171: 75 0f                         jne     0x182 <_JIT_ENTRY+0x182>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: ff d0                         callq   *%rax
// 182: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 187: 48 85 f6                      testq   %rsi, %rsi
// 18a: 0f 84 0f 01 00 00             je      0x29f <_JIT_ENTRY+0x29f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _JIT_OPARG
// 19a: 0f b7 c8                      movzwl  %ax, %ecx
// 19d: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1a2: 29 ca                         subl    %ecx, %edx
// 1a4: 48 63 d2                      movslq  %edx, %rdx
// 1a7: 49 89 34 d7                   movq    %rsi, (%r15,%rdx,8)
// 1ab: f7 d1                         notl    %ecx
// 1ad: 4c 63 f1                      movslq  %ecx, %r14
// 1b0: 4b 8b 6c f7 f0                movq    -0x10(%r15,%r14,8), %rbp
// 1b5: 4f 8b 64 f7 f8                movq    -0x8(%r15,%r14,8), %r12
// 1ba: 48 8b 0b                      movq    (%rbx), %rcx
// 1bd: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 1c1: 0f b7 c0                      movzwl  %ax, %eax
// 1c4: 48 8b 74 c1 18                movq    0x18(%rcx,%rax,8), %rsi
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  PyObject_SetAttr
// 1d3: 4c 89 e7                      movq    %r12, %rdi
// 1d6: 48 89 ea                      movq    %rbp, %rdx
// 1d9: ff d0                         callq   *%rax
// 1db: 89 44 24 08                   movl    %eax, 0x8(%rsp)
// 1df: 48 8b 45 00                   movq    (%rbp), %rax
// 1e3: 48 85 c0                      testq   %rax, %rax
// 1e6: 7f 22                         jg      0x20a <_JIT_ENTRY+0x20a>
// 1e8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ea:  R_X86_64_64  .rodata.str1.1
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: be c5 03 00 00                movl    $0x3c5, %esi            # imm = 0x3C5
// 201: 48 89 ea                      movq    %rbp, %rdx
// 204: ff d0                         callq   *%rax
// 206: 48 8b 45 00                   movq    (%rbp), %rax
// 20a: 85 c0                         testl   %eax, %eax
// 20c: 78 21                         js      0x22f <_JIT_ENTRY+0x22f>
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 218: ff d0                         callq   *%rax
// 21a: 48 ff 4d 00                   decq    (%rbp)
// 21e: 75 0f                         jne     0x22f <_JIT_ENTRY+0x22f>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_Dealloc
// 22a: 48 89 ef                      movq    %rbp, %rdi
// 22d: ff d0                         callq   *%rax
// 22f: 49 8b 04 24                   movq    (%r12), %rax
// 233: 48 85 c0                      testq   %rax, %rax
// 236: 7f 22                         jg      0x25a <_JIT_ENTRY+0x25a>
// 238: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023a:  R_X86_64_64  .rodata.str1.1
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _Py_NegativeRefcount
// 24c: be c6 03 00 00                movl    $0x3c6, %esi            # imm = 0x3C6
// 251: 4c 89 e2                      movq    %r12, %rdx
// 254: ff d0                         callq   *%rax
// 256: 49 8b 04 24                   movq    (%r12), %rax
// 25a: 4f 8d 2c ef                   leaq    (%r15,%r13,8), %r13
// 25e: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 262: 49 83 c6 f0                   addq    $-0x10, %r14
// 266: 85 c0                         testl   %eax, %eax
// 268: 78 21                         js      0x28b <_JIT_ENTRY+0x28b>
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 274: ff d0                         callq   *%rax
// 276: 49 ff 0c 24                   decq    (%r12)
// 27a: 75 0f                         jne     0x28b <_JIT_ENTRY+0x28b>
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_Dealloc
// 286: 4c 89 e7                      movq    %r12, %rdi
// 289: ff d0                         callq   *%rax
// 28b: 83 7c 24 08 00                cmpl    $0x0, 0x8(%rsp)
// 290: 4d 0f 44 ee                   cmoveq  %r14, %r13
// 294: 74 23                         je      0x2b9 <_JIT_ENTRY+0x2b9>
// 296: 49 83 c5 f0                   addq    $-0x10, %r13
// 29a: 4d 89 ef                      movq    %r13, %r15
// 29d: eb 04                         jmp     0x2a3 <_JIT_ENTRY+0x2a3>
// 29f: 4f 8d 3c f7                   leaq    (%r15,%r14,8), %r15
// 2a3: 49 29 df                      subq    %rbx, %r15
// 2a6: 49 83 c7 b8                   addq    $-0x48, %r15
// 2aa: 49 c1 ef 03                   shrq    $0x3, %r15
// 2ae: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2b2: 31 c0                         xorl    %eax, %eax
// 2b4: e9 e5 fd ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _JIT_CONTINUE
// 2c3: 48 89 df                      movq    %rbx, %rdi
// 2c6: 4c 89 ee                      movq    %r13, %rsi
// 2c9: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2ce: 48 83 c4 18                   addq    $0x18, %rsp
// 2d2: 5b                            popq    %rbx
// 2d3: 41 5c                         popq    %r12
// 2d5: 41 5d                         popq    %r13
// 2d7: 41 5e                         popq    %r14
// 2d9: 41 5f                         popq    %r15
// 2db: 5d                            popq    %rbp
// 2dc: ff e0                         jmpq    *%rax
// 2de: 
static const unsigned char _CALL_LENplus_STORE_ATTR_code_body[735] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xf6, 0x4b, 0x8b, 0x2c, 0xf7, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x24, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xd5, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x0f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd7, 0xf7, 0xd1, 0x4c, 0x63, 0xf1, 0x4b, 0x8b, 0x6c, 0xf7, 0xf0, 0x4f, 0x8b, 0x64, 0xf7, 0xf8, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x49, 0x20, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x74, 0xc1, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x03, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc6, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x2c, 0xef, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x4d, 0x0f, 0x44, 0xee, 0x74, 0x23, 0x49, 0x83, 0xc5, 0xf0, 0x4d, 0x89, 0xef, 0xeb, 0x04, 0x4f, 0x8d, 0x3c, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xe5, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_STORE_ATTR_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetAttr, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_STORE_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_STORE_ATTR_data_holes[1];

// _CALL_LENplus_STORE_ATTR_INSTANCE_VALUE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_STORE_ATTR_INSTANCE_VALUE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 61 01 00 00             js      0x228 <_JIT_ENTRY+0x228>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 9d 00 00 00             je      0x224 <_JIT_ENTRY+0x224>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a2: f7 d0                         notl    %eax
// 1a4: 48 63 e8                      movslq  %eax, %rbp
// 1a7: 49 8b 4c ee f0                movq    -0x10(%r14,%rbp,8), %rcx
// 1ac: 4d 8b 64 ee f8                movq    -0x8(%r14,%rbp,8), %r12
// 1b1: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 1b6: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001b8:  R_X86_64_64  _JIT_OPERAND
// 1c0: 0f b7 d2                      movzwl  %dx, %edx
// 1c3: 4c 8b 6c d0 01                movq    0x1(%rax,%rdx,8), %r13
// 1c8: 48 89 4c d0 01                movq    %rcx, 0x1(%rax,%rdx,8)
// 1cd: 4d 85 ed                      testq   %r13, %r13
// 1d0: 74 6c                         je      0x23e <_JIT_ENTRY+0x23e>
// 1d2: 49 8b 45 00                   movq    (%r13), %rax
// 1d6: 48 85 c0                      testq   %rax, %rax
// 1d9: 7f 22                         jg      0x1fd <_JIT_ENTRY+0x1fd>
// 1db: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001dd:  R_X86_64_64  .rodata.str1.1
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_NegativeRefcount
// 1ef: be 16 07 00 00                movl    $0x716, %esi            # imm = 0x716
// 1f4: 4c 89 ea                      movq    %r13, %rdx
// 1f7: ff d0                         callq   *%rax
// 1f9: 49 8b 45 00                   movq    (%r13), %rax
// 1fd: 85 c0                         testl   %eax, %eax
// 1ff: 78 59                         js      0x25a <_JIT_ENTRY+0x25a>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20b: ff d0                         callq   *%rax
// 20d: 49 ff 4d 00                   decq    (%r13)
// 211: 75 47                         jne     0x25a <_JIT_ENTRY+0x25a>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_Dealloc
// 21d: 4c 89 ef                      movq    %r13, %rdi
// 220: ff d0                         callq   *%rax
// 222: eb 36                         jmp     0x25a <_JIT_ENTRY+0x25a>
// 224: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 228: 49 29 de                      subq    %rbx, %r14
// 22b: 49 83 c6 b8                   addq    $-0x48, %r14
// 22f: 49 c1 ee 03                   shrq    $0x3, %r14
// 233: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 237: 31 c0                         xorl    %eax, %eax
// 239: e9 5e fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 23e: 0f b6 48 ff                   movzbl  -0x1(%rax), %ecx
// 242: 8d 51 01                      leal    0x1(%rcx), %edx
// 245: 48 f7 d1                      notq    %rcx
// 248: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000024a:  R_X86_64_64  _JIT_OPERAND
// 252: 40 88 74 08 ff                movb    %sil, -0x1(%rax,%rcx)
// 257: 88 50 ff                      movb    %dl, -0x1(%rax)
// 25a: 49 8b 04 24                   movq    (%r12), %rax
// 25e: 48 85 c0                      testq   %rax, %rax
// 261: 7f 22                         jg      0x285 <_JIT_ENTRY+0x285>
// 263: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000265:  R_X86_64_64  .rodata.str1.1
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _Py_NegativeRefcount
// 277: be 18 07 00 00                movl    $0x718, %esi            # imm = 0x718
// 27c: 4c 89 e2                      movq    %r12, %rdx
// 27f: ff d0                         callq   *%rax
// 281: 49 8b 04 24                   movq    (%r12), %rax
// 285: 4d 8d 34 ee                   leaq    (%r14,%rbp,8), %r14
// 289: 49 83 c6 f0                   addq    $-0x10, %r14
// 28d: 85 c0                         testl   %eax, %eax
// 28f: 78 21                         js      0x2b2 <_JIT_ENTRY+0x2b2>
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 29b: ff d0                         callq   *%rax
// 29d: 49 ff 0c 24                   decq    (%r12)
// 2a1: 75 0f                         jne     0x2b2 <_JIT_ENTRY+0x2b2>
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _Py_Dealloc
// 2ad: 4c 89 e7                      movq    %r12, %rdi
// 2b0: ff d0                         callq   *%rax
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _JIT_CONTINUE
// 2bc: 48 89 df                      movq    %rbx, %rdi
// 2bf: 4c 89 f6                      movq    %r14, %rsi
// 2c2: 4c 89 fa                      movq    %r15, %rdx
// 2c5: 48 83 c4 08                   addq    $0x8, %rsp
// 2c9: 5b                            popq    %rbx
// 2ca: 41 5c                         popq    %r12
// 2cc: 41 5d                         popq    %r13
// 2ce: 41 5e                         popq    %r14
// 2d0: 41 5f                         popq    %r15
// 2d2: 5d                            popq    %rbp
// 2d3: ff e0                         jmpq    *%rax
// 2d5: 
static const unsigned char _CALL_LENplus_STORE_ATTR_INSTANCE_VALUE_code_body[726] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x61, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x63, 0xe8, 0x49, 0x8b, 0x4c, 0xee, 0xf0, 0x4d, 0x8b, 0x64, 0xee, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x4c, 0x8b, 0x6c, 0xd0, 0x01, 0x48, 0x89, 0x4c, 0xd0, 0x01, 0x4d, 0x85, 0xed, 0x74, 0x6c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x59, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x47, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x36, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x5e, 0xfe, 0xff, 0xff, 0x0f, 0xb6, 0x48, 0xff, 0x8d, 0x51, 0x01, 0x48, 0xf7, 0xd1, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x88, 0x74, 0x08, 0xff, 0x88, 0x50, 0xff, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_STORE_ATTR_INSTANCE_VALUE_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_STORE_ATTR_INSTANCE_VALUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_STORE_ATTR_INSTANCE_VALUE_data_holes[1];

// _CALL_LENplus_STORE_ATTR_SLOT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_STORE_ATTR_SLOT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 67: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 de                      subq    %rbx, %r14
// 77: 49 83 c6 b8                   addq    $-0x48, %r14
// 7b: 49 c1 ee 03                   shrq    $0x3, %r14
// 7f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 d3 01 00 00             js      0x29a <_JIT_ENTRY+0x29a>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 14 24                   movq    (%rsp), %rdx
// 17e: 48 85 d2                      testq   %rdx, %rdx
// 181: 0f 84 0f 01 00 00             je      0x296 <_JIT_ENTRY+0x296>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c9                      movslq  %ecx, %rcx
// 19e: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a2: f7 d0                         notl    %eax
// 1a4: 48 63 e8                      movslq  %eax, %rbp
// 1a7: 49 8b 44 ee f0                movq    -0x10(%r14,%rbp,8), %rax
// 1ac: 4d 8b 64 ee f8                movq    -0x8(%r14,%rbp,8), %r12
// 1b1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b3:  R_X86_64_64  _JIT_OPERAND
// 1bb: 0f b7 c9                      movzwl  %cx, %ecx
// 1be: 4d 8b 2c 0c                   movq    (%r12,%rcx), %r13
// 1c2: 49 89 04 0c                   movq    %rax, (%r12,%rcx)
// 1c6: 4d 85 ed                      testq   %r13, %r13
// 1c9: 74 50                         je      0x21b <_JIT_ENTRY+0x21b>
// 1cb: 49 8b 45 00                   movq    (%r13), %rax
// 1cf: 48 85 c0                      testq   %rax, %rax
// 1d2: 7f 22                         jg      0x1f6 <_JIT_ENTRY+0x1f6>
// 1d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d6:  R_X86_64_64  .rodata.str1.1+0x39
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _Py_NegativeRefcount
// 1e8: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 1ed: 4c 89 ea                      movq    %r13, %rdx
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 8b 45 00                   movq    (%r13), %rax
// 1f6: 85 c0                         testl   %eax, %eax
// 1f8: 78 21                         js      0x21b <_JIT_ENTRY+0x21b>
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 204: ff d0                         callq   *%rax
// 206: 49 ff 4d 00                   decq    (%r13)
// 20a: 75 0f                         jne     0x21b <_JIT_ENTRY+0x21b>
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_Dealloc
// 216: 4c 89 ef                      movq    %r13, %rdi
// 219: ff d0                         callq   *%rax
// 21b: 49 8b 04 24                   movq    (%r12), %rax
// 21f: 48 85 c0                      testq   %rax, %rax
// 222: 7f 22                         jg      0x246 <_JIT_ENTRY+0x246>
// 224: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000226:  R_X86_64_64  .rodata.str1.1
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _Py_NegativeRefcount
// 238: be 2a 07 00 00                movl    $0x72a, %esi            # imm = 0x72A
// 23d: 4c 89 e2                      movq    %r12, %rdx
// 240: ff d0                         callq   *%rax
// 242: 49 8b 04 24                   movq    (%r12), %rax
// 246: 4d 8d 34 ee                   leaq    (%r14,%rbp,8), %r14
// 24a: 49 83 c6 f0                   addq    $-0x10, %r14
// 24e: 85 c0                         testl   %eax, %eax
// 250: 78 21                         js      0x273 <_JIT_ENTRY+0x273>
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25c: ff d0                         callq   *%rax
// 25e: 49 ff 0c 24                   decq    (%r12)
// 262: 75 0f                         jne     0x273 <_JIT_ENTRY+0x273>
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_Dealloc
// 26e: 4c 89 e7                      movq    %r12, %rdi
// 271: ff d0                         callq   *%rax
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _JIT_CONTINUE
// 27d: 48 89 df                      movq    %rbx, %rdi
// 280: 4c 89 f6                      movq    %r14, %rsi
// 283: 4c 89 fa                      movq    %r15, %rdx
// 286: 48 83 c4 08                   addq    $0x8, %rsp
// 28a: 5b                            popq    %rbx
// 28b: 41 5c                         popq    %r12
// 28d: 41 5d                         popq    %r13
// 28f: 41 5e                         popq    %r14
// 291: 41 5f                         popq    %r15
// 293: 5d                            popq    %rbp
// 294: ff e0                         jmpq    *%rax
// 296: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 29a: 49 29 de                      subq    %rbx, %r14
// 29d: 49 83 c6 b8                   addq    $-0x48, %r14
// 2a1: 49 c1 ee 03                   shrq    $0x3, %r14
// 2a5: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2a9: 31 c0                         xorl    %eax, %eax
// 2ab: e9 ec fd ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 2b0: 
static const unsigned char _CALL_LENplus_STORE_ATTR_SLOT_code_body[689] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xd3, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x0f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x63, 0xe8, 0x49, 0x8b, 0x44, 0xee, 0xf0, 0x4d, 0x8b, 0x64, 0xee, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4d, 0x8b, 0x2c, 0x0c, 0x49, 0x89, 0x04, 0x0c, 0x4d, 0x85, 0xed, 0x74, 0x50, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x2a, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xec, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_STORE_ATTR_SLOT_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_STORE_ATTR_SLOT_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_STORE_ATTR_SLOT_data_holes[1];

// _CALL_LENplus_STORE_DEREF
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_STORE_DEREF.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d6                      movq    %rdx, %r14
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d7 00                cmpq    $0x0, (%r15,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ef                   movq    (%r15,%r13,8), %rbp
// 67: 49 8b 46 10                   movq    0x10(%r14), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 df                      subq    %rbx, %r15
// 77: 49 83 c7 b8                   addq    $-0x48, %r15
// 7b: 49 c1 ef 03                   shrq    $0x3, %r15
// 7f: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 cf                   movq    (%r15,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 73 01 00 00             js      0x23a <_JIT_ENTRY+0x23a>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 34 24                   movq    (%rsp), %rsi
// 17e: 48 85 f6                      testq   %rsi, %rsi
// 181: 0f 84 af 00 00 00             je      0x236 <_JIT_ENTRY+0x236>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c8                      movzwl  %ax, %ecx
// 194: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 199: 29 ca                         subl    %ecx, %edx
// 19b: 48 63 d2                      movslq  %edx, %rdx
// 19e: 49 89 34 d7                   movq    %rsi, (%r15,%rdx,8)
// 1a2: f7 d1                         notl    %ecx
// 1a4: 48 63 c9                      movslq  %ecx, %rcx
// 1a7: 4d 8d 64 cf f8                leaq    -0x8(%r15,%rcx,8), %r12
// 1ac: 49 8b 4c cf f8                movq    -0x8(%r15,%rcx,8), %rcx
// 1b1: 0f b7 c0                      movzwl  %ax, %eax
// 1b4: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 1b9: 4c 8b 78 10                   movq    0x10(%rax), %r15
// 1bd: 48 89 48 10                   movq    %rcx, 0x10(%rax)
// 1c1: 4d 85 ff                      testq   %r15, %r15
// 1c4: 74 4d                         je      0x213 <_JIT_ENTRY+0x213>
// 1c6: 49 8b 07                      movq    (%r15), %rax
// 1c9: 48 85 c0                      testq   %rax, %rax
// 1cc: 7f 21                         jg      0x1ef <_JIT_ENTRY+0x1ef>
// 1ce: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d0:  R_X86_64_64  .rodata.str1.1+0x39
// 1d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001da:  R_X86_64_64  _Py_NegativeRefcount
// 1e2: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 1e7: 4c 89 fa                      movq    %r15, %rdx
// 1ea: ff d0                         callq   *%rax
// 1ec: 49 8b 07                      movq    (%r15), %rax
// 1ef: 85 c0                         testl   %eax, %eax
// 1f1: 78 20                         js      0x213 <_JIT_ENTRY+0x213>
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fd: ff d0                         callq   *%rax
// 1ff: 49 ff 0f                      decq    (%r15)
// 202: 75 0f                         jne     0x213 <_JIT_ENTRY+0x213>
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _Py_Dealloc
// 20e: 4c 89 ff                      movq    %r15, %rdi
// 211: ff d0                         callq   *%rax
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _JIT_CONTINUE
// 21d: 48 89 df                      movq    %rbx, %rdi
// 220: 4c 89 e6                      movq    %r12, %rsi
// 223: 4c 89 f2                      movq    %r14, %rdx
// 226: 48 83 c4 08                   addq    $0x8, %rsp
// 22a: 5b                            popq    %rbx
// 22b: 41 5c                         popq    %r12
// 22d: 41 5d                         popq    %r13
// 22f: 41 5e                         popq    %r14
// 231: 41 5f                         popq    %r15
// 233: 5d                            popq    %rbp
// 234: ff e0                         jmpq    *%rax
// 236: 4f 8d 3c ef                   leaq    (%r15,%r13,8), %r15
// 23a: 49 29 df                      subq    %rbx, %r15
// 23d: 49 83 c7 b8                   addq    $-0x48, %r15
// 241: 49 c1 ef 03                   shrq    $0x3, %r15
// 245: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 249: 31 c0                         xorl    %eax, %eax
// 24b: e9 4c fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 250: 
static const unsigned char _CALL_LENplus_STORE_DEREF_code_body[593] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd7, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xef, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x73, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd7, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4d, 0x8d, 0x64, 0xcf, 0xf8, 0x49, 0x8b, 0x4c, 0xcf, 0xf8, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x4c, 0x8b, 0x78, 0x10, 0x48, 0x89, 0x48, 0x10, 0x4d, 0x85, 0xff, 0x74, 0x4d, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x3c, 0xef, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x4c, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_STORE_DEREF_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_STORE_DEREF_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_STORE_DEREF_data_holes[1];

// _CALL_LENplus_STORE_FAST
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_STORE_FAST.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d6                      movq    %rdx, %r14
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d7 00                cmpq    $0x0, (%r15,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ef                   movq    (%r15,%r13,8), %rbp
// 67: 49 8b 46 10                   movq    0x10(%r14), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 df                      subq    %rbx, %r15
// 77: 49 83 c7 b8                   addq    $-0x48, %r15
// 7b: 49 c1 ef 03                   shrq    $0x3, %r15
// 7f: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 cf                   movq    (%r15,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 70 01 00 00             js      0x237 <_JIT_ENTRY+0x237>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 34 24                   movq    (%rsp), %rsi
// 17e: 48 85 f6                      testq   %rsi, %rsi
// 181: 0f 84 ac 00 00 00             je      0x233 <_JIT_ENTRY+0x233>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c8                      movzwl  %ax, %ecx
// 194: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 199: 29 ca                         subl    %ecx, %edx
// 19b: 48 63 d2                      movslq  %edx, %rdx
// 19e: 49 89 34 d7                   movq    %rsi, (%r15,%rdx,8)
// 1a2: f7 d1                         notl    %ecx
// 1a4: 48 63 c9                      movslq  %ecx, %rcx
// 1a7: 4d 8d 64 cf f8                leaq    -0x8(%r15,%rcx,8), %r12
// 1ac: 49 8b 4c cf f8                movq    -0x8(%r15,%rcx,8), %rcx
// 1b1: 0f b7 c0                      movzwl  %ax, %eax
// 1b4: 4c 8b 7c c3 48                movq    0x48(%rbx,%rax,8), %r15
// 1b9: 48 89 4c c3 48                movq    %rcx, 0x48(%rbx,%rax,8)
// 1be: 4d 85 ff                      testq   %r15, %r15
// 1c1: 74 4d                         je      0x210 <_JIT_ENTRY+0x210>
// 1c3: 49 8b 07                      movq    (%r15), %rax
// 1c6: 48 85 c0                      testq   %rax, %rax
// 1c9: 7f 21                         jg      0x1ec <_JIT_ENTRY+0x1ec>
// 1cb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001cd:  R_X86_64_64  .rodata.str1.1+0x39
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_NegativeRefcount
// 1df: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 1e4: 4c 89 fa                      movq    %r15, %rdx
// 1e7: ff d0                         callq   *%rax
// 1e9: 49 8b 07                      movq    (%r15), %rax
// 1ec: 85 c0                         testl   %eax, %eax
// 1ee: 78 20                         js      0x210 <_JIT_ENTRY+0x210>
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fa: ff d0                         callq   *%rax
// 1fc: 49 ff 0f                      decq    (%r15)
// 1ff: 75 0f                         jne     0x210 <_JIT_ENTRY+0x210>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_Dealloc
// 20b: 4c 89 ff                      movq    %r15, %rdi
// 20e: ff d0                         callq   *%rax
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _JIT_CONTINUE
// 21a: 48 89 df                      movq    %rbx, %rdi
// 21d: 4c 89 e6                      movq    %r12, %rsi
// 220: 4c 89 f2                      movq    %r14, %rdx
// 223: 48 83 c4 08                   addq    $0x8, %rsp
// 227: 5b                            popq    %rbx
// 228: 41 5c                         popq    %r12
// 22a: 41 5d                         popq    %r13
// 22c: 41 5e                         popq    %r14
// 22e: 41 5f                         popq    %r15
// 230: 5d                            popq    %rbp
// 231: ff e0                         jmpq    *%rax
// 233: 4f 8d 3c ef                   leaq    (%r15,%r13,8), %r15
// 237: 49 29 df                      subq    %rbx, %r15
// 23a: 49 83 c7 b8                   addq    $-0x48, %r15
// 23e: 49 c1 ef 03                   shrq    $0x3, %r15
// 242: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 246: 31 c0                         xorl    %eax, %eax
// 248: e9 4f fe ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 24d: 
static const unsigned char _CALL_LENplus_STORE_FAST_code_body[590] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd7, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xef, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x70, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd7, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4d, 0x8d, 0x64, 0xcf, 0xf8, 0x49, 0x8b, 0x4c, 0xcf, 0xf8, 0x0f, 0xb7, 0xc0, 0x4c, 0x8b, 0x7c, 0xc3, 0x48, 0x48, 0x89, 0x4c, 0xc3, 0x48, 0x4d, 0x85, 0xff, 0x74, 0x4d, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x3c, 0xef, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x4f, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_STORE_FAST_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_STORE_FAST_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_STORE_FAST_data_holes[1];

// _CALL_LENplus_STORE_GLOBAL
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_STORE_GLOBAL.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e7                   movq    (%r15,%r12,8), %rbp
// 68: 49 8b 46 10                   movq    0x10(%r14), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 df                      subq    %rbx, %r15
// 78: 49 83 c7 b8                   addq    $-0x48, %r15
// 7c: 49 c1 ef 03                   shrq    $0x3, %r15
// 80: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c cf                   movq    (%r15,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 86 01 00 00             js      0x250 <_JIT_ENTRY+0x250>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 188: 48 85 f6                      testq   %rsi, %rsi
// 18b: 0f 84 bb 00 00 00             je      0x24c <_JIT_ENTRY+0x24c>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1a3: 29 ca                         subl    %ecx, %edx
// 1a5: 48 63 d2                      movslq  %edx, %rdx
// 1a8: 49 89 34 d7                   movq    %rsi, (%r15,%rdx,8)
// 1ac: f7 d1                         notl    %ecx
// 1ae: 48 63 e9                      movslq  %ecx, %rbp
// 1b1: 4d 8b 64 ef f8                movq    -0x8(%r15,%rbp,8), %r12
// 1b6: 48 8b 0b                      movq    (%rbx), %rcx
// 1b9: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 1bd: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 1c1: 0f b7 c0                      movzwl  %ax, %eax
// 1c4: 48 8b 74 c1 18                movq    0x18(%rcx,%rax,8), %rsi
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  PyDict_SetItem
// 1d3: 4c 89 e2                      movq    %r12, %rdx
// 1d6: ff d0                         callq   *%rax
// 1d8: 89 44 24 08                   movl    %eax, 0x8(%rsp)
// 1dc: 49 8b 04 24                   movq    (%r12), %rax
// 1e0: 48 85 c0                      testq   %rax, %rax
// 1e3: 7f 22                         jg      0x207 <_JIT_ENTRY+0x207>
// 1e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e7:  R_X86_64_64  .rodata.str1.1
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  _Py_NegativeRefcount
// 1f9: be de 03 00 00                movl    $0x3de, %esi            # imm = 0x3DE
// 1fe: 4c 89 e2                      movq    %r12, %rdx
// 201: ff d0                         callq   *%rax
// 203: 49 8b 04 24                   movq    (%r12), %rax
// 207: 4f 8d 2c ef                   leaq    (%r15,%r13,8), %r13
// 20b: 4d 8d 3c ef                   leaq    (%r15,%rbp,8), %r15
// 20f: 49 83 c7 f8                   addq    $-0x8, %r15
// 213: 85 c0                         testl   %eax, %eax
// 215: 78 21                         js      0x238 <_JIT_ENTRY+0x238>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 221: ff d0                         callq   *%rax
// 223: 49 ff 0c 24                   decq    (%r12)
// 227: 75 0f                         jne     0x238 <_JIT_ENTRY+0x238>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_Dealloc
// 233: 4c 89 e7                      movq    %r12, %rdi
// 236: ff d0                         callq   *%rax
// 238: 83 7c 24 08 00                cmpl    $0x0, 0x8(%rsp)
// 23d: 4d 0f 44 ef                   cmoveq  %r15, %r13
// 241: 74 23                         je      0x266 <_JIT_ENTRY+0x266>
// 243: 49 83 c5 f8                   addq    $-0x8, %r13
// 247: 4d 89 ef                      movq    %r13, %r15
// 24a: eb 04                         jmp     0x250 <_JIT_ENTRY+0x250>
// 24c: 4f 8d 3c e7                   leaq    (%r15,%r12,8), %r15
// 250: 49 29 df                      subq    %rbx, %r15
// 253: 49 83 c7 b8                   addq    $-0x48, %r15
// 257: 49 c1 ef 03                   shrq    $0x3, %r15
// 25b: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 25f: 31 c0                         xorl    %eax, %eax
// 261: e9 37 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _JIT_CONTINUE
// 270: 48 89 df                      movq    %rbx, %rdi
// 273: 4c 89 ee                      movq    %r13, %rsi
// 276: 4c 89 f2                      movq    %r14, %rdx
// 279: 48 83 c4 18                   addq    $0x18, %rsp
// 27d: 5b                            popq    %rbx
// 27e: 41 5c                         popq    %r12
// 280: 41 5d                         popq    %r13
// 282: 41 5e                         popq    %r14
// 284: 41 5f                         popq    %r15
// 286: 5d                            popq    %rbp
// 287: ff e0                         jmpq    *%rax
// 289: 
static const unsigned char _CALL_LENplus_STORE_GLOBAL_code_body[650] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe7, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x86, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xbb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd7, 0xf7, 0xd1, 0x48, 0x63, 0xe9, 0x4d, 0x8b, 0x64, 0xef, 0xf8, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x49, 0x20, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x74, 0xc1, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xde, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x2c, 0xef, 0x4d, 0x8d, 0x3c, 0xef, 0x49, 0x83, 0xc7, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x4d, 0x0f, 0x44, 0xef, 0x74, 0x23, 0x49, 0x83, 0xc5, 0xf8, 0x4d, 0x89, 0xef, 0xeb, 0x04, 0x4f, 0x8d, 0x3c, 0xe7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x37, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_STORE_GLOBAL_code_holes[20] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_STORE_GLOBAL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_STORE_GLOBAL_data_holes[1];

// _CALL_LENplus_STORE_NAME
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_STORE_NAME.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d6                      movq    %rdx, %r14
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c2                         movl    %eax, %edx
// 23: f7 d2                         notl    %edx
// 25: 48 63 d2                      movslq  %edx, %rdx
// 28: 31 f6                         xorl    %esi, %esi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c6                   sete    %sil
// 31: 31 ff                         xorl    %edi, %edi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c7                   sete    %dil
// 3b: 0f b7 c9                      movzwl  %cx, %ecx
// 3e: 49 89 c8                      movq    %rcx, %r8
// 41: 49 f7 d8                      negq    %r8
// 44: 49 83 3c d7 00                cmpq    $0x0, (%r15,%rdx,8)
// 49: 0f 44 f7                      cmovel  %edi, %esi
// 4c: 48 f7 d1                      notq    %rcx
// 4f: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 53: 40 80 fe 01                   cmpb    $0x1, %sil
// 57: 75 1b                         jne     0x74 <_JIT_ENTRY+0x74>
// 59: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5e: 29 c2                         subl    %eax, %edx
// 60: 4c 63 ea                      movslq  %edx, %r13
// 63: 4b 8b 2c ef                   movq    (%r15,%r13,8), %rbp
// 67: 49 8b 46 10                   movq    0x10(%r14), %rax
// 6b: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 72: 74 37                         je      0xab <_JIT_ENTRY+0xab>
// 74: 49 29 df                      subq    %rbx, %r15
// 77: 49 83 c7 b8                   addq    $-0x48, %r15
// 7b: 49 c1 ef 03                   shrq    $0x3, %r15
// 7f: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 83: 48 8b 03                      movq    (%rbx), %rax
// 86: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000088:  R_X86_64_64  _JIT_TARGET
// 90: 89 c9                         movl    %ecx, %ecx
// 92: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 96: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9c: 48 83 c4 08                   addq    $0x8, %rsp
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5d                         popq    %r13
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: 5d                            popq    %rbp
// aa: c3                            retq
// ab: 4d 8b 24 cf                   movq    (%r15,%rcx,8), %r12
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  PyObject_Size
// b9: 4c 89 e7                      movq    %r12, %rdi
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 0f 88 21 01 00 00             js      0x1e8 <_JIT_ENTRY+0x1e8>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  PyLong_FromSsize_t
// d1: 48 89 c7                      movq    %rax, %rdi
// d4: ff d1                         callq   *%rcx
// d6: 48 89 04 24                   movq    %rax, (%rsp)
// da: 48 8b 45 00                   movq    (%rbp), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7f 22                         jg      0x105 <_JIT_ENTRY+0x105>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// fc: 48 89 ea                      movq    %rbp, %rdx
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 48 ff 4d 00                   decq    (%rbp)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 48 89 ef                      movq    %rbp, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7f 22                         jg      0x155 <_JIT_ENTRY+0x155>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 21                         js      0x17a <_JIT_ENTRY+0x17a>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 49 ff 0c 24                   decq    (%r12)
// 169: 75 0f                         jne     0x17a <_JIT_ENTRY+0x17a>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 48 8b 34 24                   movq    (%rsp), %rsi
// 17e: 48 85 f6                      testq   %rsi, %rsi
// 181: 74 6d                         je      0x1f0 <_JIT_ENTRY+0x1f0>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _JIT_OPARG
// 18d: 0f b7 c8                      movzwl  %ax, %ecx
// 190: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 195: 29 ca                         subl    %ecx, %edx
// 197: 48 63 d2                      movslq  %edx, %rdx
// 19a: 49 89 34 d7                   movq    %rsi, (%r15,%rdx,8)
// 19e: f7 d1                         notl    %ecx
// 1a0: 48 63 c9                      movslq  %ecx, %rcx
// 1a3: 4d 8d 64 cf f8                leaq    -0x8(%r15,%rcx,8), %r12
// 1a8: 4d 8b 7c cf f8                movq    -0x8(%r15,%rcx,8), %r15
// 1ad: 48 8b 0b                      movq    (%rbx), %rcx
// 1b0: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 1b4: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 1b8: 0f b7 c0                      movzwl  %ax, %eax
// 1bb: 48 8b 4c c1 18                movq    0x18(%rcx,%rax,8), %rcx
// 1c0: 48 85 ff                      testq   %rdi, %rdi
// 1c3: 74 34                         je      0x1f9 <_JIT_ENTRY+0x1f9>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  PyDict_Type
// 1cf: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 1d3: 0f 84 9c 00 00 00             je      0x275 <_JIT_ENTRY+0x275>
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  PyObject_SetItem
// 1e3: e9 97 00 00 00                jmp     0x27f <_JIT_ENTRY+0x27f>
// 1e8: 4d 89 fc                      movq    %r15, %r12
// 1eb: e9 ea 00 00 00                jmp     0x2da <_JIT_ENTRY+0x2da>
// 1f0: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 1f4: e9 e1 00 00 00                jmp     0x2da <_JIT_ENTRY+0x2da>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  PyExc_SystemError
// 203: 48 8b 30                      movq    (%rax), %rsi
// 206: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000208:  R_X86_64_64  .rodata.str1.1+0x39
// 210: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000212:  R_X86_64_64  _PyErr_Format
// 21a: 4c 89 f7                      movq    %r14, %rdi
// 21d: 31 c0                         xorl    %eax, %eax
// 21f: 41 ff d0                      callq   *%r8
// 222: 49 8b 07                      movq    (%r15), %rax
// 225: 48 85 c0                      testq   %rax, %rax
// 228: 7f 21                         jg      0x24b <_JIT_ENTRY+0x24b>
// 22a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022c:  R_X86_64_64  .rodata.str1.1
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _Py_NegativeRefcount
// 23e: be 4d 03 00 00                movl    $0x34d, %esi            # imm = 0x34D
// 243: 4c 89 fa                      movq    %r15, %rdx
// 246: ff d0                         callq   *%rax
// 248: 49 8b 07                      movq    (%r15), %rax
// 24b: 85 c0                         testl   %eax, %eax
// 24d: 0f 88 87 00 00 00             js      0x2da <_JIT_ENTRY+0x2da>
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25d: ff d0                         callq   *%rax
// 25f: 49 ff 0f                      decq    (%r15)
// 262: 75 76                         jne     0x2da <_JIT_ENTRY+0x2da>
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_Dealloc
// 26e: 4c 89 ff                      movq    %r15, %rdi
// 271: ff d0                         callq   *%rax
// 273: eb 65                         jmp     0x2da <_JIT_ENTRY+0x2da>
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  PyDict_SetItem
// 27f: 48 89 ce                      movq    %rcx, %rsi
// 282: 4c 89 fa                      movq    %r15, %rdx
// 285: ff d0                         callq   *%rax
// 287: 89 c5                         movl    %eax, %ebp
// 289: 49 8b 07                      movq    (%r15), %rax
// 28c: 48 85 c0                      testq   %rax, %rax
// 28f: 7f 21                         jg      0x2b2 <_JIT_ENTRY+0x2b2>
// 291: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000293:  R_X86_64_64  .rodata.str1.1
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_NegativeRefcount
// 2a5: be 54 03 00 00                movl    $0x354, %esi            # imm = 0x354
// 2aa: 4c 89 fa                      movq    %r15, %rdx
// 2ad: ff d0                         callq   *%rax
// 2af: 49 8b 07                      movq    (%r15), %rax
// 2b2: 85 c0                         testl   %eax, %eax
// 2b4: 78 20                         js      0x2d6 <_JIT_ENTRY+0x2d6>
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c0: ff d0                         callq   *%rax
// 2c2: 49 ff 0f                      decq    (%r15)
// 2c5: 75 0f                         jne     0x2d6 <_JIT_ENTRY+0x2d6>
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _Py_Dealloc
// 2d1: 4c 89 ff                      movq    %r15, %rdi
// 2d4: ff d0                         callq   *%rax
// 2d6: 85 ed                         testl   %ebp, %ebp
// 2d8: 74 16                         je      0x2f0 <_JIT_ENTRY+0x2f0>
// 2da: 49 29 dc                      subq    %rbx, %r12
// 2dd: 49 83 c4 b8                   addq    $-0x48, %r12
// 2e1: 49 c1 ec 03                   shrq    $0x3, %r12
// 2e5: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2e9: 31 c0                         xorl    %eax, %eax
// 2eb: e9 ac fd ff ff                jmp     0x9c <_JIT_ENTRY+0x9c>
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  _JIT_CONTINUE
// 2fa: 48 89 df                      movq    %rbx, %rdi
// 2fd: 4c 89 e6                      movq    %r12, %rsi
// 300: 4c 89 f2                      movq    %r14, %rdx
// 303: 48 83 c4 08                   addq    $0x8, %rsp
// 307: 5b                            popq    %rbx
// 308: 41 5c                         popq    %r12
// 30a: 41 5d                         popq    %r13
// 30c: 41 5e                         popq    %r14
// 30e: 41 5f                         popq    %r15
// 310: 5d                            popq    %rbp
// 311: ff e0                         jmpq    *%rax
// 313: 
static const unsigned char _CALL_LENplus_STORE_NAME_code_body[788] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0x3c, 0xd7, 0x00, 0x0f, 0x44, 0xf7, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xef, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x24, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x21, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x74, 0x6d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd7, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4d, 0x8d, 0x64, 0xcf, 0xf8, 0x4d, 0x8b, 0x7c, 0xcf, 0xf8, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x8b, 0x49, 0x20, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x4c, 0xc1, 0x18, 0x48, 0x85, 0xff, 0x74, 0x34, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x0f, 0x84, 0x9c, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x97, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xfc, 0xe9, 0xea, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xef, 0xe9, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4d, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0x87, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x76, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x65, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xce, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x74, 0x16, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xac, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_STORE_NAME_code_holes[29] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when storing %R\x00'
// 59: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_STORE_NAME_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_STORE_NAME_data_holes[1];

// _CALL_LENplus_STORE_SLICE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_STORE_SLICE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 f6                      movslq  %esi, %r14
// 65: 4b 8b 2c f7                   movq    (%r15,%r14,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 df                      subq    %rbx, %r15
// 79: 49 83 c7 b8                   addq    $-0x48, %r15
// 7d: 49 c1 ef 03                   shrq    $0x3, %r15
// 81: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 28                   addq    $0x28, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// b2: 4d 8b 24 cf                   movq    (%r15,%rcx,8), %r12
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 85 02 00 00             js      0x353 <_JIT_ENTRY+0x353>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 04 24                   movq    (%r12), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 e2                      movq    %r12, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 04 24                   movq    (%r12), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 21                         js      0x182 <_JIT_ENTRY+0x182>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 0c 24                   decq    (%r12)
// 171: 75 0f                         jne     0x182 <_JIT_ENTRY+0x182>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: ff d0                         callq   *%rax
// 182: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 187: 48 85 d2                      testq   %rdx, %rdx
// 18a: 0f 84 b6 01 00 00             je      0x346 <_JIT_ENTRY+0x346>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _JIT_OPARG
// 19a: 0f b7 c0                      movzwl  %ax, %eax
// 19d: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a2: 29 c1                         subl    %eax, %ecx
// 1a4: 48 63 c9                      movslq  %ecx, %rcx
// 1a7: 49 89 14 cf                   movq    %rdx, (%r15,%rcx,8)
// 1ab: f7 d0                         notl    %eax
// 1ad: 48 98                         cltq
// 1af: 49 8b 74 c7 f8                movq    -0x8(%r15,%rax,8), %rsi
// 1b4: 49 8b 7c c7 f0                movq    -0x10(%r15,%rax,8), %rdi
// 1b9: 49 8b 6c c7 e0                movq    -0x20(%r15,%rax,8), %rbp
// 1be: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1c3: 4d 8b 74 c7 e8                movq    -0x18(%r15,%rax,8), %r14
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 1d2: ff d0                         callq   *%rax
// 1d4: 48 85 c0                      testq   %rax, %rax
// 1d7: 0f 84 8c 01 00 00             je      0x369 <_JIT_ENTRY+0x369>
// 1dd: 49 89 c4                      movq    %rax, %r12
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  PyObject_SetItem
// 1ea: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 1ef: 4c 89 f7                      movq    %r14, %rdi
// 1f2: 4c 89 e6                      movq    %r12, %rsi
// 1f5: 48 89 6c 24 18                movq    %rbp, 0x18(%rsp)
// 1fa: 48 89 ea                      movq    %rbp, %rdx
// 1fd: ff d0                         callq   *%rax
// 1ff: 89 c5                         movl    %eax, %ebp
// 201: 49 8b 04 24                   movq    (%r12), %rax
// 205: 48 85 c0                      testq   %rax, %rax
// 208: 7f 22                         jg      0x22c <_JIT_ENTRY+0x22c>
// 20a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020c:  R_X86_64_64  .rodata.str1.1
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_NegativeRefcount
// 21e: be b2 01 00 00                movl    $0x1b2, %esi            # imm = 0x1B2
// 223: 4c 89 e2                      movq    %r12, %rdx
// 226: ff d0                         callq   *%rax
// 228: 49 8b 04 24                   movq    (%r12), %rax
// 22c: 85 c0                         testl   %eax, %eax
// 22e: 78 21                         js      0x251 <_JIT_ENTRY+0x251>
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23a: ff d0                         callq   *%rax
// 23c: 49 ff 0c 24                   decq    (%r12)
// 240: 75 0f                         jne     0x251 <_JIT_ENTRY+0x251>
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _Py_Dealloc
// 24c: 4c 89 e7                      movq    %r12, %rdi
// 24f: ff d0                         callq   *%rax
// 251: 85 ed                         testl   %ebp, %ebp
// 253: 0f 94 c0                      sete    %al
// 256: 89 44 24 04                   movl    %eax, 0x4(%rsp)
// 25a: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 25f: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 264: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 269: 48 8b 45 00                   movq    (%rbp), %rax
// 26d: 48 85 c0                      testq   %rax, %rax
// 270: 7f 22                         jg      0x294 <_JIT_ENTRY+0x294>
// 272: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000274:  R_X86_64_64  .rodata.str1.1
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_NegativeRefcount
// 286: be b4 01 00 00                movl    $0x1b4, %esi            # imm = 0x1B4
// 28b: 48 89 ea                      movq    %rbp, %rdx
// 28e: ff d0                         callq   *%rax
// 290: 48 8b 45 00                   movq    (%rbp), %rax
// 294: 85 c0                         testl   %eax, %eax
// 296: 78 21                         js      0x2b9 <_JIT_ENTRY+0x2b9>
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a2: ff d0                         callq   *%rax
// 2a4: 48 ff 4d 00                   decq    (%rbp)
// 2a8: 75 0f                         jne     0x2b9 <_JIT_ENTRY+0x2b9>
// 2aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ac:  R_X86_64_64  _Py_Dealloc
// 2b4: 48 89 ef                      movq    %rbp, %rdi
// 2b7: ff d0                         callq   *%rax
// 2b9: 49 8b 06                      movq    (%r14), %rax
// 2bc: 48 85 c0                      testq   %rax, %rax
// 2bf: 7f 21                         jg      0x2e2 <_JIT_ENTRY+0x2e2>
// 2c1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c3:  R_X86_64_64  .rodata.str1.1
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _Py_NegativeRefcount
// 2d5: be b5 01 00 00                movl    $0x1b5, %esi            # imm = 0x1B5
// 2da: 4c 89 f2                      movq    %r14, %rdx
// 2dd: ff d0                         callq   *%rax
// 2df: 49 8b 06                      movq    (%r14), %rax
// 2e2: 4c 89 f5                      movq    %r14, %rbp
// 2e5: 4f 8d 2c ef                   leaq    (%r15,%r13,8), %r13
// 2e9: 4f 8d 34 e7                   leaq    (%r15,%r12,8), %r14
// 2ed: 49 83 c6 e0                   addq    $-0x20, %r14
// 2f1: 85 c0                         testl   %eax, %eax
// 2f3: 78 21                         js      0x316 <_JIT_ENTRY+0x316>
// 2f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ff: ff d0                         callq   *%rax
// 301: 48 ff 4d 00                   decq    (%rbp)
// 305: 75 0f                         jne     0x316 <_JIT_ENTRY+0x316>
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  _Py_Dealloc
// 311: 48 89 ef                      movq    %rbp, %rdi
// 314: ff d0                         callq   *%rax
// 316: 80 7c 24 04 00                cmpb    $0x0, 0x4(%rsp)
// 31b: 4d 0f 45 ee                   cmovneq %r14, %r13
// 31f: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 324: 74 26                         je      0x34c <_JIT_ENTRY+0x34c>
// 326: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000328:  R_X86_64_64  _JIT_CONTINUE
// 330: 48 89 df                      movq    %rbx, %rdi
// 333: 4c 89 ee                      movq    %r13, %rsi
// 336: 48 83 c4 28                   addq    $0x28, %rsp
// 33a: 5b                            popq    %rbx
// 33b: 41 5c                         popq    %r12
// 33d: 41 5d                         popq    %r13
// 33f: 41 5e                         popq    %r14
// 341: 41 5f                         popq    %r15
// 343: 5d                            popq    %rbp
// 344: ff e0                         jmpq    *%rax
// 346: 4f 8d 3c f7                   leaq    (%r15,%r14,8), %r15
// 34a: eb 07                         jmp     0x353 <_JIT_ENTRY+0x353>
// 34c: 49 83 c5 e0                   addq    $-0x20, %r13
// 350: 4d 89 ef                      movq    %r13, %r15
// 353: 49 29 df                      subq    %rbx, %r15
// 356: 49 83 c7 b8                   addq    $-0x48, %r15
// 35a: 49 c1 ef 03                   shrq    $0x3, %r15
// 35e: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 362: 31 c0                         xorl    %eax, %eax
// 364: e9 35 fd ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 369: c7 44 24 04 00 00 00 00       movl    $0x0, 0x4(%rsp)
// 371: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 376: 48 8b 45 00                   movq    (%rbp), %rax
// 37a: 48 85 c0                      testq   %rax, %rax
// 37d: 0f 8f 11 ff ff ff             jg      0x294 <_JIT_ENTRY+0x294>
// 383: e9 ea fe ff ff                jmp     0x272 <_JIT_ENTRY+0x272>
// 388: 
static const unsigned char _CALL_LENplus_STORE_SLICE_code_body[905] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xf6, 0x4b, 0x8b, 0x2c, 0xf7, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4d, 0x8b, 0x24, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x85, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xb6, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xcf, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x74, 0xc7, 0xf8, 0x49, 0x8b, 0x7c, 0xc7, 0xf0, 0x49, 0x8b, 0x6c, 0xc7, 0xe0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x4d, 0x8b, 0x74, 0xc7, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x8c, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0x6c, 0x24, 0x18, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb2, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x94, 0xc0, 0x89, 0x44, 0x24, 0x04, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb4, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb5, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x4c, 0x89, 0xf5, 0x4f, 0x8d, 0x2c, 0xef, 0x4f, 0x8d, 0x34, 0xe7, 0x49, 0x83, 0xc6, 0xe0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x80, 0x7c, 0x24, 0x04, 0x00, 0x4d, 0x0f, 0x45, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x74, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x3c, 0xf7, 0xeb, 0x07, 0x49, 0x83, 0xc5, 0xe0, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x35, 0xfd, 0xff, 0xff, 0xc7, 0x44, 0x24, 0x04, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x11, 0xff, 0xff, 0xff, 0xe9, 0xea, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_STORE_SLICE_code_holes[29] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_STORE_SLICE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_STORE_SLICE_data_holes[1];

// _CALL_LENplus_STORE_SUBSCR
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_STORE_SUBSCR.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 f6                      movslq  %esi, %r14
// 65: 4b 8b 2c f7                   movq    (%r15,%r14,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 df                      subq    %rbx, %r15
// 79: 49 83 c7 b8                   addq    $-0x48, %r15
// 7d: 49 c1 ef 03                   shrq    $0x3, %r15
// 81: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// b2: 4d 8b 24 cf                   movq    (%r15,%rcx,8), %r12
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 25 02 00 00             js      0x2f3 <_JIT_ENTRY+0x2f3>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 04 24                   movq    %rax, (%rsp)
// e1: 48 8b 45 00                   movq    (%rbp), %rax
// e5: 48 85 c0                      testq   %rax, %rax
// e8: 7f 22                         jg      0x10c <_JIT_ENTRY+0x10c>
// ea: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_NegativeRefcount
// fe: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 103: 48 89 ea                      movq    %rbp, %rdx
// 106: ff d0                         callq   *%rax
// 108: 48 8b 45 00                   movq    (%rbp), %rax
// 10c: 85 c0                         testl   %eax, %eax
// 10e: 78 21                         js      0x131 <_JIT_ENTRY+0x131>
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11a: ff d0                         callq   *%rax
// 11c: 48 ff 4d 00                   decq    (%rbp)
// 120: 75 0f                         jne     0x131 <_JIT_ENTRY+0x131>
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  _Py_Dealloc
// 12c: 48 89 ef                      movq    %rbp, %rdi
// 12f: ff d0                         callq   *%rax
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_NegativeRefcount
// 14e: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 153: 4c 89 e2                      movq    %r12, %rdx
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: 4c 89 e7                      movq    %r12, %rdi
// 17f: ff d0                         callq   *%rax
// 181: 48 8b 14 24                   movq    (%rsp), %rdx
// 185: 48 85 d2                      testq   %rdx, %rdx
// 188: 0f 84 61 01 00 00             je      0x2ef <_JIT_ENTRY+0x2ef>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _JIT_OPARG
// 198: 0f b7 c0                      movzwl  %ax, %eax
// 19b: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a0: 29 c1                         subl    %eax, %ecx
// 1a2: 48 63 c9                      movslq  %ecx, %rcx
// 1a5: 49 89 14 cf                   movq    %rdx, (%r15,%rcx,8)
// 1a9: f7 d0                         notl    %eax
// 1ab: 48 98                         cltq
// 1ad: 49 8b 74 c7 f8                movq    -0x8(%r15,%rax,8), %rsi
// 1b2: 49 8b 6c c7 e8                movq    -0x18(%r15,%rax,8), %rbp
// 1b7: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1bc: 4d 8b 64 c7 f0                movq    -0x10(%r15,%rax,8), %r12
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  PyObject_SetItem
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: 49 89 f6                      movq    %rsi, %r14
// 1d1: 48 89 ea                      movq    %rbp, %rdx
// 1d4: ff d0                         callq   *%rax
// 1d6: 89 04 24                      movl    %eax, (%rsp)
// 1d9: 48 8b 45 00                   movq    (%rbp), %rax
// 1dd: 48 85 c0                      testq   %rax, %rax
// 1e0: 7f 22                         jg      0x204 <_JIT_ENTRY+0x204>
// 1e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e4:  R_X86_64_64  .rodata.str1.1
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_NegativeRefcount
// 1f6: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 1fb: 48 89 ea                      movq    %rbp, %rdx
// 1fe: ff d0                         callq   *%rax
// 200: 48 8b 45 00                   movq    (%rbp), %rax
// 204: 85 c0                         testl   %eax, %eax
// 206: 78 21                         js      0x229 <_JIT_ENTRY+0x229>
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 212: ff d0                         callq   *%rax
// 214: 48 ff 4d 00                   decq    (%rbp)
// 218: 75 0f                         jne     0x229 <_JIT_ENTRY+0x229>
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_Dealloc
// 224: 48 89 ef                      movq    %rbp, %rdi
// 227: ff d0                         callq   *%rax
// 229: 49 8b 04 24                   movq    (%r12), %rax
// 22d: 48 85 c0                      testq   %rax, %rax
// 230: 7f 22                         jg      0x254 <_JIT_ENTRY+0x254>
// 232: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000234:  R_X86_64_64  .rodata.str1.1
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_NegativeRefcount
// 246: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// 24b: 4c 89 e2                      movq    %r12, %rdx
// 24e: ff d0                         callq   *%rax
// 250: 49 8b 04 24                   movq    (%r12), %rax
// 254: 85 c0                         testl   %eax, %eax
// 256: 78 21                         js      0x279 <_JIT_ENTRY+0x279>
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 262: ff d0                         callq   *%rax
// 264: 49 ff 0c 24                   decq    (%r12)
// 268: 75 0f                         jne     0x279 <_JIT_ENTRY+0x279>
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _Py_Dealloc
// 274: 4c 89 e7                      movq    %r12, %rdi
// 277: ff d0                         callq   *%rax
// 279: 4d 89 f4                      movq    %r14, %r12
// 27c: 49 8b 06                      movq    (%r14), %rax
// 27f: 48 85 c0                      testq   %rax, %rax
// 282: 7f 22                         jg      0x2a6 <_JIT_ENTRY+0x2a6>
// 284: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000286:  R_X86_64_64  .rodata.str1.1
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _Py_NegativeRefcount
// 298: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 29d: 4c 89 e2                      movq    %r12, %rdx
// 2a0: ff d0                         callq   *%rax
// 2a2: 49 8b 04 24                   movq    (%r12), %rax
// 2a6: 4f 8d 2c ef                   leaq    (%r15,%r13,8), %r13
// 2aa: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 2af: 4d 8d 34 cf                   leaq    (%r15,%rcx,8), %r14
// 2b3: 49 83 c6 e8                   addq    $-0x18, %r14
// 2b7: 85 c0                         testl   %eax, %eax
// 2b9: 78 21                         js      0x2dc <_JIT_ENTRY+0x2dc>
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c5: ff d0                         callq   *%rax
// 2c7: 49 ff 0c 24                   decq    (%r12)
// 2cb: 75 0f                         jne     0x2dc <_JIT_ENTRY+0x2dc>
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _Py_Dealloc
// 2d7: 4c 89 e7                      movq    %r12, %rdi
// 2da: ff d0                         callq   *%rax
// 2dc: 83 3c 24 00                   cmpl    $0x0, (%rsp)
// 2e0: 4d 0f 44 ee                   cmoveq  %r14, %r13
// 2e4: 74 23                         je      0x309 <_JIT_ENTRY+0x309>
// 2e6: 49 83 c5 e8                   addq    $-0x18, %r13
// 2ea: 4d 89 ef                      movq    %r13, %r15
// 2ed: eb 04                         jmp     0x2f3 <_JIT_ENTRY+0x2f3>
// 2ef: 4f 8d 3c f7                   leaq    (%r15,%r14,8), %r15
// 2f3: 49 29 df                      subq    %rbx, %r15
// 2f6: 49 83 c7 b8                   addq    $-0x48, %r15
// 2fa: 49 c1 ef 03                   shrq    $0x3, %r15
// 2fe: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 302: 31 c0                         xorl    %eax, %eax
// 304: e9 95 fd ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 309: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030b:  R_X86_64_64  _JIT_CONTINUE
// 313: 48 89 df                      movq    %rbx, %rdi
// 316: 4c 89 ee                      movq    %r13, %rsi
// 319: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 31e: 48 83 c4 18                   addq    $0x18, %rsp
// 322: 5b                            popq    %rbx
// 323: 41 5c                         popq    %r12
// 325: 41 5d                         popq    %r13
// 327: 41 5e                         popq    %r14
// 329: 41 5f                         popq    %r15
// 32b: 5d                            popq    %rbp
// 32c: ff e0                         jmpq    *%rax
// 32e: 
static const unsigned char _CALL_LENplus_STORE_SUBSCR_code_body[815] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xf6, 0x4b, 0x8b, 0x2c, 0xf7, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x24, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x25, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x61, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xcf, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x74, 0xc7, 0xf8, 0x49, 0x8b, 0x6c, 0xc7, 0xe8, 0x48, 0x89, 0x44, 0x24, 0x08, 0x4d, 0x8b, 0x64, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x2c, 0xef, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x34, 0xcf, 0x49, 0x83, 0xc6, 0xe8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0x3c, 0x24, 0x00, 0x4d, 0x0f, 0x44, 0xee, 0x74, 0x23, 0x49, 0x83, 0xc5, 0xe8, 0x4d, 0x89, 0xef, 0xeb, 0x04, 0x4f, 0x8d, 0x3c, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x95, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_STORE_SUBSCR_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_STORE_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_STORE_SUBSCR_data_holes[1];

// _CALL_LENplus_STORE_SUBSCR_DICT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_STORE_SUBSCR_DICT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 b2 01 00 00             js      0x27c <_JIT_ENTRY+0x27c>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 42                         je      0x1d9 <_JIT_ENTRY+0x1d9>
// 197: 4f 8d 2c e6                   leaq    (%r14,%r12,8), %r13
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 63 e8                      movslq  %eax, %rbp
// 1bb: 4d 8b 64 ee f0                movq    -0x10(%r14,%rbp,8), %r12
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  PyDict_Type
// 1ca: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1cf: 74 11                         je      0x1e2 <_JIT_ENTRY+0x1e2>
// 1d1: 4d 89 ee                      movq    %r13, %r14
// 1d4: e9 9c fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 1d9: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1dd: e9 9a 00 00 00                jmp     0x27c <_JIT_ENTRY+0x27c>
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _JIT_OPARG
// 1ec: f7 d0                         notl    %eax
// 1ee: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f3: 48 98                         cltq
// 1f5: 49 8b 54 c6 e8                movq    -0x18(%r14,%rax,8), %rdx
// 1fa: 49 8b 74 c6 f8                movq    -0x8(%r14,%rax,8), %rsi
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _PyDict_SetItem_Take2
// 209: 4c 89 e7                      movq    %r12, %rdi
// 20c: ff d0                         callq   *%rax
// 20e: 89 44 24 08                   movl    %eax, 0x8(%rsp)
// 212: 49 8b 04 24                   movq    (%r12), %rax
// 216: 48 85 c0                      testq   %rax, %rax
// 219: 7f 22                         jg      0x23d <_JIT_ENTRY+0x23d>
// 21b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021d:  R_X86_64_64  .rodata.str1.1
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _Py_NegativeRefcount
// 22f: be 63 02 00 00                movl    $0x263, %esi            # imm = 0x263
// 234: 4c 89 e2                      movq    %r12, %rdx
// 237: ff d0                         callq   *%rax
// 239: 49 8b 04 24                   movq    (%r12), %rax
// 23d: 4d 8d 34 ee                   leaq    (%r14,%rbp,8), %r14
// 241: 49 83 c6 e8                   addq    $-0x18, %r14
// 245: 85 c0                         testl   %eax, %eax
// 247: 78 21                         js      0x26a <_JIT_ENTRY+0x26a>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 253: ff d0                         callq   *%rax
// 255: 49 ff 0c 24                   decq    (%r12)
// 259: 75 0f                         jne     0x26a <_JIT_ENTRY+0x26a>
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_Dealloc
// 265: 4c 89 e7                      movq    %r12, %rdi
// 268: ff d0                         callq   *%rax
// 26a: 83 7c 24 08 00                cmpl    $0x0, 0x8(%rsp)
// 26f: 4d 0f 44 ee                   cmoveq  %r14, %r13
// 273: 74 1d                         je      0x292 <_JIT_ENTRY+0x292>
// 275: 49 83 c5 e8                   addq    $-0x18, %r13
// 279: 4d 89 ee                      movq    %r13, %r14
// 27c: 49 29 de                      subq    %rbx, %r14
// 27f: 49 83 c6 b8                   addq    $-0x48, %r14
// 283: 49 c1 ee 03                   shrq    $0x3, %r14
// 287: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 28b: 31 c0                         xorl    %eax, %eax
// 28d: e9 0b fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _JIT_CONTINUE
// 29c: 48 89 df                      movq    %rbx, %rdi
// 29f: 4c 89 ee                      movq    %r13, %rsi
// 2a2: 4c 89 fa                      movq    %r15, %rdx
// 2a5: 48 83 c4 18                   addq    $0x18, %rsp
// 2a9: 5b                            popq    %rbx
// 2aa: 41 5c                         popq    %r12
// 2ac: 41 5d                         popq    %r13
// 2ae: 41 5e                         popq    %r14
// 2b0: 41 5f                         popq    %r15
// 2b2: 5d                            popq    %rbp
// 2b3: ff e0                         jmpq    *%rax
// 2b5: 
static const unsigned char _CALL_LENplus_STORE_SUBSCR_DICT_code_body[694] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xb2, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x42, 0x4f, 0x8d, 0x2c, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x63, 0xe8, 0x4d, 0x8b, 0x64, 0xee, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x11, 0x4d, 0x89, 0xee, 0xe9, 0x9c, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0xe9, 0x9a, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x54, 0xc6, 0xe8, 0x49, 0x8b, 0x74, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x63, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xe8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x4d, 0x0f, 0x44, 0xee, 0x74, 0x1d, 0x49, 0x83, 0xc5, 0xe8, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x0b, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_STORE_SUBSCR_DICT_code_holes[22] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_STORE_SUBSCR_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_STORE_SUBSCR_DICT_data_holes[1];

// _CALL_LENplus_STORE_SUBSCR_LIST_INT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_STORE_SUBSCR_LIST_INT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e7 00                cmpq    $0x0, (%r15,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 f6                      movslq  %esi, %r14
// 65: 4b 8b 2c f7                   movq    (%r15,%r14,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 39                         je      0xaf <_JIT_ENTRY+0xaf>
// 76: 4c 89 f8                      movq    %r15, %rax
// 79: 48 29 d8                      subq    %rbx, %rax
// 7c: 48 83 c0 b8                   addq    $-0x48, %rax
// 80: 48 c1 e8 03                   shrq    $0x3, %rax
// 84: 89 43 40                      movl    %eax, 0x40(%rbx)
// 87: 48 8b 03                      movq    (%rbx), %rax
// 8a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008c:  R_X86_64_64  _JIT_TARGET
// 94: 89 c9                         movl    %ecx, %ecx
// 96: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 9a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a0: 48 83 c4 18                   addq    $0x18, %rsp
// a4: 5b                            popq    %rbx
// a5: 41 5c                         popq    %r12
// a7: 41 5d                         popq    %r13
// a9: 41 5e                         popq    %r14
// ab: 41 5f                         popq    %r15
// ad: 5d                            popq    %rbp
// ae: c3                            retq
// af: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b4: 4d 8b 2c cf                   movq    (%r15,%rcx,8), %r13
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  PyObject_Size
// c2: 4c 89 ef                      movq    %r13, %rdi
// c5: ff d0                         callq   *%rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 0f 88 45 02 00 00             js      0x315 <_JIT_ENTRY+0x315>
// d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d2:  R_X86_64_64  PyLong_FromSsize_t
// da: 48 89 c7                      movq    %rax, %rdi
// dd: ff d1                         callq   *%rcx
// df: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e4: 48 8b 45 00                   movq    (%rbp), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7f 22                         jg      0x10f <_JIT_ENTRY+0x10f>
// ed: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ef:  R_X86_64_64  .rodata.str1.1
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_NegativeRefcount
// 101: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 106: 48 89 ea                      movq    %rbp, %rdx
// 109: ff d0                         callq   *%rax
// 10b: 48 8b 45 00                   movq    (%rbp), %rax
// 10f: 85 c0                         testl   %eax, %eax
// 111: 78 21                         js      0x134 <_JIT_ENTRY+0x134>
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11d: ff d0                         callq   *%rax
// 11f: 48 ff 4d 00                   decq    (%rbp)
// 123: 75 0f                         jne     0x134 <_JIT_ENTRY+0x134>
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_Dealloc
// 12f: 48 89 ef                      movq    %rbp, %rdi
// 132: ff d0                         callq   *%rax
// 134: 49 8b 45 00                   movq    (%r13), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 156: 4c 89 ea                      movq    %r13, %rdx
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 45 00                   movq    (%r13), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 78 21                         js      0x184 <_JIT_ENTRY+0x184>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 4d 00                   decq    (%r13)
// 173: 75 0f                         jne     0x184 <_JIT_ENTRY+0x184>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 ef                      movq    %r13, %rdi
// 182: ff d0                         callq   *%rax
// 184: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 189: 48 85 f6                      testq   %rsi, %rsi
// 18c: 0f 84 7f 01 00 00             je      0x311 <_JIT_ENTRY+0x311>
// 192: 4b 8d 04 e7                   leaq    (%r15,%r12,8), %rax
// 196: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000198:  R_X86_64_64  _JIT_OPARG
// 1a0: 0f b7 c9                      movzwl  %cx, %ecx
// 1a3: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1a8: 29 ca                         subl    %ecx, %edx
// 1aa: 48 63 d2                      movslq  %edx, %rdx
// 1ad: 49 89 34 d7                   movq    %rsi, (%r15,%rdx,8)
// 1b1: f7 d1                         notl    %ecx
// 1b3: 4c 63 f1                      movslq  %ecx, %r14
// 1b6: 4f 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %r13
// 1bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bd:  R_X86_64_64  PyLong_Type
// 1c5: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 1c9: 0f 85 aa fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1cf: 4f 8b 64 f7 f0                movq    -0x10(%r15,%r14,8), %r12
// 1d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d6:  R_X86_64_64  PyList_Type
// 1de: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 1e3: 0f 85 90 fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1e9: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 1ee: 0f 87 85 fe ff ff             ja      0x79 <_JIT_ENTRY+0x79>
// 1f4: 41 8b 4d 18                   movl    0x18(%r13), %ecx
// 1f8: 49 39 4c 24 10                cmpq    %rcx, 0x10(%r12)
// 1fd: 0f 8e 76 fe ff ff             jle     0x79 <_JIT_ENTRY+0x79>
// 203: 4b 8b 44 f7 e8                movq    -0x18(%r15,%r14,8), %rax
// 208: 49 8b 54 24 18                movq    0x18(%r12), %rdx
// 20d: 48 8b 2c ca                   movq    (%rdx,%rcx,8), %rbp
// 211: 48 89 04 ca                   movq    %rax, (%rdx,%rcx,8)
// 215: 48 8b 45 00                   movq    (%rbp), %rax
// 219: 48 85 c0                      testq   %rax, %rax
// 21c: 7f 22                         jg      0x240 <_JIT_ENTRY+0x240>
// 21e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000220:  R_X86_64_64  .rodata.str1.1
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _Py_NegativeRefcount
// 232: be 52 02 00 00                movl    $0x252, %esi            # imm = 0x252
// 237: 48 89 ea                      movq    %rbp, %rdx
// 23a: ff d0                         callq   *%rax
// 23c: 48 8b 45 00                   movq    (%rbp), %rax
// 240: 85 c0                         testl   %eax, %eax
// 242: 78 21                         js      0x265 <_JIT_ENTRY+0x265>
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24e: ff d0                         callq   *%rax
// 250: 48 ff 4d 00                   decq    (%rbp)
// 254: 75 0f                         jne     0x265 <_JIT_ENTRY+0x265>
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _Py_Dealloc
// 260: 48 89 ef                      movq    %rbp, %rdi
// 263: ff d0                         callq   *%rax
// 265: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 26a: 75 28                         jne     0x294 <_JIT_ENTRY+0x294>
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  PyInterpreterState_Get
// 276: ff d0                         callq   *%rax
// 278: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 27f: 49 ff 4d 00                   decq    (%r13)
// 283: 75 0f                         jne     0x294 <_JIT_ENTRY+0x294>
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  PyObject_Free
// 28f: 4c 89 ef                      movq    %r13, %rdi
// 292: ff d0                         callq   *%rax
// 294: 49 8b 04 24                   movq    (%r12), %rax
// 298: 48 85 c0                      testq   %rax, %rax
// 29b: 7f 22                         jg      0x2bf <_JIT_ENTRY+0x2bf>
// 29d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029f:  R_X86_64_64  .rodata.str1.1
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _Py_NegativeRefcount
// 2b1: be 54 02 00 00                movl    $0x254, %esi            # imm = 0x254
// 2b6: 4c 89 e2                      movq    %r12, %rdx
// 2b9: ff d0                         callq   *%rax
// 2bb: 49 8b 04 24                   movq    (%r12), %rax
// 2bf: 4f 8d 3c f7                   leaq    (%r15,%r14,8), %r15
// 2c3: 49 83 c7 e8                   addq    $-0x18, %r15
// 2c7: 85 c0                         testl   %eax, %eax
// 2c9: 78 21                         js      0x2ec <_JIT_ENTRY+0x2ec>
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d5: ff d0                         callq   *%rax
// 2d7: 49 ff 0c 24                   decq    (%r12)
// 2db: 75 0f                         jne     0x2ec <_JIT_ENTRY+0x2ec>
// 2dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002df:  R_X86_64_64  _Py_Dealloc
// 2e7: 4c 89 e7                      movq    %r12, %rdi
// 2ea: ff d0                         callq   *%rax
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  _JIT_CONTINUE
// 2f6: 48 89 df                      movq    %rbx, %rdi
// 2f9: 4c 89 fe                      movq    %r15, %rsi
// 2fc: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 301: 48 83 c4 18                   addq    $0x18, %rsp
// 305: 5b                            popq    %rbx
// 306: 41 5c                         popq    %r12
// 308: 41 5d                         popq    %r13
// 30a: 41 5e                         popq    %r14
// 30c: 41 5f                         popq    %r15
// 30e: 5d                            popq    %rbp
// 30f: ff e0                         jmpq    *%rax
// 311: 4f 8d 3c f7                   leaq    (%r15,%r14,8), %r15
// 315: 49 29 df                      subq    %rbx, %r15
// 318: 49 83 c7 b8                   addq    $-0x48, %r15
// 31c: 49 c1 ef 03                   shrq    $0x3, %r15
// 320: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 324: 31 c0                         xorl    %eax, %eax
// 326: e9 75 fd ff ff                jmp     0xa0 <_JIT_ENTRY+0xa0>
// 32b: 
static const unsigned char _CALL_LENplus_STORE_SUBSCR_LIST_INT_code_body[812] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe7, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xf6, 0x4b, 0x8b, 0x2c, 0xf7, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x39, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x2c, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x45, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x7f, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xe7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd7, 0xf7, 0xd1, 0x4c, 0x63, 0xf1, 0x4f, 0x8b, 0x6c, 0xf7, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0xaa, 0xfe, 0xff, 0xff, 0x4f, 0x8b, 0x64, 0xf7, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x90, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x85, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x4d, 0x18, 0x49, 0x39, 0x4c, 0x24, 0x10, 0x0f, 0x8e, 0x76, 0xfe, 0xff, 0xff, 0x4b, 0x8b, 0x44, 0xf7, 0xe8, 0x49, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x8b, 0x2c, 0xca, 0x48, 0x89, 0x04, 0xca, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x52, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x3c, 0xf7, 0x49, 0x83, 0xc7, 0xe8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x3c, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x75, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_STORE_SUBSCR_LIST_INT_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_STORE_SUBSCR_LIST_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_STORE_SUBSCR_LIST_INT_data_holes[1];

// _CALL_LENplus_SWAP
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_SWAP.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 30 01 00 00             js      0x1fa <_JIT_ENTRY+0x1fa>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 5f                         je      0x1f6 <_JIT_ENTRY+0x1f6>
// 197: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c8                      movzwl  %ax, %ecx
// 1a8: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1ad: 29 ca                         subl    %ecx, %edx
// 1af: 48 63 d2                      movslq  %edx, %rdx
// 1b2: 49 89 2c d6                   movq    %rbp, (%r14,%rdx,8)
// 1b6: f7 d1                         notl    %ecx
// 1b8: 48 63 c9                      movslq  %ecx, %rcx
// 1bb: 49 8b 54 ce f8                movq    -0x8(%r14,%rcx,8), %rdx
// 1c0: 0f b7 c0                      movzwl  %ax, %eax
// 1c3: 48 89 cf                      movq    %rcx, %rdi
// 1c6: 48 29 c7                      subq    %rax, %rdi
// 1c9: 49 8b 04 fe                   movq    (%r14,%rdi,8), %rax
// 1cd: 49 89 14 fe                   movq    %rdx, (%r14,%rdi,8)
// 1d1: 49 89 44 ce f8                movq    %rax, -0x8(%r14,%rcx,8)
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _JIT_CONTINUE
// 1e0: 48 89 df                      movq    %rbx, %rdi
// 1e3: 4c 89 fa                      movq    %r15, %rdx
// 1e6: 48 83 c4 18                   addq    $0x18, %rsp
// 1ea: 5b                            popq    %rbx
// 1eb: 41 5c                         popq    %r12
// 1ed: 41 5d                         popq    %r13
// 1ef: 41 5e                         popq    %r14
// 1f1: 41 5f                         popq    %r15
// 1f3: 5d                            popq    %rbp
// 1f4: ff e0                         jmpq    *%rax
// 1f6: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1fa: 49 29 de                      subq    %rbx, %r14
// 1fd: 49 83 c6 b8                   addq    $-0x48, %r14
// 201: 49 c1 ee 03                   shrq    $0x3, %r14
// 205: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 209: 31 c0                         xorl    %eax, %eax
// 20b: e9 8d fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 210: 
static const unsigned char _CALL_LENplus_SWAP_code_body[529] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x30, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x5f, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x2c, 0xd6, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x49, 0x8b, 0x54, 0xce, 0xf8, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xcf, 0x48, 0x29, 0xc7, 0x49, 0x8b, 0x04, 0xfe, 0x49, 0x89, 0x14, 0xfe, 0x49, 0x89, 0x44, 0xce, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x8d, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_SWAP_code_holes[15] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_SWAP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_SWAP_data_holes[1];

// _CALL_LENplus_TO_BOOL
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_TO_BOOL.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 a6 01 00 00             js      0x270 <_JIT_ENTRY+0x270>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 188: 48 85 d2                      testq   %rdx, %rdx
// 18b: 0f 84 d6 00 00 00             je      0x267 <_JIT_ENTRY+0x267>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a3: 29 c1                         subl    %eax, %ecx
// 1a5: 48 63 c9                      movslq  %ecx, %rcx
// 1a8: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1ac: f7 d0                         notl    %eax
// 1ae: 48 63 e8                      movslq  %eax, %rbp
// 1b1: 4d 8b 64 ee f8                movq    -0x8(%r14,%rbp,8), %r12
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  PyObject_IsTrue
// 1c0: 4c 89 e7                      movq    %r12, %rdi
// 1c3: ff d0                         callq   *%rax
// 1c5: 89 44 24 08                   movl    %eax, 0x8(%rsp)
// 1c9: 49 8b 04 24                   movq    (%r12), %rax
// 1cd: 48 85 c0                      testq   %rax, %rax
// 1d0: 7f 22                         jg      0x1f4 <_JIT_ENTRY+0x1f4>
// 1d2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d4:  R_X86_64_64  .rodata.str1.1
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _Py_NegativeRefcount
// 1e6: be 86 00 00 00                movl    $0x86, %esi
// 1eb: 4c 89 e2                      movq    %r12, %rdx
// 1ee: ff d0                         callq   *%rax
// 1f0: 49 8b 04 24                   movq    (%r12), %rax
// 1f4: 85 c0                         testl   %eax, %eax
// 1f6: 78 21                         js      0x219 <_JIT_ENTRY+0x219>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 202: ff d0                         callq   *%rax
// 204: 49 ff 0c 24                   decq    (%r12)
// 208: 75 0f                         jne     0x219 <_JIT_ENTRY+0x219>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _Py_Dealloc
// 214: 4c 89 e7                      movq    %r12, %rdi
// 217: ff d0                         callq   *%rax
// 219: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 21d: 48 83 c0 f8                   addq    $-0x8, %rax
// 221: 83 7c 24 08 00                cmpl    $0x0, 0x8(%rsp)
// 226: 78 45                         js      0x26d <_JIT_ENTRY+0x26d>
// 228: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 22c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000022e:  R_X86_64_64  _Py_FalseStruct
// 236: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000238:  R_X86_64_64  _Py_TrueStruct
// 240: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 244: 48 89 10                      movq    %rdx, (%rax)
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _JIT_CONTINUE
// 251: 48 89 df                      movq    %rbx, %rdi
// 254: 4c 89 fa                      movq    %r15, %rdx
// 257: 48 83 c4 18                   addq    $0x18, %rsp
// 25b: 5b                            popq    %rbx
// 25c: 41 5c                         popq    %r12
// 25e: 41 5d                         popq    %r13
// 260: 41 5e                         popq    %r14
// 262: 41 5f                         popq    %r15
// 264: 5d                            popq    %rbp
// 265: ff e0                         jmpq    *%rax
// 267: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 26b: eb 03                         jmp     0x270 <_JIT_ENTRY+0x270>
// 26d: 49 89 c6                      movq    %rax, %r14
// 270: 49 29 de                      subq    %rbx, %r14
// 273: 49 83 c6 b8                   addq    $-0x48, %r14
// 277: 49 c1 ee 03                   shrq    $0x3, %r14
// 27b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 27f: 31 c0                         xorl    %eax, %eax
// 281: e9 17 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 286: 
static const unsigned char _CALL_LENplus_TO_BOOL_code_body[647] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xa6, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xd6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x63, 0xe8, 0x4d, 0x8b, 0x64, 0xee, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x83, 0xc0, 0xf8, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x78, 0x45, 0x4b, 0x8d, 0x34, 0xee, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x48, 0x89, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x17, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_TO_BOOL_code_holes[22] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_TO_BOOL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_TO_BOOL_data_holes[1];

// _CALL_LENplus_TO_BOOL_ALWAYS_TRUE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_TO_BOOL_ALWAYS_TRUE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 ad 01 00 00             js      0x277 <_JIT_ENTRY+0x277>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 0f 84 d8 00 00 00             je      0x273 <_JIT_ENTRY+0x273>
// 19b: 4f 8d 2c e6                   leaq    (%r14,%r12,8), %r13
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  _JIT_OPARG
// 1a9: 0f b7 c0                      movzwl  %ax, %eax
// 1ac: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1b1: 29 c1                         subl    %eax, %ecx
// 1b3: 48 63 c9                      movslq  %ecx, %rcx
// 1b6: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1ba: f7 d0                         notl    %eax
// 1bc: 48 98                         cltq
// 1be: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1c3: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 1c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ca:  R_X86_64_64  _JIT_OPERAND
// 1d2: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 1d8: 0f 85 af 00 00 00             jne     0x28d <_JIT_ENTRY+0x28d>
// 1de: 49 8b 04 24                   movq    (%r12), %rax
// 1e2: 48 85 c0                      testq   %rax, %rax
// 1e5: 7f 22                         jg      0x209 <_JIT_ENTRY+0x209>
// 1e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e9:  R_X86_64_64  .rodata.str1.1
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_NegativeRefcount
// 1fb: be db 00 00 00                movl    $0xdb, %esi
// 200: 4c 89 e2                      movq    %r12, %rdx
// 203: ff d0                         callq   *%rax
// 205: 49 8b 04 24                   movq    (%r12), %rax
// 209: 85 c0                         testl   %eax, %eax
// 20b: 78 21                         js      0x22e <_JIT_ENTRY+0x22e>
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 217: ff d0                         callq   *%rax
// 219: 49 ff 0c 24                   decq    (%r12)
// 21d: 75 0f                         jne     0x22e <_JIT_ENTRY+0x22e>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_Dealloc
// 229: 4c 89 e7                      movq    %r12, %rdi
// 22c: ff d0                         callq   *%rax
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _JIT_OPARG
// 238: f7 d0                         notl    %eax
// 23a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23f: 48 98                         cltq
// 241: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000243:  R_X86_64_64  _Py_TrueStruct
// 24b: 49 89 4c c6 f8                movq    %rcx, -0x8(%r14,%rax,8)
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _JIT_CONTINUE
// 25a: 48 89 df                      movq    %rbx, %rdi
// 25d: 4c 89 ee                      movq    %r13, %rsi
// 260: 4c 89 fa                      movq    %r15, %rdx
// 263: 48 83 c4 18                   addq    $0x18, %rsp
// 267: 5b                            popq    %rbx
// 268: 41 5c                         popq    %r12
// 26a: 41 5d                         popq    %r13
// 26c: 41 5e                         popq    %r14
// 26e: 41 5f                         popq    %r15
// 270: 5d                            popq    %rbp
// 271: ff e0                         jmpq    *%rax
// 273: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 277: 49 29 de                      subq    %rbx, %r14
// 27a: 49 83 c6 b8                   addq    $-0x48, %r14
// 27e: 49 c1 ee 03                   shrq    $0x3, %r14
// 282: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 286: 31 c0                         xorl    %eax, %eax
// 288: e9 10 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 28d: 4d 89 ee                      movq    %r13, %r14
// 290: e9 e0 fd ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 295: 
static const unsigned char _CALL_LENplus_TO_BOOL_ALWAYS_TRUE_code_body[662] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xad, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x0f, 0x84, 0xd8, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x0f, 0x85, 0xaf, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x4c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x10, 0xfe, 0xff, 0xff, 0x4d, 0x89, 0xee, 0xe9, 0xe0, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_TO_BOOL_ALWAYS_TRUE_code_holes[22] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_TO_BOOL_ALWAYS_TRUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_TO_BOOL_ALWAYS_TRUE_data_holes[1];

// _CALL_LENplus_TO_BOOL_BOOL
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_TO_BOOL_BOOL.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 11 01 00 00             js      0x1db <_JIT_ENTRY+0x1db>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 40                         je      0x1d7 <_JIT_ENTRY+0x1d7>
// 197: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1bf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c1:  R_X86_64_64  PyBool_Type
// 1c9: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1cd: 74 22                         je      0x1f1 <_JIT_ENTRY+0x1f1>
// 1cf: 49 89 f6                      movq    %rsi, %r14
// 1d2: e9 9e fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 1d7: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1db: 49 29 de                      subq    %rbx, %r14
// 1de: 49 83 c6 b8                   addq    $-0x48, %r14
// 1e2: 49 c1 ee 03                   shrq    $0x3, %r14
// 1e6: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1ea: 31 c0                         xorl    %eax, %eax
// 1ec: e9 ac fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _JIT_CONTINUE
// 1fb: 48 89 df                      movq    %rbx, %rdi
// 1fe: 4c 89 fa                      movq    %r15, %rdx
// 201: 48 83 c4 18                   addq    $0x18, %rsp
// 205: 5b                            popq    %rbx
// 206: 41 5c                         popq    %r12
// 208: 41 5d                         popq    %r13
// 20a: 41 5e                         popq    %r14
// 20c: 41 5f                         popq    %r15
// 20e: 5d                            popq    %rbp
// 20f: ff e0                         jmpq    *%rax
// 211: 
static const unsigned char _CALL_LENplus_TO_BOOL_BOOL_code_body[530] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x11, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x40, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x22, 0x49, 0x89, 0xf6, 0xe9, 0x9e, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xac, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_TO_BOOL_BOOL_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_TO_BOOL_BOOL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_TO_BOOL_BOOL_data_holes[1];

// _CALL_LENplus_TO_BOOL_INT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_TO_BOOL_INT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 12 01 00 00             js      0x1dc <_JIT_ENTRY+0x1dc>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 41                         je      0x1d8 <_JIT_ENTRY+0x1d8>
// 197: 4f 8d 2c e6                   leaq    (%r14,%r12,8), %r13
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  PyLong_Type
// 1c9: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1ce: 74 22                         je      0x1f2 <_JIT_ENTRY+0x1f2>
// 1d0: 4d 89 ee                      movq    %r13, %r14
// 1d3: e9 9d fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 1d8: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1dc: 49 29 de                      subq    %rbx, %r14
// 1df: 49 83 c6 b8                   addq    $-0x48, %r14
// 1e3: 49 c1 ee 03                   shrq    $0x3, %r14
// 1e7: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1eb: 31 c0                         xorl    %eax, %eax
// 1ed: e9 ab fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 1f2: 41 8b 44 24 10                movl    0x10(%r12), %eax
// 1f7: 83 e0 03                      andl    $0x3, %eax
// 1fa: 83 f8 01                      cmpl    $0x1, %eax
// 1fd: 75 0c                         jne     0x20b <_JIT_ENTRY+0x20b>
// 1ff: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000201:  R_X86_64_64  _Py_FalseStruct
// 209: eb 5a                         jmp     0x265 <_JIT_ENTRY+0x265>
// 20b: 49 8b 04 24                   movq    (%r12), %rax
// 20f: 48 85 c0                      testq   %rax, %rax
// 212: 7f 22                         jg      0x236 <_JIT_ENTRY+0x236>
// 214: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000216:  R_X86_64_64  .rodata.str1.1
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _Py_NegativeRefcount
// 228: be a0 00 00 00                movl    $0xa0, %esi
// 22d: 4c 89 e2                      movq    %r12, %rdx
// 230: ff d0                         callq   *%rax
// 232: 49 8b 04 24                   movq    (%r12), %rax
// 236: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000238:  R_X86_64_64  _Py_TrueStruct
// 240: 85 c0                         testl   %eax, %eax
// 242: 78 21                         js      0x265 <_JIT_ENTRY+0x265>
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24e: ff d0                         callq   *%rax
// 250: 49 ff 0c 24                   decq    (%r12)
// 254: 75 0f                         jne     0x265 <_JIT_ENTRY+0x265>
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _Py_Dealloc
// 260: 4c 89 e7                      movq    %r12, %rdi
// 263: ff d0                         callq   *%rax
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _JIT_OPARG
// 26f: f7 d0                         notl    %eax
// 271: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 276: 48 98                         cltq
// 278: 49 89 6c c6 f8                movq    %rbp, -0x8(%r14,%rax,8)
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _JIT_CONTINUE
// 287: 48 89 df                      movq    %rbx, %rdi
// 28a: 4c 89 ee                      movq    %r13, %rsi
// 28d: 4c 89 fa                      movq    %r15, %rdx
// 290: 48 83 c4 18                   addq    $0x18, %rsp
// 294: 5b                            popq    %rbx
// 295: 41 5c                         popq    %r12
// 297: 41 5d                         popq    %r13
// 299: 41 5e                         popq    %r14
// 29b: 41 5f                         popq    %r15
// 29d: 5d                            popq    %rbp
// 29e: ff e0                         jmpq    *%rax
// 2a0: 
static const unsigned char _CALL_LENplus_TO_BOOL_INT_code_body[673] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x12, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x41, 0x4f, 0x8d, 0x2c, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x22, 0x4d, 0x89, 0xee, 0xe9, 0x9d, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xab, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x44, 0x24, 0x10, 0x83, 0xe0, 0x03, 0x83, 0xf8, 0x01, 0x75, 0x0c, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x5a, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_TO_BOOL_INT_code_holes[23] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_TO_BOOL_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_TO_BOOL_INT_data_holes[1];

// _CALL_LENplus_TO_BOOL_LIST
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_TO_BOOL_LIST.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 12 01 00 00             js      0x1dc <_JIT_ENTRY+0x1dc>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 41                         je      0x1d8 <_JIT_ENTRY+0x1d8>
// 197: 4f 8d 2c e6                   leaq    (%r14,%r12,8), %r13
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  PyList_Type
// 1c9: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1ce: 74 22                         je      0x1f2 <_JIT_ENTRY+0x1f2>
// 1d0: 4d 89 ee                      movq    %r13, %r14
// 1d3: e9 9d fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 1d8: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1dc: 49 29 de                      subq    %rbx, %r14
// 1df: 49 83 c6 b8                   addq    $-0x48, %r14
// 1e3: 49 c1 ee 03                   shrq    $0x3, %r14
// 1e7: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1eb: 31 c0                         xorl    %eax, %eax
// 1ed: e9 ab fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 1f2: 49 8b 04 24                   movq    (%r12), %rax
// 1f6: 49 8b 6c 24 10                movq    0x10(%r12), %rbp
// 1fb: 48 85 c0                      testq   %rax, %rax
// 1fe: 7f 22                         jg      0x222 <_JIT_ENTRY+0x222>
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _Py_NegativeRefcount
// 214: be ae 00 00 00                movl    $0xae, %esi
// 219: 4c 89 e2                      movq    %r12, %rdx
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 04 24                   movq    (%r12), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 21                         js      0x247 <_JIT_ENTRY+0x247>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 0c 24                   decq    (%r12)
// 236: 75 0f                         jne     0x247 <_JIT_ENTRY+0x247>
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _Py_Dealloc
// 242: 4c 89 e7                      movq    %r12, %rdi
// 245: ff d0                         callq   *%rax
// 247: 48 85 ed                      testq   %rbp, %rbp
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _Py_FalseStruct
// 254: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000256:  R_X86_64_64  _Py_TrueStruct
// 25e: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _JIT_OPARG
// 26c: f7 d0                         notl    %eax
// 26e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 273: 48 98                         cltq
// 275: 49 89 4c c6 f8                movq    %rcx, -0x8(%r14,%rax,8)
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  _JIT_CONTINUE
// 284: 48 89 df                      movq    %rbx, %rdi
// 287: 4c 89 ee                      movq    %r13, %rsi
// 28a: 4c 89 fa                      movq    %r15, %rdx
// 28d: 48 83 c4 18                   addq    $0x18, %rsp
// 291: 5b                            popq    %rbx
// 292: 41 5c                         popq    %r12
// 294: 41 5d                         popq    %r13
// 296: 41 5e                         popq    %r14
// 298: 41 5f                         popq    %r15
// 29a: 5d                            popq    %rbp
// 29b: ff e0                         jmpq    *%rax
// 29d: 
static const unsigned char _CALL_LENplus_TO_BOOL_LIST_code_body[670] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x12, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x41, 0x4f, 0x8d, 0x2c, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x22, 0x4d, 0x89, 0xee, 0xe9, 0x9d, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xab, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x4c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_TO_BOOL_LIST_code_holes[23] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_TO_BOOL_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_TO_BOOL_LIST_data_holes[1];

// _CALL_LENplus_TO_BOOL_NONE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_TO_BOOL_NONE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 0d 01 00 00             js      0x1d7 <_JIT_ENTRY+0x1d7>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 3c                         je      0x1d3 <_JIT_ENTRY+0x1d3>
// 197: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bc:  R_X86_64_64  _Py_NoneStruct
// 1c4: 49 39 4c c6 f8                cmpq    %rcx, -0x8(%r14,%rax,8)
// 1c9: 74 22                         je      0x1ed <_JIT_ENTRY+0x1ed>
// 1cb: 49 89 f6                      movq    %rsi, %r14
// 1ce: e9 a2 fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 1d3: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1d7: 49 29 de                      subq    %rbx, %r14
// 1da: 49 83 c6 b8                   addq    $-0x48, %r14
// 1de: 49 c1 ee 03                   shrq    $0x3, %r14
// 1e2: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1e6: 31 c0                         xorl    %eax, %eax
// 1e8: e9 b0 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _JIT_OPARG
// 1f7: f7 d0                         notl    %eax
// 1f9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1fe: 48 98                         cltq
// 200: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000202:  R_X86_64_64  _Py_FalseStruct
// 20a: 49 89 4c c6 f8                movq    %rcx, -0x8(%r14,%rax,8)
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _JIT_CONTINUE
// 219: 48 89 df                      movq    %rbx, %rdi
// 21c: 4c 89 fa                      movq    %r15, %rdx
// 21f: 48 83 c4 18                   addq    $0x18, %rsp
// 223: 5b                            popq    %rbx
// 224: 41 5c                         popq    %r12
// 226: 41 5d                         popq    %r13
// 228: 41 5e                         popq    %r14
// 22a: 41 5f                         popq    %r15
// 22c: 5d                            popq    %rbp
// 22d: ff e0                         jmpq    *%rax
// 22f: 
static const unsigned char _CALL_LENplus_TO_BOOL_NONE_code_body[560] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x3c, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc6, 0xf8, 0x74, 0x22, 0x49, 0x89, 0xf6, 0xe9, 0xa2, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xb0, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x4c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_TO_BOOL_NONE_code_holes[18] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_TO_BOOL_NONE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_TO_BOOL_NONE_data_holes[1];

// _CALL_LENplus_TO_BOOL_STR
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_TO_BOOL_STR.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 12 01 00 00             js      0x1dc <_JIT_ENTRY+0x1dc>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 41                         je      0x1d8 <_JIT_ENTRY+0x1d8>
// 197: 4f 8d 2c e6                   leaq    (%r14,%r12,8), %r13
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  PyUnicode_Type
// 1c9: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1ce: 74 22                         je      0x1f2 <_JIT_ENTRY+0x1f2>
// 1d0: 4d 89 ee                      movq    %r13, %r14
// 1d3: e9 9d fe ff ff                jmp     0x75 <_JIT_ENTRY+0x75>
// 1d8: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1dc: 49 29 de                      subq    %rbx, %r14
// 1df: 49 83 c6 b8                   addq    $-0x48, %r14
// 1e3: 49 c1 ee 03                   shrq    $0x3, %r14
// 1e7: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1eb: 31 c0                         xorl    %eax, %eax
// 1ed: e9 ab fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _PyRuntime
// 1fc: 48 05 00 a1 00 00             addq    $0xa100, %rax           # imm = 0xA100
// 202: 49 39 c4                      cmpq    %rax, %r12
// 205: 74 5c                         je      0x263 <_JIT_ENTRY+0x263>
// 207: 49 8b 04 24                   movq    (%r12), %rax
// 20b: 48 85 c0                      testq   %rax, %rax
// 20e: 7f 22                         jg      0x232 <_JIT_ENTRY+0x232>
// 210: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000212:  R_X86_64_64  .rodata.str1.1
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_NegativeRefcount
// 224: be cb 00 00 00                movl    $0xcb, %esi
// 229: 4c 89 e2                      movq    %r12, %rdx
// 22c: ff d0                         callq   *%rax
// 22e: 49 8b 04 24                   movq    (%r12), %rax
// 232: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000234:  R_X86_64_64  _Py_TrueStruct
// 23c: 85 c0                         testl   %eax, %eax
// 23e: 78 2d                         js      0x26d <_JIT_ENTRY+0x26d>
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24a: ff d0                         callq   *%rax
// 24c: 49 ff 0c 24                   decq    (%r12)
// 250: 75 1b                         jne     0x26d <_JIT_ENTRY+0x26d>
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_Dealloc
// 25c: 4c 89 e7                      movq    %r12, %rdi
// 25f: ff d0                         callq   *%rax
// 261: eb 0a                         jmp     0x26d <_JIT_ENTRY+0x26d>
// 263: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000265:  R_X86_64_64  _Py_FalseStruct
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _JIT_OPARG
// 277: f7 d0                         notl    %eax
// 279: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 27e: 48 98                         cltq
// 280: 49 89 6c c6 f8                movq    %rbp, -0x8(%r14,%rax,8)
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _JIT_CONTINUE
// 28f: 48 89 df                      movq    %rbx, %rdi
// 292: 4c 89 ee                      movq    %r13, %rsi
// 295: 4c 89 fa                      movq    %r15, %rdx
// 298: 48 83 c4 18                   addq    $0x18, %rsp
// 29c: 5b                            popq    %rbx
// 29d: 41 5c                         popq    %r12
// 29f: 41 5d                         popq    %r13
// 2a1: 41 5e                         popq    %r14
// 2a3: 41 5f                         popq    %r15
// 2a5: 5d                            popq    %rbp
// 2a6: ff e0                         jmpq    *%rax
// 2a8: 
static const unsigned char _CALL_LENplus_TO_BOOL_STR_code_body[681] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x12, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x41, 0x4f, 0x8d, 0x2c, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x22, 0x4d, 0x89, 0xee, 0xe9, 0x9d, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xab, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x05, 0x00, 0xa1, 0x00, 0x00, 0x49, 0x39, 0xc4, 0x74, 0x5c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x2d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x0a, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_TO_BOOL_STR_code_holes[24] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_TO_BOOL_STR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_TO_BOOL_STR_data_holes[1];

// _CALL_LENplus_UNARY_INVERT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_UNARY_INVERT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 92 01 00 00             js      0x25c <_JIT_ENTRY+0x25c>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 188: 48 85 d2                      testq   %rdx, %rdx
// 18b: 0f 84 c2 00 00 00             je      0x253 <_JIT_ENTRY+0x253>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a3: 29 c1                         subl    %eax, %ecx
// 1a5: 48 63 c9                      movslq  %ecx, %rcx
// 1a8: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1ac: f7 d0                         notl    %eax
// 1ae: 4c 63 e0                      movslq  %eax, %r12
// 1b1: 4b 8b 6c e6 f8                movq    -0x8(%r14,%r12,8), %rbp
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  PyNumber_Invert
// 1c0: 48 89 ef                      movq    %rbp, %rdi
// 1c3: ff d0                         callq   *%rax
// 1c5: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1ca: 48 8b 45 00                   movq    (%rbp), %rax
// 1ce: 48 85 c0                      testq   %rax, %rax
// 1d1: 7f 22                         jg      0x1f5 <_JIT_ENTRY+0x1f5>
// 1d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d5:  R_X86_64_64  .rodata.str1.1
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _Py_NegativeRefcount
// 1e7: be e6 00 00 00                movl    $0xe6, %esi
// 1ec: 48 89 ea                      movq    %rbp, %rdx
// 1ef: ff d0                         callq   *%rax
// 1f1: 48 8b 45 00                   movq    (%rbp), %rax
// 1f5: 85 c0                         testl   %eax, %eax
// 1f7: 78 21                         js      0x21a <_JIT_ENTRY+0x21a>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 203: ff d0                         callq   *%rax
// 205: 48 ff 4d 00                   decq    (%rbp)
// 209: 75 0f                         jne     0x21a <_JIT_ENTRY+0x21a>
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_Dealloc
// 215: 48 89 ef                      movq    %rbp, %rdi
// 218: ff d0                         callq   *%rax
// 21a: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 21e: 48 83 c0 f8                   addq    $-0x8, %rax
// 222: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 227: 48 85 c9                      testq   %rcx, %rcx
// 22a: 74 2d                         je      0x259 <_JIT_ENTRY+0x259>
// 22c: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 230: 48 89 08                      movq    %rcx, (%rax)
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _JIT_CONTINUE
// 23d: 48 89 df                      movq    %rbx, %rdi
// 240: 4c 89 fa                      movq    %r15, %rdx
// 243: 48 83 c4 18                   addq    $0x18, %rsp
// 247: 5b                            popq    %rbx
// 248: 41 5c                         popq    %r12
// 24a: 41 5d                         popq    %r13
// 24c: 41 5e                         popq    %r14
// 24e: 41 5f                         popq    %r15
// 250: 5d                            popq    %rbp
// 251: ff e0                         jmpq    *%rax
// 253: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 257: eb 03                         jmp     0x25c <_JIT_ENTRY+0x25c>
// 259: 49 89 c6                      movq    %rax, %r14
// 25c: 49 29 de                      subq    %rbx, %r14
// 25f: 49 83 c6 b8                   addq    $-0x48, %r14
// 263: 49 c1 ee 03                   shrq    $0x3, %r14
// 267: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 26b: 31 c0                         xorl    %eax, %eax
// 26d: e9 2b fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 272: 
static const unsigned char _CALL_LENplus_UNARY_INVERT_code_body[627] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x92, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xc2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x4c, 0x63, 0xe0, 0x4b, 0x8b, 0x6c, 0xe6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x00, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x2d, 0x4b, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x2b, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_UNARY_INVERT_code_holes[20] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Invert, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_UNARY_INVERT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_UNARY_INVERT_data_holes[1];

// _CALL_LENplus_UNARY_NEGATIVE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_UNARY_NEGATIVE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 92 01 00 00             js      0x25c <_JIT_ENTRY+0x25c>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 188: 48 85 d2                      testq   %rdx, %rdx
// 18b: 0f 84 c2 00 00 00             je      0x253 <_JIT_ENTRY+0x253>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a3: 29 c1                         subl    %eax, %ecx
// 1a5: 48 63 c9                      movslq  %ecx, %rcx
// 1a8: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1ac: f7 d0                         notl    %eax
// 1ae: 4c 63 e0                      movslq  %eax, %r12
// 1b1: 4b 8b 6c e6 f8                movq    -0x8(%r14,%r12,8), %rbp
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  PyNumber_Negative
// 1c0: 48 89 ef                      movq    %rbp, %rdi
// 1c3: ff d0                         callq   *%rax
// 1c5: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1ca: 48 8b 45 00                   movq    (%rbp), %rax
// 1ce: 48 85 c0                      testq   %rax, %rax
// 1d1: 7f 22                         jg      0x1f5 <_JIT_ENTRY+0x1f5>
// 1d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d5:  R_X86_64_64  .rodata.str1.1
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _Py_NegativeRefcount
// 1e7: be 71 00 00 00                movl    $0x71, %esi
// 1ec: 48 89 ea                      movq    %rbp, %rdx
// 1ef: ff d0                         callq   *%rax
// 1f1: 48 8b 45 00                   movq    (%rbp), %rax
// 1f5: 85 c0                         testl   %eax, %eax
// 1f7: 78 21                         js      0x21a <_JIT_ENTRY+0x21a>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 203: ff d0                         callq   *%rax
// 205: 48 ff 4d 00                   decq    (%rbp)
// 209: 75 0f                         jne     0x21a <_JIT_ENTRY+0x21a>
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_Dealloc
// 215: 48 89 ef                      movq    %rbp, %rdi
// 218: ff d0                         callq   *%rax
// 21a: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 21e: 48 83 c0 f8                   addq    $-0x8, %rax
// 222: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 227: 48 85 c9                      testq   %rcx, %rcx
// 22a: 74 2d                         je      0x259 <_JIT_ENTRY+0x259>
// 22c: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 230: 48 89 08                      movq    %rcx, (%rax)
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _JIT_CONTINUE
// 23d: 48 89 df                      movq    %rbx, %rdi
// 240: 4c 89 fa                      movq    %r15, %rdx
// 243: 48 83 c4 18                   addq    $0x18, %rsp
// 247: 5b                            popq    %rbx
// 248: 41 5c                         popq    %r12
// 24a: 41 5d                         popq    %r13
// 24c: 41 5e                         popq    %r14
// 24e: 41 5f                         popq    %r15
// 250: 5d                            popq    %rbp
// 251: ff e0                         jmpq    *%rax
// 253: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 257: eb 03                         jmp     0x25c <_JIT_ENTRY+0x25c>
// 259: 49 89 c6                      movq    %rax, %r14
// 25c: 49 29 de                      subq    %rbx, %r14
// 25f: 49 83 c6 b8                   addq    $-0x48, %r14
// 263: 49 c1 ee 03                   shrq    $0x3, %r14
// 267: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 26b: 31 c0                         xorl    %eax, %eax
// 26d: e9 2b fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 272: 
static const unsigned char _CALL_LENplus_UNARY_NEGATIVE_code_body[627] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x92, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xc2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x4c, 0x63, 0xe0, 0x4b, 0x8b, 0x6c, 0xe6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x00, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x2d, 0x4b, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xe6, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x2b, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_UNARY_NEGATIVE_code_holes[20] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Negative, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_UNARY_NEGATIVE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_UNARY_NEGATIVE_data_holes[1];

// _CALL_LENplus_UNARY_NOT
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_UNARY_NOT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 e2                      movslq  %edx, %r12
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 ea                      movslq  %edx, %r13
// 64: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 36 01 00 00             js      0x200 <_JIT_ENTRY+0x200>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 133: 48 8b 00                      movq    (%rax), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 27                         jg      0x162 <_JIT_ENTRY+0x162>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 159: 48 89 ea                      movq    %rbp, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 169: 78 27                         js      0x192 <_JIT_ENTRY+0x192>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17c: 48 ff 08                      decq    (%rax)
// 17f: 75 11                         jne     0x192 <_JIT_ENTRY+0x192>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 190: ff d0                         callq   *%rax
// 192: 48 85 ed                      testq   %rbp, %rbp
// 195: 74 65                         je      0x1fc <_JIT_ENTRY+0x1fc>
// 197: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _JIT_OPARG
// 1a5: 0f b7 c0                      movzwl  %ax, %eax
// 1a8: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 1b6: f7 d0                         notl    %eax
// 1b8: 48 98                         cltq
// 1ba: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bc:  R_X86_64_64  _Py_FalseStruct
// 1c4: 49 39 4c c6 f8                cmpq    %rcx, -0x8(%r14,%rax,8)
// 1c9: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001cb:  R_X86_64_64  _Py_TrueStruct
// 1d3: 48 0f 45 d1                   cmovneq %rcx, %rdx
// 1d7: 49 89 54 c6 f8                movq    %rdx, -0x8(%r14,%rax,8)
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_CONTINUE
// 1e6: 48 89 df                      movq    %rbx, %rdi
// 1e9: 4c 89 fa                      movq    %r15, %rdx
// 1ec: 48 83 c4 18                   addq    $0x18, %rsp
// 1f0: 5b                            popq    %rbx
// 1f1: 41 5c                         popq    %r12
// 1f3: 41 5d                         popq    %r13
// 1f5: 41 5e                         popq    %r14
// 1f7: 41 5f                         popq    %r15
// 1f9: 5d                            popq    %rbp
// 1fa: ff e0                         jmpq    *%rax
// 1fc: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 200: 49 29 de                      subq    %rbx, %r14
// 203: 49 83 c6 b8                   addq    $-0x48, %r14
// 207: 49 c1 ee 03                   shrq    $0x3, %r14
// 20b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 20f: 31 c0                         xorl    %eax, %eax
// 211: e9 87 fe ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 216: 
static const unsigned char _CALL_LENplus_UNARY_NOT_code_body[535] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xe2, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x36, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x65, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc6, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x45, 0xd1, 0x49, 0x89, 0x54, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x87, 0xfe, 0xff, 0xff};
static const Hole _CALL_LENplus_UNARY_NOT_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_UNARY_NOT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_UNARY_NOT_data_holes[1];

// _CALL_LENplus_UNPACK_EX
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_UNPACK_EX.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4a 83 3c eb 00                cmpq    $0x0, (%rbx,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4a 8b 2c e3                   movq    (%rbx,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 4c 29 f3                      subq    %r14, %rbx
// 78: 48 83 c3 b8                   addq    $-0x48, %rbx
// 7c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 80: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 84: 49 8b 06                      movq    (%r14), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 48 8b 3c cb                   movq    (%rbx,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 c3 01 00 00             js      0x28d <_JIT_ENTRY+0x28d>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 188: 48 85 f6                      testq   %rsi, %rsi
// 18b: 0f 84 f2 00 00 00             je      0x283 <_JIT_ENTRY+0x283>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1a3: 29 ca                         subl    %ecx, %edx
// 1a5: 48 63 d2                      movslq  %edx, %rdx
// 1a8: 48 89 34 d3                   movq    %rsi, (%rbx,%rdx,8)
// 1ac: 89 ca                         movl    %ecx, %edx
// 1ae: f7 d2                         notl    %edx
// 1b0: 48 63 f2                      movslq  %edx, %rsi
// 1b3: 4c 8b 64 f3 f8                movq    -0x8(%rbx,%rsi,8), %r12
// 1b8: 0f b6 d0                      movzbl  %al, %edx
// 1bb: c1 e9 08                      shrl    $0x8, %ecx
// 1be: 8d 04 0a                      leal    (%rdx,%rcx), %eax
// 1c1: ff c0                         incl    %eax
// 1c3: 48 01 f0                      addq    %rsi, %rax
// 1c6: 4c 8d 04 c3                   leaq    (%rbx,%rax,8), %r8
// 1ca: 49 83 c0 f8                   addq    $-0x8, %r8
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _PyEval_UnpackIterable
// 1d8: 4c 89 ff                      movq    %r15, %rdi
// 1db: 4c 89 e6                      movq    %r12, %rsi
// 1de: ff d0                         callq   *%rax
// 1e0: 89 c5                         movl    %eax, %ebp
// 1e2: 49 8b 04 24                   movq    (%r12), %rax
// 1e6: 48 85 c0                      testq   %rax, %rax
// 1e9: 7f 22                         jg      0x20d <_JIT_ENTRY+0x20d>
// 1eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ed:  R_X86_64_64  .rodata.str1.1
// 1f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f7:  R_X86_64_64  _Py_NegativeRefcount
// 1ff: be b7 03 00 00                movl    $0x3b7, %esi            # imm = 0x3B7
// 204: 4c 89 e2                      movq    %r12, %rdx
// 207: ff d0                         callq   *%rax
// 209: 49 8b 04 24                   movq    (%r12), %rax
// 20d: 4e 8d 2c eb                   leaq    (%rbx,%r13,8), %r13
// 211: 85 c0                         testl   %eax, %eax
// 213: 78 21                         js      0x236 <_JIT_ENTRY+0x236>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21f: ff d0                         callq   *%rax
// 221: 49 ff 0c 24                   decq    (%r12)
// 225: 75 0f                         jne     0x236 <_JIT_ENTRY+0x236>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _Py_Dealloc
// 231: 4c 89 e7                      movq    %r12, %rdi
// 234: ff d0                         callq   *%rax
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _JIT_OPARG
// 240: 0f b6 c8                      movzbl  %al, %ecx
// 243: 0f b7 c0                      movzwl  %ax, %eax
// 246: 89 c2                         movl    %eax, %edx
// 248: c1 ea 08                      shrl    $0x8, %edx
// 24b: 01 ca                         addl    %ecx, %edx
// 24d: f7 d0                         notl    %eax
// 24f: 48 98                         cltq
// 251: 48 01 d0                      addq    %rdx, %rax
// 254: 48 8d 1c c3                   leaq    (%rbx,%rax,8), %rbx
// 258: 85 ed                         testl   %ebp, %ebp
// 25a: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 25e: 74 29                         je      0x289 <_JIT_ENTRY+0x289>
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _JIT_CONTINUE
// 26a: 4c 89 f7                      movq    %r14, %rdi
// 26d: 48 89 de                      movq    %rbx, %rsi
// 270: 4c 89 fa                      movq    %r15, %rdx
// 273: 48 83 c4 18                   addq    $0x18, %rsp
// 277: 5b                            popq    %rbx
// 278: 41 5c                         popq    %r12
// 27a: 41 5d                         popq    %r13
// 27c: 41 5e                         popq    %r14
// 27e: 41 5f                         popq    %r15
// 280: 5d                            popq    %rbp
// 281: ff e0                         jmpq    *%rax
// 283: 4a 8d 1c e3                   leaq    (%rbx,%r12,8), %rbx
// 287: eb 04                         jmp     0x28d <_JIT_ENTRY+0x28d>
// 289: 48 83 c3 f8                   addq    $-0x8, %rbx
// 28d: 4c 29 f3                      subq    %r14, %rbx
// 290: 48 83 c3 b8                   addq    $-0x48, %rbx
// 294: 48 c1 eb 03                   shrq    $0x3, %rbx
// 298: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 29c: 31 c0                         xorl    %eax, %eax
// 29e: e9 fa fd ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 2a3: 
static const unsigned char _CALL_LENplus_UNPACK_EX_code_body[676] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4a, 0x83, 0x3c, 0xeb, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4a, 0x8b, 0x2c, 0xe3, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x8b, 0x3c, 0xcb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xc3, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xf2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x48, 0x89, 0x34, 0xd3, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xf2, 0x4c, 0x8b, 0x64, 0xf3, 0xf8, 0x0f, 0xb6, 0xd0, 0xc1, 0xe9, 0x08, 0x8d, 0x04, 0x0a, 0xff, 0xc0, 0x48, 0x01, 0xf0, 0x4c, 0x8d, 0x04, 0xc3, 0x49, 0x83, 0xc0, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4e, 0x8d, 0x2c, 0xeb, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0xc8, 0x0f, 0xb7, 0xc0, 0x89, 0xc2, 0xc1, 0xea, 0x08, 0x01, 0xca, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xd0, 0x48, 0x8d, 0x1c, 0xc3, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x74, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4a, 0x8d, 0x1c, 0xe3, 0xeb, 0x04, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_UNPACK_EX_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_UNPACK_EX_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_UNPACK_EX_data_holes[1];

// _CALL_LENplus_UNPACK_SEQUENCE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_UNPACK_SEQUENCE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4a 83 3c eb 00                cmpq    $0x0, (%rbx,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4a 8b 2c e3                   movq    (%rbx,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 37                         je      0xac <_JIT_ENTRY+0xac>
// 75: 4c 29 f3                      subq    %r14, %rbx
// 78: 48 83 c3 b8                   addq    $-0x48, %rbx
// 7c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 80: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 84: 49 8b 06                      movq    (%r14), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 48 83 c4 18                   addq    $0x18, %rsp
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: 5d                            popq    %rbp
// ab: c3                            retq
// ac: 48 8b 3c cb                   movq    (%rbx,%rcx,8), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyObject_Size
// ba: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// bf: ff d0                         callq   *%rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 0f 88 bf 01 00 00             js      0x289 <_JIT_ENTRY+0x289>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  PyLong_FromSsize_t
// d4: 48 89 c7                      movq    %rax, %rdi
// d7: ff d1                         callq   *%rcx
// d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 22                         jg      0x109 <_JIT_ENTRY+0x109>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 48 8b 45 00                   movq    (%rbp), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f 22                         jg      0x15e <_JIT_ENTRY+0x15e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 155: 48 89 ea                      movq    %rbp, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 45 00                   movq    (%rbp), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 21                         js      0x183 <_JIT_ENTRY+0x183>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 48 ff 4d 00                   decq    (%rbp)
// 172: 75 0f                         jne     0x183 <_JIT_ENTRY+0x183>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 48 89 ef                      movq    %rbp, %rdi
// 181: ff d0                         callq   *%rax
// 183: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 188: 48 85 f6                      testq   %rsi, %rsi
// 18b: 0f 84 ee 00 00 00             je      0x27f <_JIT_ENTRY+0x27f>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 d0                      movzwl  %ax, %edx
// 19e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a3: 29 d1                         subl    %edx, %ecx
// 1a5: 48 63 c9                      movslq  %ecx, %rcx
// 1a8: 48 89 34 cb                   movq    %rsi, (%rbx,%rcx,8)
// 1ac: 89 d1                         movl    %edx, %ecx
// 1ae: f7 d1                         notl    %ecx
// 1b0: 48 63 c9                      movslq  %ecx, %rcx
// 1b3: 4c 8b 64 cb f8                movq    -0x8(%rbx,%rcx,8), %r12
// 1b8: 0f b7 c0                      movzwl  %ax, %eax
// 1bb: 48 01 c8                      addq    %rcx, %rax
// 1be: 4c 8d 04 c3                   leaq    (%rbx,%rax,8), %r8
// 1c2: 49 83 c0 f8                   addq    $-0x8, %r8
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _PyEval_UnpackIterable
// 1d0: 4c 89 ff                      movq    %r15, %rdi
// 1d3: 4c 89 e6                      movq    %r12, %rsi
// 1d6: b9 ff ff ff ff                movl    $0xffffffff, %ecx       # imm = 0xFFFFFFFF
// 1db: ff d0                         callq   *%rax
// 1dd: 89 c5                         movl    %eax, %ebp
// 1df: 49 8b 04 24                   movq    (%r12), %rax
// 1e3: 48 85 c0                      testq   %rax, %rax
// 1e6: 7f 22                         jg      0x20a <_JIT_ENTRY+0x20a>
// 1e8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ea:  R_X86_64_64  .rodata.str1.1
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: be 75 03 00 00                movl    $0x375, %esi            # imm = 0x375
// 201: 4c 89 e2                      movq    %r12, %rdx
// 204: ff d0                         callq   *%rax
// 206: 49 8b 04 24                   movq    (%r12), %rax
// 20a: 4e 8d 2c eb                   leaq    (%rbx,%r13,8), %r13
// 20e: 85 c0                         testl   %eax, %eax
// 210: 78 21                         js      0x233 <_JIT_ENTRY+0x233>
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21c: ff d0                         callq   *%rax
// 21e: 49 ff 0c 24                   decq    (%r12)
// 222: 75 0f                         jne     0x233 <_JIT_ENTRY+0x233>
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _Py_Dealloc
// 22e: 4c 89 e7                      movq    %r12, %rdi
// 231: ff d0                         callq   *%rax
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _JIT_OPARG
// 23d: 0f b7 c8                      movzwl  %ax, %ecx
// 240: f7 d0                         notl    %eax
// 242: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 247: 48 98                         cltq
// 249: 48 01 c8                      addq    %rcx, %rax
// 24c: 48 8d 1c c3                   leaq    (%rbx,%rax,8), %rbx
// 250: 48 83 c3 f8                   addq    $-0x8, %rbx
// 254: 85 ed                         testl   %ebp, %ebp
// 256: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 25a: 74 29                         je      0x285 <_JIT_ENTRY+0x285>
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  _JIT_CONTINUE
// 266: 4c 89 f7                      movq    %r14, %rdi
// 269: 48 89 de                      movq    %rbx, %rsi
// 26c: 4c 89 fa                      movq    %r15, %rdx
// 26f: 48 83 c4 18                   addq    $0x18, %rsp
// 273: 5b                            popq    %rbx
// 274: 41 5c                         popq    %r12
// 276: 41 5d                         popq    %r13
// 278: 41 5e                         popq    %r14
// 27a: 41 5f                         popq    %r15
// 27c: 5d                            popq    %rbp
// 27d: ff e0                         jmpq    *%rax
// 27f: 4a 8d 1c e3                   leaq    (%rbx,%r12,8), %rbx
// 283: eb 04                         jmp     0x289 <_JIT_ENTRY+0x289>
// 285: 48 83 c3 f8                   addq    $-0x8, %rbx
// 289: 4c 29 f3                      subq    %r14, %rbx
// 28c: 48 83 c3 b8                   addq    $-0x48, %rbx
// 290: 48 c1 eb 03                   shrq    $0x3, %rbx
// 294: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 298: 31 c0                         xorl    %eax, %eax
// 29a: e9 fe fd ff ff                jmp     0x9d <_JIT_ENTRY+0x9d>
// 29f: 
static const unsigned char _CALL_LENplus_UNPACK_SEQUENCE_code_body[672] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4a, 0x83, 0x3c, 0xeb, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4a, 0x8b, 0x2c, 0xe3, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x8b, 0x3c, 0xcb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xbf, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xee, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x89, 0x34, 0xcb, 0x89, 0xd1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4c, 0x8b, 0x64, 0xcb, 0xf8, 0x0f, 0xb7, 0xc0, 0x48, 0x01, 0xc8, 0x4c, 0x8d, 0x04, 0xc3, 0x49, 0x83, 0xc0, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xb9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4e, 0x8d, 0x2c, 0xeb, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x48, 0x8d, 0x1c, 0xc3, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x74, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4a, 0x8d, 0x1c, 0xe3, 0xeb, 0x04, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xfe, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_UNPACK_SEQUENCE_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_UNPACK_SEQUENCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_UNPACK_SEQUENCE_data_holes[1];

// _CALL_LENplus_UNPACK_SEQUENCE_LIST
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_UNPACK_SEQUENCE_LIST.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 39                         je      0xaf <_JIT_ENTRY+0xaf>
// 76: 4c 89 f0                      movq    %r14, %rax
// 79: 48 29 d8                      subq    %rbx, %rax
// 7c: 48 83 c0 b8                   addq    $-0x48, %rax
// 80: 48 c1 e8 03                   shrq    $0x3, %rax
// 84: 89 43 40                      movl    %eax, 0x40(%rbx)
// 87: 48 8b 03                      movq    (%rbx), %rax
// 8a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008c:  R_X86_64_64  _JIT_TARGET
// 94: 89 c9                         movl    %ecx, %ecx
// 96: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 9a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a0: 48 83 c4 18                   addq    $0x18, %rsp
// a4: 5b                            popq    %rbx
// a5: 41 5c                         popq    %r12
// a7: 41 5d                         popq    %r13
// a9: 41 5e                         popq    %r14
// ab: 41 5f                         popq    %r15
// ad: 5d                            popq    %rbp
// ae: c3                            retq
// af: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// b4: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  PyObject_Size
// c2: 4c 89 ef                      movq    %r13, %rdi
// c5: ff d0                         callq   *%rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 0f 88 86 01 00 00             js      0x256 <_JIT_ENTRY+0x256>
// d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d2:  R_X86_64_64  PyLong_FromSsize_t
// da: 48 89 c7                      movq    %rax, %rdi
// dd: ff d1                         callq   *%rcx
// df: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// e4: 48 8b 45 00                   movq    (%rbp), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7f 22                         jg      0x10f <_JIT_ENTRY+0x10f>
// ed: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ef:  R_X86_64_64  .rodata.str1.1
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_NegativeRefcount
// 101: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 106: 48 89 ea                      movq    %rbp, %rdx
// 109: ff d0                         callq   *%rax
// 10b: 48 8b 45 00                   movq    (%rbp), %rax
// 10f: 85 c0                         testl   %eax, %eax
// 111: 78 21                         js      0x134 <_JIT_ENTRY+0x134>
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11d: ff d0                         callq   *%rax
// 11f: 48 ff 4d 00                   decq    (%rbp)
// 123: 75 0f                         jne     0x134 <_JIT_ENTRY+0x134>
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_Dealloc
// 12f: 48 89 ef                      movq    %rbp, %rdi
// 132: ff d0                         callq   *%rax
// 134: 49 8b 45 00                   movq    (%r13), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 156: 4c 89 ea                      movq    %r13, %rdx
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 45 00                   movq    (%r13), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 78 21                         js      0x184 <_JIT_ENTRY+0x184>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 4d 00                   decq    (%r13)
// 173: 75 0f                         jne     0x184 <_JIT_ENTRY+0x184>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 ef                      movq    %r13, %rdi
// 182: ff d0                         callq   *%rax
// 184: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 189: 48 85 f6                      testq   %rsi, %rsi
// 18c: 0f 84 c0 00 00 00             je      0x252 <_JIT_ENTRY+0x252>
// 192: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 196: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000198:  R_X86_64_64  _JIT_OPARG
// 1a0: 0f b7 c9                      movzwl  %cx, %ecx
// 1a3: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1a8: 29 ca                         subl    %ecx, %edx
// 1aa: 48 63 d2                      movslq  %edx, %rdx
// 1ad: 49 89 34 d6                   movq    %rsi, (%r14,%rdx,8)
// 1b1: f7 d1                         notl    %ecx
// 1b3: 48 63 c9                      movslq  %ecx, %rcx
// 1b6: 49 8b 74 ce f8                movq    -0x8(%r14,%rcx,8), %rsi
// 1bb: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001bd:  R_X86_64_64  PyList_Type
// 1c5: 48 39 56 08                   cmpq    %rdx, 0x8(%rsi)
// 1c9: 0f 85 aa fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1cf: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001d1:  R_X86_64_64  _JIT_OPARG
// 1d9: 0f b7 d2                      movzwl  %dx, %edx
// 1dc: 48 39 56 10                   cmpq    %rdx, 0x10(%rsi)
// 1e0: 0f 85 93 fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1e6: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _JIT_OPARG
// 1f5: a9 ff ff 00 00                testl   $0xffff, %eax           # imm = 0xFFFF
// 1fa: 7e 70                         jle     0x26c <_JIT_ENTRY+0x26c>
// 1fc: 4d 8d 3c ce                   leaq    (%r14,%rcx,8), %r15
// 200: 49 83 c7 f8                   addq    $-0x8, %r15
// 204: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 209: 4c 8b 68 18                   movq    0x18(%rax), %r13
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _JIT_OPARG
// 217: 0f b7 e8                      movzwl  %ax, %ebp
// 21a: 48 ff c5                      incq    %rbp
// 21d: eb 11                         jmp     0x230 <_JIT_ENTRY+0x230>
// 21f: 90                            nop
// 220: 4d 89 27                      movq    %r12, (%r15)
// 223: 49 83 c7 08                   addq    $0x8, %r15
// 227: 48 ff cd                      decq    %rbp
// 22a: 48 83 fd 01                   cmpq    $0x1, %rbp
// 22e: 7e 3c                         jle     0x26c <_JIT_ENTRY+0x26c>
// 230: 8d 45 fe                      leal    -0x2(%rbp), %eax
// 233: 4d 8b 64 c5 00                movq    (%r13,%rax,8), %r12
// 238: 41 8b 04 24                   movl    (%r12), %eax
// 23c: ff c0                         incl    %eax
// 23e: 74 e0                         je      0x220 <_JIT_ENTRY+0x220>
// 240: 41 89 04 24                   movl    %eax, (%r12)
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 24e: ff d0                         callq   *%rax
// 250: eb ce                         jmp     0x220 <_JIT_ENTRY+0x220>
// 252: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 256: 49 29 de                      subq    %rbx, %r14
// 259: 49 83 c6 b8                   addq    $-0x48, %r14
// 25d: 49 c1 ee 03                   shrq    $0x3, %r14
// 261: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 265: 31 c0                         xorl    %eax, %eax
// 267: e9 34 fe ff ff                jmp     0xa0 <_JIT_ENTRY+0xa0>
// 26c: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 271: 49 8b 04 24                   movq    (%r12), %rax
// 275: 48 85 c0                      testq   %rax, %rax
// 278: 7f 22                         jg      0x29c <_JIT_ENTRY+0x29c>
// 27a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027c:  R_X86_64_64  .rodata.str1.1
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_NegativeRefcount
// 28e: be ab 03 00 00                movl    $0x3ab, %esi            # imm = 0x3AB
// 293: 4c 89 e2                      movq    %r12, %rdx
// 296: ff d0                         callq   *%rax
// 298: 49 8b 04 24                   movq    (%r12), %rax
// 29c: 85 c0                         testl   %eax, %eax
// 29e: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 2a3: 78 21                         js      0x2c6 <_JIT_ENTRY+0x2c6>
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2af: ff d0                         callq   *%rax
// 2b1: 49 ff 0c 24                   decq    (%r12)
// 2b5: 75 0f                         jne     0x2c6 <_JIT_ENTRY+0x2c6>
// 2b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b9:  R_X86_64_64  _Py_Dealloc
// 2c1: 4c 89 e7                      movq    %r12, %rdi
// 2c4: ff d0                         callq   *%rax
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _JIT_OPARG
// 2d0: 0f b7 c8                      movzwl  %ax, %ecx
// 2d3: f7 d0                         notl    %eax
// 2d5: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2da: 48 98                         cltq
// 2dc: 48 01 c8                      addq    %rcx, %rax
// 2df: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2e3: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e9:  R_X86_64_64  _JIT_CONTINUE
// 2f1: 48 89 df                      movq    %rbx, %rdi
// 2f4: 4c 89 fa                      movq    %r15, %rdx
// 2f7: 48 83 c4 18                   addq    $0x18, %rsp
// 2fb: 5b                            popq    %rbx
// 2fc: 41 5c                         popq    %r12
// 2fe: 41 5d                         popq    %r13
// 300: 41 5e                         popq    %r14
// 302: 41 5f                         popq    %r15
// 304: 5d                            popq    %rbp
// 305: ff e0                         jmpq    *%rax
// 307: 
static const unsigned char _CALL_LENplus_UNPACK_SEQUENCE_LIST_code_body[776] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x86, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xc0, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd6, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x49, 0x8b, 0x74, 0xce, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x56, 0x08, 0x0f, 0x85, 0xaa, 0xfe, 0xff, 0xff, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x48, 0x39, 0x56, 0x10, 0x0f, 0x85, 0x93, 0xfe, 0xff, 0xff, 0x48, 0x89, 0x74, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x70, 0x4d, 0x8d, 0x3c, 0xce, 0x49, 0x83, 0xc7, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x4c, 0x8b, 0x68, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x11, 0x90, 0x4d, 0x89, 0x27, 0x49, 0x83, 0xc7, 0x08, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x7e, 0x3c, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x64, 0xc5, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0xe0, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xce, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x34, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xab, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_UNPACK_SEQUENCE_LIST_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_UNPACK_SEQUENCE_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_UNPACK_SEQUENCE_LIST_data_holes[1];

// _CALL_LENplus_UNPACK_SEQUENCE_TUPLE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_UNPACK_SEQUENCE_TUPLE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 39                         je      0xaf <_JIT_ENTRY+0xaf>
// 76: 4c 89 f0                      movq    %r14, %rax
// 79: 48 29 d8                      subq    %rbx, %rax
// 7c: 48 83 c0 b8                   addq    $-0x48, %rax
// 80: 48 c1 e8 03                   shrq    $0x3, %rax
// 84: 89 43 40                      movl    %eax, 0x40(%rbx)
// 87: 48 8b 03                      movq    (%rbx), %rax
// 8a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008c:  R_X86_64_64  _JIT_TARGET
// 94: 89 c9                         movl    %ecx, %ecx
// 96: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 9a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a0: 48 83 c4 18                   addq    $0x18, %rsp
// a4: 5b                            popq    %rbx
// a5: 41 5c                         popq    %r12
// a7: 41 5d                         popq    %r13
// a9: 41 5e                         popq    %r14
// ab: 41 5f                         popq    %r15
// ad: 5d                            popq    %rbp
// ae: c3                            retq
// af: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b4: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  PyObject_Size
// c2: 4c 89 ef                      movq    %r13, %rdi
// c5: ff d0                         callq   *%rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 0f 88 75 01 00 00             js      0x245 <_JIT_ENTRY+0x245>
// d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d2:  R_X86_64_64  PyLong_FromSsize_t
// da: 48 89 c7                      movq    %rax, %rdi
// dd: ff d1                         callq   *%rcx
// df: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e4: 48 8b 45 00                   movq    (%rbp), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7f 22                         jg      0x10f <_JIT_ENTRY+0x10f>
// ed: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ef:  R_X86_64_64  .rodata.str1.1
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_NegativeRefcount
// 101: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 106: 48 89 ea                      movq    %rbp, %rdx
// 109: ff d0                         callq   *%rax
// 10b: 48 8b 45 00                   movq    (%rbp), %rax
// 10f: 85 c0                         testl   %eax, %eax
// 111: 78 21                         js      0x134 <_JIT_ENTRY+0x134>
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11d: ff d0                         callq   *%rax
// 11f: 48 ff 4d 00                   decq    (%rbp)
// 123: 75 0f                         jne     0x134 <_JIT_ENTRY+0x134>
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_Dealloc
// 12f: 48 89 ef                      movq    %rbp, %rdi
// 132: ff d0                         callq   *%rax
// 134: 49 8b 45 00                   movq    (%r13), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 156: 4c 89 ea                      movq    %r13, %rdx
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 45 00                   movq    (%r13), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 78 21                         js      0x184 <_JIT_ENTRY+0x184>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 4d 00                   decq    (%r13)
// 173: 75 0f                         jne     0x184 <_JIT_ENTRY+0x184>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 ef                      movq    %r13, %rdi
// 182: ff d0                         callq   *%rax
// 184: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 189: 48 85 f6                      testq   %rsi, %rsi
// 18c: 0f 84 af 00 00 00             je      0x241 <_JIT_ENTRY+0x241>
// 192: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 196: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000198:  R_X86_64_64  _JIT_OPARG
// 1a0: 0f b7 c9                      movzwl  %cx, %ecx
// 1a3: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1a8: 29 ca                         subl    %ecx, %edx
// 1aa: 48 63 d2                      movslq  %edx, %rdx
// 1ad: 49 89 34 d6                   movq    %rsi, (%r14,%rdx,8)
// 1b1: f7 d1                         notl    %ecx
// 1b3: 48 63 c9                      movslq  %ecx, %rcx
// 1b6: 4d 8b 64 ce f8                movq    -0x8(%r14,%rcx,8), %r12
// 1bb: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001bd:  R_X86_64_64  PyTuple_Type
// 1c5: 49 39 54 24 08                cmpq    %rdx, 0x8(%r12)
// 1ca: 0f 85 a9 fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1d0: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001d2:  R_X86_64_64  _JIT_OPARG
// 1da: 0f b7 d2                      movzwl  %dx, %edx
// 1dd: 49 39 54 24 10                cmpq    %rdx, 0x10(%r12)
// 1e2: 0f 85 91 fe ff ff             jne     0x79 <_JIT_ENTRY+0x79>
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _JIT_OPARG
// 1f2: a9 ff ff 00 00                testl   $0xffff, %eax           # imm = 0xFFFF
// 1f7: 7e 62                         jle     0x25b <_JIT_ENTRY+0x25b>
// 1f9: 4d 8d 3c ce                   leaq    (%r14,%rcx,8), %r15
// 1fd: 49 83 c7 f8                   addq    $-0x8, %r15
// 201: 44 0f b7 e8                   movzwl  %ax, %r13d
// 205: 49 ff c5                      incq    %r13
// 208: eb 16                         jmp     0x220 <_JIT_ENTRY+0x220>
// 20a: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// 210: 49 89 2f                      movq    %rbp, (%r15)
// 213: 49 83 c7 08                   addq    $0x8, %r15
// 217: 49 ff cd                      decq    %r13
// 21a: 49 83 fd 01                   cmpq    $0x1, %r13
// 21e: 7e 3b                         jle     0x25b <_JIT_ENTRY+0x25b>
// 220: 41 8d 45 fe                   leal    -0x2(%r13), %eax
// 224: 49 8b 6c c4 18                movq    0x18(%r12,%rax,8), %rbp
// 229: 8b 45 00                      movl    (%rbp), %eax
// 22c: ff c0                         incl    %eax
// 22e: 74 e0                         je      0x210 <_JIT_ENTRY+0x210>
// 230: 89 45 00                      movl    %eax, (%rbp)
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 23d: ff d0                         callq   *%rax
// 23f: eb cf                         jmp     0x210 <_JIT_ENTRY+0x210>
// 241: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 245: 49 29 de                      subq    %rbx, %r14
// 248: 49 83 c6 b8                   addq    $-0x48, %r14
// 24c: 49 c1 ee 03                   shrq    $0x3, %r14
// 250: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 254: 31 c0                         xorl    %eax, %eax
// 256: e9 45 fe ff ff                jmp     0xa0 <_JIT_ENTRY+0xa0>
// 25b: 49 8b 04 24                   movq    (%r12), %rax
// 25f: 48 85 c0                      testq   %rax, %rax
// 262: 7f 22                         jg      0x286 <_JIT_ENTRY+0x286>
// 264: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000266:  R_X86_64_64  .rodata.str1.1
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_NegativeRefcount
// 278: be 99 03 00 00                movl    $0x399, %esi            # imm = 0x399
// 27d: 4c 89 e2                      movq    %r12, %rdx
// 280: ff d0                         callq   *%rax
// 282: 49 8b 04 24                   movq    (%r12), %rax
// 286: 85 c0                         testl   %eax, %eax
// 288: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 28d: 78 21                         js      0x2b0 <_JIT_ENTRY+0x2b0>
// 28f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000291:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 299: ff d0                         callq   *%rax
// 29b: 49 ff 0c 24                   decq    (%r12)
// 29f: 75 0f                         jne     0x2b0 <_JIT_ENTRY+0x2b0>
// 2a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a3:  R_X86_64_64  _Py_Dealloc
// 2ab: 4c 89 e7                      movq    %r12, %rdi
// 2ae: ff d0                         callq   *%rax
// 2b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b2:  R_X86_64_64  _JIT_OPARG
// 2ba: 0f b7 c8                      movzwl  %ax, %ecx
// 2bd: f7 d0                         notl    %eax
// 2bf: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2c4: 48 98                         cltq
// 2c6: 48 01 c8                      addq    %rcx, %rax
// 2c9: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2cd: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d3:  R_X86_64_64  _JIT_CONTINUE
// 2db: 48 89 df                      movq    %rbx, %rdi
// 2de: 4c 89 fa                      movq    %r15, %rdx
// 2e1: 48 83 c4 18                   addq    $0x18, %rsp
// 2e5: 5b                            popq    %rbx
// 2e6: 41 5c                         popq    %r12
// 2e8: 41 5d                         popq    %r13
// 2ea: 41 5e                         popq    %r14
// 2ec: 41 5f                         popq    %r15
// 2ee: 5d                            popq    %rbp
// 2ef: ff e0                         jmpq    *%rax
// 2f1: 
static const unsigned char _CALL_LENplus_UNPACK_SEQUENCE_TUPLE_code_body[754] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x75, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd6, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4d, 0x8b, 0x64, 0xce, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x54, 0x24, 0x08, 0x0f, 0x85, 0xa9, 0xfe, 0xff, 0xff, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x49, 0x39, 0x54, 0x24, 0x10, 0x0f, 0x85, 0x91, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x62, 0x4d, 0x8d, 0x3c, 0xce, 0x49, 0x83, 0xc7, 0xf8, 0x44, 0x0f, 0xb7, 0xe8, 0x49, 0xff, 0xc5, 0xeb, 0x16, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0x89, 0x2f, 0x49, 0x83, 0xc7, 0x08, 0x49, 0xff, 0xcd, 0x49, 0x83, 0xfd, 0x01, 0x7e, 0x3b, 0x41, 0x8d, 0x45, 0xfe, 0x49, 0x8b, 0x6c, 0xc4, 0x18, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0xe0, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xcf, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x45, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_UNPACK_SEQUENCE_TUPLE_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x291, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_UNPACK_SEQUENCE_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_UNPACK_SEQUENCE_TUPLE_data_holes[1];

// _CALL_LENplus_UNPACK_SEQUENCE_TWO_TUPLE
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_UNPACK_SEQUENCE_TWO_TUPLE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 e6                      movslq  %esi, %r12
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c e6 00                cmpq    $0x0, (%r14,%r12,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 de                      subq    %rbx, %r14
// 79: 49 83 c6 b8                   addq    $-0x48, %r14
// 7d: 49 c1 ee 03                   shrq    $0x3, %r14
// 81: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 18                   addq    $0x18, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b2: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 ef                      movq    %r13, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 61 01 00 00             js      0x22f <_JIT_ENTRY+0x22f>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e2: 48 8b 45 00                   movq    (%rbp), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7f 22                         jg      0x10d <_JIT_ENTRY+0x10d>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 48 89 ef                      movq    %rbp, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 45 00                   movq    (%r13), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 154: 4c 89 ea                      movq    %r13, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 45 00                   movq    (%r13), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 21                         js      0x182 <_JIT_ENTRY+0x182>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 4d 00                   decq    (%r13)
// 171: 75 0f                         jne     0x182 <_JIT_ENTRY+0x182>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 ef                      movq    %r13, %rdi
// 180: ff d0                         callq   *%rax
// 182: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 187: 48 85 d2                      testq   %rdx, %rdx
// 18a: 0f 84 9b 00 00 00             je      0x22b <_JIT_ENTRY+0x22b>
// 190: 4f 8d 3c e6                   leaq    (%r14,%r12,8), %r15
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a6: 29 c1                         subl    %eax, %ecx
// 1a8: 48 63 c9                      movslq  %ecx, %rcx
// 1ab: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1af: f7 d0                         notl    %eax
// 1b1: 48 98                         cltq
// 1b3: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ba:  R_X86_64_64  PyTuple_Type
// 1c2: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1c7: 75 5a                         jne     0x223 <_JIT_ENTRY+0x223>
// 1c9: 49 83 7c 24 10 02             cmpq    $0x2, 0x10(%r12)
// 1cf: 75 52                         jne     0x223 <_JIT_ENTRY+0x223>
// 1d1: 49 8b 6c 24 20                movq    0x20(%r12), %rbp
// 1d6: 8b 45 00                      movl    (%rbp), %eax
// 1d9: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001db:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1e3: ff c0                         incl    %eax
// 1e5: 74 06                         je      0x1ed <_JIT_ENTRY+0x1ed>
// 1e7: 89 45 00                      movl    %eax, (%rbp)
// 1ea: 41 ff d5                      callq   *%r13
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _JIT_OPARG
// 1f7: f7 d0                         notl    %eax
// 1f9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1fe: 48 98                         cltq
// 200: 49 89 6c c6 f8                movq    %rbp, -0x8(%r14,%rax,8)
// 205: 49 8b 6c 24 18                movq    0x18(%r12), %rbp
// 20a: 8b 45 00                      movl    (%rbp), %eax
// 20d: ff c0                         incl    %eax
// 20f: 75 34                         jne     0x245 <_JIT_ENTRY+0x245>
// 211: 49 89 2f                      movq    %rbp, (%r15)
// 214: 49 8b 04 24                   movq    (%r12), %rax
// 218: 48 85 c0                      testq   %rax, %rax
// 21b: 7e 3a                         jle     0x257 <_JIT_ENTRY+0x257>
// 21d: 85 c0                         testl   %eax, %eax
// 21f: 79 5c                         jns     0x27d <_JIT_ENTRY+0x27d>
// 221: eb 7b                         jmp     0x29e <_JIT_ENTRY+0x29e>
// 223: 4d 89 fe                      movq    %r15, %r14
// 226: e9 4b fe ff ff                jmp     0x76 <_JIT_ENTRY+0x76>
// 22b: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 22f: 49 29 de                      subq    %rbx, %r14
// 232: 49 83 c6 b8                   addq    $-0x48, %r14
// 236: 49 c1 ee 03                   shrq    $0x3, %r14
// 23a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 23e: 31 c0                         xorl    %eax, %eax
// 240: e9 59 fe ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 245: 89 45 00                      movl    %eax, (%rbp)
// 248: 41 ff d5                      callq   *%r13
// 24b: 49 89 2f                      movq    %rbp, (%r15)
// 24e: 49 8b 04 24                   movq    (%r12), %rax
// 252: 48 85 c0                      testq   %rax, %rax
// 255: 7f c6                         jg      0x21d <_JIT_ENTRY+0x21d>
// 257: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000259:  R_X86_64_64  .rodata.str1.1
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_NegativeRefcount
// 26b: be 87 03 00 00                movl    $0x387, %esi            # imm = 0x387
// 270: 4c 89 e2                      movq    %r12, %rdx
// 273: ff d0                         callq   *%rax
// 275: 49 8b 04 24                   movq    (%r12), %rax
// 279: 85 c0                         testl   %eax, %eax
// 27b: 78 21                         js      0x29e <_JIT_ENTRY+0x29e>
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 287: ff d0                         callq   *%rax
// 289: 49 ff 0c 24                   decq    (%r12)
// 28d: 75 0f                         jne     0x29e <_JIT_ENTRY+0x29e>
// 28f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000291:  R_X86_64_64  _Py_Dealloc
// 299: 4c 89 e7                      movq    %r12, %rdi
// 29c: ff d0                         callq   *%rax
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  _JIT_OPARG
// 2a8: 0f b7 c8                      movzwl  %ax, %ecx
// 2ab: f7 d0                         notl    %eax
// 2ad: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2b2: 48 98                         cltq
// 2b4: 48 01 c8                      addq    %rcx, %rax
// 2b7: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2bb: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _JIT_CONTINUE
// 2c9: 48 89 df                      movq    %rbx, %rdi
// 2cc: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2d1: 48 83 c4 18                   addq    $0x18, %rsp
// 2d5: 5b                            popq    %rbx
// 2d6: 41 5c                         popq    %r12
// 2d8: 41 5d                         popq    %r13
// 2da: 41 5e                         popq    %r14
// 2dc: 41 5f                         popq    %r15
// 2de: 5d                            popq    %rbp
// 2df: ff e0                         jmpq    *%rax
// 2e1: 
static const unsigned char _CALL_LENplus_UNPACK_SEQUENCE_TWO_TUPLE_code_body[738] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xe6, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x61, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x5a, 0x49, 0x83, 0x7c, 0x24, 0x10, 0x02, 0x75, 0x52, 0x49, 0x8b, 0x6c, 0x24, 0x20, 0x8b, 0x45, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x06, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x6c, 0xc6, 0xf8, 0x49, 0x8b, 0x6c, 0x24, 0x18, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x34, 0x49, 0x89, 0x2f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3a, 0x85, 0xc0, 0x79, 0x5c, 0xeb, 0x7b, 0x4d, 0x89, 0xfe, 0xe9, 0x4b, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x59, 0xfe, 0xff, 0xff, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd5, 0x49, 0x89, 0x2f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xc6, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_LENplus_UNPACK_SEQUENCE_TWO_TUPLE_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x291, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_UNPACK_SEQUENCE_TWO_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_UNPACK_SEQUENCE_TWO_TUPLE_data_holes[1];

// _CALL_LENplus_WITH_EXCEPT_START
// 
// /tmp/tmpxg5ezh9g/_CALL_LENplus_WITH_EXCEPT_START.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 45 31 c0                      xorl    %r8d, %r8d
// 2b: 66 85 c9                      testw   %cx, %cx
// 2e: 41 0f 94 c0                   sete    %r8b
// 32: 31 f6                         xorl    %esi, %esi
// 34: 66 83 f9 01                   cmpw    $0x1, %cx
// 38: 40 0f 94 c6                   sete    %sil
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 48 89 cf                      movq    %rcx, %rdi
// 42: 48 f7 df                      negq    %rdi
// 45: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4a: 44 0f 44 c6                   cmovel  %esi, %r8d
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 41 80 f8 01                   cmpb    $0x1, %r8b
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 60: 29 c6                         subl    %eax, %esi
// 62: 4c 63 fe                      movslq  %esi, %r15
// 65: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 69: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 6d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 74: 74 37                         je      0xad <_JIT_ENTRY+0xad>
// 76: 49 29 de                      subq    %rbx, %r14
// 79: 49 83 c6 b8                   addq    $-0x48, %r14
// 7d: 49 c1 ee 03                   shrq    $0x3, %r14
// 81: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 48 83 c4 38                   addq    $0x38, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5d                         popq    %r13
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: 5d                            popq    %rbp
// ac: c3                            retq
// ad: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// b2: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyObject_Size
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 88 f2 01 00 00             js      0x2c0 <_JIT_ENTRY+0x2c0>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyLong_FromSsize_t
// d8: 48 89 c7                      movq    %rax, %rdi
// db: ff d1                         callq   *%rcx
// dd: 48 89 04 24                   movq    %rax, (%rsp)
// e1: 48 8b 45 00                   movq    (%rbp), %rax
// e5: 48 85 c0                      testq   %rax, %rax
// e8: 7f 22                         jg      0x10c <_JIT_ENTRY+0x10c>
// ea: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_NegativeRefcount
// fe: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 103: 48 89 ea                      movq    %rbp, %rdx
// 106: ff d0                         callq   *%rax
// 108: 48 8b 45 00                   movq    (%rbp), %rax
// 10c: 85 c0                         testl   %eax, %eax
// 10e: 78 21                         js      0x131 <_JIT_ENTRY+0x131>
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11a: ff d0                         callq   *%rax
// 11c: 48 ff 4d 00                   decq    (%rbp)
// 120: 75 0f                         jne     0x131 <_JIT_ENTRY+0x131>
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  _Py_Dealloc
// 12c: 48 89 ef                      movq    %rbp, %rdi
// 12f: ff d0                         callq   *%rax
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_NegativeRefcount
// 14e: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 153: 4c 89 e2                      movq    %r12, %rdx
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: 4c 89 e7                      movq    %r12, %rdi
// 17f: ff d0                         callq   *%rax
// 181: 48 8b 14 24                   movq    (%rsp), %rdx
// 185: 48 85 d2                      testq   %rdx, %rdx
// 188: 0f 84 9a 00 00 00             je      0x228 <_JIT_ENTRY+0x228>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _JIT_OPARG
// 198: 0f b7 c0                      movzwl  %ax, %eax
// 19b: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a0: 29 c1                         subl    %eax, %ecx
// 1a2: 48 63 c9                      movslq  %ecx, %rcx
// 1a5: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1a9: f7 d0                         notl    %eax
// 1ab: 48 98                         cltq
// 1ad: 49 8b 4c c6 e0                movq    -0x20(%r14,%rax,8), %rcx
// 1b2: 48 89 0c 24                   movq    %rcx, (%rsp)
// 1b6: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1bb: 4d 8b 7c 24 08                movq    0x8(%r12), %r15
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  PyException_GetTraceback
// 1ca: 4c 89 e7                      movq    %r12, %rdi
// 1cd: ff d0                         callq   *%rax
// 1cf: 48 85 c0                      testq   %rax, %rax
// 1d2: 74 5d                         je      0x231 <_JIT_ENTRY+0x231>
// 1d4: 48 89 c5                      movq    %rax, %rbp
// 1d7: 48 8b 00                      movq    (%rax), %rax
// 1da: 48 85 c0                      testq   %rax, %rax
// 1dd: 7f 22                         jg      0x201 <_JIT_ENTRY+0x201>
// 1df: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e1:  R_X86_64_64  .rodata.str1.1
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _Py_NegativeRefcount
// 1f3: be 64 09 00 00                movl    $0x964, %esi            # imm = 0x964
// 1f8: 48 89 ea                      movq    %rbp, %rdx
// 1fb: ff d0                         callq   *%rax
// 1fd: 48 8b 45 00                   movq    (%rbp), %rax
// 201: 85 c0                         testl   %eax, %eax
// 203: 78 36                         js      0x23b <_JIT_ENTRY+0x23b>
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20f: ff d0                         callq   *%rax
// 211: 48 ff 4d 00                   decq    (%rbp)
// 215: 75 24                         jne     0x23b <_JIT_ENTRY+0x23b>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_Dealloc
// 221: 48 89 ef                      movq    %rbp, %rdi
// 224: ff d0                         callq   *%rax
// 226: eb 13                         jmp     0x23b <_JIT_ENTRY+0x23b>
// 228: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 22c: e9 8f 00 00 00                jmp     0x2c0 <_JIT_ENTRY+0x2c0>
// 231: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000233:  R_X86_64_64  _Py_NoneStruct
// 23b: 48 8b 3c 24                   movq    (%rsp), %rdi
// 23f: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 248: 48 8d 74 24 18                leaq    0x18(%rsp), %rsi
// 24d: 4c 89 7c 24 18                movq    %r15, 0x18(%rsp)
// 252: 4c 89 64 24 20                movq    %r12, 0x20(%rsp)
// 257: 48 89 6c 24 28                movq    %rbp, 0x28(%rsp)
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  PyObject_Vectorcall
// 266: 48 ba 03 00 00 00 00 00 00 80 movabsq $-0x7ffffffffffffffd, %rdx # imm = 0x8000000000000003
// 270: 31 c9                         xorl    %ecx, %ecx
// 272: ff d0                         callq   *%rax
// 274: 48 85 c0                      testq   %rax, %rax
// 277: 74 43                         je      0x2bc <_JIT_ENTRY+0x2bc>
// 279: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027b:  R_X86_64_64  _JIT_OPARG
// 283: f7 d1                         notl    %ecx
// 285: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 28b: 48 63 c9                      movslq  %ecx, %rcx
// 28e: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 292: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 296: 48 83 c6 08                   addq    $0x8, %rsi
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _JIT_CONTINUE
// 2a4: 48 89 df                      movq    %rbx, %rdi
// 2a7: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2ac: 48 83 c4 38                   addq    $0x38, %rsp
// 2b0: 5b                            popq    %rbx
// 2b1: 41 5c                         popq    %r12
// 2b3: 41 5d                         popq    %r13
// 2b5: 41 5e                         popq    %r14
// 2b7: 41 5f                         popq    %r15
// 2b9: 5d                            popq    %rbp
// 2ba: ff e0                         jmpq    *%rax
// 2bc: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 2c0: 49 29 de                      subq    %rbx, %r14
// 2c3: 49 83 c6 b8                   addq    $-0x48, %r14
// 2c7: 49 c1 ee 03                   shrq    $0x3, %r14
// 2cb: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2cf: 31 c0                         xorl    %eax, %eax
// 2d1: e9 c8 fd ff ff                jmp     0x9e <_JIT_ENTRY+0x9e>
// 2d6: 
static const unsigned char _CALL_LENplus_WITH_EXCEPT_START_code_body[727] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x45, 0x31, 0xc0, 0x66, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc0, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x44, 0x0f, 0x44, 0xc6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x1b, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xfe, 0x4b, 0x8b, 0x2c, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xf2, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x9a, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc6, 0xe0, 0x48, 0x89, 0x0c, 0x24, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x4d, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x5d, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x64, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x13, 0x4f, 0x8d, 0x34, 0xfe, 0xe9, 0x8f, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x74, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x18, 0x4c, 0x89, 0x64, 0x24, 0x20, 0x48, 0x89, 0x6c, 0x24, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x43, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xc8, 0xfd, 0xff, 0xff};
static const Hole _CALL_LENplus_WITH_EXCEPT_START_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyException_GetTraceback, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Vectorcall, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_LENplus_WITH_EXCEPT_START_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LENplus_WITH_EXCEPT_START_data_holes[1];

#define INIT_STENCIL(STENCIL) {                         \
    .body_size = Py_ARRAY_LENGTH(STENCIL##_body) - 1,   \
    .body = STENCIL##_body,                             \
    .holes_size = Py_ARRAY_LENGTH(STENCIL##_holes) - 1, \
    .holes = STENCIL##_holes,                           \
}

#define INIT_STENCIL_GROUP(OP) {     \
    .code = INIT_STENCIL(OP##_code), \
    .data = INIT_STENCIL(OP##_data), \
}

static const StencilGroup stencil_groups[512] = {
    [_CALL_LENplus_BEFORE_ASYNC_WITH] = INIT_STENCIL_GROUP(_CALL_LENplus_BEFORE_ASYNC_WITH),
    [_CALL_LENplus_BEFORE_WITH] = INIT_STENCIL_GROUP(_CALL_LENplus_BEFORE_WITH),
    [_CALL_LENplus_BINARY_OP] = INIT_STENCIL_GROUP(_CALL_LENplus_BINARY_OP),
    [_CALL_LENplus_BINARY_OP_ADD_FLOAT] = INIT_STENCIL_GROUP(_CALL_LENplus_BINARY_OP_ADD_FLOAT),
    [_CALL_LENplus_BINARY_OP_ADD_INT] = INIT_STENCIL_GROUP(_CALL_LENplus_BINARY_OP_ADD_INT),
    [_CALL_LENplus_BINARY_OP_ADD_UNICODE] = INIT_STENCIL_GROUP(_CALL_LENplus_BINARY_OP_ADD_UNICODE),
    [_CALL_LENplus_BINARY_OP_MULTIPLY_FLOAT] = INIT_STENCIL_GROUP(_CALL_LENplus_BINARY_OP_MULTIPLY_FLOAT),
    [_CALL_LENplus_BINARY_OP_MULTIPLY_INT] = INIT_STENCIL_GROUP(_CALL_LENplus_BINARY_OP_MULTIPLY_INT),
    [_CALL_LENplus_BINARY_OP_SUBTRACT_FLOAT] = INIT_STENCIL_GROUP(_CALL_LENplus_BINARY_OP_SUBTRACT_FLOAT),
    [_CALL_LENplus_BINARY_OP_SUBTRACT_INT] = INIT_STENCIL_GROUP(_CALL_LENplus_BINARY_OP_SUBTRACT_INT),
    [_CALL_LENplus_BINARY_SLICE] = INIT_STENCIL_GROUP(_CALL_LENplus_BINARY_SLICE),
    [_CALL_LENplus_BINARY_SUBSCR] = INIT_STENCIL_GROUP(_CALL_LENplus_BINARY_SUBSCR),
    [_CALL_LENplus_BINARY_SUBSCR_DICT] = INIT_STENCIL_GROUP(_CALL_LENplus_BINARY_SUBSCR_DICT),
    [_CALL_LENplus_BINARY_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_CALL_LENplus_BINARY_SUBSCR_LIST_INT),
    [_CALL_LENplus_BINARY_SUBSCR_STR_INT] = INIT_STENCIL_GROUP(_CALL_LENplus_BINARY_SUBSCR_STR_INT),
    [_CALL_LENplus_BINARY_SUBSCR_TUPLE_INT] = INIT_STENCIL_GROUP(_CALL_LENplus_BINARY_SUBSCR_TUPLE_INT),
    [_CALL_LENplus_BUILD_CONST_KEY_MAP] = INIT_STENCIL_GROUP(_CALL_LENplus_BUILD_CONST_KEY_MAP),
    [_CALL_LENplus_BUILD_LIST] = INIT_STENCIL_GROUP(_CALL_LENplus_BUILD_LIST),
    [_CALL_LENplus_BUILD_MAP] = INIT_STENCIL_GROUP(_CALL_LENplus_BUILD_MAP),
    [_CALL_LENplus_BUILD_SET] = INIT_STENCIL_GROUP(_CALL_LENplus_BUILD_SET),
    [_CALL_LENplus_BUILD_SLICE] = INIT_STENCIL_GROUP(_CALL_LENplus_BUILD_SLICE),
    [_CALL_LENplus_BUILD_STRING] = INIT_STENCIL_GROUP(_CALL_LENplus_BUILD_STRING),
    [_CALL_LENplus_BUILD_TUPLE] = INIT_STENCIL_GROUP(_CALL_LENplus_BUILD_TUPLE),
    [_CALL_LENplus_CALL_BUILTIN_CLASS] = INIT_STENCIL_GROUP(_CALL_LENplus_CALL_BUILTIN_CLASS),
    [_CALL_LENplus_CALL_BUILTIN_FAST] = INIT_STENCIL_GROUP(_CALL_LENplus_CALL_BUILTIN_FAST),
    [_CALL_LENplus_CALL_BUILTIN_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_CALL_LENplus_CALL_BUILTIN_FAST_WITH_KEYWORDS),
    [_CALL_LENplus_CALL_BUILTIN_O] = INIT_STENCIL_GROUP(_CALL_LENplus_CALL_BUILTIN_O),
    [_CALL_LENplus_CALL_INTRINSIC_1] = INIT_STENCIL_GROUP(_CALL_LENplus_CALL_INTRINSIC_1),
    [_CALL_LENplus_CALL_INTRINSIC_2] = INIT_STENCIL_GROUP(_CALL_LENplus_CALL_INTRINSIC_2),
    [_CALL_LENplus_CALL_ISINSTANCE] = INIT_STENCIL_GROUP(_CALL_LENplus_CALL_ISINSTANCE),
    [_CALL_LENplus_CALL_LEN] = INIT_STENCIL_GROUP(_CALL_LENplus_CALL_LEN),
    [_CALL_LENplus_CALL_METHOD_DESCRIPTOR_FAST] = INIT_STENCIL_GROUP(_CALL_LENplus_CALL_METHOD_DESCRIPTOR_FAST),
    [_CALL_LENplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_CALL_LENplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS),
    [_CALL_LENplus_CALL_METHOD_DESCRIPTOR_NOARGS] = INIT_STENCIL_GROUP(_CALL_LENplus_CALL_METHOD_DESCRIPTOR_NOARGS),
    [_CALL_LENplus_CALL_METHOD_DESCRIPTOR_O] = INIT_STENCIL_GROUP(_CALL_LENplus_CALL_METHOD_DESCRIPTOR_O),
    [_CALL_LENplus_CALL_STR_1] = INIT_STENCIL_GROUP(_CALL_LENplus_CALL_STR_1),
    [_CALL_LENplus_CALL_TUPLE_1] = INIT_STENCIL_GROUP(_CALL_LENplus_CALL_TUPLE_1),
    [_CALL_LENplus_CALL_TYPE_1] = INIT_STENCIL_GROUP(_CALL_LENplus_CALL_TYPE_1),
    [_CALL_LENplus_CHECK_ATTR_CLASS] = INIT_STENCIL_GROUP(_CALL_LENplus_CHECK_ATTR_CLASS),
    [_CALL_LENplus_CHECK_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_CALL_LENplus_CHECK_ATTR_METHOD_LAZY_DICT),
    [_CALL_LENplus_CHECK_ATTR_MODULE] = INIT_STENCIL_GROUP(_CALL_LENplus_CHECK_ATTR_MODULE),
    [_CALL_LENplus_CHECK_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_CALL_LENplus_CHECK_ATTR_WITH_HINT),
    [_CALL_LENplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_CALL_LENplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS),
    [_CALL_LENplus_CHECK_EG_MATCH] = INIT_STENCIL_GROUP(_CALL_LENplus_CHECK_EG_MATCH),
    [_CALL_LENplus_CHECK_EXC_MATCH] = INIT_STENCIL_GROUP(_CALL_LENplus_CHECK_EXC_MATCH),
    [_CALL_LENplus_CHECK_FUNCTION_EXACT_ARGS] = INIT_STENCIL_GROUP(_CALL_LENplus_CHECK_FUNCTION_EXACT_ARGS),
    [_CALL_LENplus_CHECK_MANAGED_OBJECT_HAS_VALUES] = INIT_STENCIL_GROUP(_CALL_LENplus_CHECK_MANAGED_OBJECT_HAS_VALUES),
    [_CALL_LENplus_CHECK_PEP_523] = INIT_STENCIL_GROUP(_CALL_LENplus_CHECK_PEP_523),
    [_CALL_LENplus_CHECK_STACK_SPACE] = INIT_STENCIL_GROUP(_CALL_LENplus_CHECK_STACK_SPACE),
    [_CALL_LENplus_CHECK_VALIDITY] = INIT_STENCIL_GROUP(_CALL_LENplus_CHECK_VALIDITY),
    [_CALL_LENplus_COMPARE_OP] = INIT_STENCIL_GROUP(_CALL_LENplus_COMPARE_OP),
    [_CALL_LENplus_COMPARE_OP_FLOAT] = INIT_STENCIL_GROUP(_CALL_LENplus_COMPARE_OP_FLOAT),
    [_CALL_LENplus_COMPARE_OP_INT] = INIT_STENCIL_GROUP(_CALL_LENplus_COMPARE_OP_INT),
    [_CALL_LENplus_COMPARE_OP_STR] = INIT_STENCIL_GROUP(_CALL_LENplus_COMPARE_OP_STR),
    [_CALL_LENplus_CONTAINS_OP] = INIT_STENCIL_GROUP(_CALL_LENplus_CONTAINS_OP),
    [_CALL_LENplus_CONVERT_VALUE] = INIT_STENCIL_GROUP(_CALL_LENplus_CONVERT_VALUE),
    [_CALL_LENplus_COPY] = INIT_STENCIL_GROUP(_CALL_LENplus_COPY),
    [_CALL_LENplus_COPY_FREE_VARS] = INIT_STENCIL_GROUP(_CALL_LENplus_COPY_FREE_VARS),
    [_CALL_LENplus_DELETE_ATTR] = INIT_STENCIL_GROUP(_CALL_LENplus_DELETE_ATTR),
    [_CALL_LENplus_DELETE_DEREF] = INIT_STENCIL_GROUP(_CALL_LENplus_DELETE_DEREF),
    [_CALL_LENplus_DELETE_FAST] = INIT_STENCIL_GROUP(_CALL_LENplus_DELETE_FAST),
    [_CALL_LENplus_DELETE_GLOBAL] = INIT_STENCIL_GROUP(_CALL_LENplus_DELETE_GLOBAL),
    [_CALL_LENplus_DELETE_NAME] = INIT_STENCIL_GROUP(_CALL_LENplus_DELETE_NAME),
    [_CALL_LENplus_DELETE_SUBSCR] = INIT_STENCIL_GROUP(_CALL_LENplus_DELETE_SUBSCR),
    [_CALL_LENplus_DICT_MERGE] = INIT_STENCIL_GROUP(_CALL_LENplus_DICT_MERGE),
    [_CALL_LENplus_DICT_UPDATE] = INIT_STENCIL_GROUP(_CALL_LENplus_DICT_UPDATE),
    [_CALL_LENplus_END_SEND] = INIT_STENCIL_GROUP(_CALL_LENplus_END_SEND),
    [_CALL_LENplus_EXIT_INIT_CHECK] = INIT_STENCIL_GROUP(_CALL_LENplus_EXIT_INIT_CHECK),
    [_CALL_LENplus_EXIT_TRACE] = INIT_STENCIL_GROUP(_CALL_LENplus_EXIT_TRACE),
    [_CALL_LENplus_FORMAT_SIMPLE] = INIT_STENCIL_GROUP(_CALL_LENplus_FORMAT_SIMPLE),
    [_CALL_LENplus_FORMAT_WITH_SPEC] = INIT_STENCIL_GROUP(_CALL_LENplus_FORMAT_WITH_SPEC),
    [_CALL_LENplus_FOR_ITER_TIER_TWO] = INIT_STENCIL_GROUP(_CALL_LENplus_FOR_ITER_TIER_TWO),
    [_CALL_LENplus_GET_AITER] = INIT_STENCIL_GROUP(_CALL_LENplus_GET_AITER),
    [_CALL_LENplus_GET_ANEXT] = INIT_STENCIL_GROUP(_CALL_LENplus_GET_ANEXT),
    [_CALL_LENplus_GET_AWAITABLE] = INIT_STENCIL_GROUP(_CALL_LENplus_GET_AWAITABLE),
    [_CALL_LENplus_GET_ITER] = INIT_STENCIL_GROUP(_CALL_LENplus_GET_ITER),
    [_CALL_LENplus_GET_LEN] = INIT_STENCIL_GROUP(_CALL_LENplus_GET_LEN),
    [_CALL_LENplus_GET_YIELD_FROM_ITER] = INIT_STENCIL_GROUP(_CALL_LENplus_GET_YIELD_FROM_ITER),
    [_CALL_LENplus_GUARD_BOTH_FLOAT] = INIT_STENCIL_GROUP(_CALL_LENplus_GUARD_BOTH_FLOAT),
    [_CALL_LENplus_GUARD_BOTH_INT] = INIT_STENCIL_GROUP(_CALL_LENplus_GUARD_BOTH_INT),
    [_CALL_LENplus_GUARD_BOTH_UNICODE] = INIT_STENCIL_GROUP(_CALL_LENplus_GUARD_BOTH_UNICODE),
    [_CALL_LENplus_GUARD_BUILTINS_VERSION] = INIT_STENCIL_GROUP(_CALL_LENplus_GUARD_BUILTINS_VERSION),
    [_CALL_LENplus_GUARD_DORV_VALUES] = INIT_STENCIL_GROUP(_CALL_LENplus_GUARD_DORV_VALUES),
    [_CALL_LENplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT] = INIT_STENCIL_GROUP(_CALL_LENplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT),
    [_CALL_LENplus_GUARD_GLOBALS_VERSION] = INIT_STENCIL_GROUP(_CALL_LENplus_GUARD_GLOBALS_VERSION),
    [_CALL_LENplus_GUARD_IS_FALSE_POP] = INIT_STENCIL_GROUP(_CALL_LENplus_GUARD_IS_FALSE_POP),
    [_CALL_LENplus_GUARD_IS_NONE_POP] = INIT_STENCIL_GROUP(_CALL_LENplus_GUARD_IS_NONE_POP),
    [_CALL_LENplus_GUARD_IS_NOT_NONE_POP] = INIT_STENCIL_GROUP(_CALL_LENplus_GUARD_IS_NOT_NONE_POP),
    [_CALL_LENplus_GUARD_IS_TRUE_POP] = INIT_STENCIL_GROUP(_CALL_LENplus_GUARD_IS_TRUE_POP),
    [_CALL_LENplus_GUARD_KEYS_VERSION] = INIT_STENCIL_GROUP(_CALL_LENplus_GUARD_KEYS_VERSION),
    [_CALL_LENplus_GUARD_NOT_EXHAUSTED_LIST] = INIT_STENCIL_GROUP(_CALL_LENplus_GUARD_NOT_EXHAUSTED_LIST),
    [_CALL_LENplus_GUARD_NOT_EXHAUSTED_RANGE] = INIT_STENCIL_GROUP(_CALL_LENplus_GUARD_NOT_EXHAUSTED_RANGE),
    [_CALL_LENplus_GUARD_NOT_EXHAUSTED_TUPLE] = INIT_STENCIL_GROUP(_CALL_LENplus_GUARD_NOT_EXHAUSTED_TUPLE),
    [_CALL_LENplus_GUARD_TYPE_VERSION] = INIT_STENCIL_GROUP(_CALL_LENplus_GUARD_TYPE_VERSION),
    [_CALL_LENplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_CALL_LENplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS),
    [_CALL_LENplus_INIT_CALL_PY_EXACT_ARGS] = INIT_STENCIL_GROUP(_CALL_LENplus_INIT_CALL_PY_EXACT_ARGS),
    [_CALL_LENplus_INSERT] = INIT_STENCIL_GROUP(_CALL_LENplus_INSERT),
    [_CALL_LENplus_IS_NONE] = INIT_STENCIL_GROUP(_CALL_LENplus_IS_NONE),
    [_CALL_LENplus_IS_OP] = INIT_STENCIL_GROUP(_CALL_LENplus_IS_OP),
    [_CALL_LENplus_ITER_CHECK_LIST] = INIT_STENCIL_GROUP(_CALL_LENplus_ITER_CHECK_LIST),
    [_CALL_LENplus_ITER_CHECK_RANGE] = INIT_STENCIL_GROUP(_CALL_LENplus_ITER_CHECK_RANGE),
    [_CALL_LENplus_ITER_CHECK_TUPLE] = INIT_STENCIL_GROUP(_CALL_LENplus_ITER_CHECK_TUPLE),
    [_CALL_LENplus_ITER_NEXT_LIST] = INIT_STENCIL_GROUP(_CALL_LENplus_ITER_NEXT_LIST),
    [_CALL_LENplus_ITER_NEXT_RANGE] = INIT_STENCIL_GROUP(_CALL_LENplus_ITER_NEXT_RANGE),
    [_CALL_LENplus_ITER_NEXT_TUPLE] = INIT_STENCIL_GROUP(_CALL_LENplus_ITER_NEXT_TUPLE),
    [_CALL_LENplus_JUMP_TO_TOP] = INIT_STENCIL_GROUP(_CALL_LENplus_JUMP_TO_TOP),
    [_CALL_LENplus_LIST_APPEND] = INIT_STENCIL_GROUP(_CALL_LENplus_LIST_APPEND),
    [_CALL_LENplus_LIST_EXTEND] = INIT_STENCIL_GROUP(_CALL_LENplus_LIST_EXTEND),
    [_CALL_LENplus_LOAD_ASSERTION_ERROR] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_ASSERTION_ERROR),
    [_CALL_LENplus_LOAD_ATTR] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_ATTR),
    [_CALL_LENplus_LOAD_ATTR_CLASS] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_ATTR_CLASS),
    [_CALL_LENplus_LOAD_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_ATTR_INSTANCE_VALUE),
    [_CALL_LENplus_LOAD_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_ATTR_METHOD_LAZY_DICT),
    [_CALL_LENplus_LOAD_ATTR_METHOD_NO_DICT] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_ATTR_METHOD_NO_DICT),
    [_CALL_LENplus_LOAD_ATTR_METHOD_WITH_VALUES] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_ATTR_METHOD_WITH_VALUES),
    [_CALL_LENplus_LOAD_ATTR_MODULE] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_ATTR_MODULE),
    [_CALL_LENplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT),
    [_CALL_LENplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES),
    [_CALL_LENplus_LOAD_ATTR_SLOT] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_ATTR_SLOT),
    [_CALL_LENplus_LOAD_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_ATTR_WITH_HINT),
    [_CALL_LENplus_LOAD_BUILD_CLASS] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_BUILD_CLASS),
    [_CALL_LENplus_LOAD_CONST] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_CONST),
    [_CALL_LENplus_LOAD_DEREF] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_DEREF),
    [_CALL_LENplus_LOAD_FAST] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_FAST),
    [_CALL_LENplus_LOAD_FAST_AND_CLEAR] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_FAST_AND_CLEAR),
    [_CALL_LENplus_LOAD_FAST_CHECK] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_FAST_CHECK),
    [_CALL_LENplus_LOAD_FROM_DICT_OR_DEREF] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_FROM_DICT_OR_DEREF),
    [_CALL_LENplus_LOAD_FROM_DICT_OR_GLOBALS] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_FROM_DICT_OR_GLOBALS),
    [_CALL_LENplus_LOAD_GLOBAL] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_GLOBAL),
    [_CALL_LENplus_LOAD_GLOBAL_BUILTINS] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_GLOBAL_BUILTINS),
    [_CALL_LENplus_LOAD_GLOBAL_MODULE] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_GLOBAL_MODULE),
    [_CALL_LENplus_LOAD_LOCALS] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_LOCALS),
    [_CALL_LENplus_LOAD_NAME] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_NAME),
    [_CALL_LENplus_LOAD_SUPER_ATTR_ATTR] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_SUPER_ATTR_ATTR),
    [_CALL_LENplus_LOAD_SUPER_ATTR_METHOD] = INIT_STENCIL_GROUP(_CALL_LENplus_LOAD_SUPER_ATTR_METHOD),
    [_CALL_LENplus_MAKE_CELL] = INIT_STENCIL_GROUP(_CALL_LENplus_MAKE_CELL),
    [_CALL_LENplus_MAKE_FUNCTION] = INIT_STENCIL_GROUP(_CALL_LENplus_MAKE_FUNCTION),
    [_CALL_LENplus_MAP_ADD] = INIT_STENCIL_GROUP(_CALL_LENplus_MAP_ADD),
    [_CALL_LENplus_MATCH_CLASS] = INIT_STENCIL_GROUP(_CALL_LENplus_MATCH_CLASS),
    [_CALL_LENplus_MATCH_KEYS] = INIT_STENCIL_GROUP(_CALL_LENplus_MATCH_KEYS),
    [_CALL_LENplus_MATCH_MAPPING] = INIT_STENCIL_GROUP(_CALL_LENplus_MATCH_MAPPING),
    [_CALL_LENplus_MATCH_SEQUENCE] = INIT_STENCIL_GROUP(_CALL_LENplus_MATCH_SEQUENCE),
    [_CALL_LENplus_NOP] = INIT_STENCIL_GROUP(_CALL_LENplus_NOP),
    [_CALL_LENplus_POP_EXCEPT] = INIT_STENCIL_GROUP(_CALL_LENplus_POP_EXCEPT),
    [_CALL_LENplus_POP_FRAME] = INIT_STENCIL_GROUP(_CALL_LENplus_POP_FRAME),
    [_CALL_LENplus_POP_TOP] = INIT_STENCIL_GROUP(_CALL_LENplus_POP_TOP),
    [_CALL_LENplus_PUSH_EXC_INFO] = INIT_STENCIL_GROUP(_CALL_LENplus_PUSH_EXC_INFO),
    [_CALL_LENplus_PUSH_FRAME] = INIT_STENCIL_GROUP(_CALL_LENplus_PUSH_FRAME),
    [_CALL_LENplus_PUSH_NULL] = INIT_STENCIL_GROUP(_CALL_LENplus_PUSH_NULL),
    [_CALL_LENplus_RESUME_CHECK] = INIT_STENCIL_GROUP(_CALL_LENplus_RESUME_CHECK),
    [_CALL_LENplus_SAVE_RETURN_OFFSET] = INIT_STENCIL_GROUP(_CALL_LENplus_SAVE_RETURN_OFFSET),
    [_CALL_LENplus_SETUP_ANNOTATIONS] = INIT_STENCIL_GROUP(_CALL_LENplus_SETUP_ANNOTATIONS),
    [_CALL_LENplus_SET_ADD] = INIT_STENCIL_GROUP(_CALL_LENplus_SET_ADD),
    [_CALL_LENplus_SET_FUNCTION_ATTRIBUTE] = INIT_STENCIL_GROUP(_CALL_LENplus_SET_FUNCTION_ATTRIBUTE),
    [_CALL_LENplus_SET_IP] = INIT_STENCIL_GROUP(_CALL_LENplus_SET_IP),
    [_CALL_LENplus_SET_UPDATE] = INIT_STENCIL_GROUP(_CALL_LENplus_SET_UPDATE),
    [_CALL_LENplus_STORE_ATTR] = INIT_STENCIL_GROUP(_CALL_LENplus_STORE_ATTR),
    [_CALL_LENplus_STORE_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_CALL_LENplus_STORE_ATTR_INSTANCE_VALUE),
    [_CALL_LENplus_STORE_ATTR_SLOT] = INIT_STENCIL_GROUP(_CALL_LENplus_STORE_ATTR_SLOT),
    [_CALL_LENplus_STORE_DEREF] = INIT_STENCIL_GROUP(_CALL_LENplus_STORE_DEREF),
    [_CALL_LENplus_STORE_FAST] = INIT_STENCIL_GROUP(_CALL_LENplus_STORE_FAST),
    [_CALL_LENplus_STORE_GLOBAL] = INIT_STENCIL_GROUP(_CALL_LENplus_STORE_GLOBAL),
    [_CALL_LENplus_STORE_NAME] = INIT_STENCIL_GROUP(_CALL_LENplus_STORE_NAME),
    [_CALL_LENplus_STORE_SLICE] = INIT_STENCIL_GROUP(_CALL_LENplus_STORE_SLICE),
    [_CALL_LENplus_STORE_SUBSCR] = INIT_STENCIL_GROUP(_CALL_LENplus_STORE_SUBSCR),
    [_CALL_LENplus_STORE_SUBSCR_DICT] = INIT_STENCIL_GROUP(_CALL_LENplus_STORE_SUBSCR_DICT),
    [_CALL_LENplus_STORE_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_CALL_LENplus_STORE_SUBSCR_LIST_INT),
    [_CALL_LENplus_SWAP] = INIT_STENCIL_GROUP(_CALL_LENplus_SWAP),
    [_CALL_LENplus_TO_BOOL] = INIT_STENCIL_GROUP(_CALL_LENplus_TO_BOOL),
    [_CALL_LENplus_TO_BOOL_ALWAYS_TRUE] = INIT_STENCIL_GROUP(_CALL_LENplus_TO_BOOL_ALWAYS_TRUE),
    [_CALL_LENplus_TO_BOOL_BOOL] = INIT_STENCIL_GROUP(_CALL_LENplus_TO_BOOL_BOOL),
    [_CALL_LENplus_TO_BOOL_INT] = INIT_STENCIL_GROUP(_CALL_LENplus_TO_BOOL_INT),
    [_CALL_LENplus_TO_BOOL_LIST] = INIT_STENCIL_GROUP(_CALL_LENplus_TO_BOOL_LIST),
    [_CALL_LENplus_TO_BOOL_NONE] = INIT_STENCIL_GROUP(_CALL_LENplus_TO_BOOL_NONE),
    [_CALL_LENplus_TO_BOOL_STR] = INIT_STENCIL_GROUP(_CALL_LENplus_TO_BOOL_STR),
    [_CALL_LENplus_UNARY_INVERT] = INIT_STENCIL_GROUP(_CALL_LENplus_UNARY_INVERT),
    [_CALL_LENplus_UNARY_NEGATIVE] = INIT_STENCIL_GROUP(_CALL_LENplus_UNARY_NEGATIVE),
    [_CALL_LENplus_UNARY_NOT] = INIT_STENCIL_GROUP(_CALL_LENplus_UNARY_NOT),
    [_CALL_LENplus_UNPACK_EX] = INIT_STENCIL_GROUP(_CALL_LENplus_UNPACK_EX),
    [_CALL_LENplus_UNPACK_SEQUENCE] = INIT_STENCIL_GROUP(_CALL_LENplus_UNPACK_SEQUENCE),
    [_CALL_LENplus_UNPACK_SEQUENCE_LIST] = INIT_STENCIL_GROUP(_CALL_LENplus_UNPACK_SEQUENCE_LIST),
    [_CALL_LENplus_UNPACK_SEQUENCE_TUPLE] = INIT_STENCIL_GROUP(_CALL_LENplus_UNPACK_SEQUENCE_TUPLE),
    [_CALL_LENplus_UNPACK_SEQUENCE_TWO_TUPLE] = INIT_STENCIL_GROUP(_CALL_LENplus_UNPACK_SEQUENCE_TWO_TUPLE),
    [_CALL_LENplus_WITH_EXCEPT_START] = INIT_STENCIL_GROUP(_CALL_LENplus_WITH_EXCEPT_START),
};

#define GET_PATCHES() { \
    [HoleValue_CODE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_CONTINUE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_DATA] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_EXECUTOR] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_GOT] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPARG] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPERAND] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TARGET] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TOP] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_ZERO] = (uint64_t)0xBADBADBADBADBADB, \
}
